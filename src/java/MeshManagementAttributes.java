package llnl.visit;

import java.lang.Double;
import java.util.Vector;

// ****************************************************************************
// Class: MeshManagementAttributes
//
// Purpose:
//    Global variables controlling reading and conversion of non-standard meshes
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   Wed Nov 16 07:56:51 PDT 2005
//
// Modifications:
//   
// ****************************************************************************

public class MeshManagementAttributes extends AttributeSubject
{
    // Enum values
    public final static int DISCRETIZATIONMODES_UNIFORM = 0;
    public final static int DISCRETIZATIONMODES_ADAPTIVE = 1;


    public MeshManagementAttributes()
    {
        super(7);

        discretizationTolerance = new Vector();
        discretizationTolerance.addElement(new Double(0.01));
        discretizationTolerance.addElement(new Double(0.025));
        discretizationTolerance.addElement(new Double(0.05));
        discretizationToleranceX = new Vector();
        discretizationToleranceY = new Vector();
        discretizationToleranceZ = new Vector();
        discretizationMode = DISCRETIZATIONMODES_ADAPTIVE;
        discretizeBoundaryOnly = false;
        passNativeCSG = false;
    }

    public MeshManagementAttributes(MeshManagementAttributes obj)
    {
        super(7);

        int i;

        discretizationTolerance = new Vector(obj.discretizationTolerance.size());
        for(i = 0; i < obj.discretizationTolerance.size(); ++i)
        {
            Double dv = (Double)obj.discretizationTolerance.elementAt(i);
            discretizationTolerance.addElement(new Double(dv.doubleValue()));
        }

        discretizationToleranceX = new Vector(obj.discretizationToleranceX.size());
        for(i = 0; i < obj.discretizationToleranceX.size(); ++i)
        {
            Double dv = (Double)obj.discretizationToleranceX.elementAt(i);
            discretizationToleranceX.addElement(new Double(dv.doubleValue()));
        }

        discretizationToleranceY = new Vector(obj.discretizationToleranceY.size());
        for(i = 0; i < obj.discretizationToleranceY.size(); ++i)
        {
            Double dv = (Double)obj.discretizationToleranceY.elementAt(i);
            discretizationToleranceY.addElement(new Double(dv.doubleValue()));
        }

        discretizationToleranceZ = new Vector(obj.discretizationToleranceZ.size());
        for(i = 0; i < obj.discretizationToleranceZ.size(); ++i)
        {
            Double dv = (Double)obj.discretizationToleranceZ.elementAt(i);
            discretizationToleranceZ.addElement(new Double(dv.doubleValue()));
        }

        discretizationMode = obj.discretizationMode;
        discretizeBoundaryOnly = obj.discretizeBoundaryOnly;
        passNativeCSG = obj.passNativeCSG;

        SelectAll();
    }

    public boolean equals(MeshManagementAttributes obj)
    {
        int i;

        // Create the return value
        return ((discretizationTolerance == obj.discretizationTolerance) &&
                (discretizationToleranceX == obj.discretizationToleranceX) &&
                (discretizationToleranceY == obj.discretizationToleranceY) &&
                (discretizationToleranceZ == obj.discretizationToleranceZ) &&
                (discretizationMode == obj.discretizationMode) &&
                (discretizeBoundaryOnly == obj.discretizeBoundaryOnly) &&
                (passNativeCSG == obj.passNativeCSG));
    }

    // Property setting methods
    public void SetDiscretizationTolerance(Vector discretizationTolerance_)
    {
        discretizationTolerance = discretizationTolerance_;
        Select(0);
    }

    public void SetDiscretizationToleranceX(Vector discretizationToleranceX_)
    {
        discretizationToleranceX = discretizationToleranceX_;
        Select(1);
    }

    public void SetDiscretizationToleranceY(Vector discretizationToleranceY_)
    {
        discretizationToleranceY = discretizationToleranceY_;
        Select(2);
    }

    public void SetDiscretizationToleranceZ(Vector discretizationToleranceZ_)
    {
        discretizationToleranceZ = discretizationToleranceZ_;
        Select(3);
    }

    public void SetDiscretizationMode(int discretizationMode_)
    {
        discretizationMode = discretizationMode_;
        Select(4);
    }

    public void SetDiscretizeBoundaryOnly(boolean discretizeBoundaryOnly_)
    {
        discretizeBoundaryOnly = discretizeBoundaryOnly_;
        Select(5);
    }

    public void SetPassNativeCSG(boolean passNativeCSG_)
    {
        passNativeCSG = passNativeCSG_;
        Select(6);
    }

    // Property getting methods
    public Vector  GetDiscretizationTolerance() { return discretizationTolerance; }
    public Vector  GetDiscretizationToleranceX() { return discretizationToleranceX; }
    public Vector  GetDiscretizationToleranceY() { return discretizationToleranceY; }
    public Vector  GetDiscretizationToleranceZ() { return discretizationToleranceZ; }
    public int     GetDiscretizationMode() { return discretizationMode; }
    public boolean GetDiscretizeBoundaryOnly() { return discretizeBoundaryOnly; }
    public boolean GetPassNativeCSG() { return passNativeCSG; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteDoubleVector(discretizationTolerance);
        if(WriteSelect(1, buf))
            buf.WriteDoubleVector(discretizationToleranceX);
        if(WriteSelect(2, buf))
            buf.WriteDoubleVector(discretizationToleranceY);
        if(WriteSelect(3, buf))
            buf.WriteDoubleVector(discretizationToleranceZ);
        if(WriteSelect(4, buf))
            buf.WriteInt(discretizationMode);
        if(WriteSelect(5, buf))
            buf.WriteBool(discretizeBoundaryOnly);
        if(WriteSelect(6, buf))
            buf.WriteBool(passNativeCSG);
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        for(int i = 0; i < n; ++i)
        {
            int index = (int)buf.ReadByte();
            switch(index)
            {
            case 0:
                SetDiscretizationTolerance(buf.ReadDoubleVector());
                break;
            case 1:
                SetDiscretizationToleranceX(buf.ReadDoubleVector());
                break;
            case 2:
                SetDiscretizationToleranceY(buf.ReadDoubleVector());
                break;
            case 3:
                SetDiscretizationToleranceZ(buf.ReadDoubleVector());
                break;
            case 4:
                SetDiscretizationMode(buf.ReadInt());
                break;
            case 5:
                SetDiscretizeBoundaryOnly(buf.ReadBool());
                break;
            case 6:
                SetPassNativeCSG(buf.ReadBool());
                break;
            }
        }
    }


    // Attributes
    private Vector  discretizationTolerance; // vector of Double objects
    private Vector  discretizationToleranceX; // vector of Double objects
    private Vector  discretizationToleranceY; // vector of Double objects
    private Vector  discretizationToleranceZ; // vector of Double objects
    private int     discretizationMode;
    private boolean discretizeBoundaryOnly;
    private boolean passNativeCSG;
}

