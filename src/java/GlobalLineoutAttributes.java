package llnl.visit;


// ****************************************************************************
// Class: GlobalLineoutAttributes
//
// Purpose:
//    This file contains global attributes controlling Lineouts.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   Thu Jul 22 09:16:52 PDT 2004
//
// Modifications:
//   
// ****************************************************************************

public class GlobalLineoutAttributes extends AttributeSubject
{
    public GlobalLineoutAttributes()
    {
        super(3);

        Dynamic = false;
        createWindow = true;
        windowId = 2;
    }

    public GlobalLineoutAttributes(GlobalLineoutAttributes obj)
    {
        super(3);

        Dynamic = obj.Dynamic;
        createWindow = obj.createWindow;
        windowId = obj.windowId;

        SelectAll();
    }

    public boolean equals(GlobalLineoutAttributes obj)
    {
        // Create the return value
        return ((Dynamic == obj.Dynamic) &&
                (createWindow == obj.createWindow) &&
                (windowId == obj.windowId));
    }

    // Property setting methods
    public void SetDynamic(boolean Dynamic_)
    {
        Dynamic = Dynamic_;
        Select(0);
    }

    public void SetCreateWindow(boolean createWindow_)
    {
        createWindow = createWindow_;
        Select(1);
    }

    public void SetWindowId(int windowId_)
    {
        windowId = windowId_;
        Select(2);
    }

    // Property getting methods
    public boolean GetDynamic() { return Dynamic; }
    public boolean GetCreateWindow() { return createWindow; }
    public int     GetWindowId() { return windowId; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteBool(Dynamic);
        if(WriteSelect(1, buf))
            buf.WriteBool(createWindow);
        if(WriteSelect(2, buf))
            buf.WriteInt(windowId);
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        for(int i = 0; i < n; ++i)
        {
            int index = (int)buf.ReadByte();
            switch(index)
            {
            case 0:
                SetDynamic(buf.ReadBool());
                break;
            case 1:
                SetCreateWindow(buf.ReadBool());
                break;
            case 2:
                SetWindowId(buf.ReadInt());
                break;
            }
        }
    }


    // Attributes
    private boolean Dynamic;
    private boolean createWindow;
    private int     windowId;
}

