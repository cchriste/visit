// ***************************************************************************
//
// Copyright (c) 2000 - 2009, Lawrence Livermore National Security, LLC
// Produced at the Lawrence Livermore National Laboratory
// LLNL-CODE-400124
// All rights reserved.
//
// This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
// full copyright notice is contained in the file COPYRIGHT located at the root
// of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
//
//  - Redistributions of  source code must  retain the above  copyright notice,
//    this list of conditions and the disclaimer below.
//  - Redistributions in binary form must reproduce the above copyright notice,
//    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
//    documentation and/or other materials provided with the distribution.
//  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
// ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
// LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
// DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
// SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
// CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
// LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
// OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ***************************************************************************

package llnl.visit;

import java.lang.Integer;
import java.util.Vector;

// ****************************************************************************
// Class: avtSILCollectionMetaData
//
// Purpose:
//    Contains SIL collection metadata attributes
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   omitted
//
// Modifications:
//   
// ****************************************************************************

public class avtSILCollectionMetaData extends AttributeSubject
{
    // Enum values
    public final static int COLLECTIONTYPE_CLASS = 0;
    public final static int COLLECTIONTYPE_PURECOLLECTION = 1;
    public final static int COLLECTIONTYPE_COLLECTIONANDSETS = 2;
    public final static int COLLECTIONTYPE_UNKNOWN = 3;


    public avtSILCollectionMetaData()
    {
        super(7);

        classOfCollection = new String("");
        defaultMemberBasename = new String("");
        collectionSize = -1;
        collectionIdOfParent = -1;
        indexOfParent = -1;
        collectionIdOfChildren = -1;
        indicesOfChildren = new Vector();
    }

    public avtSILCollectionMetaData(avtSILCollectionMetaData obj)
    {
        super(7);

        int i;

        classOfCollection = new String(obj.classOfCollection);
        defaultMemberBasename = new String(obj.defaultMemberBasename);
        collectionSize = obj.collectionSize;
        collectionIdOfParent = obj.collectionIdOfParent;
        indexOfParent = obj.indexOfParent;
        collectionIdOfChildren = obj.collectionIdOfChildren;
        indicesOfChildren = new Vector();
        for(i = 0; i < obj.indicesOfChildren.size(); ++i)
        {
            Integer iv = (Integer)obj.indicesOfChildren.elementAt(i);
            indicesOfChildren.addElement(new Integer(iv.intValue()));
        }

        SelectAll();
    }

    public boolean equals(avtSILCollectionMetaData obj)
    {
        int i;

        // Compare the elements in the indicesOfChildren vector.
        boolean indicesOfChildren_equal = (obj.indicesOfChildren.size() == indicesOfChildren.size());
        for(i = 0; (i < indicesOfChildren.size()) && indicesOfChildren_equal; ++i)
        {
            // Make references to Integer from Object.
            Integer indicesOfChildren1 = (Integer)indicesOfChildren.elementAt(i);
            Integer indicesOfChildren2 = (Integer)obj.indicesOfChildren.elementAt(i);
            indicesOfChildren_equal = indicesOfChildren1.equals(indicesOfChildren2);
        }
        // Create the return value
        return ((classOfCollection.equals(obj.classOfCollection)) &&
                (defaultMemberBasename.equals(obj.defaultMemberBasename)) &&
                (collectionSize == obj.collectionSize) &&
                (collectionIdOfParent == obj.collectionIdOfParent) &&
                (indexOfParent == obj.indexOfParent) &&
                (collectionIdOfChildren == obj.collectionIdOfChildren) &&
                indicesOfChildren_equal);
    }

    // Property setting methods
    public void SetClassOfCollection(String classOfCollection_)
    {
        classOfCollection = classOfCollection_;
        Select(0);
    }

    public void SetDefaultMemberBasename(String defaultMemberBasename_)
    {
        defaultMemberBasename = defaultMemberBasename_;
        Select(1);
    }

    public void SetCollectionSize(int collectionSize_)
    {
        collectionSize = collectionSize_;
        Select(2);
    }

    public void SetCollectionIdOfParent(int collectionIdOfParent_)
    {
        collectionIdOfParent = collectionIdOfParent_;
        Select(3);
    }

    public void SetIndexOfParent(int indexOfParent_)
    {
        indexOfParent = indexOfParent_;
        Select(4);
    }

    public void SetCollectionIdOfChildren(int collectionIdOfChildren_)
    {
        collectionIdOfChildren = collectionIdOfChildren_;
        Select(5);
    }

    public void SetIndicesOfChildren(Vector indicesOfChildren_)
    {
        indicesOfChildren = indicesOfChildren_;
        Select(6);
    }

    // Property getting methods
    public String GetClassOfCollection() { return classOfCollection; }
    public String GetDefaultMemberBasename() { return defaultMemberBasename; }
    public int    GetCollectionSize() { return collectionSize; }
    public int    GetCollectionIdOfParent() { return collectionIdOfParent; }
    public int    GetIndexOfParent() { return indexOfParent; }
    public int    GetCollectionIdOfChildren() { return collectionIdOfChildren; }
    public Vector GetIndicesOfChildren() { return indicesOfChildren; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteString(classOfCollection);
        if(WriteSelect(1, buf))
            buf.WriteString(defaultMemberBasename);
        if(WriteSelect(2, buf))
            buf.WriteInt(collectionSize);
        if(WriteSelect(3, buf))
            buf.WriteInt(collectionIdOfParent);
        if(WriteSelect(4, buf))
            buf.WriteInt(indexOfParent);
        if(WriteSelect(5, buf))
            buf.WriteInt(collectionIdOfChildren);
        if(WriteSelect(6, buf))
            buf.WriteIntVector(indicesOfChildren);
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        for(int i = 0; i < n; ++i)
        {
            int index = (int)buf.ReadByte();
            switch(index)
            {
            case 0:
                SetClassOfCollection(buf.ReadString());
                break;
            case 1:
                SetDefaultMemberBasename(buf.ReadString());
                break;
            case 2:
                SetCollectionSize(buf.ReadInt());
                break;
            case 3:
                SetCollectionIdOfParent(buf.ReadInt());
                break;
            case 4:
                SetIndexOfParent(buf.ReadInt());
                break;
            case 5:
                SetCollectionIdOfChildren(buf.ReadInt());
                break;
            case 6:
                SetIndicesOfChildren(buf.ReadIntVector());
                break;
            }
        }
    }

    public String toString(String indent)
    {
        String str = new String();
        str = str + stringToString("classOfCollection", classOfCollection, indent) + "\n";
        str = str + stringToString("defaultMemberBasename", defaultMemberBasename, indent) + "\n";
        str = str + intToString("collectionSize", collectionSize, indent) + "\n";
        str = str + intToString("collectionIdOfParent", collectionIdOfParent, indent) + "\n";
        str = str + intToString("indexOfParent", indexOfParent, indent) + "\n";
        str = str + intToString("collectionIdOfChildren", collectionIdOfChildren, indent) + "\n";
        str = str + intVectorToString("indicesOfChildren", indicesOfChildren, indent) + "\n";
        return str;
    }


    // Attributes
    private String classOfCollection;
    private String defaultMemberBasename;
    private int    collectionSize;
    private int    collectionIdOfParent;
    private int    indexOfParent;
    private int    collectionIdOfChildren;
    private Vector indicesOfChildren; // vector of Integer objects
}

