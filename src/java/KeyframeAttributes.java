// ****************************************************************************
//
// Copyright (c) 2000 - 2006, The Regents of the University of California
// Produced at the Lawrence Livermore National Laboratory
// All rights reserved.
//
// This file is part of VisIt. For details, see http://www.llnl.gov/visit/. The
// full copyright notice is contained in the file COPYRIGHT located at the root
// of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
//
//  - Redistributions of  source code must  retain the above  copyright notice,
//    this list of conditions and the disclaimer below.
//  - Redistributions in binary form must reproduce the above copyright notice,
//    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
//    documentation and/or materials provided with the distribution.
//  - Neither the name of the UC/LLNL nor  the names of its contributors may be
//    used to  endorse or  promote products derived from  this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
// ARE  DISCLAIMED.  IN  NO  EVENT  SHALL  THE  REGENTS  OF  THE  UNIVERSITY OF
// CALIFORNIA, THE U.S.  DEPARTMENT  OF  ENERGY OR CONTRIBUTORS BE  LIABLE  FOR
// ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
// SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
// CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
// LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
// OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ****************************************************************************

package llnl.visit;


// ****************************************************************************
// Class: KeyframeAttributes
//
// Purpose:
//    This class contains the attributes used for keyframing.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   Tue Apr 6 23:40:05 PST 2004
//
// Modifications:
//   
// ****************************************************************************

public class KeyframeAttributes extends AttributeSubject
{
    public KeyframeAttributes()
    {
        super(3);

        enabled = false;
        nFrames = 0;
        nFramesWasUserSet = false;
    }

    public KeyframeAttributes(KeyframeAttributes obj)
    {
        super(3);

        enabled = obj.enabled;
        nFrames = obj.nFrames;
        nFramesWasUserSet = obj.nFramesWasUserSet;

        SelectAll();
    }

    public boolean equals(KeyframeAttributes obj)
    {
        // Create the return value
        return ((enabled == obj.enabled) &&
                (nFrames == obj.nFrames) &&
                (nFramesWasUserSet == obj.nFramesWasUserSet));
    }

    // Property setting methods
    public void SetEnabled(boolean enabled_)
    {
        enabled = enabled_;
        Select(0);
    }

    public void SetNFrames(int nFrames_)
    {
        nFrames = nFrames_;
        Select(1);
    }

    public void SetNFramesWasUserSet(boolean nFramesWasUserSet_)
    {
        nFramesWasUserSet = nFramesWasUserSet_;
        Select(2);
    }

    // Property getting methods
    public boolean GetEnabled() { return enabled; }
    public int     GetNFrames() { return nFrames; }
    public boolean GetNFramesWasUserSet() { return nFramesWasUserSet; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteBool(enabled);
        if(WriteSelect(1, buf))
            buf.WriteInt(nFrames);
        if(WriteSelect(2, buf))
            buf.WriteBool(nFramesWasUserSet);
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        for(int i = 0; i < n; ++i)
        {
            int index = (int)buf.ReadByte();
            switch(index)
            {
            case 0:
                SetEnabled(buf.ReadBool());
                break;
            case 1:
                SetNFrames(buf.ReadInt());
                break;
            case 2:
                SetNFramesWasUserSet(buf.ReadBool());
                break;
            }
        }
    }


    // Attributes
    private boolean enabled;
    private int     nFrames;
    private boolean nFramesWasUserSet;
}

