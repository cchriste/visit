package llnl.visit;

import java.util.Vector;

// ****************************************************************************
// Class: QueryAttributes
//
// Purpose:
//    This class contains attributes used for query.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   Thu Jul 31 16:19:21 PST 2003
//
// Modifications:
//   
// ****************************************************************************

public class QueryAttributes extends AttributeSubject
{
    // Constants
    public final static int ELEMENTTYPE_ZONE = 0;
    public final static int ELEMENTTYPE_NODE = 1;


    public QueryAttributes()
    {
        super(11);

        name = new String("(null)");
        variables = new Vector();
        variables.addElement(new String("default"));
        resultsMessage = new String("(null)");
        worldPoint = new float[3];
        worldPoint[0] = 0f;
        worldPoint[1] = 0f;
        worldPoint[2] = 0f;
        domain = -1;
        element = -1;
        rayPoint1 = new float[3];
        rayPoint1[0] = 0f;
        rayPoint1[1] = 0f;
        rayPoint1[2] = 0f;
        rayPoint2 = new float[3];
        rayPoint2[0] = 0f;
        rayPoint2[1] = 0f;
        rayPoint2[2] = 0f;
        cellPoint = new float[3];
        cellPoint[0] = 0f;
        cellPoint[1] = 0f;
        cellPoint[2] = 0f;
        resultsValue = 0;
        elementType = ELEMENTTYPE_ZONE;
    }

    public QueryAttributes(QueryAttributes obj)
    {
        super(11);

        int i;

        name = new String(obj.name);
        variables = new Vector(obj.variables.size());
        for(i = 0; i < obj.variables.size(); ++i)
            variables.addElement(new String((String)obj.variables.elementAt(i)));

        resultsMessage = new String(obj.resultsMessage);
        worldPoint = new float[3];
        worldPoint[0] = obj.worldPoint[0];
        worldPoint[1] = obj.worldPoint[1];
        worldPoint[2] = obj.worldPoint[2];

        domain = obj.domain;
        element = obj.element;
        rayPoint1 = new float[3];
        rayPoint1[0] = obj.rayPoint1[0];
        rayPoint1[1] = obj.rayPoint1[1];
        rayPoint1[2] = obj.rayPoint1[2];

        rayPoint2 = new float[3];
        rayPoint2[0] = obj.rayPoint2[0];
        rayPoint2[1] = obj.rayPoint2[1];
        rayPoint2[2] = obj.rayPoint2[2];

        cellPoint = new float[3];
        cellPoint[0] = obj.cellPoint[0];
        cellPoint[1] = obj.cellPoint[1];
        cellPoint[2] = obj.cellPoint[2];

        resultsValue = obj.resultsValue;
        elementType = obj.elementType;

        SelectAll();
    }

    public boolean equals(QueryAttributes obj)
    {
        int i;

        // Compare the worldPoint arrays.
        boolean worldPoint_equal = true;
        for(i = 0; i < 3 && worldPoint_equal; ++i)
            worldPoint_equal = (worldPoint[i] == obj.worldPoint[i]);

        // Compare the rayPoint1 arrays.
        boolean rayPoint1_equal = true;
        for(i = 0; i < 3 && rayPoint1_equal; ++i)
            rayPoint1_equal = (rayPoint1[i] == obj.rayPoint1[i]);

        // Compare the rayPoint2 arrays.
        boolean rayPoint2_equal = true;
        for(i = 0; i < 3 && rayPoint2_equal; ++i)
            rayPoint2_equal = (rayPoint2[i] == obj.rayPoint2[i]);

        // Compare the cellPoint arrays.
        boolean cellPoint_equal = true;
        for(i = 0; i < 3 && cellPoint_equal; ++i)
            cellPoint_equal = (cellPoint[i] == obj.cellPoint[i]);

        // Create the return value
        return ((name == obj.name) &&
                (variables == obj.variables) &&
                (resultsMessage == obj.resultsMessage) &&
                worldPoint_equal &&
                (domain == obj.domain) &&
                (element == obj.element) &&
                rayPoint1_equal &&
                rayPoint2_equal &&
                cellPoint_equal &&
                (resultsValue == obj.resultsValue) &&
                (elementType == obj.elementType));
    }

    // Property setting methods
    public void SetName(String name_)
    {
        name = name_;
        Select(0);
    }

    public void SetVariables(Vector variables_)
    {
        variables = variables_;
        Select(1);
    }

    public void SetResultsMessage(String resultsMessage_)
    {
        resultsMessage = resultsMessage_;
        Select(2);
    }

    public void SetWorldPoint(float[] worldPoint_)
    {
        worldPoint[0] = worldPoint_[0];
        worldPoint[1] = worldPoint_[1];
        worldPoint[2] = worldPoint_[2];
        Select(3);
    }

    public void SetWorldPoint(float e0, float e1, float e2)
    {
        worldPoint[0] = e0;
        worldPoint[1] = e1;
        worldPoint[2] = e2;
        Select(3);
    }

    public void SetDomain(int domain_)
    {
        domain = domain_;
        Select(4);
    }

    public void SetElement(int element_)
    {
        element = element_;
        Select(5);
    }

    public void SetRayPoint1(float[] rayPoint1_)
    {
        rayPoint1[0] = rayPoint1_[0];
        rayPoint1[1] = rayPoint1_[1];
        rayPoint1[2] = rayPoint1_[2];
        Select(6);
    }

    public void SetRayPoint1(float e0, float e1, float e2)
    {
        rayPoint1[0] = e0;
        rayPoint1[1] = e1;
        rayPoint1[2] = e2;
        Select(6);
    }

    public void SetRayPoint2(float[] rayPoint2_)
    {
        rayPoint2[0] = rayPoint2_[0];
        rayPoint2[1] = rayPoint2_[1];
        rayPoint2[2] = rayPoint2_[2];
        Select(7);
    }

    public void SetRayPoint2(float e0, float e1, float e2)
    {
        rayPoint2[0] = e0;
        rayPoint2[1] = e1;
        rayPoint2[2] = e2;
        Select(7);
    }

    public void SetCellPoint(float[] cellPoint_)
    {
        cellPoint[0] = cellPoint_[0];
        cellPoint[1] = cellPoint_[1];
        cellPoint[2] = cellPoint_[2];
        Select(8);
    }

    public void SetCellPoint(float e0, float e1, float e2)
    {
        cellPoint[0] = e0;
        cellPoint[1] = e1;
        cellPoint[2] = e2;
        Select(8);
    }

    public void SetResultsValue(double resultsValue_)
    {
        resultsValue = resultsValue_;
        Select(9);
    }

    public void SetElementType(int elementType_)
    {
        elementType = elementType_;
        Select(10);
    }

    // Property getting methods
    public String  GetName() { return name; }
    public Vector  GetVariables() { return variables; }
    public String  GetResultsMessage() { return resultsMessage; }
    public float[] GetWorldPoint() { return worldPoint; }
    public int     GetDomain() { return domain; }
    public int     GetElement() { return element; }
    public float[] GetRayPoint1() { return rayPoint1; }
    public float[] GetRayPoint2() { return rayPoint2; }
    public float[] GetCellPoint() { return cellPoint; }
    public double  GetResultsValue() { return resultsValue; }
    public int     GetElementType() { return elementType; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteString(name);
        if(WriteSelect(1, buf))
            buf.WriteStringVector(variables);
        if(WriteSelect(2, buf))
            buf.WriteString(resultsMessage);
        if(WriteSelect(3, buf))
            buf.WriteFloatArray(worldPoint);
        if(WriteSelect(4, buf))
            buf.WriteInt(domain);
        if(WriteSelect(5, buf))
            buf.WriteInt(element);
        if(WriteSelect(6, buf))
            buf.WriteFloatArray(rayPoint1);
        if(WriteSelect(7, buf))
            buf.WriteFloatArray(rayPoint2);
        if(WriteSelect(8, buf))
            buf.WriteFloatArray(cellPoint);
        if(WriteSelect(9, buf))
            buf.WriteDouble(resultsValue);
        if(WriteSelect(10, buf))
            buf.WriteInt(elementType);
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        for(int i = 0; i < n; ++i)
        {
            int index = (int)buf.ReadByte();
            switch(index)
            {
            case 0:
                SetName(buf.ReadString());
                break;
            case 1:
                SetVariables(buf.ReadStringVector());
                break;
            case 2:
                SetResultsMessage(buf.ReadString());
                break;
            case 3:
                SetWorldPoint(buf.ReadFloatArray());
                break;
            case 4:
                SetDomain(buf.ReadInt());
                break;
            case 5:
                SetElement(buf.ReadInt());
                break;
            case 6:
                SetRayPoint1(buf.ReadFloatArray());
                break;
            case 7:
                SetRayPoint2(buf.ReadFloatArray());
                break;
            case 8:
                SetCellPoint(buf.ReadFloatArray());
                break;
            case 9:
                SetResultsValue(buf.ReadDouble());
                break;
            case 10:
                SetElementType(buf.ReadInt());
                break;
            }
        }
    }


    // Attributes
    private String  name;
    private Vector  variables; // vector of String objects
    private String  resultsMessage;
    private float[] worldPoint;
    private int     domain;
    private int     element;
    private float[] rayPoint1;
    private float[] rayPoint2;
    private float[] cellPoint;
    private double  resultsValue;
    private int     elementType;
}

