// ****************************************************************************
//
// Copyright (c) 2000 - 2006, The Regents of the University of California
// Produced at the Lawrence Livermore National Laboratory
// All rights reserved.
//
// This file is part of VisIt. For details, see http://www.llnl.gov/visit/. The
// full copyright notice is contained in the file COPYRIGHT located at the root
// of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
//
//  - Redistributions of  source code must  retain the above  copyright notice,
//    this list of conditions and the disclaimer below.
//  - Redistributions in binary form must reproduce the above copyright notice,
//    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
//    documentation and/or materials provided with the distribution.
//  - Neither the name of the UC/LLNL nor  the names of its contributors may be
//    used to  endorse or  promote products derived from  this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
// ARE  DISCLAIMED.  IN  NO  EVENT  SHALL  THE  REGENTS  OF  THE  UNIVERSITY OF
// CALIFORNIA, THE U.S.  DEPARTMENT  OF  ENERGY OR CONTRIBUTORS BE  LIABLE  FOR
// ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
// SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
// CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
// LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
// OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ****************************************************************************

package llnl.visit;

import java.util.Vector;
import java.lang.Byte;
import java.lang.Integer;
import java.lang.Double;

// ****************************************************************************
// Class: MovieAttributes
//
// Purpose:
//    This class contains the attributes used for saving movies.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   Wed Jun 22 10:08:20 PDT 2005
//
// Modifications:
//   
// ****************************************************************************

public class MovieAttributes extends AttributeSubject
{
    // Enum values
    public final static int MOVIETYPEENUM_USELASTSETTINGS = 0;
    public final static int MOVIETYPEENUM_NEWSIMPLE = 1;
    public final static int MOVIETYPEENUM_NEWUSINGTEMPLATE = 2;

    public final static int GENERATIONMETHODENUM_NOWCURRENTINSTANCE = 0;
    public final static int GENERATIONMETHODENUM_NOWNEWINSTANCE = 1;
    public final static int GENERATIONMETHODENUM_LATER = 2;


    public MovieAttributes()
    {
        super(11);

        generationMethod = GENERATIONMETHODENUM_NOWCURRENTINSTANCE;
        movieType = MOVIETYPEENUM_NEWSIMPLE;
        outputDirectory = new String(".");
        outputName = new String("movie");
        fileFormats = new Vector();
        useCurrentSize = new Vector();
        widths = new Vector();
        heights = new Vector();
        scales = new Vector();
        stereo = false;
        templateFile = new String("");
    }

    public MovieAttributes(MovieAttributes obj)
    {
        super(11);

        int i;

        generationMethod = obj.generationMethod;
        movieType = obj.movieType;
        outputDirectory = new String(obj.outputDirectory);
        outputName = new String(obj.outputName);
        fileFormats = new Vector(obj.fileFormats.size());
        for(i = 0; i < obj.fileFormats.size(); ++i)
            fileFormats.addElement(new String((String)obj.fileFormats.elementAt(i)));

        useCurrentSize = new Vector(obj.useCurrentSize.size());
        for(i = 0; i < obj.useCurrentSize.size(); ++i)
        {
            Byte bv = (Byte)obj.useCurrentSize.elementAt(i);
            useCurrentSize.addElement(new Byte(bv.byteValue()));
        }

        widths = new Vector();
        for(i = 0; i < obj.widths.size(); ++i)
        {
            Integer iv = (Integer)obj.widths.elementAt(i);
            widths.addElement(new Integer(iv.intValue()));
        }
        heights = new Vector();
        for(i = 0; i < obj.heights.size(); ++i)
        {
            Integer iv = (Integer)obj.heights.elementAt(i);
            heights.addElement(new Integer(iv.intValue()));
        }
        scales = new Vector(obj.scales.size());
        for(i = 0; i < obj.scales.size(); ++i)
        {
            Double dv = (Double)obj.scales.elementAt(i);
            scales.addElement(new Double(dv.doubleValue()));
        }

        stereo = obj.stereo;
        templateFile = new String(obj.templateFile);

        SelectAll();
    }

    public boolean equals(MovieAttributes obj)
    {
        int i;

        // Create the return value
        return ((generationMethod == obj.generationMethod) &&
                (movieType == obj.movieType) &&
                (outputDirectory == obj.outputDirectory) &&
                (outputName == obj.outputName) &&
                (fileFormats == obj.fileFormats) &&
                (useCurrentSize == obj.useCurrentSize) &&
                (widths == obj.widths) &&
                (heights == obj.heights) &&
                (scales == obj.scales) &&
                (stereo == obj.stereo) &&
                (templateFile == obj.templateFile));
    }

    // Property setting methods
    public void SetGenerationMethod(int generationMethod_)
    {
        generationMethod = generationMethod_;
        Select(0);
    }

    public void SetMovieType(int movieType_)
    {
        movieType = movieType_;
        Select(1);
    }

    public void SetOutputDirectory(String outputDirectory_)
    {
        outputDirectory = outputDirectory_;
        Select(2);
    }

    public void SetOutputName(String outputName_)
    {
        outputName = outputName_;
        Select(3);
    }

    public void SetFileFormats(Vector fileFormats_)
    {
        fileFormats = fileFormats_;
        Select(4);
    }

    public void SetUseCurrentSize(Vector useCurrentSize_)
    {
        useCurrentSize = useCurrentSize_;
        Select(5);
    }

    public void SetWidths(Vector widths_)
    {
        widths = widths_;
        Select(6);
    }

    public void SetHeights(Vector heights_)
    {
        heights = heights_;
        Select(7);
    }

    public void SetScales(Vector scales_)
    {
        scales = scales_;
        Select(8);
    }

    public void SetStereo(boolean stereo_)
    {
        stereo = stereo_;
        Select(9);
    }

    public void SetTemplateFile(String templateFile_)
    {
        templateFile = templateFile_;
        Select(10);
    }

    // Property getting methods
    public int     GetGenerationMethod() { return generationMethod; }
    public int     GetMovieType() { return movieType; }
    public String  GetOutputDirectory() { return outputDirectory; }
    public String  GetOutputName() { return outputName; }
    public Vector  GetFileFormats() { return fileFormats; }
    public Vector  GetUseCurrentSize() { return useCurrentSize; }
    public Vector  GetWidths() { return widths; }
    public Vector  GetHeights() { return heights; }
    public Vector  GetScales() { return scales; }
    public boolean GetStereo() { return stereo; }
    public String  GetTemplateFile() { return templateFile; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteInt(generationMethod);
        if(WriteSelect(1, buf))
            buf.WriteInt(movieType);
        if(WriteSelect(2, buf))
            buf.WriteString(outputDirectory);
        if(WriteSelect(3, buf))
            buf.WriteString(outputName);
        if(WriteSelect(4, buf))
            buf.WriteStringVector(fileFormats);
        if(WriteSelect(5, buf))
            buf.WriteByteVector(useCurrentSize);
        if(WriteSelect(6, buf))
            buf.WriteIntVector(widths);
        if(WriteSelect(7, buf))
            buf.WriteIntVector(heights);
        if(WriteSelect(8, buf))
            buf.WriteDoubleVector(scales);
        if(WriteSelect(9, buf))
            buf.WriteBool(stereo);
        if(WriteSelect(10, buf))
            buf.WriteString(templateFile);
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        for(int i = 0; i < n; ++i)
        {
            int index = (int)buf.ReadByte();
            switch(index)
            {
            case 0:
                SetGenerationMethod(buf.ReadInt());
                break;
            case 1:
                SetMovieType(buf.ReadInt());
                break;
            case 2:
                SetOutputDirectory(buf.ReadString());
                break;
            case 3:
                SetOutputName(buf.ReadString());
                break;
            case 4:
                SetFileFormats(buf.ReadStringVector());
                break;
            case 5:
                SetUseCurrentSize(buf.ReadByteVector());
                break;
            case 6:
                SetWidths(buf.ReadIntVector());
                break;
            case 7:
                SetHeights(buf.ReadIntVector());
                break;
            case 8:
                SetScales(buf.ReadDoubleVector());
                break;
            case 9:
                SetStereo(buf.ReadBool());
                break;
            case 10:
                SetTemplateFile(buf.ReadString());
                break;
            }
        }
    }


    // Attributes
    private int     generationMethod;
    private int     movieType;
    private String  outputDirectory;
    private String  outputName;
    private Vector  fileFormats; // vector of String objects
    private Vector  useCurrentSize; // vector of Byte objects
    private Vector  widths; // vector of Integer objects
    private Vector  heights; // vector of Integer objects
    private Vector  scales; // vector of Double objects
    private boolean stereo;
    private String  templateFile;
}

