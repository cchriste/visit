package llnl.visit;

import java.util.Vector;
import java.lang.Double;
import java.lang.Integer;

// ****************************************************************************
// Class: ConstructDDFAttributes
//
// Purpose:
//    Attributes for constructing DDFs
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   Mon Feb 20 10:42:59 PDT 2006
//
// Modifications:
//   
// ****************************************************************************

public class ConstructDDFAttributes extends AttributeSubject
{
    // Enum values
    public final static int BINNINGSCHEME_UNIFORM = 0;
    public final static int BINNINGSCHEME_UNKNOWN = 1;

    public final static int STATISTICALOPERATOR_AVERAGE = 0;
    public final static int STATISTICALOPERATOR_MINIMUM = 1;
    public final static int STATISTICALOPERATOR_MAXIMUM = 2;
    public final static int STATISTICALOPERATOR_STANDARDDEVIATION = 3;
    public final static int STATISTICALOPERATOR_VARIANCE = 4;
    public final static int STATISTICALOPERATOR_PERCENTILE = 5;
    public final static int STATISTICALOPERATOR_MEDIAN = 6;
    public final static int STATISTICALOPERATOR_INTERQUARTILERANGE = 7;
    public final static int STATISTICALOPERATOR_MODE = 8;
    public final static int STATISTICALOPERATOR_SUM = 9;


    public ConstructDDFAttributes()
    {
        super(9);

        ddfName = new String("");
        varnames = new Vector();
        ranges = new Vector();
        codomainName = new String("");
        statisticalOperator = STATISTICALOPERATOR_AVERAGE;
        percentile = 90;
        undefinedValue = 0;
        binningScheme = BINNINGSCHEME_UNIFORM;
        numSamples = new Vector();
    }

    public ConstructDDFAttributes(ConstructDDFAttributes obj)
    {
        super(9);

        int i;

        ddfName = new String(obj.ddfName);
        varnames = new Vector(obj.varnames.size());
        for(i = 0; i < obj.varnames.size(); ++i)
            varnames.addElement(new String((String)obj.varnames.elementAt(i)));

        ranges = new Vector(obj.ranges.size());
        for(i = 0; i < obj.ranges.size(); ++i)
        {
            Double dv = (Double)obj.ranges.elementAt(i);
            ranges.addElement(new Double(dv.doubleValue()));
        }

        codomainName = new String(obj.codomainName);
        statisticalOperator = obj.statisticalOperator;
        percentile = obj.percentile;
        undefinedValue = obj.undefinedValue;
        binningScheme = obj.binningScheme;
        numSamples = new Vector();
        for(i = 0; i < obj.numSamples.size(); ++i)
        {
            Integer iv = (Integer)obj.numSamples.elementAt(i);
            numSamples.addElement(new Integer(iv.intValue()));
        }

        SelectAll();
    }

    public boolean equals(ConstructDDFAttributes obj)
    {
        int i;

        // Create the return value
        return ((ddfName == obj.ddfName) &&
                (varnames == obj.varnames) &&
                (ranges == obj.ranges) &&
                (codomainName == obj.codomainName) &&
                (statisticalOperator == obj.statisticalOperator) &&
                (percentile == obj.percentile) &&
                (undefinedValue == obj.undefinedValue) &&
                (binningScheme == obj.binningScheme) &&
                (numSamples == obj.numSamples));
    }

    // Property setting methods
    public void SetDdfName(String ddfName_)
    {
        ddfName = ddfName_;
        Select(0);
    }

    public void SetVarnames(Vector varnames_)
    {
        varnames = varnames_;
        Select(1);
    }

    public void SetRanges(Vector ranges_)
    {
        ranges = ranges_;
        Select(2);
    }

    public void SetCodomainName(String codomainName_)
    {
        codomainName = codomainName_;
        Select(3);
    }

    public void SetStatisticalOperator(int statisticalOperator_)
    {
        statisticalOperator = statisticalOperator_;
        Select(4);
    }

    public void SetPercentile(double percentile_)
    {
        percentile = percentile_;
        Select(5);
    }

    public void SetUndefinedValue(double undefinedValue_)
    {
        undefinedValue = undefinedValue_;
        Select(6);
    }

    public void SetBinningScheme(int binningScheme_)
    {
        binningScheme = binningScheme_;
        Select(7);
    }

    public void SetNumSamples(Vector numSamples_)
    {
        numSamples = numSamples_;
        Select(8);
    }

    // Property getting methods
    public String GetDdfName() { return ddfName; }
    public Vector GetVarnames() { return varnames; }
    public Vector GetRanges() { return ranges; }
    public String GetCodomainName() { return codomainName; }
    public int    GetStatisticalOperator() { return statisticalOperator; }
    public double GetPercentile() { return percentile; }
    public double GetUndefinedValue() { return undefinedValue; }
    public int    GetBinningScheme() { return binningScheme; }
    public Vector GetNumSamples() { return numSamples; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteString(ddfName);
        if(WriteSelect(1, buf))
            buf.WriteStringVector(varnames);
        if(WriteSelect(2, buf))
            buf.WriteDoubleVector(ranges);
        if(WriteSelect(3, buf))
            buf.WriteString(codomainName);
        if(WriteSelect(4, buf))
            buf.WriteInt(statisticalOperator);
        if(WriteSelect(5, buf))
            buf.WriteDouble(percentile);
        if(WriteSelect(6, buf))
            buf.WriteDouble(undefinedValue);
        if(WriteSelect(7, buf))
            buf.WriteInt(binningScheme);
        if(WriteSelect(8, buf))
            buf.WriteIntVector(numSamples);
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        for(int i = 0; i < n; ++i)
        {
            int index = (int)buf.ReadByte();
            switch(index)
            {
            case 0:
                SetDdfName(buf.ReadString());
                break;
            case 1:
                SetVarnames(buf.ReadStringVector());
                break;
            case 2:
                SetRanges(buf.ReadDoubleVector());
                break;
            case 3:
                SetCodomainName(buf.ReadString());
                break;
            case 4:
                SetStatisticalOperator(buf.ReadInt());
                break;
            case 5:
                SetPercentile(buf.ReadDouble());
                break;
            case 6:
                SetUndefinedValue(buf.ReadDouble());
                break;
            case 7:
                SetBinningScheme(buf.ReadInt());
                break;
            case 8:
                SetNumSamples(buf.ReadIntVector());
                break;
            }
        }
    }


    // Attributes
    private String ddfName;
    private Vector varnames; // vector of String objects
    private Vector ranges; // vector of Double objects
    private String codomainName;
    private int    statisticalOperator;
    private double percentile;
    private double undefinedValue;
    private int    binningScheme;
    private Vector numSamples; // vector of Integer objects
}

