package llnl.visit;

import java.lang.Integer;
import java.util.Vector;
import java.lang.Double;

// ****************************************************************************
// Class: QueryOverTimeAttributes
//
// Purpose:
//    Attributes for queries over time.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   Wed Mar 31 10:46:04 PDT 2004
//
// Modifications:
//   
// ****************************************************************************

public class QueryOverTimeAttributes extends AttributeSubject
{
    // Constants
    public final static int TIMETYPE_CYCLE = 0;
    public final static int TIMETYPE_DTIME = 1;
    public final static int TIMETYPE_TIMESTEP = 2;


    public QueryOverTimeAttributes()
    {
        super(11);

        timeType = TIMETYPE_CYCLE;
        startTimeFlag = false;
        startTime = 0;
        endTimeFlag = false;
        endTime = 1;
        stride = 1;
        createWindow = true;
        windowId = 2;
        queryAtts = new QueryAttributes();
        timeSteps = new Vector();
        timeStates = new Vector();
    }

    public QueryOverTimeAttributes(QueryOverTimeAttributes obj)
    {
        super(11);

        int i;

        timeType = obj.timeType;
        startTimeFlag = obj.startTimeFlag;
        startTime = obj.startTime;
        endTimeFlag = obj.endTimeFlag;
        endTime = obj.endTime;
        stride = obj.stride;
        createWindow = obj.createWindow;
        windowId = obj.windowId;
        queryAtts = new QueryAttributes(obj.queryAtts);
        timeSteps = new Vector();
        for(i = 0; i < obj.timeSteps.size(); ++i)
        {
            Integer iv = (Integer)obj.timeSteps.elementAt(i);
            timeSteps.addElement(new Integer(iv.intValue()));
        }
        timeStates = new Vector(obj.timeStates.size());
        for(i = 0; i < obj.timeStates.size(); ++i)
        {
            Double dv = (Double)obj.timeStates.elementAt(i);
            timeStates.addElement(new Double(dv.doubleValue()));
        }


        SelectAll();
    }

    public boolean equals(QueryOverTimeAttributes obj)
    {
        int i;

        // Create the return value
        return ((timeType == obj.timeType) &&
                (startTimeFlag == obj.startTimeFlag) &&
                (startTime == obj.startTime) &&
                (endTimeFlag == obj.endTimeFlag) &&
                (endTime == obj.endTime) &&
                (stride == obj.stride) &&
                (createWindow == obj.createWindow) &&
                (windowId == obj.windowId) &&
                (queryAtts == obj.queryAtts) &&
                (timeSteps == obj.timeSteps) &&
                (timeStates == obj.timeStates));
    }

    // Property setting methods
    public void SetTimeType(int timeType_)
    {
        timeType = timeType_;
        Select(0);
    }

    public void SetStartTimeFlag(boolean startTimeFlag_)
    {
        startTimeFlag = startTimeFlag_;
        Select(1);
    }

    public void SetStartTime(double startTime_)
    {
        startTime = startTime_;
        Select(2);
    }

    public void SetEndTimeFlag(boolean endTimeFlag_)
    {
        endTimeFlag = endTimeFlag_;
        Select(3);
    }

    public void SetEndTime(double endTime_)
    {
        endTime = endTime_;
        Select(4);
    }

    public void SetStride(int stride_)
    {
        stride = stride_;
        Select(5);
    }

    public void SetCreateWindow(boolean createWindow_)
    {
        createWindow = createWindow_;
        Select(6);
    }

    public void SetWindowId(int windowId_)
    {
        windowId = windowId_;
        Select(7);
    }

    public void SetQueryAtts(QueryAttributes queryAtts_)
    {
        queryAtts = queryAtts_;
        Select(8);
    }

    public void SetTimeSteps(Vector timeSteps_)
    {
        timeSteps = timeSteps_;
        Select(9);
    }

    public void SetTimeStates(Vector timeStates_)
    {
        timeStates = timeStates_;
        Select(10);
    }

    // Property getting methods
    public int             GetTimeType() { return timeType; }
    public boolean         GetStartTimeFlag() { return startTimeFlag; }
    public double          GetStartTime() { return startTime; }
    public boolean         GetEndTimeFlag() { return endTimeFlag; }
    public double          GetEndTime() { return endTime; }
    public int             GetStride() { return stride; }
    public boolean         GetCreateWindow() { return createWindow; }
    public int             GetWindowId() { return windowId; }
    public QueryAttributes GetQueryAtts() { return queryAtts; }
    public Vector          GetTimeSteps() { return timeSteps; }
    public Vector          GetTimeStates() { return timeStates; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteInt(timeType);
        if(WriteSelect(1, buf))
            buf.WriteBool(startTimeFlag);
        if(WriteSelect(2, buf))
            buf.WriteDouble(startTime);
        if(WriteSelect(3, buf))
            buf.WriteBool(endTimeFlag);
        if(WriteSelect(4, buf))
            buf.WriteDouble(endTime);
        if(WriteSelect(5, buf))
            buf.WriteInt(stride);
        if(WriteSelect(6, buf))
            buf.WriteBool(createWindow);
        if(WriteSelect(7, buf))
            buf.WriteInt(windowId);
        if(WriteSelect(8, buf))
            queryAtts.Write(buf);
        if(WriteSelect(9, buf))
            buf.WriteIntVector(timeSteps);
        if(WriteSelect(10, buf))
            buf.WriteDoubleVector(timeStates);
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        for(int i = 0; i < n; ++i)
        {
            int index = (int)buf.ReadByte();
            switch(index)
            {
            case 0:
                SetTimeType(buf.ReadInt());
                break;
            case 1:
                SetStartTimeFlag(buf.ReadBool());
                break;
            case 2:
                SetStartTime(buf.ReadDouble());
                break;
            case 3:
                SetEndTimeFlag(buf.ReadBool());
                break;
            case 4:
                SetEndTime(buf.ReadDouble());
                break;
            case 5:
                SetStride(buf.ReadInt());
                break;
            case 6:
                SetCreateWindow(buf.ReadBool());
                break;
            case 7:
                SetWindowId(buf.ReadInt());
                break;
            case 8:
                queryAtts.Read(buf);
                Select(8);
                break;
            case 9:
                SetTimeSteps(buf.ReadIntVector());
                break;
            case 10:
                SetTimeStates(buf.ReadDoubleVector());
                break;
            }
        }
    }


    // Attributes
    private int             timeType;
    private boolean         startTimeFlag;
    private double          startTime;
    private boolean         endTimeFlag;
    private double          endTime;
    private int             stride;
    private boolean         createWindow;
    private int             windowId;
    private QueryAttributes queryAtts;
    private Vector          timeSteps; // vector of Integer objects
    private Vector          timeStates; // vector of Double objects
}

