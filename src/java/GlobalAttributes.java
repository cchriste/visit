package llnl.visit;

import java.lang.Integer;
import java.util.Vector;

// ****************************************************************************
// Class: GlobalAttributes
//
// Purpose:
//    This class contains attributes associated with the main window.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   Thu May 8 09:50:53 PDT 2003
//
// Modifications:
//   
// ****************************************************************************

public class GlobalAttributes extends AttributeSubject
{
    public GlobalAttributes()
    {
        super(18);

        windows = new Vector();
        activeWindow = 1;
        iconifiedFlag = false;
        autoUpdateFlag = false;
        replacePlots = false;
        applyOperator = true;
        currentFile = new String("notset");
        currentState = 0;
        nStates = 0;
        currentFrame = 0;
        nFrames = 0;
        animationMode = 2;
        executing = false;
        windowLayout = 1;
        makeDefaultConfirm = true;
        viewKeyframes = new Vector();
        cloneWindowOnFirstRef = false;
        maintainView = false;
    }

    public GlobalAttributes(GlobalAttributes obj)
    {
        super(18);

        int i;

        windows = new Vector();
        for(i = 0; i < obj.windows.size(); ++i)
        {
            Integer iv = (Integer)obj.windows.elementAt(i);
            windows.addElement(new Integer(iv.intValue()));
        }
        activeWindow = obj.activeWindow;
        iconifiedFlag = obj.iconifiedFlag;
        autoUpdateFlag = obj.autoUpdateFlag;
        replacePlots = obj.replacePlots;
        applyOperator = obj.applyOperator;
        currentFile = new String(obj.currentFile);
        currentState = obj.currentState;
        nStates = obj.nStates;
        currentFrame = obj.currentFrame;
        nFrames = obj.nFrames;
        animationMode = obj.animationMode;
        executing = obj.executing;
        windowLayout = obj.windowLayout;
        makeDefaultConfirm = obj.makeDefaultConfirm;
        viewKeyframes = new Vector();
        for(i = 0; i < obj.viewKeyframes.size(); ++i)
        {
            Integer iv = (Integer)obj.viewKeyframes.elementAt(i);
            viewKeyframes.addElement(new Integer(iv.intValue()));
        }
        cloneWindowOnFirstRef = obj.cloneWindowOnFirstRef;
        maintainView = obj.maintainView;

        SelectAll();
    }

    public boolean equals(GlobalAttributes obj)
    {
        int i;

        // Create the return value
        return ((windows == obj.windows) &&
                (activeWindow == obj.activeWindow) &&
                (iconifiedFlag == obj.iconifiedFlag) &&
                (autoUpdateFlag == obj.autoUpdateFlag) &&
                (replacePlots == obj.replacePlots) &&
                (applyOperator == obj.applyOperator) &&
                (currentFile == obj.currentFile) &&
                (currentState == obj.currentState) &&
                (nStates == obj.nStates) &&
                (currentFrame == obj.currentFrame) &&
                (nFrames == obj.nFrames) &&
                (animationMode == obj.animationMode) &&
                (executing == obj.executing) &&
                (windowLayout == obj.windowLayout) &&
                (makeDefaultConfirm == obj.makeDefaultConfirm) &&
                (viewKeyframes == obj.viewKeyframes) &&
                (cloneWindowOnFirstRef == obj.cloneWindowOnFirstRef) &&
                (maintainView == obj.maintainView));
    }

    // Property setting methods
    public void SetWindows(Vector windows_)
    {
        windows = windows_;
        Select(0);
    }

    public void SetActiveWindow(int activeWindow_)
    {
        activeWindow = activeWindow_;
        Select(1);
    }

    public void SetIconifiedFlag(boolean iconifiedFlag_)
    {
        iconifiedFlag = iconifiedFlag_;
        Select(2);
    }

    public void SetAutoUpdateFlag(boolean autoUpdateFlag_)
    {
        autoUpdateFlag = autoUpdateFlag_;
        Select(3);
    }

    public void SetReplacePlots(boolean replacePlots_)
    {
        replacePlots = replacePlots_;
        Select(4);
    }

    public void SetApplyOperator(boolean applyOperator_)
    {
        applyOperator = applyOperator_;
        Select(5);
    }

    public void SetCurrentFile(String currentFile_)
    {
        currentFile = currentFile_;
        Select(6);
    }

    public void SetCurrentState(int currentState_)
    {
        currentState = currentState_;
        Select(7);
    }

    public void SetNStates(int nStates_)
    {
        nStates = nStates_;
        Select(8);
    }

    public void SetCurrentFrame(int currentFrame_)
    {
        currentFrame = currentFrame_;
        Select(9);
    }

    public void SetNFrames(int nFrames_)
    {
        nFrames = nFrames_;
        Select(10);
    }

    public void SetAnimationMode(int animationMode_)
    {
        animationMode = animationMode_;
        Select(11);
    }

    public void SetExecuting(boolean executing_)
    {
        executing = executing_;
        Select(12);
    }

    public void SetWindowLayout(int windowLayout_)
    {
        windowLayout = windowLayout_;
        Select(13);
    }

    public void SetMakeDefaultConfirm(boolean makeDefaultConfirm_)
    {
        makeDefaultConfirm = makeDefaultConfirm_;
        Select(14);
    }

    public void SetViewKeyframes(Vector viewKeyframes_)
    {
        viewKeyframes = viewKeyframes_;
        Select(15);
    }

    public void SetCloneWindowOnFirstRef(boolean cloneWindowOnFirstRef_)
    {
        cloneWindowOnFirstRef = cloneWindowOnFirstRef_;
        Select(16);
    }

    public void SetMaintainView(boolean maintainView_)
    {
        maintainView = maintainView_;
        Select(17);
    }

    // Property getting methods
    public Vector  GetWindows() { return windows; }
    public int     GetActiveWindow() { return activeWindow; }
    public boolean GetIconifiedFlag() { return iconifiedFlag; }
    public boolean GetAutoUpdateFlag() { return autoUpdateFlag; }
    public boolean GetReplacePlots() { return replacePlots; }
    public boolean GetApplyOperator() { return applyOperator; }
    public String  GetCurrentFile() { return currentFile; }
    public int     GetCurrentState() { return currentState; }
    public int     GetNStates() { return nStates; }
    public int     GetCurrentFrame() { return currentFrame; }
    public int     GetNFrames() { return nFrames; }
    public int     GetAnimationMode() { return animationMode; }
    public boolean GetExecuting() { return executing; }
    public int     GetWindowLayout() { return windowLayout; }
    public boolean GetMakeDefaultConfirm() { return makeDefaultConfirm; }
    public Vector  GetViewKeyframes() { return viewKeyframes; }
    public boolean GetCloneWindowOnFirstRef() { return cloneWindowOnFirstRef; }
    public boolean GetMaintainView() { return maintainView; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteIntVector(windows);
        if(WriteSelect(1, buf))
            buf.WriteInt(activeWindow);
        if(WriteSelect(2, buf))
            buf.WriteBool(iconifiedFlag);
        if(WriteSelect(3, buf))
            buf.WriteBool(autoUpdateFlag);
        if(WriteSelect(4, buf))
            buf.WriteBool(replacePlots);
        if(WriteSelect(5, buf))
            buf.WriteBool(applyOperator);
        if(WriteSelect(6, buf))
            buf.WriteString(currentFile);
        if(WriteSelect(7, buf))
            buf.WriteInt(currentState);
        if(WriteSelect(8, buf))
            buf.WriteInt(nStates);
        if(WriteSelect(9, buf))
            buf.WriteInt(currentFrame);
        if(WriteSelect(10, buf))
            buf.WriteInt(nFrames);
        if(WriteSelect(11, buf))
            buf.WriteInt(animationMode);
        if(WriteSelect(12, buf))
            buf.WriteBool(executing);
        if(WriteSelect(13, buf))
            buf.WriteInt(windowLayout);
        if(WriteSelect(14, buf))
            buf.WriteBool(makeDefaultConfirm);
        if(WriteSelect(15, buf))
            buf.WriteIntVector(viewKeyframes);
        if(WriteSelect(16, buf))
            buf.WriteBool(cloneWindowOnFirstRef);
        if(WriteSelect(17, buf))
            buf.WriteBool(maintainView);
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        for(int i = 0; i < n; ++i)
        {
            int index = (int)buf.ReadByte();
            switch(index)
            {
            case 0:
                SetWindows(buf.ReadIntVector());
                break;
            case 1:
                SetActiveWindow(buf.ReadInt());
                break;
            case 2:
                SetIconifiedFlag(buf.ReadBool());
                break;
            case 3:
                SetAutoUpdateFlag(buf.ReadBool());
                break;
            case 4:
                SetReplacePlots(buf.ReadBool());
                break;
            case 5:
                SetApplyOperator(buf.ReadBool());
                break;
            case 6:
                SetCurrentFile(buf.ReadString());
                break;
            case 7:
                SetCurrentState(buf.ReadInt());
                break;
            case 8:
                SetNStates(buf.ReadInt());
                break;
            case 9:
                SetCurrentFrame(buf.ReadInt());
                break;
            case 10:
                SetNFrames(buf.ReadInt());
                break;
            case 11:
                SetAnimationMode(buf.ReadInt());
                break;
            case 12:
                SetExecuting(buf.ReadBool());
                break;
            case 13:
                SetWindowLayout(buf.ReadInt());
                break;
            case 14:
                SetMakeDefaultConfirm(buf.ReadBool());
                break;
            case 15:
                SetViewKeyframes(buf.ReadIntVector());
                break;
            case 16:
                SetCloneWindowOnFirstRef(buf.ReadBool());
                break;
            case 17:
                SetMaintainView(buf.ReadBool());
                break;
            }
        }
    }


    // Attributes
    private Vector  windows; // vector of Integer objects
    private int     activeWindow;
    private boolean iconifiedFlag;
    private boolean autoUpdateFlag;
    private boolean replacePlots;
    private boolean applyOperator;
    private String  currentFile;
    private int     currentState;
    private int     nStates;
    private int     currentFrame;
    private int     nFrames;
    private int     animationMode;
    private boolean executing;
    private int     windowLayout;
    private boolean makeDefaultConfirm;
    private Vector  viewKeyframes; // vector of Integer objects
    private boolean cloneWindowOnFirstRef;
    private boolean maintainView;
}

