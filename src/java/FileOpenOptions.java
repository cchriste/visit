// ***************************************************************************
//
// Copyright (c) 2000 - 2008, Lawrence Livermore National Security, LLC
// Produced at the Lawrence Livermore National Laboratory
// LLNL-CODE-400142
// All rights reserved.
//
// This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
// full copyright notice is contained in the file COPYRIGHT located at the root
// of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
//
//  - Redistributions of  source code must  retain the above  copyright notice,
//    this list of conditions and the disclaimer below.
//  - Redistributions in binary form must reproduce the above copyright notice,
//    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
//    documentation and/or other materials provided with the distribution.
//  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
// ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
// LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
// DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
// SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
// CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
// LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
// OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ***************************************************************************

package llnl.visit;

import java.util.Vector;
import java.lang.Integer;

// ****************************************************************************
// Class: FileOpenOptions
//
// Purpose:
//    This class contains the file opening options for all the database plugins.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   Mon Feb 25 15:14:55 PST 2008
//
// Modifications:
//   
// ****************************************************************************

public class FileOpenOptions extends AttributeSubject
{
    public FileOpenOptions()
    {
        super(4);

        typeNames = new Vector();
        typeIDs = new Vector();
        openOptions = new Vector();
        Enabled = new Vector();
    }

    public FileOpenOptions(FileOpenOptions obj)
    {
        super(4);

        int i;

        typeNames = new Vector(obj.typeNames.size());
        for(i = 0; i < obj.typeNames.size(); ++i)
            typeNames.addElement(new String((String)obj.typeNames.elementAt(i)));

        typeIDs = new Vector(obj.typeIDs.size());
        for(i = 0; i < obj.typeIDs.size(); ++i)
            typeIDs.addElement(new String((String)obj.typeIDs.elementAt(i)));

        // *** Copy the openOptions field ***
        openOptions = new Vector(obj.openOptions.size());
        for(i = 0; i < obj.openOptions.size(); ++i)
        {
            DBOptionsAttributes newObj = (DBOptionsAttributes)openOptions.elementAt(i);
            openOptions.addElement(new DBOptionsAttributes(newObj));
        }

        Enabled = new Vector();
        for(i = 0; i < obj.Enabled.size(); ++i)
        {
            Integer iv = (Integer)obj.Enabled.elementAt(i);
            Enabled.addElement(new Integer(iv.intValue()));
        }

        SelectAll();
    }

    public boolean equals(FileOpenOptions obj)
    {
        int i;

        boolean openOptions_equal = (obj.openOptions.size() == openOptions.size());
        for(i = 0; (i < openOptions.size()) && openOptions_equal; ++i)
        {
            // Make references to DBOptionsAttributes from Object.
            DBOptionsAttributes openOptions1 = (DBOptionsAttributes)openOptions.elementAt(i);
            DBOptionsAttributes openOptions2 = (DBOptionsAttributes)obj.openOptions.elementAt(i);
            openOptions_equal = openOptions1.equals(openOptions2);
        }

        // Create the return value
        return ((typeNames == obj.typeNames) &&
                (typeIDs == obj.typeIDs) &&
                openOptions_equal &&
                (Enabled == obj.Enabled));
    }

    // Property setting methods
    public void SetTypeNames(Vector typeNames_)
    {
        typeNames = typeNames_;
        Select(0);
    }

    public void SetTypeIDs(Vector typeIDs_)
    {
        typeIDs = typeIDs_;
        Select(1);
    }

    public void SetEnabled(Vector Enabled_)
    {
        Enabled = Enabled_;
        Select(3);
    }

    // Property getting methods
    public Vector GetTypeNames() { return typeNames; }
    public Vector GetTypeIDs() { return typeIDs; }
    public Vector GetOpenOptions() { return openOptions; }
    public Vector GetEnabled() { return Enabled; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteStringVector(typeNames);
        if(WriteSelect(1, buf))
            buf.WriteStringVector(typeIDs);
        if(WriteSelect(2, buf))
        {
            buf.WriteInt(openOptions.size());
            for(int i = 0; i < openOptions.size(); ++i)
            {
                DBOptionsAttributes tmp = (DBOptionsAttributes)openOptions.elementAt(i);
                tmp.Write(buf);
            }
        }
        if(WriteSelect(3, buf))
            buf.WriteIntVector(Enabled);
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        for(int i = 0; i < n; ++i)
        {
            int index = (int)buf.ReadByte();
            switch(index)
            {
            case 0:
                SetTypeNames(buf.ReadStringVector());
                break;
            case 1:
                SetTypeIDs(buf.ReadStringVector());
                break;
            case 2:
                {
                    int len = buf.ReadInt();
                    openOptions.clear();
                    for(int j = 0; j < len; ++j)
                    {
                        DBOptionsAttributes tmp = new DBOptionsAttributes();
                        tmp.Read(buf);
                        openOptions.addElement(tmp);
                    }
                }
                Select(2);
                break;
            case 3:
                SetEnabled(buf.ReadIntVector());
                break;
            }
        }
    }

    public String toString(String indent)
    {
        String str = new String();
        str = str + stringVectorToString("typeNames", typeNames, indent) + "\n";
        str = str + stringVectorToString("typeIDs", typeIDs, indent) + "\n";
        str = str + indent + "openOptions = {\n";
        for(int i = 0; i < openOptions.size(); ++i)
        {
            AttributeSubject s = (AttributeSubject)openOptions.elementAt(i);
            str = str + s.toString(indent + "    ");
            if(i < openOptions.size()-1)
                str = str + ", ";
            str = str + "\n";
        }
        str = str + "}\n";
        str = str + intVectorToString("Enabled", Enabled, indent) + "\n";
        return str;
    }

    // Attributegroup convenience methods
    public void AddOpenOptions(DBOptionsAttributes obj)
    {
        openOptions.addElement(new DBOptionsAttributes(obj));
        Select(2);
    }

    public void ClearOpenOptions()
    {
        openOptions.clear();
        Select(2);
    }

    public void RemoveOpenOptions(int index)
    {
        if(index >= 0 && index < openOptions.size())
        {
            openOptions.remove(index);
            Select(2);
        }
    }

    public int GetNumOpenOptions()
    {
        return openOptions.size();
    }

    public DBOptionsAttributes GetOpenOptions(int i)
    {
        DBOptionsAttributes tmp = (DBOptionsAttributes)openOptions.elementAt(i);
        return tmp;
    }


    // Attributes
    private Vector typeNames; // vector of String objects
    private Vector typeIDs; // vector of String objects
    private Vector openOptions; // vector of DBOptionsAttributes objects
    private Vector Enabled; // vector of Integer objects
}

