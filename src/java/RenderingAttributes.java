package llnl.visit;


// ****************************************************************************
// Class: RenderingAttributes
//
// Purpose:
//    This class contains special rendering attributes like antialiasing and stero settings.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   Fri Nov 14 17:59:34 PST 2003
//
// Modifications:
//   
// ****************************************************************************

public class RenderingAttributes extends AttributeSubject
{
    // Constants
    public final static int GEOMETRYREPRESENTATION_SURFACES = 0;
    public final static int GEOMETRYREPRESENTATION_WIREFRAME = 1;
    public final static int GEOMETRYREPRESENTATION_POINTS = 2;

    public final static int STEREOTYPES_REDBLUE = 0;
    public final static int STEREOTYPES_INTERLACED = 1;
    public final static int STEREOTYPES_CRYSTALEYES = 2;

    public final static int DEFAULT_SCALABLE_THRESHOLD = 2000000;


    public RenderingAttributes()
    {
        super(12);

        antialiasing = false;
        geometryRepresentation = GEOMETRYREPRESENTATION_SURFACES;
        displayLists = true;
        stereoRendering = false;
        stereoType = STEREOTYPES_CRYSTALEYES;
        notifyForEachRender = false;
        scalableRendering = false;
        scalableThreshold = 2000000;
        specularFlag = false;
        specularCoeff = 0.6f;
        specularPower = 10f;
        specularColor = new ColorAttribute(255, 255, 255);
    }

    public RenderingAttributes(RenderingAttributes obj)
    {
        super(12);

        antialiasing = obj.antialiasing;
        geometryRepresentation = obj.geometryRepresentation;
        displayLists = obj.displayLists;
        stereoRendering = obj.stereoRendering;
        stereoType = obj.stereoType;
        notifyForEachRender = obj.notifyForEachRender;
        scalableRendering = obj.scalableRendering;
        scalableThreshold = obj.scalableThreshold;
        specularFlag = obj.specularFlag;
        specularCoeff = obj.specularCoeff;
        specularPower = obj.specularPower;
        specularColor = new ColorAttribute(obj.specularColor);

        SelectAll();
    }

    public boolean equals(RenderingAttributes obj)
    {
        // Create the return value
        return ((antialiasing == obj.antialiasing) &&
                (geometryRepresentation == obj.geometryRepresentation) &&
                (displayLists == obj.displayLists) &&
                (stereoRendering == obj.stereoRendering) &&
                (stereoType == obj.stereoType) &&
                (notifyForEachRender == obj.notifyForEachRender) &&
                (scalableRendering == obj.scalableRendering) &&
                (scalableThreshold == obj.scalableThreshold) &&
                (specularFlag == obj.specularFlag) &&
                (specularCoeff == obj.specularCoeff) &&
                (specularPower == obj.specularPower) &&
                (specularColor == obj.specularColor));
    }

    // Property setting methods
    public void SetAntialiasing(boolean antialiasing_)
    {
        antialiasing = antialiasing_;
        Select(0);
    }

    public void SetGeometryRepresentation(int geometryRepresentation_)
    {
        geometryRepresentation = geometryRepresentation_;
        Select(1);
    }

    public void SetDisplayLists(boolean displayLists_)
    {
        displayLists = displayLists_;
        Select(2);
    }

    public void SetStereoRendering(boolean stereoRendering_)
    {
        stereoRendering = stereoRendering_;
        Select(3);
    }

    public void SetStereoType(int stereoType_)
    {
        stereoType = stereoType_;
        Select(4);
    }

    public void SetNotifyForEachRender(boolean notifyForEachRender_)
    {
        notifyForEachRender = notifyForEachRender_;
        Select(5);
    }

    public void SetScalableRendering(boolean scalableRendering_)
    {
        scalableRendering = scalableRendering_;
        Select(6);
    }

    public void SetScalableThreshold(int scalableThreshold_)
    {
        scalableThreshold = scalableThreshold_;
        Select(7);
    }

    public void SetSpecularFlag(boolean specularFlag_)
    {
        specularFlag = specularFlag_;
        Select(8);
    }

    public void SetSpecularCoeff(float specularCoeff_)
    {
        specularCoeff = specularCoeff_;
        Select(9);
    }

    public void SetSpecularPower(float specularPower_)
    {
        specularPower = specularPower_;
        Select(10);
    }

    public void SetSpecularColor(ColorAttribute specularColor_)
    {
        specularColor = specularColor_;
        Select(11);
    }

    // Property getting methods
    public boolean        GetAntialiasing() { return antialiasing; }
    public int            GetGeometryRepresentation() { return geometryRepresentation; }
    public boolean        GetDisplayLists() { return displayLists; }
    public boolean        GetStereoRendering() { return stereoRendering; }
    public int            GetStereoType() { return stereoType; }
    public boolean        GetNotifyForEachRender() { return notifyForEachRender; }
    public boolean        GetScalableRendering() { return scalableRendering; }
    public int            GetScalableThreshold() { return scalableThreshold; }
    public boolean        GetSpecularFlag() { return specularFlag; }
    public float          GetSpecularCoeff() { return specularCoeff; }
    public float          GetSpecularPower() { return specularPower; }
    public ColorAttribute GetSpecularColor() { return specularColor; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteBool(antialiasing);
        if(WriteSelect(1, buf))
            buf.WriteInt(geometryRepresentation);
        if(WriteSelect(2, buf))
            buf.WriteBool(displayLists);
        if(WriteSelect(3, buf))
            buf.WriteBool(stereoRendering);
        if(WriteSelect(4, buf))
            buf.WriteInt(stereoType);
        if(WriteSelect(5, buf))
            buf.WriteBool(notifyForEachRender);
        if(WriteSelect(6, buf))
            buf.WriteBool(scalableRendering);
        if(WriteSelect(7, buf))
            buf.WriteInt(scalableThreshold);
        if(WriteSelect(8, buf))
            buf.WriteBool(specularFlag);
        if(WriteSelect(9, buf))
            buf.WriteFloat(specularCoeff);
        if(WriteSelect(10, buf))
            buf.WriteFloat(specularPower);
        if(WriteSelect(11, buf))
            specularColor.Write(buf);
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        for(int i = 0; i < n; ++i)
        {
            int index = (int)buf.ReadByte();
            switch(index)
            {
            case 0:
                SetAntialiasing(buf.ReadBool());
                break;
            case 1:
                SetGeometryRepresentation(buf.ReadInt());
                break;
            case 2:
                SetDisplayLists(buf.ReadBool());
                break;
            case 3:
                SetStereoRendering(buf.ReadBool());
                break;
            case 4:
                SetStereoType(buf.ReadInt());
                break;
            case 5:
                SetNotifyForEachRender(buf.ReadBool());
                break;
            case 6:
                SetScalableRendering(buf.ReadBool());
                break;
            case 7:
                SetScalableThreshold(buf.ReadInt());
                break;
            case 8:
                SetSpecularFlag(buf.ReadBool());
                break;
            case 9:
                SetSpecularCoeff(buf.ReadFloat());
                break;
            case 10:
                SetSpecularPower(buf.ReadFloat());
                break;
            case 11:
                specularColor.Read(buf);
                Select(11);
                break;
            }
        }
    }


    // Attributes
    private boolean        antialiasing;
    private int            geometryRepresentation;
    private boolean        displayLists;
    private boolean        stereoRendering;
    private int            stereoType;
    private boolean        notifyForEachRender;
    private boolean        scalableRendering;
    private int            scalableThreshold;
    private boolean        specularFlag;
    private float          specularCoeff;
    private float          specularPower;
    private ColorAttribute specularColor;
}

