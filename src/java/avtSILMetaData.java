// ***************************************************************************
//
// Copyright (c) 2000 - 2007, The Regents of the University of California
// Produced at the Lawrence Livermore National Laboratory
// All rights reserved.
//
// This file is part of VisIt. For details, see http://www.llnl.gov/visit/. The
// full copyright notice is contained in the file COPYRIGHT located at the root
// of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
//
//  - Redistributions of  source code must  retain the above  copyright notice,
//    this list of conditions and the disclaimer below.
//  - Redistributions in binary form must reproduce the above copyright notice,
//    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
//    documentation and/or materials provided with the distribution.
//  - Neither the name of the UC/LLNL nor  the names of its contributors may be
//    used to  endorse or  promote products derived from  this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
// ARE  DISCLAIMED.  IN  NO  EVENT  SHALL  THE  REGENTS  OF  THE  UNIVERSITY OF
// CALIFORNIA, THE U.S.  DEPARTMENT  OF  ENERGY OR CONTRIBUTORS BE  LIABLE  FOR
// ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
// SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
// CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
// LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
// OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ***************************************************************************

package llnl.visit;

import java.util.Vector;
import java.lang.Integer;

// ****************************************************************************
// Class: avtSILMetaData
//
// Purpose:
//    Contains SIL metadata attributes
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   Wed Mar 14 17:56:07 PST 2007
//
// Modifications:
//   
// ****************************************************************************

public class avtSILMetaData extends AttributeSubject
{
    public avtSILMetaData()
    {
        super(5);

        meshName = new String("mesh");
        collections = new Vector();
        classIds = new Vector();
        classIds.addElement(new Integer(0));
        classDisjointFlags = new Vector();
        theStorageChunkClassId = -1;
    }

    public avtSILMetaData(avtSILMetaData obj)
    {
        super(5);

        int i;

        meshName = new String(obj.meshName);
        // *** Copy the collections field ***
        collections = new Vector(obj.collections.size());
        for(i = 0; i < obj.collections.size(); ++i)
        {
            avtSILCollectionMetaData newObj = (avtSILCollectionMetaData)collections.elementAt(i);
            collections.addElement(new avtSILCollectionMetaData(newObj));
        }

        classIds = new Vector();
        for(i = 0; i < obj.classIds.size(); ++i)
        {
            Integer iv = (Integer)obj.classIds.elementAt(i);
            classIds.addElement(new Integer(iv.intValue()));
        }
        classDisjointFlags = new Vector();
        for(i = 0; i < obj.classDisjointFlags.size(); ++i)
        {
            Integer iv = (Integer)obj.classDisjointFlags.elementAt(i);
            classDisjointFlags.addElement(new Integer(iv.intValue()));
        }
        theStorageChunkClassId = obj.theStorageChunkClassId;

        SelectAll();
    }

    public boolean equals(avtSILMetaData obj)
    {
        int i;

        boolean collections_equal = (obj.collections.size() == collections.size());
        for(i = 0; (i < collections.size()) && collections_equal; ++i)
        {
            // Make references to avtSILCollectionMetaData from Object.
            avtSILCollectionMetaData collections1 = (avtSILCollectionMetaData)collections.elementAt(i);
            avtSILCollectionMetaData collections2 = (avtSILCollectionMetaData)obj.collections.elementAt(i);
            collections_equal = collections1.equals(collections2);
        }

        // Create the return value
        return ((meshName == obj.meshName) &&
                collections_equal &&
                (classIds == obj.classIds) &&
                (classDisjointFlags == obj.classDisjointFlags) &&
                (theStorageChunkClassId == obj.theStorageChunkClassId));
    }

    // Property setting methods
    public void SetMeshName(String meshName_)
    {
        meshName = meshName_;
        Select(0);
    }

    public void SetClassIds(Vector classIds_)
    {
        classIds = classIds_;
        Select(2);
    }

    public void SetClassDisjointFlags(Vector classDisjointFlags_)
    {
        classDisjointFlags = classDisjointFlags_;
        Select(3);
    }

    public void SetTheStorageChunkClassId(int theStorageChunkClassId_)
    {
        theStorageChunkClassId = theStorageChunkClassId_;
        Select(4);
    }

    // Property getting methods
    public String GetMeshName() { return meshName; }
    public Vector GetCollections() { return collections; }
    public Vector GetClassIds() { return classIds; }
    public Vector GetClassDisjointFlags() { return classDisjointFlags; }
    public int    GetTheStorageChunkClassId() { return theStorageChunkClassId; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteString(meshName);
        if(WriteSelect(1, buf))
        {
            buf.WriteInt(collections.size());
            for(int i = 0; i < collections.size(); ++i)
            {
                avtSILCollectionMetaData tmp = (avtSILCollectionMetaData)collections.elementAt(i);
                tmp.Write(buf);
            }
        }
        if(WriteSelect(2, buf))
            buf.WriteIntVector(classIds);
        if(WriteSelect(3, buf))
            buf.WriteIntVector(classDisjointFlags);
        if(WriteSelect(4, buf))
            buf.WriteInt(theStorageChunkClassId);
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        for(int i = 0; i < n; ++i)
        {
            int index = (int)buf.ReadByte();
            switch(index)
            {
            case 0:
                SetMeshName(buf.ReadString());
                break;
            case 1:
                {
                    int len = buf.ReadInt();
                    collections.clear();
                    for(int j = 0; j < len; ++j)
                    {
                        avtSILCollectionMetaData tmp = new avtSILCollectionMetaData();
                        tmp.Read(buf);
                        collections.addElement(tmp);
                    }
                }
                Select(1);
                break;
            case 2:
                SetClassIds(buf.ReadIntVector());
                break;
            case 3:
                SetClassDisjointFlags(buf.ReadIntVector());
                break;
            case 4:
                SetTheStorageChunkClassId(buf.ReadInt());
                break;
            }
        }
    }

    // Attributegroup convenience methods
    public void AddCollections(avtSILCollectionMetaData obj)
    {
        collections.addElement(new avtSILCollectionMetaData(obj));
        Select(1);
    }

    public void ClearCollections()
    {
        collections.clear();
        Select(1);
    }

    public void RemoveCollections(int index)
    {
        if(index >= 0 && index < collections.size())
        {
            collections.remove(index);
            Select(1);
        }
    }

    public int GetNumCollections()
    {
        return collections.size();
    }

    public avtSILCollectionMetaData GetCollections(int i)
    {
        avtSILCollectionMetaData tmp = (avtSILCollectionMetaData)collections.elementAt(i);
        return tmp;
    }


    // Attributes
    private String meshName;
    private Vector collections; // vector of avtSILCollectionMetaData objects
    private Vector classIds; // vector of Integer objects
    private Vector classDisjointFlags; // vector of Integer objects
    private int    theStorageChunkClassId;
}

