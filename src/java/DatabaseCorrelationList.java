package llnl.visit;

import java.util.Vector;

// ****************************************************************************
// Class: DatabaseCorrelationList
//
// Purpose:
//    This class contains the database correlations that we know about.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   Fri Jan 23 14:13:33 PST 2004
//
// Modifications:
//   
// ****************************************************************************

public class DatabaseCorrelationList extends AttributeSubject
{
    public DatabaseCorrelationList()
    {
        super(1);

        correlations = new Vector();
    }

    public DatabaseCorrelationList(DatabaseCorrelationList obj)
    {
        super(1);

        int i;

        // *** Copy the correlations field ***
        correlations = new Vector(obj.correlations.size());
        for(i = 0; i < obj.correlations.size(); ++i)
        {
            DatabaseCorrelation newObj = (DatabaseCorrelation)correlations.elementAt(i);
            correlations.addElement(new DatabaseCorrelation(newObj));
        }


        SelectAll();
    }

    public boolean equals(DatabaseCorrelationList obj)
    {
        int i;

        boolean correlations_equal = (obj.correlations.size() == correlations.size());
        for(i = 0; (i < correlations.size()) && correlations_equal; ++i)
        {
            // Make references to DatabaseCorrelation from Object.
            DatabaseCorrelation correlations1 = (DatabaseCorrelation)correlations.elementAt(i);
            DatabaseCorrelation correlations2 = (DatabaseCorrelation)obj.correlations.elementAt(i);
            correlations_equal = correlations1.equals(correlations2);
        }

        // Create the return value
        return (correlations_equal);
    }

    // Property setting methods
    // Property getting methods
    public Vector GetCorrelations() { return correlations; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
        {
            buf.WriteInt(correlations.size());
            for(int i = 0; i < correlations.size(); ++i)
            {
                DatabaseCorrelation tmp = (DatabaseCorrelation)correlations.elementAt(i);
                tmp.Write(buf);
            }
        }
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        buf.ReadByte();
        {
            int len = buf.ReadInt();
            correlations.clear();
            for(int j = 0; j < len; ++j)
            {
                DatabaseCorrelation tmp = new DatabaseCorrelation();
                tmp.Read(buf);
                correlations.addElement(tmp);
            }
        }
        Select(0);
    }

    // Attributegroup convenience methods
    public void AddDatabaseCorrelation(DatabaseCorrelation obj)
    {
        correlations.addElement(new DatabaseCorrelation(obj));
        Select(0);
    }

    public void ClearDatabaseCorrelations()
    {
        correlations.clear();
        Select(0);
    }

    public void RemoveDatabaseCorrelation(int index)
    {
        if(index >= 0 && index < correlations.size())
        {
            correlations.remove(index);
            Select(0);
        }
    }

    public int GetNumDatabaseCorrelations()
    {
        return correlations.size();
    }

    public DatabaseCorrelation GetDatabaseCorrelation(int i)
    {
        DatabaseCorrelation tmp = (DatabaseCorrelation)correlations.elementAt(i);
        return tmp;
    }


    // Attributes
    private Vector correlations; // vector of DatabaseCorrelation objects
}

