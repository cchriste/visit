// ***************************************************************************
//
// Copyright (c) 2000 - 2016, Lawrence Livermore National Security, LLC
// Produced at the Lawrence Livermore National Laboratory
// LLNL-CODE-442911
// All rights reserved.
//
// This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
// full copyright notice is contained in the file COPYRIGHT located at the root
// of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
//
//  - Redistributions of  source code must  retain the above  copyright notice,
//    this list of conditions and the disclaimer below.
//  - Redistributions in binary form must reproduce the above copyright notice,
//    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
//    documentation and/or other materials provided with the distribution.
//  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
// ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
// LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
// DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
// SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
// CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
// LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
// OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ***************************************************************************

package llnl.visit;

import java.util.Vector;

// ****************************************************************************
// Class: SeedMeAttributes
//
// Purpose:
//    This class contains the attributes needed to interact with SeedMe.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   omitted
//
// Modifications:
//   
// ****************************************************************************

public class SeedMeAttributes extends AttributeSubject
{
    private static int SeedMeAttributes_numAdditionalAtts = 18;

    // Enum values
    public final static int COLLECTIONMODE_COLLECTION_NEW = 0;
    public final static int COLLECTIONMODE_COLLECTION_UPDATE = 1;

    public final static int SHARING_SHARING_PRIVATE = 0;
    public final static int SHARING_SHARING_GROUP = 1;
    public final static int SHARING_SHARING_PUBLIC = 2;


    public SeedMeAttributes()
    {
        super(SeedMeAttributes_numAdditionalAtts);

        collectionMode = COLLECTIONMODE_COLLECTION_NEW;
        collectionID = 0;
        sharing = SHARING_SHARING_PRIVATE;
        collectionTitle = new String("");
        collectionDescription = new String("");
        collectionCredits = new String("");
        collectionLicense = new String("");
        collectionKeyValue = new Vector();
        collectionTags = new Vector();
        overwriteFiles = false;
        uploadCurrentFile = true;
        currentTitle = new String("");
        currentDescription = new String("");
        uploadSequenceFile = true;
        sequenceTitle = new String("");
        sequenceDescription = new String("");
        createVideo = true;
        frameRate = 30;
    }

    public SeedMeAttributes(int nMoreFields)
    {
        super(SeedMeAttributes_numAdditionalAtts + nMoreFields);

        collectionMode = COLLECTIONMODE_COLLECTION_NEW;
        collectionID = 0;
        sharing = SHARING_SHARING_PRIVATE;
        collectionTitle = new String("");
        collectionDescription = new String("");
        collectionCredits = new String("");
        collectionLicense = new String("");
        collectionKeyValue = new Vector();
        collectionTags = new Vector();
        overwriteFiles = false;
        uploadCurrentFile = true;
        currentTitle = new String("");
        currentDescription = new String("");
        uploadSequenceFile = true;
        sequenceTitle = new String("");
        sequenceDescription = new String("");
        createVideo = true;
        frameRate = 30;
    }

    public SeedMeAttributes(SeedMeAttributes obj)
    {
        super(SeedMeAttributes_numAdditionalAtts);

        int i;

        collectionMode = obj.collectionMode;
        collectionID = obj.collectionID;
        sharing = obj.sharing;
        collectionTitle = new String(obj.collectionTitle);
        collectionDescription = new String(obj.collectionDescription);
        collectionCredits = new String(obj.collectionCredits);
        collectionLicense = new String(obj.collectionLicense);
        collectionKeyValue = new Vector(obj.collectionKeyValue.size());
        for(i = 0; i < obj.collectionKeyValue.size(); ++i)
            collectionKeyValue.addElement(new String((String)obj.collectionKeyValue.elementAt(i)));

        collectionTags = new Vector(obj.collectionTags.size());
        for(i = 0; i < obj.collectionTags.size(); ++i)
            collectionTags.addElement(new String((String)obj.collectionTags.elementAt(i)));

        overwriteFiles = obj.overwriteFiles;
        uploadCurrentFile = obj.uploadCurrentFile;
        currentTitle = new String(obj.currentTitle);
        currentDescription = new String(obj.currentDescription);
        uploadSequenceFile = obj.uploadSequenceFile;
        sequenceTitle = new String(obj.sequenceTitle);
        sequenceDescription = new String(obj.sequenceDescription);
        createVideo = obj.createVideo;
        frameRate = obj.frameRate;

        SelectAll();
    }

    public int Offset()
    {
        return super.Offset() + super.GetNumAdditionalAttributes();
    }

    public int GetNumAdditionalAttributes()
    {
        return SeedMeAttributes_numAdditionalAtts;
    }

    public boolean equals(SeedMeAttributes obj)
    {
        int i;

        // Compare the elements in the collectionKeyValue vector.
        boolean collectionKeyValue_equal = (obj.collectionKeyValue.size() == collectionKeyValue.size());
        for(i = 0; (i < collectionKeyValue.size()) && collectionKeyValue_equal; ++i)
        {
            // Make references to String from Object.
            String collectionKeyValue1 = (String)collectionKeyValue.elementAt(i);
            String collectionKeyValue2 = (String)obj.collectionKeyValue.elementAt(i);
            collectionKeyValue_equal = collectionKeyValue1.equals(collectionKeyValue2);
        }
        // Compare the elements in the collectionTags vector.
        boolean collectionTags_equal = (obj.collectionTags.size() == collectionTags.size());
        for(i = 0; (i < collectionTags.size()) && collectionTags_equal; ++i)
        {
            // Make references to String from Object.
            String collectionTags1 = (String)collectionTags.elementAt(i);
            String collectionTags2 = (String)obj.collectionTags.elementAt(i);
            collectionTags_equal = collectionTags1.equals(collectionTags2);
        }
        // Create the return value
        return ((collectionMode == obj.collectionMode) &&
                (collectionID == obj.collectionID) &&
                (sharing == obj.sharing) &&
                (collectionTitle.equals(obj.collectionTitle)) &&
                (collectionDescription.equals(obj.collectionDescription)) &&
                (collectionCredits.equals(obj.collectionCredits)) &&
                (collectionLicense.equals(obj.collectionLicense)) &&
                collectionKeyValue_equal &&
                collectionTags_equal &&
                (overwriteFiles == obj.overwriteFiles) &&
                (uploadCurrentFile == obj.uploadCurrentFile) &&
                (currentTitle.equals(obj.currentTitle)) &&
                (currentDescription.equals(obj.currentDescription)) &&
                (uploadSequenceFile == obj.uploadSequenceFile) &&
                (sequenceTitle.equals(obj.sequenceTitle)) &&
                (sequenceDescription.equals(obj.sequenceDescription)) &&
                (createVideo == obj.createVideo) &&
                (frameRate == obj.frameRate));
    }

    // Property setting methods
    public void SetCollectionMode(int collectionMode_)
    {
        collectionMode = collectionMode_;
        Select(0);
    }

    public void SetCollectionID(int collectionID_)
    {
        collectionID = collectionID_;
        Select(1);
    }

    public void SetSharing(int sharing_)
    {
        sharing = sharing_;
        Select(2);
    }

    public void SetCollectionTitle(String collectionTitle_)
    {
        collectionTitle = collectionTitle_;
        Select(3);
    }

    public void SetCollectionDescription(String collectionDescription_)
    {
        collectionDescription = collectionDescription_;
        Select(4);
    }

    public void SetCollectionCredits(String collectionCredits_)
    {
        collectionCredits = collectionCredits_;
        Select(5);
    }

    public void SetCollectionLicense(String collectionLicense_)
    {
        collectionLicense = collectionLicense_;
        Select(6);
    }

    public void SetCollectionKeyValue(Vector collectionKeyValue_)
    {
        collectionKeyValue = collectionKeyValue_;
        Select(7);
    }

    public void SetCollectionTags(Vector collectionTags_)
    {
        collectionTags = collectionTags_;
        Select(8);
    }

    public void SetOverwriteFiles(boolean overwriteFiles_)
    {
        overwriteFiles = overwriteFiles_;
        Select(9);
    }

    public void SetUploadCurrentFile(boolean uploadCurrentFile_)
    {
        uploadCurrentFile = uploadCurrentFile_;
        Select(10);
    }

    public void SetCurrentTitle(String currentTitle_)
    {
        currentTitle = currentTitle_;
        Select(11);
    }

    public void SetCurrentDescription(String currentDescription_)
    {
        currentDescription = currentDescription_;
        Select(12);
    }

    public void SetUploadSequenceFile(boolean uploadSequenceFile_)
    {
        uploadSequenceFile = uploadSequenceFile_;
        Select(13);
    }

    public void SetSequenceTitle(String sequenceTitle_)
    {
        sequenceTitle = sequenceTitle_;
        Select(14);
    }

    public void SetSequenceDescription(String sequenceDescription_)
    {
        sequenceDescription = sequenceDescription_;
        Select(15);
    }

    public void SetCreateVideo(boolean createVideo_)
    {
        createVideo = createVideo_;
        Select(16);
    }

    public void SetFrameRate(int frameRate_)
    {
        frameRate = frameRate_;
        Select(17);
    }

    // Property getting methods
    public int     GetCollectionMode() { return collectionMode; }
    public int     GetCollectionID() { return collectionID; }
    public int     GetSharing() { return sharing; }
    public String  GetCollectionTitle() { return collectionTitle; }
    public String  GetCollectionDescription() { return collectionDescription; }
    public String  GetCollectionCredits() { return collectionCredits; }
    public String  GetCollectionLicense() { return collectionLicense; }
    public Vector  GetCollectionKeyValue() { return collectionKeyValue; }
    public Vector  GetCollectionTags() { return collectionTags; }
    public boolean GetOverwriteFiles() { return overwriteFiles; }
    public boolean GetUploadCurrentFile() { return uploadCurrentFile; }
    public String  GetCurrentTitle() { return currentTitle; }
    public String  GetCurrentDescription() { return currentDescription; }
    public boolean GetUploadSequenceFile() { return uploadSequenceFile; }
    public String  GetSequenceTitle() { return sequenceTitle; }
    public String  GetSequenceDescription() { return sequenceDescription; }
    public boolean GetCreateVideo() { return createVideo; }
    public int     GetFrameRate() { return frameRate; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteInt(collectionMode);
        if(WriteSelect(1, buf))
            buf.WriteInt(collectionID);
        if(WriteSelect(2, buf))
            buf.WriteInt(sharing);
        if(WriteSelect(3, buf))
            buf.WriteString(collectionTitle);
        if(WriteSelect(4, buf))
            buf.WriteString(collectionDescription);
        if(WriteSelect(5, buf))
            buf.WriteString(collectionCredits);
        if(WriteSelect(6, buf))
            buf.WriteString(collectionLicense);
        if(WriteSelect(7, buf))
            buf.WriteStringVector(collectionKeyValue);
        if(WriteSelect(8, buf))
            buf.WriteStringVector(collectionTags);
        if(WriteSelect(9, buf))
            buf.WriteBool(overwriteFiles);
        if(WriteSelect(10, buf))
            buf.WriteBool(uploadCurrentFile);
        if(WriteSelect(11, buf))
            buf.WriteString(currentTitle);
        if(WriteSelect(12, buf))
            buf.WriteString(currentDescription);
        if(WriteSelect(13, buf))
            buf.WriteBool(uploadSequenceFile);
        if(WriteSelect(14, buf))
            buf.WriteString(sequenceTitle);
        if(WriteSelect(15, buf))
            buf.WriteString(sequenceDescription);
        if(WriteSelect(16, buf))
            buf.WriteBool(createVideo);
        if(WriteSelect(17, buf))
            buf.WriteInt(frameRate);
    }

    public void ReadAtts(int index, CommunicationBuffer buf)
    {
        switch(index)
        {
        case 0:
            SetCollectionMode(buf.ReadInt());
            break;
        case 1:
            SetCollectionID(buf.ReadInt());
            break;
        case 2:
            SetSharing(buf.ReadInt());
            break;
        case 3:
            SetCollectionTitle(buf.ReadString());
            break;
        case 4:
            SetCollectionDescription(buf.ReadString());
            break;
        case 5:
            SetCollectionCredits(buf.ReadString());
            break;
        case 6:
            SetCollectionLicense(buf.ReadString());
            break;
        case 7:
            SetCollectionKeyValue(buf.ReadStringVector());
            break;
        case 8:
            SetCollectionTags(buf.ReadStringVector());
            break;
        case 9:
            SetOverwriteFiles(buf.ReadBool());
            break;
        case 10:
            SetUploadCurrentFile(buf.ReadBool());
            break;
        case 11:
            SetCurrentTitle(buf.ReadString());
            break;
        case 12:
            SetCurrentDescription(buf.ReadString());
            break;
        case 13:
            SetUploadSequenceFile(buf.ReadBool());
            break;
        case 14:
            SetSequenceTitle(buf.ReadString());
            break;
        case 15:
            SetSequenceDescription(buf.ReadString());
            break;
        case 16:
            SetCreateVideo(buf.ReadBool());
            break;
        case 17:
            SetFrameRate(buf.ReadInt());
            break;
        }
    }

    public String toString(String indent)
    {
        String str = new String();
        str = str + indent + "collectionMode = ";
        if(collectionMode == COLLECTIONMODE_COLLECTION_NEW)
            str = str + "COLLECTIONMODE_COLLECTION_NEW";
        if(collectionMode == COLLECTIONMODE_COLLECTION_UPDATE)
            str = str + "COLLECTIONMODE_COLLECTION_UPDATE";
        str = str + "\n";
        str = str + intToString("collectionID", collectionID, indent) + "\n";
        str = str + indent + "sharing = ";
        if(sharing == SHARING_SHARING_PRIVATE)
            str = str + "SHARING_SHARING_PRIVATE";
        if(sharing == SHARING_SHARING_GROUP)
            str = str + "SHARING_SHARING_GROUP";
        if(sharing == SHARING_SHARING_PUBLIC)
            str = str + "SHARING_SHARING_PUBLIC";
        str = str + "\n";
        str = str + stringToString("collectionTitle", collectionTitle, indent) + "\n";
        str = str + stringToString("collectionDescription", collectionDescription, indent) + "\n";
        str = str + stringToString("collectionCredits", collectionCredits, indent) + "\n";
        str = str + stringToString("collectionLicense", collectionLicense, indent) + "\n";
        str = str + stringVectorToString("collectionKeyValue", collectionKeyValue, indent) + "\n";
        str = str + stringVectorToString("collectionTags", collectionTags, indent) + "\n";
        str = str + boolToString("overwriteFiles", overwriteFiles, indent) + "\n";
        str = str + boolToString("uploadCurrentFile", uploadCurrentFile, indent) + "\n";
        str = str + stringToString("currentTitle", currentTitle, indent) + "\n";
        str = str + stringToString("currentDescription", currentDescription, indent) + "\n";
        str = str + boolToString("uploadSequenceFile", uploadSequenceFile, indent) + "\n";
        str = str + stringToString("sequenceTitle", sequenceTitle, indent) + "\n";
        str = str + stringToString("sequenceDescription", sequenceDescription, indent) + "\n";
        str = str + boolToString("createVideo", createVideo, indent) + "\n";
        str = str + intToString("frameRate", frameRate, indent) + "\n";
        return str;
    }


    // Attributes
    private int     collectionMode;
    private int     collectionID;
    private int     sharing;
    private String  collectionTitle;
    private String  collectionDescription;
    private String  collectionCredits;
    private String  collectionLicense;
    private Vector  collectionKeyValue; // vector of String objects
    private Vector  collectionTags; // vector of String objects
    private boolean overwriteFiles;
    private boolean uploadCurrentFile;
    private String  currentTitle;
    private String  currentDescription;
    private boolean uploadSequenceFile;
    private String  sequenceTitle;
    private String  sequenceDescription;
    private boolean createVideo;
    private int     frameRate;
}

