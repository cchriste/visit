package llnl.visit;


// ****************************************************************************
// Class: WindowInformation
//
// Purpose:
//    This class contains the attributes that tell the button state of a viewer window.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   Wed May 21 07:28:17 PDT 2003
//
// Modifications:
//   
// ****************************************************************************

public class WindowInformation extends AttributeSubject
{
    public WindowInformation()
    {
        super(16);

        windowMode = 0;
        boundingBoxNavigate = true;
        spin = false;
        perspective = true;
        lockView = false;
        viewExtentsType = 0;
        viewDimension = 2;
        lastRenderMin = 0f;
        lastRenderAvg = 0f;
        lastRenderMax = 0f;
        numTriangles = 0;
        extents = new double[6];
        extents[0] = 0;
        extents[1] = 0;
        extents[2] = 0;
        extents[3] = 0;
        extents[4] = 0;
        extents[5] = 0;
        lockTools = false;
        lockTime = false;
        cameraViewMode = false;
        fullFrame = false;
    }

    public WindowInformation(WindowInformation obj)
    {
        super(16);

        int i;

        windowMode = obj.windowMode;
        boundingBoxNavigate = obj.boundingBoxNavigate;
        spin = obj.spin;
        perspective = obj.perspective;
        lockView = obj.lockView;
        viewExtentsType = obj.viewExtentsType;
        viewDimension = obj.viewDimension;
        lastRenderMin = obj.lastRenderMin;
        lastRenderAvg = obj.lastRenderAvg;
        lastRenderMax = obj.lastRenderMax;
        numTriangles = obj.numTriangles;
        extents = new double[6];
        for(i = 0; i < obj.extents.length; ++i)
            extents[i] = obj.extents[i];

        lockTools = obj.lockTools;
        lockTime = obj.lockTime;
        cameraViewMode = obj.cameraViewMode;
        fullFrame = obj.fullFrame;

        SelectAll();
    }

    public boolean equals(WindowInformation obj)
    {
        int i;

        // Compare the extents arrays.
        boolean extents_equal = true;
        for(i = 0; i < 6 && extents_equal; ++i)
            extents_equal = (extents[i] == obj.extents[i]);

        // Create the return value
        return ((windowMode == obj.windowMode) &&
                (boundingBoxNavigate == obj.boundingBoxNavigate) &&
                (spin == obj.spin) &&
                (perspective == obj.perspective) &&
                (lockView == obj.lockView) &&
                (viewExtentsType == obj.viewExtentsType) &&
                (viewDimension == obj.viewDimension) &&
                (lastRenderMin == obj.lastRenderMin) &&
                (lastRenderAvg == obj.lastRenderAvg) &&
                (lastRenderMax == obj.lastRenderMax) &&
                (numTriangles == obj.numTriangles) &&
                extents_equal &&
                (lockTools == obj.lockTools) &&
                (lockTime == obj.lockTime) &&
                (cameraViewMode == obj.cameraViewMode) &&
                (fullFrame == obj.fullFrame));
    }

    // Property setting methods
    public void SetWindowMode(int windowMode_)
    {
        windowMode = windowMode_;
        Select(0);
    }

    public void SetBoundingBoxNavigate(boolean boundingBoxNavigate_)
    {
        boundingBoxNavigate = boundingBoxNavigate_;
        Select(1);
    }

    public void SetSpin(boolean spin_)
    {
        spin = spin_;
        Select(2);
    }

    public void SetPerspective(boolean perspective_)
    {
        perspective = perspective_;
        Select(3);
    }

    public void SetLockView(boolean lockView_)
    {
        lockView = lockView_;
        Select(4);
    }

    public void SetViewExtentsType(int viewExtentsType_)
    {
        viewExtentsType = viewExtentsType_;
        Select(5);
    }

    public void SetViewDimension(int viewDimension_)
    {
        viewDimension = viewDimension_;
        Select(6);
    }

    public void SetLastRenderMin(float lastRenderMin_)
    {
        lastRenderMin = lastRenderMin_;
        Select(7);
    }

    public void SetLastRenderAvg(float lastRenderAvg_)
    {
        lastRenderAvg = lastRenderAvg_;
        Select(8);
    }

    public void SetLastRenderMax(float lastRenderMax_)
    {
        lastRenderMax = lastRenderMax_;
        Select(9);
    }

    public void SetNumTriangles(int numTriangles_)
    {
        numTriangles = numTriangles_;
        Select(10);
    }

    public void SetExtents(double[] extents_)
    {
        for(int i = 0; i < 6; ++i)
             extents[i] = extents_[i];
        Select(11);
    }

    public void SetLockTools(boolean lockTools_)
    {
        lockTools = lockTools_;
        Select(12);
    }

    public void SetLockTime(boolean lockTime_)
    {
        lockTime = lockTime_;
        Select(13);
    }

    public void SetCameraViewMode(boolean cameraViewMode_)
    {
        cameraViewMode = cameraViewMode_;
        Select(14);
    }

    public void SetFullFrame(boolean fullFrame_)
    {
        fullFrame = fullFrame_;
        Select(15);
    }

    // Property getting methods
    public int      GetWindowMode() { return windowMode; }
    public boolean  GetBoundingBoxNavigate() { return boundingBoxNavigate; }
    public boolean  GetSpin() { return spin; }
    public boolean  GetPerspective() { return perspective; }
    public boolean  GetLockView() { return lockView; }
    public int      GetViewExtentsType() { return viewExtentsType; }
    public int      GetViewDimension() { return viewDimension; }
    public float    GetLastRenderMin() { return lastRenderMin; }
    public float    GetLastRenderAvg() { return lastRenderAvg; }
    public float    GetLastRenderMax() { return lastRenderMax; }
    public int      GetNumTriangles() { return numTriangles; }
    public double[] GetExtents() { return extents; }
    public boolean  GetLockTools() { return lockTools; }
    public boolean  GetLockTime() { return lockTime; }
    public boolean  GetCameraViewMode() { return cameraViewMode; }
    public boolean  GetFullFrame() { return fullFrame; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteInt(windowMode);
        if(WriteSelect(1, buf))
            buf.WriteBool(boundingBoxNavigate);
        if(WriteSelect(2, buf))
            buf.WriteBool(spin);
        if(WriteSelect(3, buf))
            buf.WriteBool(perspective);
        if(WriteSelect(4, buf))
            buf.WriteBool(lockView);
        if(WriteSelect(5, buf))
            buf.WriteInt(viewExtentsType);
        if(WriteSelect(6, buf))
            buf.WriteInt(viewDimension);
        if(WriteSelect(7, buf))
            buf.WriteFloat(lastRenderMin);
        if(WriteSelect(8, buf))
            buf.WriteFloat(lastRenderAvg);
        if(WriteSelect(9, buf))
            buf.WriteFloat(lastRenderMax);
        if(WriteSelect(10, buf))
            buf.WriteInt(numTriangles);
        if(WriteSelect(11, buf))
            buf.WriteDoubleArray(extents);
        if(WriteSelect(12, buf))
            buf.WriteBool(lockTools);
        if(WriteSelect(13, buf))
            buf.WriteBool(lockTime);
        if(WriteSelect(14, buf))
            buf.WriteBool(cameraViewMode);
        if(WriteSelect(15, buf))
            buf.WriteBool(fullFrame);
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        for(int i = 0; i < n; ++i)
        {
            int index = (int)buf.ReadByte();
            switch(index)
            {
            case 0:
                SetWindowMode(buf.ReadInt());
                break;
            case 1:
                SetBoundingBoxNavigate(buf.ReadBool());
                break;
            case 2:
                SetSpin(buf.ReadBool());
                break;
            case 3:
                SetPerspective(buf.ReadBool());
                break;
            case 4:
                SetLockView(buf.ReadBool());
                break;
            case 5:
                SetViewExtentsType(buf.ReadInt());
                break;
            case 6:
                SetViewDimension(buf.ReadInt());
                break;
            case 7:
                SetLastRenderMin(buf.ReadFloat());
                break;
            case 8:
                SetLastRenderAvg(buf.ReadFloat());
                break;
            case 9:
                SetLastRenderMax(buf.ReadFloat());
                break;
            case 10:
                SetNumTriangles(buf.ReadInt());
                break;
            case 11:
                SetExtents(buf.ReadDoubleArray());
                break;
            case 12:
                SetLockTools(buf.ReadBool());
                break;
            case 13:
                SetLockTime(buf.ReadBool());
                break;
            case 14:
                SetCameraViewMode(buf.ReadBool());
                break;
            case 15:
                SetFullFrame(buf.ReadBool());
                break;
            }
        }
    }


    // Attributes
    private int      windowMode;
    private boolean  boundingBoxNavigate;
    private boolean  spin;
    private boolean  perspective;
    private boolean  lockView;
    private int      viewExtentsType;
    private int      viewDimension;
    private float    lastRenderMin;
    private float    lastRenderAvg;
    private float    lastRenderMax;
    private int      numTriangles;
    private double[] extents;
    private boolean  lockTools;
    private boolean  lockTime;
    private boolean  cameraViewMode;
    private boolean  fullFrame;
}

