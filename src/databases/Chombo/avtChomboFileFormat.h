// ************************************************************************* //
//                           avtChomboFileFormat.h                           //
// ************************************************************************* //

#ifndef AVT_Chombo_FILE_FORMAT_H
#define AVT_Chombo_FILE_FORMAT_H

#include <avtSTMDFileFormat.h>

#include <vector>

#include <hdf5.h>

struct {
  int i;
  int j;
} typedef intvect2d;

struct {
  int i;
  int j;
  int k;
} typedef intvect3d;

struct {
  intvect2d lo;
  intvect2d hi;
} typedef box2d;

struct{
  intvect3d lo;
  intvect3d hi;
} typedef box3d;

union
{
  box2d b2;
  box3d b3;
} typedef box;


// ****************************************************************************
//  Class: avtChomboFileFormat
//
//  Purpose:
//      Reads in Chombo files as a plugin to VisIt.
//
//  Programmer: childs -- generated by xml2avt
//  Creation:   Thu Jan 19 11:17:14 PDT 2006
//
// ****************************************************************************

class avtChomboFileFormat : public avtSTMDFileFormat
{
  public:
                       avtChomboFileFormat(const char *);
    virtual           ~avtChomboFileFormat();

    virtual const char    *GetType(void)   { return "Chombo"; };
    virtual void           FreeUpResources(void); 
    virtual void           ActivateTimestep(void);

    virtual vtkDataSet    *GetMesh(int, const char *);
    virtual vtkDataArray  *GetVar(int, const char *);
    virtual vtkDataArray  *GetVectorVar(int, const char *);

    virtual void           PopulateDatabaseMetaData(avtDatabaseMetaData *);
    virtual void          *GetAuxiliaryData(const char *var, int,
                                            const char *type, void *args,
                                            DestructorFunction &);
  
  protected:
    bool                   initializedReader;
    int                    dimension;
    hid_t                  file_handle;
    std::vector<std::string>  varnames;
    double                 dtime;
    int                    cycle;
    int                    max_level;
    int                    num_levels;
    std::vector<int>       patchesPerLevel;
    std::vector<int>       refinement_ratio;
    std::vector<double>    dx;

    std::vector<int>       lowI;
    std::vector<int>       hiI;
    std::vector<int>       lowJ;
    std::vector<int>       hiJ;
    std::vector<int>       lowK;
    std::vector<int>       hiK;

    void                   InitializeReader(void);
    void                   GetLevelAndLocalPatchNumber(int global_patch,
                                           int &level, int &local_patch) const;
    void                   CalculateDomainNesting(void);

    virtual int            GetCycle(void) { return cycle; };
    virtual double         GetTime(void) { return dtime; };
    virtual int            GetCycleFromFilename(const char *f) const;
};


#endif


