// ************************************************************************* //
//                            avtDuneFileFormat.h                           //
// ************************************************************************* //

#ifndef AVT_Dune_FILE_FORMAT_H
#define AVT_Dune_FILE_FORMAT_H

#include <avtMTSDFileFormat.h>

#include <vector>
#include <map>
#include <visitstream.h>

// ****************************************************************************
//  Class: avtDuneFileFormat
//
//  Purpose:
//      Reads in Dune files as a plugin to VisIt.
//
//  Programmer: dslone -- generated by xml2avt
//  Creation:   Wed Aug 31 17:26:34 PST 2005
//
//  Modified:
//      Fri Sep 16 09:20:59 PDT 2005
//          (DMS) - Added prototypes for material data [GetAuxiliaryData(), 
//                  GetMaterial()]. 
//                  Changed string_substr() prototype to return vector of
//                  tokens; changed name to get_tokens.
//                  Modest cleanups.

// ****************************************************************************

using std::string;
using std::vector;
using std::map;
using std::ifstream;
using std::streampos;

const int VECTOR_SIZE = 3;
const int TENSOR_SIZE = 4;
const string DEFAULT_DELIMITERS = " ,)\"";

class avtDuneFileFormat : public avtMTSDFileFormat
{
 public:
  avtDuneFileFormat(const char *);
  virtual           ~avtDuneFileFormat() {;};

  //
  // This is used to return unconvention data -- ranging from material
  // information to information about block connectivity.
  //
  virtual void      *GetAuxiliaryData(const char *var, int timestep,
                                      const char *type, void *args, 
                                      DestructorFunction &);
  //

  //
  // If you know the times and cycle numbers, overload this function.
  // Otherwise, VisIt will make up some reasonable ones for you.
  //
  virtual void        GetCycles(std::vector<int> &);
  virtual void        GetTimes(std::vector<double> &);
  //

  virtual int            GetNTimesteps(void);

  virtual const char    *GetType(void)   { return "Dune"; };
  virtual void           FreeUpResources(void); 

  virtual vtkDataSet    *GetMesh(int, const char *);
  virtual vtkDataArray  *GetVar(int, const char *);
  virtual vtkDataArray  *GetVectorVar(int, const char *);

 protected:
  // DATA MEMBERS

  string                  fname;           // file name
  int                     ntimes;          // number of plot times in file
  int                     nparticles;      // current number of particles
  vector<int>             species_list;    // particle material index
  vector<double>          radius;
  vector<double>          impulseTime;
  vector<double>          coordinates;
  vector<double>          velocities;
  vector<double>          impulseVelocities;
  vector<double>          totalVelocities;
  vector<double>          angularVelocities;
  // energy tensor not fully implemented in Dune yet
  vector<double>          energies;

  virtual void           PopulateDatabaseMetaData(avtDatabaseMetaData *, int);

  virtual void          *GetMaterial();

 private:
  enum fileTypes {
    UNKNOWN,
    LOADER,
    RESTART,
    TECPLOT,
    NONE
  };

  enum fileTypes          ftype;

  int                      lastTimestate;      // time index of last plot
  ifstream                 ifile;
  vector<streampos>        fpos;               // file location, per plot times
  vector<double>           times;              // Dune time, per ntimes
  vector<int>              cycles;             // Dune cycle number, per ntimes
  vector<int>              num_particles;      // number of particles, per ntimes
  vector<double>           mass;
  vector<string>           matnames;           // material names
  vector<string>           species_names;      // species names
  map<string, double>      density;            // density, per material
  map<string, string>      species_to_matname; // species name to material name table

  void ReadDuneData(const int);

  inline double fortranDoubleToCDouble(const string&);

  inline void get_tokens(const string& buffer, 
                         const string& start,
                         vector<string>& tokens,
                         const string& delimiters = DEFAULT_DELIMITERS);
  inline int MAX(const int a, const int b);
};

#endif
