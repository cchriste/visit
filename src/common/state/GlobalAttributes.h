#ifndef GLOBALATTRIBUTES_H
#define GLOBALATTRIBUTES_H
#include <state_exports.h>
#include <string>
#include <AttributeSubject.h>

// ****************************************************************************
// Class: GlobalAttributes
//
// Purpose:
//    This class contains attributes associated with the main window.
//
// Notes:      Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Tue May 20 13:39:52 PST 2003
//
// Modifications:
//   
// ****************************************************************************

class STATE_API GlobalAttributes : public AttributeSubject
{
public:
    GlobalAttributes();
    GlobalAttributes(const GlobalAttributes &obj);
    virtual ~GlobalAttributes();

    virtual void operator = (const GlobalAttributes &obj);
    virtual bool operator == (const GlobalAttributes &obj) const;
    virtual bool operator != (const GlobalAttributes &obj) const;

    virtual const std::string TypeName() const;
    virtual bool CopyAttributes(const AttributeGroup *);
    virtual AttributeSubject *CreateCompatible(const std::string &) const;

    // Property selection methods
    virtual void SelectAll();
    void SelectWindows();
    void SelectCurrentFile();
    void SelectViewKeyframes();

    // Property setting methods
    void SetWindows(const intVector &windows_);
    void SetActiveWindow(int activeWindow_);
    void SetIconifiedFlag(bool iconifiedFlag_);
    void SetAutoUpdateFlag(bool autoUpdateFlag_);
    void SetReplacePlots(bool replacePlots_);
    void SetApplyOperator(bool applyOperator_);
    void SetCurrentFile(const std::string &currentFile_);
    void SetCurrentState(int currentState_);
    void SetNStates(int nStates_);
    void SetCurrentFrame(int currentFrame_);
    void SetNFrames(int nFrames_);
    void SetAnimationMode(int animationMode_);
    void SetExecuting(bool executing_);
    void SetWindowLayout(int windowLayout_);
    void SetMakeDefaultConfirm(bool makeDefaultConfirm_);
    void SetViewKeyframes(const intVector &viewKeyframes_);
    void SetCloneWindowOnFirstRef(bool cloneWindowOnFirstRef_);
    void SetMaintainView(bool maintainView_);

    // Property getting methods
    const intVector   &GetWindows() const;
          intVector   &GetWindows();
    int               GetActiveWindow() const;
    bool              GetIconifiedFlag() const;
    bool              GetAutoUpdateFlag() const;
    bool              GetReplacePlots() const;
    bool              GetApplyOperator() const;
    const std::string &GetCurrentFile() const;
          std::string &GetCurrentFile();
    int               GetCurrentState() const;
    int               GetNStates() const;
    int               GetCurrentFrame() const;
    int               GetNFrames() const;
    int               GetAnimationMode() const;
    bool              GetExecuting() const;
    int               GetWindowLayout() const;
    bool              GetMakeDefaultConfirm() const;
    const intVector   &GetViewKeyframes() const;
          intVector   &GetViewKeyframes();
    bool              GetCloneWindowOnFirstRef() const;
    bool              GetMaintainView() const;

    // Persistence methods
    virtual bool CreateNode(DataNode *node, bool forceAdd);
    virtual void SetFromNode(DataNode *node);


    // Keyframing methods
    virtual std::string               GetFieldName(int index) const;
    virtual AttributeGroup::FieldType GetFieldType(int index) const;
    virtual std::string               GetFieldTypeName(int index) const;
    virtual bool                      FieldsEqual(int index, const AttributeGroup *rhs) const;

private:
    intVector   windows;
    int         activeWindow;
    bool        iconifiedFlag;
    bool        autoUpdateFlag;
    bool        replacePlots;
    bool        applyOperator;
    std::string currentFile;
    int         currentState;
    int         nStates;
    int         currentFrame;
    int         nFrames;
    int         animationMode;
    bool        executing;
    int         windowLayout;
    bool        makeDefaultConfirm;
    intVector   viewKeyframes;
    bool        cloneWindowOnFirstRef;
    bool        maintainView;
};

#endif
