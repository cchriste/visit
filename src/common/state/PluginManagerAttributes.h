#ifndef PLUGINMANAGERATTRIBUTES_H
#define PLUGINMANAGERATTRIBUTES_H
#include <state_exports.h>
#include <string>
#include <AttributeSubject.h>

// ****************************************************************************
// Class: PluginManagerAttributes
//
// Purpose:
//    This class contains attributes for managing plugins.
//
// Notes:      Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Wed Jul 23 11:31:12 PDT 2003
//
// Modifications:
//   
// ****************************************************************************

class STATE_API PluginManagerAttributes : public AttributeSubject
{
public:
    PluginManagerAttributes();
    PluginManagerAttributes(const PluginManagerAttributes &obj);
    virtual ~PluginManagerAttributes();

    virtual void operator = (const PluginManagerAttributes &obj);
    virtual bool operator == (const PluginManagerAttributes &obj) const;
    virtual bool operator != (const PluginManagerAttributes &obj) const;

    virtual const std::string TypeName() const;
    virtual bool CopyAttributes(const AttributeGroup *);
    virtual AttributeSubject *CreateCompatible(const std::string &) const;
    virtual AttributeSubject *NewInstance(bool) const;

    // Property selection methods
    virtual void SelectAll();
    void SelectName();
    void SelectType();
    void SelectVersion();
    void SelectId();
    void SelectEnabled();

    // Property setting methods
    void SetName(const stringVector &name_);
    void SetType(const stringVector &type_);
    void SetVersion(const stringVector &version_);
    void SetId(const stringVector &id_);
    void SetEnabled(const intVector &enabled_);

    // Property getting methods
    const stringVector &GetName() const;
          stringVector &GetName();
    const stringVector &GetType() const;
          stringVector &GetType();
    const stringVector &GetVersion() const;
          stringVector &GetVersion();
    const stringVector &GetId() const;
          stringVector &GetId();
    const intVector    &GetEnabled() const;
          intVector    &GetEnabled();

    // Persistence methods
    virtual bool CreateNode(DataNode *node, bool forceAdd);
    virtual void SetFromNode(DataNode *node);


    // Keyframing methods
    virtual std::string               GetFieldName(int index) const;
    virtual AttributeGroup::FieldType GetFieldType(int index) const;
    virtual std::string               GetFieldTypeName(int index) const;
    virtual bool                      FieldsEqual(int index, const AttributeGroup *rhs) const;

    // User-defined methods
    int GetIndexByID(const std::string &s);
    void AddPlugin(const std::string &n,const std::string &t,const std::string &v,const std::string &i);
    void RemovePlugin(const std::string &s);
private:
    stringVector name;
    stringVector type;
    stringVector version;
    stringVector id;
    intVector    enabled;
};

#endif
