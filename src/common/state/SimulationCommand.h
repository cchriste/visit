#ifndef SIMULATIONCOMMAND_H
#define SIMULATIONCOMMAND_H
#include <state_exports.h>
#include <string>
#include <AttributeSubject.h>

// ****************************************************************************
// Class: SimulationCommand
//
// Purpose:
//    Commands to control simulations
//
// Notes:      Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Tue Nov 2 11:32:19 PDT 2004
//
// Modifications:
//   
// ****************************************************************************

class STATE_API SimulationCommand : public AttributeSubject
{
public:
    enum Command
    {
        NoCommand,
        Pause,
        Step,
        Run
    };

    SimulationCommand();
    SimulationCommand(const SimulationCommand &obj);
    virtual ~SimulationCommand();

    virtual SimulationCommand& operator = (const SimulationCommand &obj);
    virtual bool operator == (const SimulationCommand &obj) const;
    virtual bool operator != (const SimulationCommand &obj) const;

    virtual const std::string TypeName() const;
    virtual bool CopyAttributes(const AttributeGroup *);
    virtual AttributeSubject *CreateCompatible(const std::string &) const;
    virtual AttributeSubject *NewInstance(bool) const;

    // Property selection methods
    virtual void SelectAll();

    // Property setting methods
    void SetCommandType(Command commandType_);

    // Property getting methods
    Command GetCommandType() const;

    // Enum conversion functions
    static std::string Command_ToString(Command);
    static bool Command_FromString(const std::string &, Command &);
protected:
    static std::string Command_ToString(int);
public:

    // Keyframing methods
    virtual std::string               GetFieldName(int index) const;
    virtual AttributeGroup::FieldType GetFieldType(int index) const;
    virtual std::string               GetFieldTypeName(int index) const;
    virtual bool                      FieldsEqual(int index, const AttributeGroup *rhs) const;

private:
    int commandType;
};

#endif
