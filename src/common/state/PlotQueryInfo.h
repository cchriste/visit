#ifndef PLOTQUERYINFO_H
#define PLOTQUERYINFO_H
#include <state_exports.h>
#include <string>
#include <AttributeSubject.h>

// ****************************************************************************
// Class: PlotQueryInfo
//
// Purpose:
//    This class is a .
//
// Notes:      Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Tue Feb 1 16:17:22 PST 2005
//
// Modifications:
//   
// ****************************************************************************

class STATE_API PlotQueryInfo : public AttributeSubject
{
public:
    enum ChangeType
    {
        None,
        Database,
        VarName,
        AddOp,
        OpAtts,
        PlotAtts,
        MoveOperator,
        RemoveOperator,
        RemoveAll,
        RemoveLast,
        CacheIndex
    };

    PlotQueryInfo();
    PlotQueryInfo(const PlotQueryInfo &obj);
    virtual ~PlotQueryInfo();

    virtual PlotQueryInfo& operator = (const PlotQueryInfo &obj);
    virtual bool operator == (const PlotQueryInfo &obj) const;
    virtual bool operator != (const PlotQueryInfo &obj) const;

    virtual const std::string TypeName() const;
    virtual bool CopyAttributes(const AttributeGroup *);
    virtual AttributeSubject *CreateCompatible(const std::string &) const;
    virtual AttributeSubject *NewInstance(bool) const;

    // Property selection methods
    virtual void SelectAll();

    // Property setting methods
    void SetChangeType(ChangeType changeType_);
    void SetOldFrameIndex(int oldFrameIndex_);
    void SetNewFrameIndex(int newFrameIndex_);

    // Property getting methods
    ChangeType GetChangeType() const;
    int GetOldFrameIndex() const;
    int GetNewFrameIndex() const;

    // Enum conversion functions
    static std::string ChangeType_ToString(ChangeType);
    static bool ChangeType_FromString(const std::string &, ChangeType &);
protected:
    static std::string ChangeType_ToString(int);
public:

    // Keyframing methods
    virtual std::string               GetFieldName(int index) const;
    virtual AttributeGroup::FieldType GetFieldType(int index) const;
    virtual std::string               GetFieldTypeName(int index) const;
    virtual bool                      FieldsEqual(int index, const AttributeGroup *rhs) const;

private:
    int changeType;
    int oldFrameIndex;
    int newFrameIndex;
};

#endif
