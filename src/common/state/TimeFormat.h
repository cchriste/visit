#ifndef TIMEFORMAT_H
#define TIMEFORMAT_H
#include <state_exports.h>
#include <string>
#include <AttributeSubject.h>

// ****************************************************************************
// Class: TimeFormat
//
// Purpose:
//    This class contains attributes that help VisIt format time.
//
// Notes:      Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Tue Oct 14 13:54:22 PST 2003
//
// Modifications:
//   
// ****************************************************************************

class STATE_API TimeFormat : public AttributeSubject
{
public:
    enum DisplayMode
    {
        Cycles,
        Times,
        CyclesAndTimes
    };

    TimeFormat();
    TimeFormat(const TimeFormat &obj);
    virtual ~TimeFormat();

    virtual void operator = (const TimeFormat &obj);
    virtual bool operator == (const TimeFormat &obj) const;
    virtual bool operator != (const TimeFormat &obj) const;

    virtual const std::string TypeName() const;
    virtual bool CopyAttributes(const AttributeGroup *);
    virtual AttributeSubject *CreateCompatible(const std::string &) const;
    virtual AttributeSubject *NewInstance(bool) const;

    // Property selection methods
    virtual void SelectAll();

    // Property setting methods
    void SetDisplayMode(DisplayMode displayMode_);
    void SetPrecision(int precision_);

    // Property getting methods
    DisplayMode GetDisplayMode() const;
    int GetPrecision() const;

    // Persistence methods
    virtual bool CreateNode(DataNode *node, bool forceAdd);
    virtual void SetFromNode(DataNode *node);

    // Enum conversion functions
    static std::string DisplayMode_ToString(DisplayMode);
    static bool DisplayMode_FromString(const std::string &, DisplayMode &);
protected:
    static std::string DisplayMode_ToString(int);
public:

    // Keyframing methods
    virtual std::string               GetFieldName(int index) const;
    virtual AttributeGroup::FieldType GetFieldType(int index) const;
    virtual std::string               GetFieldTypeName(int index) const;
    virtual bool                      FieldsEqual(int index, const AttributeGroup *rhs) const;

private:
    int displayMode;
    int precision;
};

#endif
