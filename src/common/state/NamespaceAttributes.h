#ifndef NAMESPACEATTRIBUTES_H
#define NAMESPACEATTRIBUTES_H
#include <state_exports.h>
#include <AttributeSubject.h>

// ****************************************************************************
// Class: NamespaceAttributes
//
// Purpose:
//    This class contain the information needed to represent a namespace.
//
// Notes:      Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Wed Jul 23 11:30:50 PDT 2003
//
// Modifications:
//   
// ****************************************************************************

class STATE_API NamespaceAttributes : public AttributeSubject
{
public:
    NamespaceAttributes();
    NamespaceAttributes(const NamespaceAttributes &obj);
    virtual ~NamespaceAttributes();

    virtual void operator = (const NamespaceAttributes &obj);
    virtual bool operator == (const NamespaceAttributes &obj) const;
    virtual bool operator != (const NamespaceAttributes &obj) const;

    virtual const std::string TypeName() const;
    virtual bool CopyAttributes(const AttributeGroup *);
    virtual AttributeSubject *CreateCompatible(const std::string &) const;
    virtual AttributeSubject *NewInstance(bool) const;

    // Property selection methods
    virtual void SelectAll();
    void SelectSubsets();

    // Property setting methods
    void SetType(int type_);
    void SetSubsets(const intVector &subsets_);
    void SetMin(int min_);
    void SetMax(int max_);

    // Property getting methods
    int             GetType() const;
    const intVector &GetSubsets() const;
          intVector &GetSubsets();
    int             GetMin() const;
    int             GetMax() const;

    // Persistence methods
    virtual bool CreateNode(DataNode *node, bool forceAdd);
    virtual void SetFromNode(DataNode *node);


    // Keyframing methods
    virtual std::string               GetFieldName(int index) const;
    virtual AttributeGroup::FieldType GetFieldType(int index) const;
    virtual std::string               GetFieldTypeName(int index) const;
    virtual bool                      FieldsEqual(int index, const AttributeGroup *rhs) const;

private:
    int       type;
    intVector subsets;
    int       min;
    int       max;
};

#endif
