#ifndef RESAMPLEATTRIBUTES_H
#define RESAMPLEATTRIBUTES_H
#include <state_exports.h>
#include <AttributeSubject.h>

// ****************************************************************************
// Class: ResampleAttributes
//
// Purpose:
//    This class contains attributes for the resample operator.
//
// Notes:      Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Wed Oct 1 14:54:38 PST 2003
//
// Modifications:
//   
// ****************************************************************************

class STATE_API ResampleAttributes : public AttributeSubject
{
public:
    ResampleAttributes();
    ResampleAttributes(const ResampleAttributes &obj);
    virtual ~ResampleAttributes();

    virtual void operator = (const ResampleAttributes &obj);
    virtual bool operator == (const ResampleAttributes &obj) const;
    virtual bool operator != (const ResampleAttributes &obj) const;

    virtual const std::string TypeName() const;
    virtual bool CopyAttributes(const AttributeGroup *);
    virtual AttributeSubject *CreateCompatible(const std::string &) const;
    virtual AttributeSubject *NewInstance(bool) const;

    // Property selection methods
    virtual void SelectAll();

    // Property setting methods
    void SetUseTargetVal(bool useTargetVal_);
    void SetTargetVal(int targetVal_);
    void SetWidth(int width_);
    void SetHeight(int height_);
    void SetDepth(int depth_);
    void SetPrefersPowersOfTwo(bool prefersPowersOfTwo_);
    void SetDefaultVal(float defaultVal_);

    // Property getting methods
    bool  GetUseTargetVal() const;
    int   GetTargetVal() const;
    int   GetWidth() const;
    int   GetHeight() const;
    int   GetDepth() const;
    bool  GetPrefersPowersOfTwo() const;
    float GetDefaultVal() const;

    // Persistence methods
    virtual bool CreateNode(DataNode *node, bool forceAdd);
    virtual void SetFromNode(DataNode *node);


    // Keyframing methods
    virtual std::string               GetFieldName(int index) const;
    virtual AttributeGroup::FieldType GetFieldType(int index) const;
    virtual std::string               GetFieldTypeName(int index) const;
    virtual bool                      FieldsEqual(int index, const AttributeGroup *rhs) const;

private:
    bool  useTargetVal;
    int   targetVal;
    int   width;
    int   height;
    int   depth;
    bool  prefersPowersOfTwo;
    float defaultVal;
};

#endif
