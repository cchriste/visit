#ifndef CONSTRUCTDDFATTRIBUTES_H
#define CONSTRUCTDDFATTRIBUTES_H
#include <string>
#include <AttributeSubject.h>

// ****************************************************************************
// Class: ConstructDDFAttributes
//
// Purpose:
//    Attributes for constructing DDFs
//
// Notes:      Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Sat Feb 25 13:51:43 PST 2006
//
// Modifications:
//   
// ****************************************************************************

class ConstructDDFAttributes : public AttributeSubject
{
public:
    enum BinningScheme
    {
        Uniform,
        Unknown
    };
    enum StatisticalOperator
    {
        Average,
        Minimum,
        Maximum,
        StandardDeviation,
        Variance,
        Percentile,
        Median,
        InterquartileRange,
        Sum
    };

    ConstructDDFAttributes();
    ConstructDDFAttributes(const ConstructDDFAttributes &obj);
    virtual ~ConstructDDFAttributes();

    virtual ConstructDDFAttributes& operator = (const ConstructDDFAttributes &obj);
    virtual bool operator == (const ConstructDDFAttributes &obj) const;
    virtual bool operator != (const ConstructDDFAttributes &obj) const;

    virtual const std::string TypeName() const;
    virtual bool CopyAttributes(const AttributeGroup *);
    virtual AttributeSubject *CreateCompatible(const std::string &) const;
    virtual AttributeSubject *NewInstance(bool) const;

    // Property selection methods
    virtual void SelectAll();
    void SelectDdfName();
    void SelectVarnames();
    void SelectRanges();
    void SelectCodomainName();
    void SelectNumSamples();

    // Property setting methods
    void SetDdfName(const std::string &ddfName_);
    void SetVarnames(const stringVector &varnames_);
    void SetRanges(const doubleVector &ranges_);
    void SetCodomainName(const std::string &codomainName_);
    void SetStatisticalOperator(StatisticalOperator statisticalOperator_);
    void SetPercentile(double percentile_);
    void SetUndefinedValue(double undefinedValue_);
    void SetBinningScheme(BinningScheme binningScheme_);
    void SetNumSamples(const intVector &numSamples_);
    void SetOverTime(bool overTime_);
    void SetTimeStart(int timeStart_);
    void SetTimeEnd(int timeEnd_);
    void SetTimeStride(int timeStride_);

    // Property getting methods
    const std::string  &GetDdfName() const;
          std::string  &GetDdfName();
    const stringVector &GetVarnames() const;
          stringVector &GetVarnames();
    const doubleVector &GetRanges() const;
          doubleVector &GetRanges();
    const std::string  &GetCodomainName() const;
          std::string  &GetCodomainName();
    StatisticalOperator GetStatisticalOperator() const;
    double             GetPercentile() const;
    double             GetUndefinedValue() const;
    BinningScheme      GetBinningScheme() const;
    const intVector    &GetNumSamples() const;
          intVector    &GetNumSamples();
    bool               GetOverTime() const;
    int                GetTimeStart() const;
    int                GetTimeEnd() const;
    int                GetTimeStride() const;

    // Persistence methods
    virtual bool CreateNode(DataNode *node, bool completeSave, bool forceAdd);
    virtual void SetFromNode(DataNode *node);

    // Enum conversion functions
    static std::string BinningScheme_ToString(BinningScheme);
    static bool BinningScheme_FromString(const std::string &, BinningScheme &);
protected:
    static std::string BinningScheme_ToString(int);
public:
    static std::string StatisticalOperator_ToString(StatisticalOperator);
    static bool StatisticalOperator_FromString(const std::string &, StatisticalOperator &);
protected:
    static std::string StatisticalOperator_ToString(int);
public:

    // Keyframing methods
    virtual std::string               GetFieldName(int index) const;
    virtual AttributeGroup::FieldType GetFieldType(int index) const;
    virtual std::string               GetFieldTypeName(int index) const;
    virtual bool                      FieldsEqual(int index, const AttributeGroup *rhs) const;

private:
    std::string  ddfName;
    stringVector varnames;
    doubleVector ranges;
    std::string  codomainName;
    int          statisticalOperator;
    double       percentile;
    double       undefinedValue;
    int          binningScheme;
    intVector    numSamples;
    bool         overTime;
    int          timeStart;
    int          timeEnd;
    int          timeStride;
};

#endif
