Function: operator[]
Declaration: Expression *operator[](const char *);
Definition:
// Modifications:
//   Brad Whitlock, Thu Aug 28 15:29:59 PST 2003
//   Simplified and removed dynamic_cast so it works on Windows.
//
Expression*
ExpressionList::operator[](const char *varname)
{   
    // Check to see if there is an expression of this name.
    std::string var(varname);
    for (int i = 0; i < GetNumExpressions(); ++i)
    {
        Expression *e = (Expression*)expressions[i];
        if (e->GetName() == var)
            return e;
    }

    return 0;
}

Function: CreateNode
Declaration: virtual bool CreateNode(DataNode *parentNode, bool completeSave, bool forceAdd);
Definition:
// ****************************************************************************
// Method: ExpressionList::CreateNode
//
// Purpose: 
//   This method creates a DataNode representation of the object so it can be saved to a config file.
//
// Note:       Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Thu Dec 18 11:24:07 PDT 2003
//
// Modifications:
//   
// ****************************************************************************

bool
ExpressionList::CreateNode(DataNode *parentNode, bool completeSave, bool forceAdd)
{
    if(parentNode == 0)
        return false;

    ExpressionList defaultObject;
    bool addToParent = false;
    // Create a node for ExpressionList.
    DataNode *node = new DataNode("ExpressionList");

    if(completeSave || !FieldsEqual(0, &defaultObject))
    {
        for(int i = 0; i < expressions.size(); ++i)
        {
            Expression *expr = (Expression *)expressions[i];
            if(!expr->GetFromDB())
            {
                addToParent = true;
                expr->CreateNode(node, completeSave, true);
            }
        }
    }

    // Add the node to the parent node.
    if(addToParent || forceAdd)
        parentNode->AddNode(node);
    else
        delete node;

    return (addToParent || forceAdd);
}

