Function: AddQuery
Declaration: void AddQuery(const std::string &name, QueryType t, CoordinateRepresentation rep = WorldSpace, int number_input = 1, int allowedVars = 0);
Definition:
// ****************************************************************************
//  Method:  AddQuery
//
//  Purpose:
//    Adds a query to the query list.
//
//  Programmer:  Brad Whitlock
//  Creation:    Mon Sep 9 15:45:37 PST 2002
//
//  Modifications:
//
//    Hank Childs, Thu Oct  2 13:40:16 PDT 2003
//    Add number of inputs.
//
//    Kathleen Bonnell,  Tue Nov 18 08:20:36 PST 2003 
//    Set default window type based on query type. 
//
// ****************************************************************************
 
void
QueryList::AddQuery(const std::string &name, QueryList::QueryType t,
    QueryList::CoordinateRepresentation rep, int number_input, int allowedVars)
{
    names.push_back(name);
    types.push_back((int)t);
    coordRep.push_back((int)rep);
    numInputs.push_back(number_input);
    allowedVarTypes.push_back(allowedVars);
    timeQuery.push_back(0);

    //
    //  This will be set by user selecting a button, if WindowType is 
    //  CurrentPlot or CurrentPlotVars.  Otherwise, it doesn't make sense, so 
    //  just set it to 0.
    //
    actualData.push_back(0);

    //
    //  Default window type for each query type.  If a query needs a different
    //  window, it can be set via SetWindowType.
    //
    if (t == QueryList::DatabaseQuery)
    {
        winType.push_back((int)QueryList::Basic);
    }
    else if (t == QueryList::PointQuery)
    {
        winType.push_back((int)QueryList::SinglePoint);
    }
    else if (t == QueryList::LineQuery)
    {
        winType.push_back((int)QueryList::DoublePoint);
    }
}

Function: QueryExists
Declaration: bool QueryExists(const std::string &name, QueryType t, CoordinateRepresentation rep = WorldSpace);
Definition:
// ****************************************************************************
//  Method:  QueryExists
//
//  Purpose:
//    Checks if a query matches the passed parameters. 
//
//  Programmer:  Kathleen Bonnell 
//  Creation:    July 11, 2003 
//
// ****************************************************************************
 
bool
QueryList::QueryExists(const std::string &name, QueryList::QueryType t,
    QueryList::CoordinateRepresentation rep)
{
    int i;
    bool match = false;
    for (i = 0; i < names.size(); i++)
    {
        if (name == names[i]) 
        {
            if (t == types[i] && rep == coordRep[i])
            {
                match = true;
            }
            break;
        }
    }
    return match;
}

Function: NumberOfInputsForQuery
Declaration: int NumberOfInputsForQuery(const std::string &name);
Definition:
// ****************************************************************************
//  Method:  NumberOfInputsForQuery
//
//  Purpose:
//      Returns the number of inputs for a query.
//
//  Programmer:  Hank Childs
//  Creation:    October 2, 2003
//
// ****************************************************************************
 
int
QueryList::NumberOfInputsForQuery(const std::string &name)
{
    int i;
    for (i = 0; i < names.size(); i++)
    {
        if (name == names[i]) 
        {
            return numInputs[i];
        }
    }
    return -1;
}

Function: AllowedVarsForQuery
Declaration: int AllowedVarsForQuery(const std::string &name);
Definition:
// ****************************************************************************
//  Method:  AllowedVarsForQuery
//
//  Purpose:
//      Returns the number of inputs for a query.
//
//  Programmer:  Kathleen Bonnell 
//  Creation:    November 18, 2003 
//
// ****************************************************************************
 
int
QueryList::AllowedVarsForQuery(const std::string &name)
{
    int i;
    for (i = 0; i < names.size(); i++)
    {
        if (name == names[i]) 
        {
            return allowedVarTypes[i];
        }
    }
    return -1;
}

Function: UseActualData
Declaration: int UseActualData(const std::string &name);
Definition:
// ****************************************************************************
//  Method:  UseActualData
//
//  Purpose:
//      Returns whether or not this query applies only to the actual data. 
//
//  Programmer:  Kathleen Bonnell 
//  Creation:    November 25, 2003 
//
// ****************************************************************************
 
int
QueryList::UseActualData(const std::string &name)
{
    int i;
    for (i = 0; i < names.size(); i++)
    {
        if (name == names[i]) 
        {
            return actualData[i];
        }
    }
    return -1;
}

Function: SetWindowType
Declaration: void SetWindowType(const std::string &name, WindowType winT);
Definition:
// ****************************************************************************
//  Method:  SetWindowType
//
//  Purpose:
//      Sets the window type to use for the particular query. 
//
//  Programmer:  Kathleen Bonnell 
//  Creation:    November 18, 2003 
//
// ****************************************************************************
 
void
QueryList::SetWindowType(const std::string &name, WindowType winT)
{
    int i;
    for (i = 0; i < names.size(); i++)
    {
        if (name == names[i]) 
        {
            winType[i] = (int)winT;
        }
    }
}

Function: AddTimeQuery
Declaration: void AddTimeQuery(const std::string &name, QueryType t, CoordinateRepresentation rep = WorldSpace, int number_input = 1, int allowedVars = 0);
Definition:
// ****************************************************************************
//  Method:  AddTimeQuery
//
//  Purpose:
//    Adds a time query to the query list.
//
//  Programmer:  Kathleen Bonnell
//  Creation:    March 22, 2004
//
//  Modifications:
//
// ****************************************************************************
 
void
QueryList::AddTimeQuery(const std::string &name, QueryList::QueryType t,
    QueryList::CoordinateRepresentation rep, int number_input, int allowedVars)
{
    AddQuery(name, t, rep, number_input, allowedVars);

    timeQuery[timeQuery.size()-1] = 1;
}

Function: TimeQueryAvailable
Declaration:  bool TimeQueryAvailable(const std::string &name) ;
Definition:
// ****************************************************************************
//  Method:  TimeQueryAvailable
//
//  Purpose:
//    Checks if a query matches the passed parameters. 
//
//  Programmer:  Kathleen Bonnell 
//  Creation:    March 23, 2004 
//
// ****************************************************************************
 
bool
QueryList::TimeQueryAvailable(const std::string &name)
{
    int i;
    bool canDoTime = false;
    for (i = 0; i < names.size(); i++)
    {
        if (name == names[i]) 
        {
            canDoTime = timeQuery[i];
            break;
        }
    }
    return canDoTime;
}

