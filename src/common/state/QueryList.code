Function: AddQuery
Declaration: void AddQuery(const std::string &name, QueryType t, Groups g, CoordinateRepresentation r, WindowType w, int num_input, int allowedVars, bool timeQ); 
Definition:
// ****************************************************************************
//  Method:  AddQuery
//
//  Purpose:
//    Adds a query to the query list.
//
//  Programmer:  Brad Whitlock
//  Creation:    Mon Sep 9 15:45:37 PST 2002
//
//  Modifications:
//
//    Hank Childs, Thu Oct  2 13:40:16 PDT 2003
//    Add number of inputs.
//
//    Kathleen Bonnell,  Tue Nov 18 08:20:36 PST 2003 
//    Set default window type based on query type. 
//
//    Kathleen Bonnell,  Sat Sep  4 11:41:18 PDT 2004 
//    Made all parameters required, added Groups. 
//
// ****************************************************************************
 
void
QueryList::AddQuery(const std::string &name, QueryType t, Groups g, CoordinateRepresentation r, WindowType w, int num_input, int allowedVars, bool timeQ)
{
    names.push_back(name);
    types.push_back((int)t);
    groups.push_back((int)g);
    coordRep.push_back((int)r);
    numInputs.push_back(num_input);
    allowedVarTypes.push_back(allowedVars);
    timeQuery.push_back((int)timeQ);
    winType.push_back((int)w);
}

Function: QueryExists
Declaration: bool QueryExists(const std::string &name, QueryType t, CoordinateRepresentation rep = WorldSpace);
Definition:
// ****************************************************************************
//  Method:  QueryExists
//
//  Purpose:
//    Checks if a query matches the passed parameters. 
//
//  Programmer:  Kathleen Bonnell 
//  Creation:    July 11, 2003 
//
// ****************************************************************************
 
bool
QueryList::QueryExists(const std::string &name, QueryType t,
    CoordinateRepresentation rep)
{
    int i;
    bool match = false;
    for (i = 0; i < names.size(); i++)
    {
        if (name == names[i]) 
        {
            if (t == types[i] && rep == coordRep[i])
            {
                match = true;
            }
            break;
        }
    }
    return match;
}

Function: NumberOfInputsForQuery
Declaration: int NumberOfInputsForQuery(const std::string &name);
Definition:
// ****************************************************************************
//  Method:  NumberOfInputsForQuery
//
//  Purpose:
//      Returns the number of inputs for a query.
//
//  Programmer:  Hank Childs
//  Creation:    October 2, 2003
//
// ****************************************************************************
 
int
QueryList::NumberOfInputsForQuery(const std::string &name)
{
    int i;
    for (i = 0; i < names.size(); i++)
    {
        if (name == names[i]) 
        {
            return numInputs[i];
        }
    }
    return -1;
}

Function: AllowedVarsForQuery
Declaration: int AllowedVarsForQuery(const std::string &name);
Definition:
// ****************************************************************************
//  Method:  AllowedVarsForQuery
//
//  Purpose:
//      Returns the number of inputs for a query.
//
//  Programmer:  Kathleen Bonnell 
//  Creation:    November 18, 2003 
//
// ****************************************************************************
 
int
QueryList::AllowedVarsForQuery(const std::string &name)
{
    int i;
    for (i = 0; i < names.size(); i++)
    {
        if (name == names[i]) 
        {
            return allowedVarTypes[i];
        }
    }
    return -1;
}

Function: TimeQueryAvailable
Declaration:  bool TimeQueryAvailable(const std::string &name) ;
Definition:
// ****************************************************************************
//  Method:  TimeQueryAvailable
//
//  Purpose:
//    Checks if a query matches the passed parameters. 
//
//  Programmer:  Kathleen Bonnell 
//  Creation:    March 23, 2004 
//
// ****************************************************************************
 
bool
QueryList::TimeQueryAvailable(const std::string &name)
{
    int i;
    bool canDoTime = false;
    for (i = 0; i < names.size(); i++)
    {
        if (name == names[i]) 
        {
            canDoTime = timeQuery[i];
            break;
        }
    }
    return canDoTime;
}

