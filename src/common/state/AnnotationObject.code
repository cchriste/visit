Function: SetFontFamily
Declaration: void SetFontFamily(int family);
Definition:
void
AnnotationObject::SetFontFamily(int family)
{
   if(family >= 0 && family < 3)
       SetFontProperties((fontProperties & (~3)) | family);
}

Function: GetFontFamily
Declaration: int GetFontFamily() const;
Definition:
int
AnnotationObject::GetFontFamily() const
{
   return fontProperties & 3;
}

Function: SetFontBold
Declaration: void SetFontBold(bool val);
Definition:
void
AnnotationObject::SetFontBold(bool val)
{
    SetFontProperties((fontProperties & (~4)) | ((val?1:0)<<2));
}

Function: GetFontBold
Declaration: bool GetFontBold() const;
Definition:
bool
AnnotationObject::GetFontBold() const
{
    return ((fontProperties & 4) >> 2) == 1;
}

Function: SetFontItalic
Declaration: void SetFontItalic(bool val);
Definition:
void
AnnotationObject::SetFontItalic(bool val)
{
    SetFontProperties((fontProperties & (~8)) | ((val?1:0) << 3));
}

Function: GetFontItalic
Declaration: bool GetFontItalic() const;
Definition:
bool
AnnotationObject::GetFontItalic() const
{
    return ((fontProperties & 8) >> 3) == 1;
}

Function: SetFontShadow
Declaration: void SetFontShadow(bool val);
Definition:
void
AnnotationObject::SetFontShadow(bool val)
{
    SetFontProperties((fontProperties & (~16)) | ((val?1:0) << 4));
}

Function: GetFontShadow
Declaration: bool GetFontShadow() const;
Definition:
bool
AnnotationObject::GetFontShadow() const
{
   return ((fontProperties & 16) >> 4) == 1;
}

Function: SetFromNode
Declaration: virtual void SetFromNode(DataNode *parentNode);
Definition:
// ****************************************************************************
// Method: AnnotationObject::SetFromNode
//
// Purpose: 
//   This method sets attributes in this object from values in a DataNode 
//    representation of the object.
//
// Note:       Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Fri Mar 17 14:44:33 PST 2006
//
// Modifications:
//   Kathleen Bonnell, Fri Mar 31 14:14:25 PST 2006
//   Handle the case where the parentNode saved postion as float instead
//   of double.
//   
// ****************************************************************************

void
AnnotationObject::SetFromNode(DataNode *parentNode)
{
    int i;
    if(parentNode == 0)
        return;

    DataNode *searchNode = parentNode->GetNode("AnnotationObject");
    if(searchNode == 0)
        return;

    DataNode *node;
    if((node = searchNode->GetNode("objectType")) != 0)
    {
        // Allow enums to be int or string in the config file
        if(node->GetNodeType() == INT_NODE)
        {
            int ival = node->AsInt();
            if(ival >= 0 && ival < 8)
                SetObjectType(AnnotationType(ival));
        }
        else if(node->GetNodeType() == STRING_NODE)
        {
            AnnotationType value;
            if(AnnotationType_FromString(node->AsString(), value))
                SetObjectType(value);
        }
    }
    if((node = searchNode->GetNode("visible")) != 0)
        SetVisible(node->AsBool());
    if((node = searchNode->GetNode("active")) != 0)
        SetActive(node->AsBool());
    if((node = searchNode->GetNode("position")) != 0)
    {
        if(node->GetNodeType() == FLOAT_ARRAY_NODE)
        {
            const float *fn = node->AsFloatArray();
            double dp[3] = {fn[0], fn[1], fn[2]};
            SetPosition(dp);
        }
        else
            SetPosition(node->AsDoubleArray());
    }
    if((node = searchNode->GetNode("position2")) != 0)
    {
        if(node->GetNodeType() == FLOAT_ARRAY_NODE)
        {
            const float *fn = node->AsFloatArray();
            double dp[3] = {fn[0], fn[1], fn[2]};
            SetPosition2(dp);
        }
        else
            SetPosition2(node->AsDoubleArray());
    }
    if((node = searchNode->GetNode("textColor")) != 0)
        textColor.SetFromNode(node);
    if((node = searchNode->GetNode("useForegroundForTextColor")) != 0)
        SetUseForegroundForTextColor(node->AsBool());
    if((node = searchNode->GetNode("color1")) != 0)
        color1.SetFromNode(node);
    if((node = searchNode->GetNode("color2")) != 0)
        color2.SetFromNode(node);
    if((node = searchNode->GetNode("text")) != 0)
        SetText(node->AsStringVector());
    if((node = searchNode->GetNode("fontFamily")) != 0)
    {
        // Allow enums to be int or string in the config file
        if(node->GetNodeType() == INT_NODE)
        {
            int ival = node->AsInt();
            if(ival >= 0 && ival < 3)
                SetFontFamily(FontFamily(ival));
        }
        else if(node->GetNodeType() == STRING_NODE)
        {
            FontFamily value;
            if(FontFamily_FromString(node->AsString(), value))
                SetFontFamily(value);
        }
    }
    if((node = searchNode->GetNode("fontBold")) != 0)
        SetFontBold(node->AsBool());
    if((node = searchNode->GetNode("fontItalic")) != 0)
        SetFontItalic(node->AsBool());
    if((node = searchNode->GetNode("fontShadow")) != 0)
        SetFontShadow(node->AsBool());
    if((node = searchNode->GetNode("floatAttribute1")) != 0)
        SetDoubleAttribute1(node->AsDouble());
    if((node = searchNode->GetNode("doubleAttribute1")) != 0)
        SetDoubleAttribute1(node->AsDouble());
    if((node = searchNode->GetNode("intAttribute1")) != 0)
        SetIntAttribute1(node->AsInt());
}

