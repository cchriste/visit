#ifndef CLIENTINFORMATIONLIST_H
#define CLIENTINFORMATIONLIST_H
#include <state_exports.h>
#include <AttributeSubject.h>
class ClientInformation;

// ****************************************************************************
// Class: ClientInformationList
//
// Purpose:
//    Contains the information for all connected clients.
//
// Notes:      Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Thu May 5 18:51:39 PST 2005
//
// Modifications:
//   
// ****************************************************************************

class STATE_API ClientInformationList : public AttributeSubject
{
public:
    ClientInformationList();
    ClientInformationList(const ClientInformationList &obj);
    virtual ~ClientInformationList();

    virtual ClientInformationList& operator = (const ClientInformationList &obj);
    virtual bool operator == (const ClientInformationList &obj) const;
    virtual bool operator != (const ClientInformationList &obj) const;

    virtual const std::string TypeName() const;
    virtual bool CopyAttributes(const AttributeGroup *);
    virtual AttributeSubject *CreateCompatible(const std::string &) const;
    virtual AttributeSubject *NewInstance(bool) const;

    // Property selection methods
    virtual void SelectAll();
    void SelectClients();

    // Property setting methods

    // Property getting methods
    const AttributeGroupVector &GetClients() const;
          AttributeGroupVector &GetClients();


    // Attributegroup convenience methods
    void AddClientInformation(const ClientInformation &);
    void ClearClientInformations();
    void RemoveClientInformation(int i);
    int  GetNumClientInformations() const;
    ClientInformation &GetClientInformation(int i);
    const ClientInformation &GetClientInformation(int i) const;

    ClientInformation &operator [] (int i);
    const ClientInformation &operator [] (int i) const;


    // Keyframing methods
    virtual std::string               GetFieldName(int index) const;
    virtual AttributeGroup::FieldType GetFieldType(int index) const;
    virtual std::string               GetFieldTypeName(int index) const;
    virtual bool                      FieldsEqual(int index, const AttributeGroup *rhs) const;

protected:
    AttributeGroup *CreateSubAttributeGroup(int index);
private:
    AttributeGroupVector clients;
};

#endif
