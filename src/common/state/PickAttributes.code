Function: PrintSelf
Declaration: void PrintSelf(ostream &os);
Definition:
// ****************************************************************************
// Method: PickAttributes::PrintSelf
//
// Purpose: 
//   Prints the contents of this class to the passed stream. 
//
// Modifications:
//   Kathleen Bonnell, Thu Jun 26 09:31:56 PDT 2003
//   Reflect new member names (zoneNumber is now elementNumber, nodes is
//   now incidentElements).  Differentiate between zone pick and node pick.
//   
//   Kathleen Bonnell, Wed Jul 23 17:28:30 PDT 2003 
//   Don't print cellPoint if it is invalid (== FLT_MAX). 
//   
//   Kathleen Bonnell, Wed Sep 10 08:02:02 PDT 2003 
//   Added meshInfo. 
//   
//   Kathleen Bonnell, Tue Nov 18 10:06:40 PST 2003 
//   Support logical zone numbers. 
//   
//   Kathleen Bonnell, Wed Dec 17 15:19:46 PST 2003 
//   Support multiple types of coordinates. 
//   
//   Kathleen Bonnell, Tue Jun  1 16:44:44 PDT 2004 
//   Support new pick types 'DomainNode', 'DomainZone'. 
//   
//   Kathleen Bonnell, Wed Jun  9 12:24:09 PDT 2004 
//   Add conciseOutput.
//
//   Hank Childs, Thu Jun  8 16:21:44 PDT 2006
//   Initialize showId to avoid compiler warning.
//
//   Kathleen Bonnell, Tue Feb 13 12:41:28 PST 2007 
//   If meshCoordType not XY, add (Z,R) or (R,Z) to point info.
//
//   Hank Childs, Mon Aug 27 13:59:12 PDT 2007
//   Print out createSpreadsheet.
//
//   Hank Childs, Fri Aug 31 15:35:28 PDT 2007
//   Print out subset name.
//
//   Cyrus Harrison, Mon Sep 17 10:41:25 PDT 200
//   Added support for user settable floating point format string
//
//   Kathleen Bonnell, Tue Jun 24 09:04:23 PDT 2008 
//   Minor format change: ensure newline prints after domain (or lack thereof).
//   Change 'preserved' to 'preserve'.
//
// ****************************************************************************
void
PickAttributes::PrintSelf(ostream &os)
{
    size_t i;
    
    char buff[512];
    
    std::string fileName;
    std::string format;
    int pos = databaseName.find_last_of('/');
    if (pos >= databaseName.size())
        fileName = databaseName;
    else
        fileName = databaseName.substr(pos+1) ;
    if (pickLetter.size() != 0)
        os << "\n" << pickLetter.c_str() << ":  ";
    else 
        os << "\n";
    os << fileName.c_str() << " ";
    os << "timestep " << timeStep << " ";
    if (meshInfo.empty())
    {
        if (domain != -1)
            os << "domain " << domain ;
        os << "\n";
    }
    else
    {
        os << "\n" << meshInfo.c_str() << "\n";
    }
    if (subsetName != "")
        os << "The subset name is " << subsetName << "\n";
    os << "active variable:   " << activeVariable.c_str() << "\n";
    os << "selected variables: ";
    for (i = 0; i < variables.size(); i++)
        os << variables[i].c_str() << "  ";
    os << "\n";
    if (pickType == CurveNode)
    {
        format = "PickedPoint: <" + floatFormat + ", "
                                  + floatFormat + ", "
                                  + floatFormat + ">\n";
        SNPRINTF(buff, 512, format.c_str(),nodePoint[0],
                                           nodePoint[1],
                                           nodePoint[2]);
        os << buff;
    }
    else if (pickType == CurveZone)
    {
        format = "EndPoint1: <" + floatFormat + ", "
                                + floatFormat + ", "
                                + floatFormat + ">\n";
        SNPRINTF(buff, 512, format.c_str(),nodePoint[0],
                                           nodePoint[1],
                                           nodePoint[2]);
        os << buff;
        format = "EndPoint2: <" + floatFormat + ", "
                                + floatFormat + ", "
                                + floatFormat + ">\n";
        SNPRINTF(buff, 512, format.c_str(),cellPoint[0],
                                           cellPoint[1],
                                           cellPoint[2]);
        os << buff;    
    }
    else if (cellPoint[0] != FLT_MAX)
    {
        os << "PickedPoint: ";
        if (meshCoordType == RZ)
            os << "(Z,R) ";
        else if (meshCoordType == ZR)
            os << "(R,Z) ";
        if (needTransformMessage)
        {
            os << " (in transformed space) " ;
        }
        
        format = "<" + floatFormat + ", "
                     + floatFormat + ", "
                     + floatFormat + ">\n";
        SNPRINTF(buff, 512, format.c_str(),cellPoint[0],
                                           cellPoint[1],
                                           cellPoint[2]);
        os << buff;
    }
    if (pickType == Zone || pickType == DomainZone)
    {
        os << "Zone " ;
        if (showZoneId)
        {
            if (!elementIsGhost)
                os<< elementNumber << " ";
            else 
                os<< elementNumber << "(ghost) ";
        }
        if (showZoneDomainLogicalCoords && !dzoneCoords.empty())
        {
            os << "d" << dzoneCoords[0].c_str();
        }
        if (showZoneBlockLogicalCoords && !bzoneCoords.empty())
        {
            os << " b" << bzoneCoords[0].c_str();
        }
        os << "\n";
    }
    else if (pickType == Node || pickType == DomainNode)
    {
        os << "Node ";
        if (showNodeId)
        {
            if (!elementIsGhost)
                os << elementNumber << " ";
            else 
                os << elementNumber << "(ghost) ";
        }
        if (showNodePhysicalCoords && !pnodeCoords.empty())
        {
            os << pnodeCoords[0].c_str() ;
        }
        if (showNodeDomainLogicalCoords && !dnodeCoords.empty())
        {
            os << dnodeCoords[0].c_str() ;
        }
        if (showNodeBlockLogicalCoords && !bnodeCoords.empty())
        {
            os << bnodeCoords[0].c_str() ;
        }
        os << "\n";
    }
    if (displayIncidentElements)
    {
        bool showId = false;
        if (pickType == Zone || pickType == DomainZone)
        {
            os << "Incident Nodes " ; 
            showId = showNodeId;
        }
        else if (pickType == Node || pickType == DomainNode)
        {
            os << "Incident Zones " ; 
            showId = showZoneId;
        }
        for (i = 0; i < incidentElements.size(); i++)
        {
            if (showId)
            {
                if (ghosts.size() > 0 && ghosts[i])
                    os << incidentElements[i] << "(ghost)  ";
                else 
                    os << incidentElements[i] << "  ";
            }
            if (pickType == Zone || pickType == DomainZone)
            {
                if (showNodePhysicalCoords && !pnodeCoords.empty())
                    os << " " << pnodeCoords[i].c_str() << "\n";
                if (showNodeDomainLogicalCoords && !dnodeCoords.empty())
                    os << " domain " << dnodeCoords[i].c_str() << "\n";
                if (showNodeBlockLogicalCoords && !bnodeCoords.empty())
                    os << " block " << bnodeCoords[i].c_str() << "\n";
            }
            else if (pickType == Node || pickType == DomainNode)
            {
                if (showZoneDomainLogicalCoords && !dzoneCoords.empty())
                    os << " domain " << dzoneCoords[i].c_str() << "\n";
                if (showZoneBlockLogicalCoords && !bzoneCoords.empty())
                    os << " block " << bzoneCoords[i].c_str() << "\n";
            }
        }
        os << "\n";
    }
    for (i = 0; i < varInfo.size(); i++)
        ((PickVarInfo*)varInfo[i])->PrintSelf(os);

    format = "RayPoint 1: <" + floatFormat + ", "
                             + floatFormat + ", "
                             + floatFormat + ">\n";

    SNPRINTF(buff, 512, format.c_str(),rayPoint1[0],
                                       rayPoint1[1],
                                       rayPoint1[2]);            
    os << buff;
    format = "RayPoint 2: <" + floatFormat + ", "
                             + floatFormat + ", "
                             + floatFormat + ">\n";
    SNPRINTF(buff, 512, format.c_str(),rayPoint2[0],
                                       rayPoint2[1],
                                       rayPoint2[2]);            
    os << buff;

    if (doTimeCurve)
        os << "Set up to create a time-curve.\n";

    if (timePreserveCoord)
        os << "Set up for time-curve to preserve picked coord.\n";

    if (createSpreadsheet)
        os << "Create a spreadsheet with this pick.\n";

    if (conciseOutput)
        os << "Set up to create concise Output.\n";
}

Function: CreateOutputString
Declaration: void CreateOutputString(std::string &os, bool withLetter = true);
Definition:
// ****************************************************************************
// Method: PickAttributes::CreateOutputString
//
// Purpose: 
//   Creates a single output string containing all the information gathered
//   from a pick. 
//
// Modifications:
//   Kathleen Bonnell, Thu Jun 26 09:31:56 PDT 2003
//   Reflect new member names (zoneNumber is now elementNumber, nodes is
//   now incidentElements).  Differentiate between zone pick and node pick.
//   
//   Kathleen Bonnell, Wed Jul 23 17:28:30 PDT 2003 
//   Don't include cellPoint or pickLetter if invalid.
//   
//   Kathleen Bonnell, Wed Sep 10 08:02:02 PDT 2003 
//   Added meshInfo.  So that outputstring can be created with (default)
//   or without the 'pickletter', added argument withLetter.
//   
//   Kathleen Bonnell, Tue Nov 18 10:06:40 PST 2003 
//   Support logical zone numbers. 
//   
//   Kathleen Bonnell, Tue Dec  2 17:33:13 PST 2003 
//   Minor changes so that picking on Curves does not display unnecessary
//   information. 
//   
//   Kathleen Bonnell, Wed Dec 17 15:19:46 PST 2003 
//   Support multiple types of coordinates. 
//   
//   Kathleen Bonnell, Tue Mar 16 16:02:05 PST 2004 
//   Create message regarding invalid variables. 
//   
//   Kathleen Bonnell, Tue Jun  1 16:44:44 PDT 2004 
//   Support new pick types 'DomainNode', 'DomainZone'. 
//   
//   Kathleen Bonnell, Wed Jun  9 12:24:09 PDT 2004 
//   Added 'showTimeStep'. 
//
//   Mark C. Miller, Tue Aug 24 19:53:18 PDT 2004
//   Added block/group piece names
//   
//   Hank Childs, Thu Jun  8 16:21:44 PDT 2006
//   Initialize showId to avoid compiler warning.
//
//   Kathleen Bonnell, Tue Feb 13 12:41:28 PST 2007 
//   If meshCoordType not XY, add (Z,R) or (R,Z) to point info.
//
//   Dave Bremer, Tue Feb 13 15:56:02 PST 2007
//   Add support for blockPieceName as a template string, into which
//   we print the domain.
//
//   Cyrus Harrison, Mon Sep 17 10:13:18 PDT 2007
//   Add support for user settable floating point format string
//
// ****************************************************************************
void
PickAttributes::CreateOutputString(std::string &os, bool withLetter)
{
    if (error)
    {
        os = errorMessage;
        return;
    }

    if (!fulfilled)
        return;

    if (conciseOutput)
    {
        CreateConciseOutputString(os, withLetter); 
        return;
    }

    char buff[512];
   
    std::string fileName; 
    std::string format; 
    int pos = databaseName.find_last_of('/');
    if (pos >= databaseName.size())
        fileName = databaseName;
    else
        fileName = databaseName.substr(pos+1) ;

    if (withLetter)
    {
        if (pickLetter.size() != 0)
            SNPRINTF(buff, 512, "\n%s:  ", pickLetter.c_str());
        else 
            SNPRINTF(buff, 512, "\n");
        os += buff;
    }
    os += fileName;

    std::string domStr = (blockPieceName == "" ? "domain" : blockPieceName);
    std::string grpStr = (groupPieceName == "" ? "group" : groupPieceName);

    if (domain != -1 && strstr(domStr.c_str(), "%") != NULL)
    {
        SNPRINTF(buff, 512, domStr.c_str(), domain);
        domStr = buff;
    }
    
    if (showTimeStep)
    {
        SNPRINTF(buff, 512, "  timestep %d", timeStep);
        os += buff;
    }
    if (meshInfo.empty())
    {
        if (domain != -1)
        {
            SNPRINTF(buff, 512, "  %s %d\n", domStr.c_str(), domain);
            os += buff;
        }
        else 
            os += "\n";
    }
    else
    {
        SNPRINTF(buff, 512, "\n%s\n", meshInfo.c_str());
        os += buff;
    }

    std::string point = "Point";
    if (meshCoordType == RZ)
        point += " (Z,R)";
    else if (meshCoordType == ZR)
        point += " (R,Z)";

    if (pickType == CurveNode)
    {
        format = "Point: <" + floatFormat + ", " + floatFormat + ">\n";
        SNPRINTF(buff, 512, format.c_str(), nodePoint[0], nodePoint[1]);
        os += buff;
    }
    else if (pickType == CurveZone)
    {
        format = "Point1: <" + floatFormat + ", " + floatFormat + ">\n"
                +"Point2: <" + floatFormat + ", " + floatFormat + ">\n";

        SNPRINTF(buff, 512, format.c_str(),
                  nodePoint[0], nodePoint[1], cellPoint[0], cellPoint[1]);
        os += buff;
    }
    else if (cellPoint[0] != FLT_MAX)
    {
        if (dimension == 2)
        {
            if (!needTransformMessage)
            {
                format = "%s: <" + floatFormat + ", " + floatFormat + ">\n";
                SNPRINTF(buff, 512, format.c_str(),
                        point.c_str(), cellPoint[0], cellPoint[1]);
            }
            else 
            {
                format = "%s: (in transformed space)\n        <"  
                            + floatFormat + ", " + floatFormat + ">\n";
                SNPRINTF(buff, 512, format.c_str(),
                        point.c_str(), cellPoint[0], cellPoint[1]);
            }
        }
        else 
        {
            if (!needTransformMessage)
            {
                format = "%s: <" + floatFormat + ", " 
                                 + floatFormat + ", " 
                                 + floatFormat + ">\n";
                SNPRINTF(buff, 512, format.c_str(),
                        point.c_str(), cellPoint[0], cellPoint[1], cellPoint[2]);
            }
            else 
            {
                format = "%s: (in transformed space) \n       <" 
                                 + floatFormat + ", " 
                                 + floatFormat + ", " 
                                 + floatFormat + ">\n";
                SNPRINTF(buff, 512, format.c_str(),
                        point.c_str(), cellPoint[0], cellPoint[1], cellPoint[2]);
            }
        }
        os += buff;
    }
    bool showZoneCoords = (showZoneDomainLogicalCoords  && !dzoneCoords.empty()) || 
                          (showZoneBlockLogicalCoords && !bzoneCoords.empty());
    bool showNodeCoords = (showNodePhysicalCoords && !pnodeCoords.empty())||
                          (showNodeDomainLogicalCoords && !dnodeCoords.empty())|| 
                          (showNodeBlockLogicalCoords && !bnodeCoords.empty());
    if (pickType == Zone || pickType == DomainZone)
    {
        if (showZoneId || showZoneCoords)
            os += "Zone:  ";
        if (showZoneId)
        {
            if (!elementIsGhost) 
            {
                if (!displayGlobalIds || globalElement == -1) 
                    SNPRINTF(buff, 512, "%d", elementNumber);
                else 
                    SNPRINTF(buff, 512, "%d (global)", globalElement);
            }
            else 
                SNPRINTF(buff, 512, "%d(ghost)", elementNumber);
            os += buff;
        }
        if (showZoneDomainLogicalCoords & !dzoneCoords.empty()) 
        {
            SNPRINTF(buff, 512, " %s %s", domStr.c_str(), dzoneCoords[0].c_str());
            os += buff;
        }
        if (showZoneBlockLogicalCoords & !bzoneCoords.empty()) 
        {
            SNPRINTF(buff, 512, " %s %s", grpStr.c_str(), bzoneCoords[0].c_str());
            os += buff;
        }
        if (showZoneId || showZoneCoords)
            os += "\n";
    }
    else if (pickType == Node || pickType == DomainNode)
    {
        if (showNodeId || showNodeCoords)
            os += "Node:  ";
        if (showNodeId)
        {
            if (!elementIsGhost)
            {
                if (!displayGlobalIds || globalElement == -1)
                    SNPRINTF(buff, 512, "%d", elementNumber);
                else 
                    SNPRINTF(buff, 512, "%d (global)", globalElement);
            }
            else 
                SNPRINTF(buff, 512, "%d(ghost)", elementNumber);
            os += buff;
        }
        if (showNodePhysicalCoords & !pnodeCoords.empty()) 
        {
            SNPRINTF(buff, 512, " %s", pnodeCoords[0].c_str());
            os += buff;
        }
        if (showNodeDomainLogicalCoords & !dnodeCoords.empty()) 
        {
            SNPRINTF(buff, 512, " %s %s", domStr.c_str(), dnodeCoords[0].c_str());
            os += buff;
        }
        if (showNodeBlockLogicalCoords & !bnodeCoords.empty()) 
        {
            SNPRINTF(buff, 512, " %s %s", grpStr.c_str(), bnodeCoords[0].c_str());
            os += buff;
        }
        if (showNodeId || showNodeCoords)
            os += "\n";
    }
    if (displayIncidentElements)
    {
        bool showId = false;
        bool showGlobal = globalIncidentElements.size() == incidentElements.size();
        if (pickType == Zone || pickType == DomainZone)
        {
            if (!showGlobal)
                os += "Incident Nodes:  " ; 
            else 
                os += "Incident Nodes: (global)  " ; 
            if (showNodeCoords)
            {
                os += "\n    "; 
            }
            showId = showNodeId;
        }
        else if (pickType == Node || pickType == DomainNode)
        {
            if (!showGlobal)
                os += "Incident Zones:  " ; 
            else 
                os += "Incident Zones: (global)  " ; 
            if (showZoneCoords)
            {
                os += "\n    "; 
            }
            showId = showZoneId;
        }
        for (size_t i = 0; i < incidentElements.size(); i++)
        {
            if (showId)
            {
                if (ghosts.size() > 0 && ghosts[i])
                    SNPRINTF(buff, 512, "%d(ghost)  ", incidentElements[i]);
                else if (showGlobal)
                    SNPRINTF(buff, 512, "%d  ", globalIncidentElements[i]);
                else 
                    SNPRINTF(buff, 512, "%d  ", incidentElements[i]);
                os += buff; 
            }
            if (pickType == Zone || pickType == DomainZone)
            {
                if (showNodePhysicalCoords & !pnodeCoords.empty()) 
                {
                    SNPRINTF(buff, 512, " %s", pnodeCoords[i].c_str());
                    os += buff;
                }
                if (showNodeDomainLogicalCoords & !dnodeCoords.empty()) 
                {
                    SNPRINTF(buff, 512, " %s %s", domStr.c_str(), dnodeCoords[i].c_str());
                    os += buff;
                }
                if (showNodeBlockLogicalCoords & !bnodeCoords.empty()) 
                {
                    SNPRINTF(buff, 512, " %s %s", grpStr.c_str(), bnodeCoords[i].c_str());
                    os += buff;
                }
                if (showNodeCoords)
                {
                    os += "\n    "; 
                }
            }
            else if (pickType == Node || pickType == DomainNode)
            {
                if (showZoneDomainLogicalCoords & !dzoneCoords.empty()) 
                {
                    SNPRINTF(buff, 512, " %s %s", domStr.c_str(), dzoneCoords[i].c_str());
                    os += buff;
                }
                if (showZoneBlockLogicalCoords & !bzoneCoords.empty()) 
                {
                    SNPRINTF(buff, 512, " %s %s", grpStr.c_str(), bzoneCoords[i].c_str());
                    os += buff;
                }
                if (showZoneCoords)
                {
                    os += "\n    "; 
                }
            }
        }
        os += "\n";
    }

    for (size_t i = 0; i < varInfo.size(); i++)
    {
        std::string iv;
        std::string pt = PickType_ToString(pickType);
        //
        // VarInfo does not append a newline char, but we need one here
        //
        PickVarInfo* info = (PickVarInfo*)varInfo[i];
        info->SetFloatFormat(floatFormat);
        info->CreateOutputString(iv, pt);
        os += iv;
        os += "\n";
    }
    if (invalidVars.size() > 0)
    {
        os += "The following variables are invalid, and Pick ignored them:\n";
        for (size_t i = 0; i < invalidVars.size(); i++)
        {
            os += "  " + invalidVars[i];
        }
        os += "\n";
    }
}

Function: PrepareForNewPick
Declaration: void PrepareForNewPick();
Definition:
// ****************************************************************************
// Method: PickAttributes::PrepareForNewPick
//
// Purpose: 
//   Clear certain fields in preparation for new pick.  These are fields that
//   will get filled in during the pick process.
//
// Programmer: Kathleen Bonnell 
// Creation:   June 26, 2003 
//
// Modifications:
//   Kathleen Bonnell, Wed Sep 10 08:02:02 PDT 2003
//   Reset meshInfo.
//   
//   Kathleen Bonnell, Wed Sep 17 17:09:00 PDT 2003 
//   Reset realElementNumber, realIncidentElements.
//   
//   Kathleen Bonnell, Tue Nov 18 10:06:40 PST 2003 
//   Reset zoneCoords. 
//   
//   Kathleen Bonnell, Wed Dec 17 15:19:46 PST 2003 
//   Support new types of coordinates. 
//   
//   Kathleen Bonnell, Tue Mar 16 16:02:05 PST 2004
//   Clear invalidVars. 
//   
//   Kathleen Bonnell, Tue Jun  1 16:44:44 PDT 2004 
//   Reset matSelected and needActualCoords. 
//
//   Mark C. Miller, Tue Aug 24 19:37:14 PDT 2004
//   Added code to reset blockPieceName and groupPieceName
//
//   Kathleen Bonnell, Thu Oct 21 15:17:05 PDT 2004 
//   Reset requiresPickGlyph. 
//
//   Kathleen Bonnell, Fri Jul  8 14:27:26 PDT 2005 
//   Reset hasMixedGhostTypes. 
//
//   Kathleen Bonnell, Tue Feb 13 12:41:28 PST 2007 
//   Reset meshCoordType. 
//
//   Brad Whitlock, Tue Jan 20 16:42:30 PST 2009
//   Changed to using local CoordinateType enum.
//
// ****************************************************************************

void
PickAttributes::PrepareForNewPick()
{
    clearWindow  = false;
    fulfilled    = false;
    elementNumber   = -1;
    domain          = -1;
    dimension       = -1;
    pickPoint[0] = pickPoint[1] = pickPoint[2] = 0;
    cellPoint[0] = cellPoint[1] = cellPoint[2] = 0;
    nodePoint[0] = nodePoint[1] = nodePoint[2] = 0;
    needTransformMessage = false;
    ghostType = 0;
    hasMixedGhostTypes = -1;
    meshCoordType = XY;

    if (!incidentElements.empty())
        incidentElements.clear();

    if (!pnodeCoords.empty())
        pnodeCoords.clear();

    if (!dnodeCoords.empty())
        dnodeCoords.clear();

    if (!bnodeCoords.empty())
        bnodeCoords.clear();

    if (!dzoneCoords.empty())
        dzoneCoords.clear();

    if (!bzoneCoords.empty())
        bzoneCoords.clear();

    realElementNumber = -1;
    if (!realIncidentElements.empty())
        realIncidentElements.clear();

    meshInfo = "";
    for (int i = 0; i < 6; ++i)
        plotBounds[i] = 0.;

    ClearVarInfos();

    if (!invalidVars.empty())
        invalidVars.clear();

    errorMessage = "";
    error = false;

    matSelected = false;

    needActualCoords = false;

    blockPieceName = "";
    groupPieceName = "";

    if (!ghosts.empty())
        ghosts.clear();

    includeGhosts = false;
    elementIsGhost = false;
    requiresGlyphPick = false;
    locationSuccessful = false;

    globalElement = -1;
    if (!globalIncidentElements.empty())
        globalIncidentElements.clear();

    linesData = false;
    inputTopoDim = -1;
}

Function: SetFromNode
Declaration: virtual void SetFromNode(DataNode *parentNode);
Definition:
// ****************************************************************************
// Method: PickAttributes::SetFromNode
//
// Purpose: 
//
// Modifications:
//   Kathleen Bonnell, Wed Jun  9 07:54:02 PDT 2004
//   Add doTimeCurve and conciseOutput, showTimeStep, showMeshName.
//   
//   Hank Childs, Mon Aug 27 13:59:12 PDT 2007
//   Add createSpreadsheet.
//
//   Cyrus Harrison, Mon Sep 17 14:12:30 PDT 2007
//   Add floatFormat
// 
// ****************************************************************************

void
PickAttributes::SetFromNode(DataNode *parentNode)
{
    if(parentNode == 0)
        return;

    DataNode *searchNode = parentNode->GetNode("PickAttributes");
    if(searchNode == 0)
        return;

    DataNode *node;

    if((node = searchNode->GetNode("variables")) != 0)
        SetVariables(node->AsStringVector());

    if((node = searchNode->GetNode("displayIncidentElements")) != 0)
        SetDisplayIncidentElements(node->AsBool());

    if((node = searchNode->GetNode("showNodeId")) != 0)
        SetShowNodeId(node->AsBool());
    if((node = searchNode->GetNode("showNodeDomainLogicalCoords")) != 0)
        SetShowNodeDomainLogicalCoords(node->AsBool());
    if((node = searchNode->GetNode("showNodeBlockLogicalCoords")) != 0)
        SetShowNodeBlockLogicalCoords(node->AsBool());
    if((node = searchNode->GetNode("showNodePhysicalCoords")) != 0)
        SetShowNodePhysicalCoords(node->AsBool());

    if((node = searchNode->GetNode("showZoneId")) != 0)
        SetShowZoneId(node->AsBool());
    if((node = searchNode->GetNode("showZoneDomainLogicalCoords")) != 0)
        SetShowZoneDomainLogicalCoords(node->AsBool());
    if((node = searchNode->GetNode("showZoneBlockLogicalCoords")) != 0)
        SetShowZoneBlockLogicalCoords(node->AsBool());

    if((node = searchNode->GetNode("doTimeCurve")) != 0)
        SetDoTimeCurve(node->AsBool());
    if((node = searchNode->GetNode("timePreserveCoord")) != 0)
        SetTimePreserveCoord(node->AsBool());
    if((node = searchNode->GetNode("createSpreadsheet")) != 0)
        SetCreateSpreadsheet(node->AsBool());

    if((node = searchNode->GetNode("conciseOutput")) != 0)
        SetConciseOutput(node->AsBool());

    if((node = searchNode->GetNode("showTimeStep")) != 0)
        SetShowTimeStep(node->AsBool());

    if((node = searchNode->GetNode("showMeshName")) != 0)
        SetShowMeshName(node->AsBool());

    if((node = searchNode->GetNode("displayGlobalIds")) != 0)
        SetDisplayGlobalIds(node->AsBool());
        
    if((node = searchNode->GetNode("floatFormat")) != 0)
    {
        SetFloatFormat(node->AsString());
    }

    // Clear all the PickVarInfos.
    ClearVarInfos();

}

Function: CreateNode
Declaration: virtual bool CreateNode(DataNode *parentNode, bool completeSave, bool forceAdd);
Definition:
// ****************************************************************************
// Method: PickAttributes::CreateNode
//
// Purpose: 
//
// Modifications:
//   Kathleen Bonnell, Wed Jun  9 07:54:02 PDT 2004
//   Add doTimeCurve and conciseOutput, showTimeStep, showMeshName.
//   
//   Hank Childs, Mon Aug 27 13:59:12 PDT 2007
//   Add createSpreadsheet.
//
//   Cyrus Harrison, Mon Sep 17 14:12:30 PDT 2007
//   Add floatFormat
//
//   Brad Whitlock, Fri Dec 14 16:01:15 PST 2007
//   Made it use ids.
//
// ****************************************************************************

bool
PickAttributes::CreateNode(DataNode *parentNode, bool completeSave, bool forceAdd)
{
    if(parentNode == 0)
        return false;
        
    PickAttributes defaultObject;
    bool addToParent = false;
    // Create a node for PickAttributes.
    DataNode *node = new DataNode("PickAttributes");

    if(completeSave || !FieldsEqual(ID_variables, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("variables", variables));
    }

    if(completeSave || !FieldsEqual(ID_displayIncidentElements, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("displayIncidentElements", displayIncidentElements));
    }

    if(completeSave || !FieldsEqual(ID_showNodeId, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("showNodeId", showNodeId));
    }

    if(completeSave || !FieldsEqual(ID_showNodeDomainLogicalCoords, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("showNodeDomainLogicalCoords", 
                                    showNodeDomainLogicalCoords));
    }

    if(completeSave || !FieldsEqual(ID_showNodeBlockLogicalCoords, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("showNodeBlockLogicalCoords", 
                                    showNodeBlockLogicalCoords));
    }

    if(completeSave || !FieldsEqual(ID_showNodePhysicalCoords, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("showNodePhysicalCoords", 
                                    showNodePhysicalCoords));
    }

    if(completeSave || !FieldsEqual(ID_showZoneId, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("showZoneId", 
                                    showZoneId));
    }

    if(completeSave || !FieldsEqual(ID_showZoneDomainLogicalCoords, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("showZoneDomainLogicalCoords", 
                                    showZoneDomainLogicalCoords));
    }

    if(completeSave || !FieldsEqual(ID_showZoneBlockLogicalCoords, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("showZoneBlockLogicalCoords", 
                                    showZoneBlockLogicalCoords));
    }

    if(completeSave || !FieldsEqual(ID_doTimeCurve, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("doTimeCurve", 
                                    doTimeCurve));
    }

    if(completeSave || !FieldsEqual(ID_createSpreadsheet, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("createSpreadsheet", 
                                    createSpreadsheet));
    }

    if(completeSave || !FieldsEqual(ID_conciseOutput, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("conciseOutput", conciseOutput));
    }

    if(completeSave || !FieldsEqual(ID_showTimeStep, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("showTimeStep", showTimeStep));
    }

    if(completeSave || !FieldsEqual(ID_showMeshName, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("showMeshName", showMeshName));
    }

    if(completeSave || !FieldsEqual(ID_displayGlobalIds, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("displayGlobalIds", displayGlobalIds));
    }
    
    if(completeSave || !FieldsEqual(ID_floatFormat, &defaultObject))
    {
        addToParent = true;
        node->AddNode(new DataNode("floatFormat", floatFormat));
    }
    
    // Add the node to the parent node.
    if(addToParent || forceAdd)
        parentNode->AddNode(node);
    else
        delete node;

    return (addToParent || forceAdd);

}

Function: CreateConciseOutputString
Declaration: void CreateConciseOutputString(std::string &os, bool withLetter = true);
Definition:
// ****************************************************************************
// Method: PickAttributes::CreateConciseOutputString
//
// Purpose: 
//   Creates a single output string containing all the information gathered
//   from a pick, condensed to use as little space as possible. 
//
// Programmer:  Kathleen Bonnell
// Creation:    June 9, 2004
//
// Modifications:
//
//   Mark C. Miller, Tue Aug 24 19:53:18 PDT 2004
//   Added block/group piece names
//   
//   Hank Childs, Thu Jun  8 16:21:44 PDT 2006
//   Initialize showId to avoid compiler warning.
//
//   Dave Bremer, Tue Feb 13 15:56:02 PST 2007
//   Add support for blockPieceName as a template string, into which
//   we print the domain.
//
//   Cyrus Harrison, Mon Sep 17 10:41:25 PDT 200
//   Added support for user settable floating point format string
//
// ****************************************************************************

void
PickAttributes::CreateConciseOutputString(std::string &os, bool withLetter)
{
    char buff[512];
   
    std::string fileName;
    std::string format;
    int pos = databaseName.find_last_of('/');
    if (pos >= databaseName.size())
        fileName = databaseName;
    else
        fileName = databaseName.substr(pos+1) ;

    if (withLetter)
    {
        if (pickLetter.size() != 0)
            SNPRINTF(buff, 512, "\n%s:  ", pickLetter.c_str());
        else 
            SNPRINTF(buff, 512, "\n");
        os += buff;
    }
    os += fileName;
    if (showTimeStep)
    {
        SNPRINTF(buff, 512, "  timestep %d", timeStep);
        os += buff;
    }

    std::string domStr = (blockPieceName == "" ? "domain" : blockPieceName);

    if (meshInfo.empty()) 
    {
        if (domain != -1)
        {
            if (strstr(domStr.c_str(), "%") != NULL)
            {
                buff[0] = ' ';
                buff[1] = ' ';
                SNPRINTF(buff+2, 510, domStr.c_str(), domain);
            }
            else
                SNPRINTF(buff, 512, "  %s %d", domStr.c_str(), domain);

            os += buff;
        }
    }
    else
    {
        SNPRINTF(buff, 512, "  %s", meshInfo.c_str());
        os += buff;
    }
    if (pickType == CurveNode)
    {
        format = " at <" + floatFormat + ", " + floatFormat +  ">\n";
        SNPRINTF(buff, 512, format.c_str() , nodePoint[0], nodePoint[1]);
        os += buff;
    }
    else if (pickType == CurveZone)
    {
        format = " at <" + floatFormat + ", " + floatFormat +  ">"
                 +" & <" + floatFormat + ", " + floatFormat +  ">\b";
        SNPRINTF(buff, 512, format.c_str(), 
                  nodePoint[0], nodePoint[1], cellPoint[0], cellPoint[1]);
        os += buff;
    }
    else if (cellPoint[0] != FLT_MAX)
    {
        if (dimension == 2)
        {
            format = " at <" + floatFormat + ", " + floatFormat +  ">\n";
            SNPRINTF(buff, 512, format.c_str(), cellPoint[0], cellPoint[1]);
        }
        else 
        {
            format = " at <" + floatFormat + ", " 
                             + floatFormat + ", " 
                             + floatFormat +  ">\n";
            SNPRINTF(buff, 512, format.c_str(),
                        cellPoint[0], cellPoint[1], cellPoint[2]);
        }
        os += buff;
    }
    bool showZoneCoords = (showZoneDomainLogicalCoords  && !dzoneCoords.empty()) || 
                          (showZoneBlockLogicalCoords && !bzoneCoords.empty());
    bool showNodeCoords = (showNodePhysicalCoords && !pnodeCoords.empty())||
                          (showNodeDomainLogicalCoords && !dnodeCoords.empty())|| 
                          (showNodeBlockLogicalCoords && !bnodeCoords.empty());
    if (pickType == Zone || pickType == DomainZone)
    {
        if (showZoneId || showZoneCoords)
            os += "Zone: ";
        if (showZoneId)
        {
            if (!elementIsGhost)
            {
                if (globalElement == -1)
                    SNPRINTF(buff, 512, "%d ", elementNumber);
                else 
                    SNPRINTF(buff, 512, "%d (global) ", globalElement);
            }
            else 
                SNPRINTF(buff, 512, "%d(ghost) ", elementNumber);
            os += buff;
        }
        if (showZoneDomainLogicalCoords & !dzoneCoords.empty()) 
        {
            SNPRINTF(buff, 512, "%s ", dzoneCoords[0].c_str());
            os += buff;
        }
        if (showZoneBlockLogicalCoords & !bzoneCoords.empty()) 
        {
            SNPRINTF(buff, 512, "%s ", bzoneCoords[0].c_str());
            os += buff;
        }
    }
    else if (pickType == Node || pickType == DomainNode)
    {
        if (showNodeId || showNodeCoords)
            os += "Node: ";
        if (showNodeId)
        {
            if (!elementIsGhost)
            {
                if (globalElement == -1)
                    SNPRINTF(buff, 512, "%d ", elementNumber);
                else 
                    SNPRINTF(buff, 512, "%d (global) ", globalElement);
            }
            else 
                SNPRINTF(buff, 512, "%d(ghost) ", elementNumber);
            os += buff;
        }
        if (showNodePhysicalCoords & !pnodeCoords.empty()) 
        {
            SNPRINTF(buff, 512, "%s ", pnodeCoords[0].c_str());
            os += buff;
        }
        if (showNodeDomainLogicalCoords & !dnodeCoords.empty()) 
        {
            SNPRINTF(buff, 512, "%s ", dnodeCoords[0].c_str());
            os += buff;
        }
        if (showNodeBlockLogicalCoords & !bnodeCoords.empty()) 
        {
            SNPRINTF(buff, 512, "%s ", bnodeCoords[0].c_str());
            os += buff;
        }
    }
    if (displayIncidentElements)
    {
        bool showId = false;
        bool showGlobal = globalIncidentElements.size() == incidentElements.size();
        if (pickType == Zone || pickType == DomainZone)
        {
            os += "  Nodes: " ; 
            showId = showNodeId;
        }
        else if (pickType == Node || pickType == DomainNode)
        {
            os += "  Zones: " ; 
            showId = showZoneId;
        }
        if (showId && showGlobal)
            os += " (global) ";
        for (size_t i = 0; i < incidentElements.size(); i++)
        {
            if (showId)
            {
                if (ghosts.size() > 0 && ghosts[i])
                    SNPRINTF(buff, 512, "%d(ghost) ", incidentElements[i]);
                else if (showGlobal) 
                    SNPRINTF(buff, 512, "%d ", globalIncidentElements[i]);
                else 
                    SNPRINTF(buff, 512, "%d ", incidentElements[i]);
                os += buff; 
            }
            if (pickType == Zone || pickType == DomainZone)
            {
                if (showNodePhysicalCoords & !pnodeCoords.empty()) 
                {
                    SNPRINTF(buff, 512, "%s ", pnodeCoords[i].c_str());
                    os += buff;
                }
                if (showNodeDomainLogicalCoords & !dnodeCoords.empty()) 
                {
                    SNPRINTF(buff, 512, "%s ", dnodeCoords[i].c_str());
                    os += buff;
                }
                if (showNodeBlockLogicalCoords & !bnodeCoords.empty()) 
                {
                    SNPRINTF(buff, 512, "%s ", bnodeCoords[i].c_str());
                    os += buff;
                }
            }
            else if (pickType == Node || pickType == DomainNode)
            {
                if (showZoneDomainLogicalCoords & !dzoneCoords.empty()) 
                {
                    SNPRINTF(buff, 512, "%s ", dzoneCoords[i].c_str());
                    os += buff;
                }
                if (showZoneBlockLogicalCoords & !bzoneCoords.empty()) 
                {
                    SNPRINTF(buff, 512, "%s ", bzoneCoords[i].c_str());
                    os += buff;
                }
            }
        }
        os += "\n";
    }

    for (size_t i = 0; i < varInfo.size(); i++)
    {
        std::string iv;
        std::string pt = PickType_ToString(pickType);
        //
        // VarInfo does not append a newline char, but we need one here
        //
        PickVarInfo* info = (PickVarInfo*)varInfo[i];
        info->SetFloatFormat(floatFormat);
        info->CreateOutputString(iv, pt);
        os += iv;
        os += "\n";
    }
    if (invalidVars.size() > 0)
    {
        os += "The following variables are invalid, and Pick ignored them:\n";
        for (size_t i = 0; i < invalidVars.size(); i++)
        {
            os += "  " + invalidVars[i];
        }
        os += "\n";
    }
}

Function: SetRayPoint1
Declaration: void SetRayPoint1(const doubleVector &);
Definition:
// ****************************************************************************
// Method: PickAttributes::SetRayPoint1
//
// Purpose: 
//   Sets raypoint1 from a doubleVector arg.
//
// Programmer:  Kathleen Bonnell
// Creation:    November 9, 2007 
//
// Modifications:
//
// ****************************************************************************

void
PickAttributes::SetRayPoint1(const doubleVector & _v)
{
    rayPoint1[0] = _v[0];
    rayPoint1[1] = _v[1];
    rayPoint1[2] = _v[2];
}

Function: SetRayPoint2
Declaration: void SetRayPoint2(const doubleVector &);
Definition:
// ****************************************************************************
// Method: PickAttributes::SetRayPoint2
//
// Purpose: 
//   Sets raypoint2 from a doubleVector arg.
//
// Programmer:  Kathleen Bonnell
// Creation:    November 9, 2007 
//
// Modifications:
//
// ****************************************************************************

void
PickAttributes::SetRayPoint2(const doubleVector &_v)
{
    rayPoint2[0] = _v[0];
    rayPoint2[1] = _v[1];
    rayPoint2[2] = _v[2];
}

