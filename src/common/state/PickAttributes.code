Function: PrintSelf
Declaration: void PrintSelf(ostream &os);
Definition:
// ****************************************************************************
// Method: PickAttributes::PrintSelf
//
// Purpose: 
//   Prints the contents of this class to the passed stream. 
//
// Modifications:
//   Kathleen Bonnell, Thu Jun 26 09:31:56 PDT 2003
//   Reflect new member names (zoneNumber is now elementNumber, nodes is
//   now incidentElements).  Differentiate between zone pick and node pick.
//   
// ****************************************************************************
void
PickAttributes::PrintSelf(ostream &os)
{
    int i;
    std::string fileName;
    int pos = databaseName.find_last_of('/');
    if (pos >= databaseName.size())
        fileName = databaseName;
    else
        fileName = databaseName.substr(pos+1) ;
    os << "\n" << pickLetter.c_str() << ":  ";
    os << fileName.c_str() << " ";
    os << "timestep " << timeStep << " ";
    os << "domain " << domain << "\n";
    os << "active variable:   " << activeVariable.c_str() << "\n";
    os << "selected variables: ";
    for (i = 0; i < variables.size(); i++)
        os << variables[i].c_str() << "  ";
    os << "\n";
    if (!needTransformMessage)
    {
        os << "PickedPoint: <" << cellPoint[0] << ", " 
                               << cellPoint[1] << ", " 
                               << cellPoint[2] << ">\n";
    }
    else 
    {
        os << "PickedPoint:  (in transformed space) <" 
           << cellPoint[0] << ", " 
           << cellPoint[1] << ", " 
           << cellPoint[2] << ">\n";
    }
    bool printCoords = useNodeCoords && !nodeCoords.empty();
    if (pickType == Zone)
    {
        os << "Zone " << elementNumber << " ";
    }
    else if (pickType == Node)
    {
        os << "Node " << elementNumber << " ";
        if (printCoords)
        {
            os << nodeCoords[0].c_str() << "\n";
        }
    }
    if (pickType == Zone)
    {
        os << "Nodes " ; 
    }
    else if (pickType == Node)
    {
        os << "Incident Zones " ; 
    }
    for (i = 0; i < incidentElements.size(); i++)
    {
        os << incidentElements[i] << "  ";
        if (printCoords && pickType == Zone)
        {
            os << nodeCoords[i].c_str() << "\n";
        } 
    }
    os << "\n";
    for (i = 0; i < varInfo.size(); i++)
        ((PickVarInfo*)varInfo[i])->PrintSelf(os);
    os << "RayPoint 1: <" << rayPoint1[0] << ", " 
                          << rayPoint1[1] << ", " 
                          << rayPoint1[2] << ">\n";
    os << "RayPoint 2: <" << rayPoint2[0] << ", " 
                          << rayPoint2[1] << ", " 
                          << rayPoint2[2] << ">\n";
}

Function: CreateOutputString
Declaration: void CreateOutputString(std::string &os);
Definition:
// ****************************************************************************
// Method: PickAttributes::CreateOutputString
//
// Purpose: 
//   Creates a single output string containing all the information gathered
//   from a pick. 
//
// Modifications:
//   Kathleen Bonnell, Thu Jun 26 09:31:56 PDT 2003
//   Reflect new member names (zoneNumber is now elementNumber, nodes is
//   now incidentElements).  Differentiate between zone pick and node pick.
//   
// ****************************************************************************
void
PickAttributes::CreateOutputString(std::string &os)
{
    if (!fulfilled)
        return;

    int i;
    char buff[256];
   
    std::string fileName; 
    int pos = databaseName.find_last_of('/');
    if (pos >= databaseName.size())
        fileName = databaseName;
    else
        fileName = databaseName.substr(pos+1) ;

    sprintf(buff, "\n%s:  ", pickLetter.c_str());
    os += buff;
    os += fileName;
    if (domain != -1)
    {
        sprintf(buff, "  timestep %d  domain %d\n", timeStep, domain);
    }
    else 
    {
        sprintf(buff, "  timestep %d  \n", timeStep);
    }
    os += buff;
    if (dimension == 2)
    {
        if (!needTransformMessage)
        {
            sprintf(buff, "Point: <%f, %f>\n",
                    cellPoint[0], cellPoint[1]);
        }
        else 
        {
            sprintf(buff, "Point: (in transformed space)\n        <%f, %f>\n",
                    cellPoint[0], cellPoint[1]);
        }
    }
    else 
    {
        if (!needTransformMessage)
        {
            sprintf(buff, "Point: <%f, %f, %f>\n",
                    cellPoint[0], cellPoint[1], cellPoint[2]);
        }
        else 
        {
            sprintf(buff, "Point: (in transformed space) \n       <%f, %f, %f>\n",
                    cellPoint[0], cellPoint[1], cellPoint[2]);
        }
    }
    os += buff;

    bool printCoords = useNodeCoords && !nodeCoords.empty(); 
    if (pickType == Zone)
    {
        sprintf(buff, "Zone:  %d\n", elementNumber);
    }
    else if (pickType == Node)
    {
        if (!printCoords)
        {
            sprintf(buff, "Node:  %d\n", elementNumber);
        }
        else
        {
            sprintf(buff, "Node:  %d  %s\n", elementNumber, 
                    nodeCoords[0].c_str());
        }
    }
    os += buff;
    if (pickType == Zone)
    {
        os += "Nodes:  " ; 
        if (printCoords)
        {
            os += "\n    "; 
        }
    }
    else if (pickType == Node)
    {
        os += "Incident zones:  " ; 
    }

    for (i = 0; i < incidentElements.size(); i++)
    {
        sprintf(buff, "%d  ", incidentElements[i]);
        os += buff; 
        if (printCoords && pickType == Zone)
        {
            sprintf(buff, "%s\n    ", nodeCoords[i].c_str());
            os += buff;
        }
    }
    os += "\n";

    for (i = 0; i < varInfo.size(); i++)
    {
        std::string iv;
        //
        // VarInfo does not append a newline char, but we need one here
        //
        ((PickVarInfo*)varInfo[i])->CreateOutputString(iv);
        os += iv;
        os += "\n";
    }
}

Function: PrepareForNewPick
Declaration: void PrepareForNewPick();
Definition:
// ****************************************************************************
// Method: PickAttributes::PrepareForNewPick
//
// Purpose: 
//   Clear certain fields in preparation for new pick.  These are fields that
//   will get filled in during the pick process.
//
// Programmer: Kathleen Bonnell 
// Creation:   June 26, 2003 
//
// Modifications:
//   
// ****************************************************************************

void
PickAttributes::PrepareForNewPick()
{
    clearWindow  = false;
    fulfilled    = false;
    elementNumber   = -1;
    domain          = -1;
    dimension       = -1;
    pickPoint[0] = pickPoint[1] = pickPoint[2] = 0;
    cellPoint[0] = cellPoint[1] = cellPoint[2] = 0;
    needTransformMessage = false;

    if (!incidentElements.empty())
        incidentElements.clear();

    if (!nodeCoords.empty())
        nodeCoords.clear();

    ClearPickVarInfos();
}

