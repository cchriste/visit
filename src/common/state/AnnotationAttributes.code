Target: xml2python
Code: AnnotationAttributes_getattr
Prefix:
Postfix:
    // Try and handle legacy AnnotationAttributes
    extern PyObject *AnnotationAttributes_Legacy_getattr(PyObject *, const char *);
    PyObject *retval = NULL;
    retval = AnnotationAttributes_Legacy_getattr(self, name);
    if(retval != NULL)
        return retval;

Code: AnnotationAttributes_setattr
Prefix:
Postfix:
    if(obj == NULL)
    {
        extern PyObject *AnnotationAttributes_Legacy_setattr(PyObject *, const char *, PyObject *);
        obj = AnnotationAttributes_Legacy_setattr(self, name, tuple);
    }

Target: xml2atts
Function: GetDiscernibleBackgroundColor
Declaration: const ColorAttribute GetDiscernibleBackgroundColor() const;
Definition:
// Returns a "discernible" background color. If the background mode
// is Solid, the returned value is just the background color. If the
// background mode is Gradient, the returned color is an average of
// the two gradient colors
const ColorAttribute AnnotationAttributes::GetDiscernibleBackgroundColor() const
{
    ColorAttribute retval;
    double bg[4];

    if (GetBackgroundMode() == Solid)
    {
        GetBackgroundColor().GetRgba(bg);
    }
    else
    {
        double gbg1[4], gbg2[4];

        GetGradientColor1().GetRgba(gbg1);
        GetGradientColor2().GetRgba(gbg2);

        bg[0] = (gbg1[0] + gbg2[0]) * 0.5;
        bg[1] = (gbg1[1] + gbg2[1]) * 0.5;
        bg[2] = (gbg1[2] + gbg2[2]) * 0.5;
        bg[3] = (gbg1[3] + gbg2[3]) * 0.5;
    }

    retval.SetRgba2(bg);

    return retval;
}

Function: ProcessOldVersions
Declaration: virtual void ProcessOldVersions(DataNode *parentNode, const char *configVersion);
Definition:
// ****************************************************************************
// Method: AnnotationAttributes::ProcessOldVersions
//
// Purpose: 
//   This method maps old AnnotationAttributes fields to the 1.9.0 version of
//   the data node tree for AnnotationAttributes.
//
// Programmer: Brad Whitlock
// Creation:   Thu Feb 14 15:40:02 PST 2008
//
// Modifications:
//   Brad Whitlock, Wed Mar 26 14:49:15 PDT 2008
//   Added conversion of heights to scales.
//
// ****************************************************************************

#include <Utility.h>
#include <DebugStream.h>

typedef struct
{
    const char *old_key;
    const char *new_key;
} axis_attribute_mapping;

static const axis_attribute_mapping attribute_mappings[] = {
    {"axesFlag2D",            "axes2D.Axes2D.visible"},
    {"axesAutoSetTicks2D",    "axes2D.Axes2D.autoSetTicks"},
    {"labelAutoSetScaling2D", "axes2D.Axes2D.autoSetScaling"},
    {"xAxisLabels2D",         "axes2D.Axes2D.xAxis.AxisAttributes.label.AxisLabels.visible"},
    {"yAxisLabels2D",         "axes2D.Axes2D.yAxis.AxisAttributes.label.AxisLabels.visible"},
    {"xAxisTitle2D",          "axes2D.Axes2D.xAxis.AxisAttributes.title.AxisTitles.visible"},
    {"yAxisTitle2D",          "axes2D.Axes2D.yAxis.AxisAttributes.title.AxisTitles.visible"},
    {"xGridLines2D",          "axes2D.Axes2D.xAxis.AxisAttributes.grid"},
    {"yGridLines2D",          "axes2D.Axes2D.yAxis.AxisAttributes.grid"},
    {"xMajorTickMinimum2D",   "axes2D.Axes2D.xAxis.AxisAttributes.tickMarks.AxisTickMarks.majorMinimum"},
    {"yMajorTickMinimum2D",   "axes2D.Axes2D.yAxis.AxisAttributes.tickMarks.AxisTickMarks.majorMinimum"},
    {"xMajorTickMaximum2D",   "axes2D.Axes2D.xAxis.AxisAttributes.tickMarks.AxisTickMarks.majorMaximum"},
    {"yMajorTickMaximum2D",   "axes2D.Axes2D.yAxis.AxisAttributes.tickMarks.AxisTickMarks.majorMaximum"},
    {"xMajorTickSpacing2D",   "axes2D.Axes2D.xAxis.AxisAttributes.tickMarks.AxisTickMarks.majorSpacing"},
    {"yMajorTickSpacing2D",   "axes2D.Axes2D.yAxis.AxisAttributes.tickMarks.AxisTickMarks.majorSpacing"},
    {"xMinorTickSpacing2D",   "axes2D.Axes2D.xAxis.AxisAttributes.tickMarks.AxisTickMarks.minorSpacing"},
    {"yMinorTickSpacing2D",   "axes2D.Axes2D.yAxis.AxisAttributes.tickMarks.AxisTickMarks.minorSpacing"},
    {"xLabelFontHeight2D",    "axes2D.Axes2D.xAxis.AxisAttributes.label.AxisLabels.font.FontAttributes.scale"},
    {"yLabelFontHeight2D",    "axes2D.Axes2D.yAxis.AxisAttributes.label.AxisLabels.font.FontAttributes.scale"},
    {"xTitleFontHeight2D",    "axes2D.Axes2D.xAxis.AxisAttributes.title.AxisTitles.font.FontAttributes.scale"},
    {"yTitleFontHeight2D",    "axes2D.Axes2D.yAxis.AxisAttributes.title.AxisTitles.font.FontAttributes.scale"},
    {"xLabelScaling2D",       "axes2D.Axes2D.xAxis.AxisAttributes.label.AxisLabels.scaling"},
    {"yLabelScaling2D",       "axes2D.Axes2D.yAxis.AxisAttributes.label.AxisLabels.scaling"},
    {"axesLineWidth2D",       "axes2D.Axes2D.lineWidth"},
    {"axesTickLocation2D",    "axes2D.Axes2D.tickLocation"},
    {"axesTicks2D",           "axes2D.Axes2D.tickAxes"},
    {"xAxisUserTitle2D",      "axes2D.Axes2D.xAxis.AxisAttributes.title.AxisTitles.title"},
    {"yAxisUserTitle2D",      "axes2D.Axes2D.yAxis.AxisAttributes.title.AxisTitles.title"},
    {"xAxisUserTitleFlag2D",  "axes2D.Axes2D.xAxis.AxisAttributes.title.AxisTitles.userTitle"},
    {"yAxisUserTitleFlag2D",  "axes2D.Axes2D.yAxis.AxisAttributes.title.AxisTitles.userTitle"},
    {"xAxisUserUnits2D",      "axes2D.Axes2D.xAxis.AxisAttributes.title.AxisTitles.units"},
    {"yAxisUserUnits2D",      "axes2D.Axes2D.yAxis.AxisAttributes.title.AxisTitles.units"},
    {"xAxisUserUnitsFlag2D",  "axes2D.Axes2D.xAxis.AxisAttributes.title.AxisTitles.userUnits"},
    {"yAxisUserUnitsFlag2D",  "axes2D.Axes2D.yAxis.AxisAttributes.title.AxisTitles.userUnits"},
    {"axesFlag",              "axes3D.Axes3D.visible"},
    {"axesAutoSetTicks",      "axes3D.Axes3D.autoSetTicks"},
    {"labelAutoSetScaling",   "axes3D.Axes3D.autoSetScaling"},
    {"xAxisLabels",           "axes3D.Axes3D.xAxis.AxisAttributes.label.AxisLabels.visible"},
    {"yAxisLabels",           "axes3D.Axes3D.yAxis.AxisAttributes.label.AxisLabels.visible"},
    {"zAxisLabels",           "axes3D.Axes3D.zAxis.AxisAttributes.label.AxisLabels.visible"},
    {"xAxisTitle",            "axes3D.Axes3D.xAxis.AxisAttributes.title.AxisTitles.visible"},
    {"yAxisTitle",            "axes3D.Axes3D.yAxis.AxisAttributes.title.AxisTitles.visible"},
    {"zAxisTitle",            "axes3D.Axes3D.zAxis.AxisAttributes.title.AxisTitles.visible"},
    {"xGridLines",            "axes3D.Axes3D.xAxis.AxisAttributes.grid"},
    {"yGridLines",            "axes3D.Axes3D.yAxis.AxisAttributes.grid"},
    {"zGridLines",            "axes3D.Axes3D.zAxis.AxisAttributes.grid"},
    {"xAxisTicks",            "axes3D.Axes3D.xAxis.AxisAttributes.tickMarks.AxisTickMarks.visible"},
    {"yAxisTicks",            "axes3D.Axes3D.yAxis.AxisAttributes.tickMarks.AxisTickMarks.visible"},
    {"zAxisTicks",            "axes3D.Axes3D.zAxis.AxisAttributes.tickMarks.AxisTickMarks.visible"},
    {"xMajorTickMinimum",     "axes3D.Axes3D.xAxis.AxisAttributes.tickMarks.AxisTickMarks.majorMinimum"},
    {"yMajorTickMinimum",     "axes3D.Axes3D.yAxis.AxisAttributes.tickMarks.AxisTickMarks.majorMinimum"},
    {"zMajorTickMinimum",     "axes3D.Axes3D.zAxis.AxisAttributes.tickMarks.AxisTickMarks.majorMinimum"},
    {"xMajorTickMaximum",     "axes3D.Axes3D.xAxis.AxisAttributes.tickMarks.AxisTickMarks.majorMaximum"},
    {"yMajorTickMaximum",     "axes3D.Axes3D.yAxis.AxisAttributes.tickMarks.AxisTickMarks.majorMaximum"},
    {"zMajorTickMaximum",     "axes3D.Axes3D.zAxis.AxisAttributes.tickMarks.AxisTickMarks.majorMaximum"},
    {"xMajorTickSpacing",     "axes3D.Axes3D.xAxis.AxisAttributes.tickMarks.AxisTickMarks.majorSpacing"},
    {"yMajorTickSpacing",     "axes3D.Axes3D.yAxis.AxisAttributes.tickMarks.AxisTickMarks.majorSpacing"},
    {"zMajorTickSpacing",     "axes3D.Axes3D.zAxis.AxisAttributes.tickMarks.AxisTickMarks.majorSpacing"},
    {"xMinorTickSpacing",     "axes3D.Axes3D.xAxis.AxisAttributes.tickMarks.AxisTickMarks.minorSpacing"},
    {"yMinorTickSpacing",     "axes3D.Axes3D.yAxis.AxisAttributes.tickMarks.AxisTickMarks.minorSpacing"},
    {"zMinorTickSpacing",     "axes3D.Axes3D.zAxis.AxisAttributes.tickMarks.AxisTickMarks.minorSpacing"},
    {"xLabelFontHeight",      "axes3D.Axes3D.xAxis.AxisAttributes.label.AxisLabels.font.FontAttributes.scale"},
    {"yLabelFontHeight",      "axes3D.Axes3D.yAxis.AxisAttributes.label.AxisLabels.font.FontAttributes.scale"},
    {"zLabelFontHeight",      "axes3D.Axes3D.zAxis.AxisAttributes.label.AxisLabels.font.FontAttributes.scale"},
    {"xTitleFontHeight",      "axes3D.Axes3D.xAxis.AxisAttributes.title.AxisTitles.font.FontAttributes.scale"},
    {"yTitleFontHeight",      "axes3D.Axes3D.yAxis.AxisAttributes.title.AxisTitles.font.FontAttributes.scale"},
    {"zTitleFontHeight",      "axes3D.Axes3D.zAxis.AxisAttributes.title.AxisTitles.font.FontAttributes.scale"},
    {"xLabelScaling",         "axes3D.Axes3D.xAxis.AxisAttributes.label.AxisLabels.scaling"},
    {"yLabelScaling",         "axes3D.Axes3D.yAxis.AxisAttributes.label.AxisLabels.scaling"},
    {"zLabelScaling",         "axes3D.Axes3D.zAxis.AxisAttributes.label.AxisLabels.scaling"},
    {"xAxisUserTitle",        "axes3D.Axes3D.xAxis.AxisAttributes.title.AxisTitles.title"},
    {"yAxisUserTitle",        "axes3D.Axes3D.yAxis.AxisAttributes.title.AxisTitles.title"},
    {"zAxisUserTitle",        "axes3D.Axes3D.zAxis.AxisAttributes.title.AxisTitles.title"},
    {"xAxisUserTitleFlag",    "axes3D.Axes3D.xAxis.AxisAttributes.title.AxisTitles.userTitle"},
    {"yAxisUserTitleFlag",    "axes3D.Axes3D.yAxis.AxisAttributes.title.AxisTitles.userTitle"},
    {"zAxisUserTitleFlag",    "axes3D.Axes3D.zAxis.AxisAttributes.title.AxisTitles.userTitle"},
    {"xAxisUserUnits",        "axes3D.Axes3D.xAxis.AxisAttributes.title.AxisTitles.units"},
    {"yAxisUserUnits",        "axes3D.Axes3D.yAxis.AxisAttributes.title.AxisTitles.units"},
    {"zAxisUserUnits",        "axes3D.Axes3D.zAxis.AxisAttributes.title.AxisTitles.units"},
    {"xAxisUserUnitsFlag",    "axes3D.Axes3D.xAxis.AxisAttributes.title.AxisTitles.userUnits"},
    {"yAxisUserUnitsFlag",    "axes3D.Axes3D.yAxis.AxisAttributes.title.AxisTitles.userUnits"},
    {"zAxisUserUnitsFlag",    "axes3D.Axes3D.zAxis.AxisAttributes.title.AxisTitles.userUnits"},
    {"axesTickLocation",      "axes3D.Axes3D.tickLocation"},
    {"axesType",              "axes3D.Axes3D.axesType"},
    {"triadFlag",             "axes3D.Axes3D.triadFlag"},
    {"bboxFlag",              "axes3D.Axes3D.bboxFlag"}
};

const char *height_attributes[] = {
    "xLabelFontHeight2D",
    "yLabelFontHeight2D",
    "xTitleFontHeight2D",
    "yTitleFontHeight2D",
    "xLabelFontHeight",
    "yLabelFontHeight",
    "zLabelFontHeight",
    "xTitleFontHeight",
    "yTitleFontHeight",
    "zTitleFontHeight"
};

void
AnnotationAttributes::ProcessOldVersions(DataNode *parentNode,
    const char *configVersion)
{
    if(parentNode == 0)
        return;

    DataNode *searchNode = parentNode->GetNode("AnnotationAttributes");
    if(searchNode == 0)
        return;

    if(VersionLessThan(configVersion, "1.9.0"))
    {
        for(int key = 0; key < sizeof(attribute_mappings)/sizeof(axis_attribute_mapping); ++key)
        {
            DataNode *k = searchNode->GetNode(attribute_mappings[key].old_key);

            if(k != 0)
            {
                searchNode->RemoveNode(k, false);

                // Reparent the node.
                stringVector keys = SplitValues(attribute_mappings[key].new_key, '.');
                DataNode *pNode = searchNode;
                for(size_t i = 0; i < keys.size(); ++i)
                {
                    if(i < keys.size() - 1)
                    {                     
                        DataNode *node = pNode->GetNode(keys[i]);
                        if(node == 0)
                        {
                            node = new DataNode(keys[i]);
                            pNode->AddNode(node);
                            debug5 << "Created node: " << keys[i].c_str() << endl;
                        }
                        pNode = node;
                    }
                    else
                    {
                        // Add the node that we're moving and rename it too.
                        debug5 << "Moved node " << k->GetKey().c_str() << " to " << keys[i].c_str() << endl;
                        k->SetKey(keys[i]);
                        pNode->AddNode(k);

                        // If the node that we're moving is a height attribute 
                        // then we need to change it to a scale attribute.
                        for(int hIndex = 0; hIndex < 10; ++hIndex)
                        {
                            if(std::string(attribute_mappings[key].old_key) == std::string(height_attributes[hIndex]) &&
                               k->GetNodeType() == DOUBLE_NODE)
                            {
                                double h = k->AsDouble();
                                double scale = h / 0.02;
                                k->SetDouble(scale);
                                debug5 << "Turned height " << h << " into scale " << scale << endl;
                                break;
                            }
                        }
                    }
                }
            }               
        }
    }
}

