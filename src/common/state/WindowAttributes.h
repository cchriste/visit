#ifndef WINDOWATTRIBUTES_H
#define WINDOWATTRIBUTES_H
#include <state_exports.h>
#include <AttributeSubject.h>
#include <ViewAttributes.h>
#include <LightList.h>
#include <RenderingAttributes.h>
#include <ColorTableAttributes.h>

// ****************************************************************************
// Class: WindowAttributes
//
// Purpose:
//    This class contains the attributes for a visualization window.
//
// Notes:      Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Tue May 20 13:40:15 PST 2003
//
// Modifications:
//   
// ****************************************************************************

class STATE_API WindowAttributes : public AttributeSubject
{
public:
    WindowAttributes();
    WindowAttributes(const WindowAttributes &obj);
    virtual ~WindowAttributes();

    virtual void operator = (const WindowAttributes &obj);
    virtual bool operator == (const WindowAttributes &obj) const;
    virtual bool operator != (const WindowAttributes &obj) const;

    virtual const std::string TypeName() const;
    virtual bool CopyAttributes(const AttributeGroup *);
    virtual AttributeSubject *CreateCompatible(const std::string &) const;

    // Property selection methods
    virtual void SelectAll();
    void SelectView();
    void SelectLights();
    void SelectRenderAtts();
    void SelectColorTables();
    void SelectSize();
    void SelectBackground();
    void SelectForeground();
    void SelectGradBG1();
    void SelectGradBG2();

    // Property setting methods
    void SetView(const ViewAttributes &view_);
    void SetLights(const LightList &lights_);
    void SetRenderAtts(const RenderingAttributes &renderAtts_);
    void SetColorTables(const ColorTableAttributes &colorTables_);
    void SetSize(const int *size_);
    void SetBackground(const unsigned char *background_);
    void SetForeground(const unsigned char *foreground_);
    void SetBackgroundMode(int backgroundMode_);
    void SetGradBG1(const float *gradBG1_);
    void SetGradBG2(const float *gradBG2_);

    // Property getting methods
    const ViewAttributes       &GetView() const;
          ViewAttributes       &GetView();
    const LightList            &GetLights() const;
          LightList            &GetLights();
    const RenderingAttributes  &GetRenderAtts() const;
          RenderingAttributes  &GetRenderAtts();
    const ColorTableAttributes &GetColorTables() const;
          ColorTableAttributes &GetColorTables();
    const int                  *GetSize() const;
          int                  *GetSize();
    const unsigned char        *GetBackground() const;
          unsigned char        *GetBackground();
    const unsigned char        *GetForeground() const;
          unsigned char        *GetForeground();
    int                        GetBackgroundMode() const;
    const float                *GetGradBG1() const;
          float                *GetGradBG1();
    const float                *GetGradBG2() const;
          float                *GetGradBG2();

    // Persistence methods
    virtual bool CreateNode(DataNode *node, bool forceAdd);
    virtual void SetFromNode(DataNode *node);


    // Keyframing methods
    virtual std::string               GetFieldName(int index) const;
    virtual AttributeGroup::FieldType GetFieldType(int index) const;
    virtual std::string               GetFieldTypeName(int index) const;
    virtual bool                      FieldsEqual(int index, const AttributeGroup *rhs) const;

private:
    ViewAttributes       view;
    LightList            lights;
    RenderingAttributes  renderAtts;
    ColorTableAttributes colorTables;
    int                  size[2];
    unsigned char        background[3];
    unsigned char        foreground[3];
    int                  backgroundMode;
    float                gradBG1[3];
    float                gradBG2[3];
};

#endif
