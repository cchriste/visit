#ifndef ANNOTATIONOBJECTLIST_H
#define ANNOTATIONOBJECTLIST_H
#include <state_exports.h>
#include <AttributeSubject.h>
class AnnotationObject;

// ****************************************************************************
// Class: AnnotationObjectList
//
// Purpose:
//    Contains a list of AnnotationObjectAttributes
//
// Notes:      Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Wed Oct 29 10:20:58 PDT 2003
//
// Modifications:
//   
// ****************************************************************************

class STATE_API AnnotationObjectList : public AttributeSubject
{
public:
    AnnotationObjectList();
    AnnotationObjectList(const AnnotationObjectList &obj);
    virtual ~AnnotationObjectList();

    virtual void operator = (const AnnotationObjectList &obj);
    virtual bool operator == (const AnnotationObjectList &obj) const;
    virtual bool operator != (const AnnotationObjectList &obj) const;

    virtual const std::string TypeName() const;
    virtual bool CopyAttributes(const AttributeGroup *);
    virtual AttributeSubject *CreateCompatible(const std::string &) const;
    virtual AttributeSubject *NewInstance(bool) const;

    // Property selection methods
    virtual void SelectAll();
    void SelectAnnotation();

    // Property setting methods
    void SetAnnotation(const AttributeGroupVector &annotation_);

    // Property getting methods
    const AttributeGroupVector &GetAnnotation() const;
          AttributeGroupVector &GetAnnotation();

    // Persistence methods
    virtual bool CreateNode(DataNode *node, bool forceAdd);
    virtual void SetFromNode(DataNode *node);


    // Attributegroup convenience methods
    void AddAnnotationObject(const AnnotationObject &);
    void ClearAnnotationObjects();
    void RemoveAnnotationObject(int i);
    int  GetNumAnnotationObjects() const;
    AnnotationObject &GetAnnotationObject(int i);
    const AnnotationObject &GetAnnotationObject(int i) const;

    AnnotationObject &operator [] (int i);
    const AnnotationObject &operator [] (int i) const;


    // Keyframing methods
    virtual std::string               GetFieldName(int index) const;
    virtual AttributeGroup::FieldType GetFieldType(int index) const;
    virtual std::string               GetFieldTypeName(int index) const;
    virtual bool                      FieldsEqual(int index, const AttributeGroup *rhs) const;

protected:
    AttributeGroup *CreateSubAttributeGroup(int index);
private:
    AttributeGroupVector annotation;
};

#endif
