Function: ChangesRequireRecalculation
Declaration: bool ChangesRequireRecalculation(const HistogramAttributes &) const;
Definition:
bool
HistogramAttributes::ChangesRequireRecalculation(const HistogramAttributes &obj) const
{
    if (minFlag && (min != obj.GetMin()))
        return true;
    if (minFlag && (max != obj.GetMax()))
        return true;
    if (useBinWidths != obj.GetUseBinWidths())
        return true;
    if (outputType != obj.GetOutputType())
        return true;
    if (numBins != obj.GetNumBins())
        return true;
    if (weightVariable != obj.GetWeightVariable())
        return true;
    if (zone != obj.GetZone())
        return true;
    if (domain != obj.GetDomain())
        return true;
    if (histogramType != obj.GetHistogramType())
        return true; 
    if ( dataScale != obj.GetDataScale() )
        return true;
    if ( binScale != obj.GetBinScale() )
        return true;
    return false;
}

Function: VarChangeRequiresReset
Declaration: virtual bool VarChangeRequiresReset(void);
Definition:
bool
HistogramAttributes::VarChangeRequiresReset()
{
    return true;
}

Function: CopyAttributes
Declaration: virtual bool CopyAttributes(const AttributeGroup *);
Definition:
bool
HistogramAttributes::CopyAttributes(const AttributeGroup *atts)
{
    bool retval = false;

    if(TypeName() == atts->TypeName())
    {
        // Call assignment operator.
        const HistogramAttributes *tmp = (const HistogramAttributes *)atts;
        *this = *tmp;
        retval = true;
    }
    else if(atts->TypeName() == "PickAttributes")
    {
        const PickAttributes *tmp = (const PickAttributes*)atts;
        int dom = tmp->GetDomain();
        dom = (dom < 0 ? 0 : dom);  // -1 is val for single domain problems
        SetDomain(dom);
        SetZone(tmp->GetElementNumber());
        retval = true;
    }

    return retval;
}

Target: xml2info
Function: HistogramViewerPluginInfo::InitializePlotAtts
Declaration: virtual void InitializePlotAtts(AttributeSubject *atts, const ViewerPlot *);
Definition:
// ****************************************************************************
//  Method: HistogramViewerPluginInfo::InitializePlotAtts
//
//  Purpose:
//    Initialize the plot attributes to the default attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//    md        The metadata used to initialize.
//    atts      The variable name used to initialize.
//
//  Programmer: childs -- generated by xml2info
//  Creation:   Wed May 24 09:22:33 PDT 2006
//
//  Modifications:
//    Hank Childs, Wed May 24 08:45:06 PDT 2006
//    Populated with custom code.
//
//    Brad Whitlock, Wed Feb 21 14:26:13 PST 2007
//    Changed API.
//
// ****************************************************************************
#include <ViewerPlot.h>
#include <avtDatabaseMetaData.h>

void
HistogramViewerPluginInfo::InitializePlotAtts(AttributeSubject *atts,
    const ViewerPlot *plot)
{
    *(HistogramAttributes*)atts = *defaultAtts;
    HistogramAttributes *hatts = (HistogramAttributes *) atts;

    //
    // Get the meta-data and initialize the variable type in the atts.
    //
    const avtDatabaseMetaData *md = plot->GetMetaData();
    if (md == NULL)
    {
        hatts->SetBasedOn(HistogramAttributes::ManyZonesForSingleVar);
        return;
    }

    avtVarType t = md->DetermineVarType(plot->GetVariableName());
    if (t == AVT_SCALAR_VAR)
        hatts->SetBasedOn(HistogramAttributes::ManyZonesForSingleVar);
    else if (t == AVT_ARRAY_VAR)
        hatts->SetBasedOn(HistogramAttributes::ManyVarsForSingleZone);
    else
        hatts->SetBasedOn(HistogramAttributes::ManyZonesForSingleVar);
}

Function: HistogramViewerPluginInfo::ReInitializePlotAtts
Declaration: virtual void ReInitializePlotAtts(AttributeSubject *atts, const ViewerPlot *);
Definition:
// ****************************************************************************
//  Method: HistogramViewerPluginInfo::ReInitializePlotAtts
//
//  Purpose:
//    ReInitialize the plot attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//
//  Programmer: Hank Childs
//  Creation:   May 24, 2006
//
//  Modifications:
//    Brad Whitlock, Wed Feb 21 14:25:26 PST 2007
//    Changed API.
//
// ****************************************************************************

void
HistogramViewerPluginInfo::ReInitializePlotAtts(AttributeSubject *atts,
    const ViewerPlot *plot)
{
    HistogramAttributes *hatts = (HistogramAttributes *) atts;

    //
    // Get the meta-data and initialize the variable type in the atts.
    //
    const avtDatabaseMetaData *md = plot->GetMetaData();
    if (md == NULL)
    {
        hatts->SetBasedOn(HistogramAttributes::ManyZonesForSingleVar);
        return;
    }

    avtVarType t = md->DetermineVarType(plot->GetVariableName());
    if (t == AVT_SCALAR_VAR)
        hatts->SetBasedOn(HistogramAttributes::ManyZonesForSingleVar);
    else if (t == AVT_ARRAY_VAR)
        hatts->SetBasedOn(HistogramAttributes::ManyVarsForSingleZone);
    else
        hatts->SetBasedOn(HistogramAttributes::ManyZonesForSingleVar);
}

Function: HistogramViewerPluginInfo::ResetPlotAtts
Declaration: virtual void ResetPlotAtts(AttributeSubject *atts, const ViewerPlot *);
Definition:
// ****************************************************************************
//  Method: HistogramViewerPluginInfo::ResetPlotAtts
//
//  Purpose:
//    Reset the plot attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//
//  Programmer: Hank Childs
//  Creation:   May 24, 2006
//
//  Modifications:
//    Brad Whitlock, Wed Feb 21 14:26:31 PST 2007
//    Changed API.
//
// ****************************************************************************
void
HistogramViewerPluginInfo::ResetPlotAtts(AttributeSubject *atts,
    const ViewerPlot *plot)
{
    ReInitializePlotAtts(atts, plot);
}

Function: HistogramViewerPluginInfo::ProvidesLegend
Declaration: virtual bool ProvidesLegend() const;
Definition:
bool
HistogramViewerPluginInfo::ProvidesLegend() const
{
    return false;
}

