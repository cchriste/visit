// ***************************************************************************
//
// Copyright (c) 2000 - 2009, Lawrence Livermore National Security, LLC
// Produced at the Lawrence Livermore National Laboratory
// LLNL-CODE-400124
// All rights reserved.
//
// This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
// full copyright notice is contained in the file COPYRIGHT located at the root
// of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
//
//  - Redistributions of  source code must  retain the above  copyright notice,
//    this list of conditions and the disclaimer below.
//  - Redistributions in binary form must reproduce the above copyright notice,
//    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
//    documentation and/or other materials provided with the distribution.
//  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
// ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
// LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
// DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
// SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
// CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
// LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
// OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ***************************************************************************

package llnl.visit.plots;

import llnl.visit.AttributeSubject;
import llnl.visit.CommunicationBuffer;
import llnl.visit.Plugin;

// ****************************************************************************
// Class: KerbelAttributes
//
// Purpose:
//    This class contains the attributes for a Kerbel plot.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   omitted
//
// Modifications:
//   
// ****************************************************************************

public class KerbelAttributes extends AttributeSubject implements Plugin
{
    private static int numAdditionalAttributes = 3;

    public KerbelAttributes()
    {
        super(numAdditionalAttributes);

        Center = new float[3];
        Center[0] = 0f;
        Center[1] = 0f;
        Center[2] = 0f;
        Radius = 1f;
        filename = new String("save.xml");
    }

    public KerbelAttributes(int nMoreFields)
    {
        super(numAdditionalAttributes + nMoreFields);

        Center = new float[3];
        Center[0] = 0f;
        Center[1] = 0f;
        Center[2] = 0f;
        Radius = 1f;
        filename = new String("save.xml");
    }

    public KerbelAttributes(KerbelAttributes obj)
    {
        super(numAdditionalAttributes);

        int i;

        Center = new float[3];
        Center[0] = obj.Center[0];
        Center[1] = obj.Center[1];
        Center[2] = obj.Center[2];

        Radius = obj.Radius;
        filename = new String(obj.filename);

        SelectAll();
    }

    public int Offset()
    {
        return super.Offset() + super.GetNumAdditionalAttributes();
    }

    public int GetNumAdditionalAttributes()
    {
        return numAdditionalAttributes;
    }

    public boolean equals(KerbelAttributes obj)
    {
        int i;

        // Compare the Center arrays.
        boolean Center_equal = true;
        for(i = 0; i < 3 && Center_equal; ++i)
            Center_equal = (Center[i] == obj.Center[i]);

        // Create the return value
        return (Center_equal &&
                (Radius == obj.Radius) &&
                (filename.equals(obj.filename)));
    }

    public String GetName() { return "Kerbel"; }
    public String GetVersion() { return "1.0"; }

    // Property setting methods
    public void SetCenter(float[] Center_)
    {
        Center[0] = Center_[0];
        Center[1] = Center_[1];
        Center[2] = Center_[2];
        Select(0);
    }

    public void SetCenter(float e0, float e1, float e2)
    {
        Center[0] = e0;
        Center[1] = e1;
        Center[2] = e2;
        Select(0);
    }

    public void SetRadius(float Radius_)
    {
        Radius = Radius_;
        Select(1);
    }

    public void SetFilename(String filename_)
    {
        filename = filename_;
        Select(2);
    }

    // Property getting methods
    public float[] GetCenter() { return Center; }
    public float   GetRadius() { return Radius; }
    public String  GetFilename() { return filename; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteFloatArray(Center);
        if(WriteSelect(1, buf))
            buf.WriteFloat(Radius);
        if(WriteSelect(2, buf))
            buf.WriteString(filename);
    }

    public void ReadAtts(int index, CommunicationBuffer buf)
    {
        switch(index)
        {
        case 0:
            SetCenter(buf.ReadFloatArray());
            break;
        case 1:
            SetRadius(buf.ReadFloat());
            break;
        case 2:
            SetFilename(buf.ReadString());
            break;
        }
    }

    public String toString(String indent)
    {
        String str = new String();
        str = str + floatArrayToString("Center", Center, indent) + "\n";
        str = str + floatToString("Radius", Radius, indent) + "\n";
        str = str + stringToString("filename", filename, indent) + "\n";
        return str;
    }


    // Attributes
    private float[] Center;
    private float   Radius;
    private String  filename;
}

