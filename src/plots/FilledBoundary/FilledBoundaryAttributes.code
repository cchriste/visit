Code: SetFromNode
Prefix:
Postfix:
    // We are no longer using MultiColor as the source for the "mixed"
    // color (in clean zones only), but someone may have saved their
    // settings with the "mixed" color in the list.  Remove it if it's
    // in there.
    //
    // NOTE: This code can be removed in a few months, as soon as
    // 1.3 is at least a few versions old, since it represents a little
    // bit of a hack.
    bool done = false;
    while (!done)
    {
        done = true;
        size_t index;
        for (index=0; index<boundaryNames.size(); index++)
        {
            if (boundaryNames[index] == "mixed")
            {
                done = false;
                break;
            }
        }
        if (!done)
        {
            multiColor.RemoveColors((int)index);
            for (size_t i=index+1; i<boundaryNames.size(); i++)
                boundaryNames[i-1] = boundaryNames[i];
            boundaryNames.resize(boundaryNames.size() - 1);
        }
    }

Function: ChangesRequireRecalculation
Declaration: bool ChangesRequireRecalculation(const FilledBoundaryAttributes &obj);
Definition:
// ****************************************************************************
// Modifications:
//    Jeremy Meredith, Mon Dec  9 16:30:54 PST 2002
//    Added smoothing level.
//
//    Jeremy Meredith, Fri Jun 13 16:58:16 PDT 2003
//    Added cleanZonesOnly.
//
//    Kathleen Bonnell, Wed Nov 10 09:22:35 PST 2004 
//    Added needSecondaryVar.
//
// ****************************************************************************
bool
FilledBoundaryAttributes::ChangesRequireRecalculation(const FilledBoundaryAttributes &obj)
{
    bool needSecondaryVar = obj.pointSizeVarEnabled &&
                            pointSizeVar != obj.pointSizeVar &&
                            obj.pointSizeVar != "default" && 
                            obj.pointSizeVar != "" &&
                            obj.pointSizeVar != "\0"; 

    return ((filledFlag != obj.filledFlag) ||
            (boundaryType != obj.boundaryType) || 
            (boundaryNames != obj.boundaryNames) ||
            (wireframe != obj.wireframe) ||
            (drawInternal != obj.drawInternal) ||
            (smoothingLevel != obj.smoothingLevel) ||
            (cleanZonesOnly != obj.cleanZonesOnly) ||
            needSecondaryVar);
}

Function: VarChangeRequiresReset
Declaration: virtual bool VarChangeRequiresReset(void);
Definition:
bool
FilledBoundaryAttributes::VarChangeRequiresReset()
{ 
    return true;
}

Target: xml2python
Function: PyFilledBoundaryAttributes_SetDefaults
Declaration: PyFilledBoundaryAttributes_SetDefaults
Definition: 
// ****************************************************************************
//  Modifications:
//    Kathleen Bonnell, Fri Jul 18 13:49:42 PDT 2003
//    Make defaultAtts point to the passed atts directly.
//
// ****************************************************************************

void
PyFilledBoundaryAttributes_SetDefaults(const FilledBoundaryAttributes *atts)
{
    defaultAtts = const_cast<FilledBoundaryAttributes*>(atts);
}

Target: xml2info
Function: FilledBoundaryViewerPluginInfo::InitializePlotAtts
Declaration: virtual void InitializePlotAtts(AttributeSubject *atts, const ViewerPlot *);
Definition: 
// ****************************************************************************
//  Method: FilledBoundaryViewerPluginInfo::InitializePlotAtts
//
//  Purpose:
//    Initialize the plot attributes to the default attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//
//  Programmer: whitlocb -- generated by xml2info
//  Creation:   Tue Mar 18 09:01:21 PDT 2003
//
//  Modifications:
//    Kathleen Bonnell, Tue Nov  6 08:19:45 PST 2001
//    Create labels only from mesh related to varName, not from all
//    meshes.
//
//    Hank Childs, Wed Aug 14 11:30:18 PDT 2002
//    Only use the labels from the material we actually have.
//
//    Kathleen Bonnell, Thu Sep  5 10:55:47 PDT 2002  
//    Moved bulk of code to PrivateSetPlotAtts to aid in maintenance, as it is
//    shared with ResetPlotAtts. 
//
//    Brad Whitlock, Fri Mar 26 15:19:50 PST 2004
//    I made it use passed in metadata.
//
//    Brad Whitlock, Wed Feb 21 14:31:20 PST 2007
//    Changed API.
//
// ****************************************************************************

void
FilledBoundaryViewerPluginInfo::InitializePlotAtts(AttributeSubject *atts,
    const ViewerPlot *plot)
{
    *(FilledBoundaryAttributes*)atts = *defaultAtts;

    PrivateSetPlotAtts(atts, plot);
}

Function: FilledBoundaryViewerPluginInfo::ReInitializePlotAtts
Declaration: virtual void ReInitializePlotAtts(AttributeSubject *atts, const ViewerPlot *);
Definition: 
// ****************************************************************************
//  Method: FilledBoundaryViewerPluginInfo::ReInitializePlotAtts
//
//  Purpose:
//    ReInitialize the plot attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//
//  Programmer: Kathleen Bonnell 
//  Creation:   December 5, 2002 
//
//  Modifications:
//   Brad Whitlock, Fri Mar 26 15:19:50 PST 2004
//   I made it use passed in metadata.
//
// ****************************************************************************

void
FilledBoundaryViewerPluginInfo::ReInitializePlotAtts(AttributeSubject *atts,
    const ViewerPlot *plot)
{
    PrivateSetPlotAtts(atts, plot);
}

Function: FilledBoundaryViewerPluginInfo::ResetPlotAtts
Declaration: virtual void ResetPlotAtts(AttributeSubject *atts, const ViewerPlot *);
Definition: 
// ****************************************************************************
//  Method: FilledBoundaryViewerPluginInfo::ResetPlotAtts
//
//  Purpose:
//    Initialize the plot attributes to the default attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//
//  Programmer: meredith -- generated by xml2info
//  Creation:   Fri Sep 7 10:53:06 PDT 2001
//
//  Modifications:
//    Kathleen Bonnell, Mon Apr 29 13:37:14 PDT 2002  
//    Create labels only from mesh related to varName, not from all
//    meshes.
//
//    Hank Childs, Wed Aug 14 11:30:18 PDT 2002
//    Only use the labels from the material we actually have.
//
//    Kathleen Bonnell, Thu Sep  5 10:55:47 PDT 2002  
//    Moved code to PrivateSetPlotAtts to aid in maintenance, as the code is
//    shared with InitializePlotAtts. 
//
//    Brad Whitlock, Fri Mar 26 15:19:50 PST 2004
//    I made it use passed in metadata.
//
//    Brad Whitlock, Wed Feb 21 14:31:20 PST 2007
//    Changed API.
//
// ****************************************************************************

void
FilledBoundaryViewerPluginInfo::ResetPlotAtts(AttributeSubject *atts,
    const ViewerPlot *plot)

{
    PrivateSetPlotAtts(atts, plot);
}

Function: FilledBoundaryViewerPluginInfo::PrivateSetPlotAtts
Declaration: void   PrivateSetPlotAtts(AttributeSubject *atts, const ViewerPlot *);
Definition: 
// ****************************************************************************
//  Method: FilledBoundaryViewerPluginInfo::PrivateSetPlotAtts
//
//  Purpose:
//    Initialize the plot attributes. 
//
//  Arguments:
//    atts          The attribute subject to initialize.
//    hostName      The host name of the plot. 
//    databaseName  The database name of the plot.
//    varName       The variable name of the plot.
//
//  Notes:  
//    This code was pulled from ResetPlotAtts and InitializePlotAtts to
//    aid in maintenance, and reworkd to support groups.
//
//  Programmer: Kathleen Bonnell 
//  Creation:   September 5, 2002 
//
//  Modifications:
//    Kathleen Bonnell, Thu Dec  5 16:53:22 PST 2002 
//    Changed exception from ImproperUse to InvalidVariable.
//
//    Brad Whitlock, Wed Nov 20 14:12:03 PST 2002
//    I added support for discrete color tables.
//
//    Kathleen Bonnell, Thu Sep  4 16:08:46 PDT 2003 
//    Set colors, subsetNames for defaultAtts so that "Reset" won't zero
//    out the colors in the gui.
//
//    Jeremy Meredith, Wed Oct 15 16:46:12 PDT 2003
//    Modified it to add an extra slot for a "mixed material zone" color.
//    This value is only used when the "Clean zones only" option is checked.
//
//    Jeremy Meredith, Wed Oct 22 13:00:10 PDT 2003
//    Made the support for the extra color a little more robust.  It now
//    is treated more like a special color; it only gets added if we are
//    doing a material plot, and doing another plot later with more materials
//    will overwrite it with the default color.
//
//    Brad Whitlock, Fri Mar 26 15:19:50 PST 2004
//    I made it use passed in metadata.
//
//    Jeremy Meredith, Wed Apr 14 16:30:09 PDT 2004
//    Removed all the extra coding for clean zones only.  It no longer goes
//    in the MultiColor list -- it is its own field in the attributes, and
//    it gets added to the plot/legend color mapping separately.
//
//    Mark C. Miller, Thu Jul 13 22:41:56 PDT 2006
//    Added use of colorNames from avtMaterialMetaData, if specified 
//
//    Brad Whitlock, Wed Feb 21 14:31:20 PST 2007
//    Changed API.
//
// ****************************************************************************

#include <stdio.h>

#include <avtColorTables.h>
#include <avtDatabaseMetaData.h>
#include <avtTypes.h>
#include <set>

#include <ViewerPlot.h>

#include <DebugStream.h>
#include <InvalidVariableException.h>

void
FilledBoundaryViewerPluginInfo::PrivateSetPlotAtts(AttributeSubject *atts, 
    const ViewerPlot *plot)
{
    FilledBoundaryAttributes *boundaryAtts = (FilledBoundaryAttributes *)atts;

    //
    // Get the meta-data and initialize the boundary names and colors in the
    // new FilledBoundaryAttributes object.
    //
    const avtDatabaseMetaData *md = plot->GetMetaData();
    if (md == NULL)
    {
        return;
    }

    avtDatabaseMetaData *nonConstmd = const_cast <avtDatabaseMetaData *>(md);

    std::string vn(plot->GetVariableName());

    const avtMaterialMetaData *mat = NULL;

    std::string meshName = nonConstmd->MeshForVar(vn);
    avtMeshMetaData *mesh = 
        const_cast <avtMeshMetaData *> (md->GetMesh(meshName));


    stringVector       sv;
    stringVector       matColors;
    stringVector::const_iterator pos;
    std::set<int> groupSet;
    std::vector<int> gIDS;
    char temp[512];

    // 
    // Create boundary names, based on FilledBoundary Type 
    // 
    avtSubsetType subT = nonConstmd->DetermineSubsetType(vn);
    switch (subT)
    {
      case AVT_DOMAIN_SUBSET : 
          debug5 << "Variable for boundary plot is a domain Mesh." << endl; 
          boundaryAtts->SetBoundaryType(FilledBoundaryAttributes::Domain);
          defaultAtts->SetBoundaryType(FilledBoundaryAttributes::Domain);
          if (mesh->blockNames.empty())
          {
              for (int i = 0; i < mesh->numBlocks; i++)
              { 
                  sprintf(temp, "%d", i+mesh->blockOrigin);
                  sv.push_back(temp);
              }
          }
          else
          {
              for(pos = mesh->blockNames.begin();
                  pos != mesh->blockNames.end(); ++pos)
              {
                  sv.push_back(*pos);
              }
          }
          break;

      case AVT_GROUP_SUBSET :
          debug5 << "Variable for boundary plot is a group Mesh." << endl; 
          boundaryAtts->SetBoundaryType(FilledBoundaryAttributes::Group);
          defaultAtts->SetBoundaryType(FilledBoundaryAttributes::Group);
          for (size_t i = 0; i < mesh->groupIds.size(); i++)
          {
              if (groupSet.count(mesh->groupIds[i]) == 0)
              {
                  groupSet.insert(mesh->groupIds[i]);
                  gIDS.push_back(mesh->groupIds[i]);
              }
          }
          for (size_t i = 0; i < gIDS.size(); i++)
          {
              sprintf(temp, "%d", gIDS[i]);
              sv.push_back(temp);
          }
          break;

      case AVT_MATERIAL_SUBSET :
          debug5 << "Variable for boundary plot is a Material." << endl; 
          boundaryAtts->SetBoundaryType(FilledBoundaryAttributes::Material);
          defaultAtts->SetBoundaryType(FilledBoundaryAttributes::Material);
          mat = md->GetMaterial(vn);
          if (mat != NULL)
          {
              for(pos = mat->materialNames.begin();
                  pos != mat->materialNames.end(); ++pos)
              {
                  sv.push_back(*pos);
              }
              matColors = mat->colorNames;
          }
          break;

      default:
          EXCEPTION1(InvalidVariableException, vn);
          break;
    }
    
    // 
    // Add a color for each boundary name.
    //
    ColorAttribute *ca = new ColorAttribute[sv.size() + 1];
    avtColorTables *ct = avtColorTables::Instance();
    if(ct->IsDiscrete(ct->GetDefaultDiscreteColorTable()))
    {
        // The CT is discrete, get its color color control points.
        for(size_t i = 0; i < sv.size(); ++i)
        {
            if (matColors.size() && matColors[i] != "")
                ca[i].SetByName(matColors[i].c_str());
            else
            {
                unsigned char rgb[3] = {0,0,0};
                ct->GetControlPointColor(ct->GetDefaultDiscreteColorTable(), (int)i, rgb);
                ca[i].SetRed(int(rgb[0]));
                ca[i].SetGreen(int(rgb[1]));
                ca[i].SetBlue(int(rgb[2]));
            }
        }
    }
    else
    {
        // The CT is continuous, sample the CT so we have a unique color
        // for each element in sv.
        unsigned char *rgb = ct->GetSampledColors(
            ct->GetDefaultDiscreteColorTable(), (int)sv.size());
        if(rgb)
        {
            for(size_t i = 0; i < sv.size(); ++i)
            {
                if (matColors.size() && matColors[i] != "")
                    ca[i].SetByName(matColors[i].c_str());
                else
                {
                    ca[i].SetRed(int(rgb[i*3]));
                    ca[i].SetGreen(int(rgb[i*3+1]));
                    ca[i].SetBlue(int(rgb[i*3+2]));
                }
            }
            delete [] rgb;
        }
    }

    ColorAttributeList cal;
    int idx = 0;
    for(pos = sv.begin(); pos != sv.end(); ++pos, ++idx)
    {
        if (idx < boundaryAtts->GetMultiColor().GetNumColors())
        {
            if (matColors.size() && matColors[idx] != "")
            {
                ColorAttribute tmpca;
                tmpca.SetByName(matColors[idx].c_str());
                cal.AddColors(tmpca);
            }
            else
            {
                // The meshIndex is within the defaultAtts' color
                // vector size.
                cal.AddColors(boundaryAtts->GetMultiColor()[idx]);
            }
        }
        else
        {
            // The meshIndex is greater than the size of the
            // defaultAtts' color vector. Use colors from the
            // default discrete color table.
            if (matColors.size() && matColors[idx] != "")
            {
                ColorAttribute tmpca;
                tmpca.SetByName(matColors[idx].c_str());
                cal.AddColors(tmpca);
            }
            else
            {
                cal.AddColors(ca[idx]);
            }
        }
    }

    delete [] ca;

    // Set the boundary names and colors in the boundaryAtts.
    boundaryAtts->SetBoundaryNames(sv);
    boundaryAtts->SetMultiColor(cal);
    defaultAtts->SetBoundaryNames(sv);
    defaultAtts->SetMultiColor(cal);
}
