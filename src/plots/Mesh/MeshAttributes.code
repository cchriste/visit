Target: xml2python
Code: PyMeshAttributes_getattr
Prefix:
Postfix:
    // Try and handle legacy fields in MeshAttributes
    if(strcmp(name, "backgroundFlag") == 0)
    {
        MeshAttributesObject *meshObj = (MeshAttributesObject *)self;
        bool backgroundFlag = meshObj->data->GetOpaqueColorSource() == MeshAttributes::Background;
        return PyInt_FromLong(backgroundFlag?1L:0L);
    }
    else if(strcmp(name, "foregroundFlag") == 0)
    {
        MeshAttributesObject *meshObj = (MeshAttributesObject *)self;
        bool foregroundFlag = meshObj->data->GetMeshColorSource() == MeshAttributes::Foreground;
        return PyInt_FromLong(foregroundFlag?1L:0L);
    }

Code: PyMeshAttributes_setattr
Prefix:
Postfix:
    // Try and handle legacy fields in MeshAttributes
    if(obj == NULL)
    {
        MeshAttributesObject *meshObj = (MeshAttributesObject *)self;
        if(strcmp(name, "backgroundFlag") == 0)
        {
            int ival;
            if(!PyArg_ParseTuple(tuple, "i", &ival))
            {
                Py_DECREF(tuple);
                return -1;
            }
            if(ival == 0)
                meshObj->data->SetOpaqueColorSource(MeshAttributes::OpaqueCustom);
            else
                meshObj->data->SetOpaqueColorSource(MeshAttributes::Background);
    
            Py_INCREF(Py_None);
            obj = Py_None;
        }
        else if(strcmp(name, "foregroundFlag") == 0)
        {
            int ival;
            if(!PyArg_ParseTuple(tuple, "i", &ival))
            {
                Py_DECREF(tuple);
                return -1;
            }
            if(ival == 0)
                meshObj->data->SetMeshColorSource(MeshAttributes::MeshCustom);
            else
                meshObj->data->SetMeshColorSource(MeshAttributes::Foreground);
    
            Py_INCREF(Py_None);
            obj = Py_None;
        }
    }

Target: xml2atts
Function: ChangesRequireRecalculation
Declaration: bool ChangesRequireRecalculation(const MeshAttributes &, const int);
Definition:
// ****************************************************************************
//  Modifications: 
//
//    Kathleen Bonnell, Wed Aug 22 16:00:32 PDT 2001
//    Changing opaque mode no longer requires recalculation.
//
//    Jeremy Meredith, Mon Dec  9 16:30:54 PST 2002
//    Added smoothing level.
//
//    Jeremy Meredith, Fri Dec 20 11:33:43 PST 2002
//    Added point size variable and its enabled flag.
//
//    Hank Childs, Thu Aug 21 23:05:45 PDT 2003
//    Added point type.
//
//    Kathleen Bonnell, Thu Feb  5 13:07:06 PST 2004 
//    Added spatDim argument, added showInternal. 
//
//    Kathleen Bonnell, Tue Nov  2 10:32:21 PST 2004 
//    Removed point type and point size from test, changed pointSizeVar test
//    so that only true if changes require adding new secondary varaible. 
//
// ****************************************************************************

bool
MeshAttributes::ChangesRequireRecalculation(const MeshAttributes &obj,
                                            const int spatDim)
{
    bool needSecondaryVar = (obj.pointSizeVarEnabled && 
                            ((pointSizeVar != obj.pointSizeVar) &&
                             (obj.pointSizeVar != "default") &&
                             (obj.pointSizeVar != "") &&
                             (obj.pointSizeVar != "\0"))); 

    return ((outlineOnlyFlag != obj.outlineOnlyFlag) ||
            (errorTolerance != obj.errorTolerance) ||
            (needSecondaryVar) ||
            (smoothingLevel != obj.smoothingLevel) ||
            (showInternal != obj.showInternal && spatDim == 3));
}

