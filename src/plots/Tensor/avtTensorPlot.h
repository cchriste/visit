// ************************************************************************* //
//                                 avtTensorPlot.h                           //
// ************************************************************************* //

#ifndef AVT_Tensor_PLOT_H
#define AVT_Tensor_PLOT_H


#include <avtLegend.h>
#include <avtPlot.h>

#include <TensorAttributes.h>

class     avtTensorFilter;
class     avtTensorGlyphMapper;
class     avtGhostZoneFilter;
class     avtVariableLegend;
class     avtLookupTable;


// ****************************************************************************
//  Class:  avtTensorPlot
//
//  Purpose:
//      A concrete type of avtPlot, this is the Tensor plot.
//
//  Programmer: childs -- generated by xml2info
//  Creation:   Tue Sep 23 20:57:03 PST 2003
//
//  Modifications:
//
//    Mark C. Miller, Wed Aug 11 23:42:18 PDT 2004
//    Added GetCellCountMultiplierForSRThreshold
//
// ****************************************************************************

class avtTensorPlot : public avtPointDataPlot
{
  public:
                                avtTensorPlot();
    virtual                    ~avtTensorPlot();

    virtual const char         *GetName(void) { return "TensorPlot"; };
    virtual void                ReleaseData(void);

    static avtPlot             *Create();

    virtual void                SetAtts(const AttributeGroup*);

    virtual float               GetCellCountMultiplierForSRThreshold() const
                                    { return 96.0; };

  protected:
    TensorAttributes              atts;
    bool                          colorsInitialized;

    avtTensorGlyphMapper         *tensorMapper;
    avtVariableLegend            *varLegend;
    avtLegend_p                   varLegendRefPtr;
    avtTensorFilter              *TensorFilter;
    avtGhostZoneFilter           *ghostFilter;
    avtLookupTable               *avtLUT;


    virtual avtMapper          *GetMapper(void);
    virtual avtDataObject_p     ApplyOperators(avtDataObject_p);
    virtual avtDataObject_p     ApplyRenderingTransformation(avtDataObject_p);
    virtual void                CustomizeBehavior(void);
    virtual void                CustomizeMapper(avtDataObjectInformation &);
    bool                        SetColorTable(const char *);

    virtual avtLegend_p         GetLegend(void) { return varLegendRefPtr; };
    void                        SetLegend(bool);
    void                        SetLegendRanges();
};


#endif


