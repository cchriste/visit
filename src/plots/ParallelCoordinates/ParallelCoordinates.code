Function: InsertAxis
Declaration: void InsertAxis(const std::string &axisName_);
Definition:
// ****************************************************************************
// Method: ParallelCoordinatesAttributes::InsertAxis
//
// Purpose: Inserts an axis (assuming at the end)
//
// Programmer: Jeremy Meredith
// Creation:   January 31, 2008
//
// Note: Taken largely from Mark Blair's Parallel Axis plot.
//
// Modifications:
//    Jeremy Meredith, Fri Feb  1 17:55:14 EST 2008
//    Made it use float min/max for non-limiting extents values.
//   
//    Jeremy Meredith, Mon Feb  4 16:07:37 EST 2008
//    Remove the axis extents; they were unusued.
//
// ****************************************************************************

void
ParallelCoordinatesAttributes::InsertAxis(const std::string &axisName_)
{
    std::string newAxisName = axisName_;

    int curAxisCount = orderedAxisNames.size();
    int axisOrdinal;
    double saveExtentMin, saveExtentMax;

    stringVector::iterator axisNamesIt;
    doubleVector::iterator extentMinIt;
    doubleVector::iterator extentMaxIt;
    
    for (axisOrdinal = 0; axisOrdinal < curAxisCount; axisOrdinal++)
    {
        if (orderedAxisNames[axisOrdinal] == newAxisName) break;
    }

    if (axisOrdinal < curAxisCount)
    {
        saveExtentMin  = extentMinima[axisOrdinal];
        saveExtentMax  = extentMaxima[axisOrdinal];

        axisNamesIt  = orderedAxisNames.begin() + axisOrdinal;
        extentMinIt  = extentMinima.begin()     + axisOrdinal;
        extentMaxIt  = extentMaxima.begin()     + axisOrdinal;

        orderedAxisNames.erase(axisNamesIt);
        extentMinima.erase(extentMinIt);
        extentMaxima.erase(extentMaxIt);
    }
    else
    {
        saveExtentMin  = -1e+37;
        saveExtentMax  = +1e+37;
    }

    int insertOrdinal = orderedAxisNames.size();

    axisNamesIt  = orderedAxisNames.begin() + insertOrdinal;
    extentMinIt  = extentMinima.begin()     + insertOrdinal;
    extentMaxIt  = extentMaxima.begin()     + insertOrdinal;

    orderedAxisNames.insert(axisNamesIt, newAxisName);
    extentMinima.insert(extentMinIt, saveExtentMin);
    extentMaxima.insert(extentMaxIt, saveExtentMax);
    
    SelectAll();
}

Function: DeleteAxis
Declaration: void DeleteAxis(const std::string &axisName_, int minAxisCount);
Definition:
// ****************************************************************************
// Method: ParallelCoordinatesAttributes::DeleteAxis
//
// Purpose: Deletes an axis (as long as there are enough remaining)
//
// Programmer: Jeremy Meredith
// Creation:   January 31, 2008
//
// Note: Taken largely from Mark Blair's Parallel Axis plot.
//
// Modifications:
//    Jeremy Meredith, Mon Feb  4 16:07:37 EST 2008
//    Remove the axis extents; they were unusued.
//   
// ****************************************************************************

void
ParallelCoordinatesAttributes::DeleteAxis(const std::string &axisName_,
                                          int minAxisCount)
{
    if (orderedAxisNames.size() <= minAxisCount) return;

    std::string newAxisName = axisName_;

    int curAxisCount = orderedAxisNames.size();
    int leftSelectedAxisID, rightSelectedAxisID;
    int axisOrdinal;

    for (axisOrdinal = 0; axisOrdinal < curAxisCount; axisOrdinal++)
    {
        if (orderedAxisNames[axisOrdinal] == newAxisName) break;
    }

    if (axisOrdinal < curAxisCount)
    {
        orderedAxisNames.erase(orderedAxisNames.begin() + axisOrdinal);
        extentMinima.erase(extentMinima.begin() + axisOrdinal);
        extentMaxima.erase(extentMaxima.begin() + axisOrdinal);
        
        SelectAll();
    }
}

Function: AttributesAreConsistent
Declaration: bool AttributesAreConsistent() const;
Definition:
// ****************************************************************************
// Method: ParallelCoordinatesAttributes::AttributesAreConsistent
//
// Purpose: Returns true only if (1) all vector attributes are the same length,
//          (2) all axis names are unique, and (3) the index of the currently
//          displayable axis information in the GUI is in range.
//
// Programmer: Jeremy Meredith
// Creation:   January 31, 2008
//
// Note: Taken largely from Mark Blair's Parallel Axis plot.
//
// Modifications:
//    Jeremy Meredith, Mon Feb  4 16:07:37 EST 2008
//    Remove the axis extents; they were unusued.
//   
//    Jeremy Meredith, Thu Feb  7 17:45:11 EST 2008
//    Allow empty axis name list; this happens for array variables.
//
// ****************************************************************************

bool
ParallelCoordinatesAttributes::AttributesAreConsistent() const
{
    int axisNamesSize = orderedAxisNames.size();
    int axisNum, axis2Num;
    std::string axisName;
    
    if (axisNamesSize == 0)
    {
        if (extentMinima.size() != extentMaxima.size())
            return false;

        return true;
    }
    
    if (axisNamesSize == 1)
        return false;

    if ((extentMinima.size()     != axisNamesSize) ||
        (extentMaxima.size()     != axisNamesSize))
    {
        return false;
    }
    
    for (axisNum = 0; axisNum < axisNamesSize - 1; axisNum++)
    {
        axisName = orderedAxisNames[axisNum];

        for (axis2Num = axisNum + 1; axis2Num < axisNamesSize; axis2Num++ )
        {
            if (orderedAxisNames[axis2Num] == axisName)
                return false;
        }
    }
    
    return true;
}

Function: ChangesRequireRecalculation
Declaration: bool ChangesRequireRecalculation(const ParallelCoordinatesAttributes &obj);
Definition:
// ****************************************************************************
// Method: ParallelCoordinatesAttributes::ChangesRequireRecalculation
//
// Purpose: Sets the attributes from another attribute group
//
// Programmer: Jeremy Meredith
// Creation:   January 31, 2008
//
// Modifications:
//    Jeremy Meredith, Fri Feb  8 12:35:47 EST 2008
//    Added unifyAxisExtents.
//
// ****************************************************************************
bool
ParallelCoordinatesAttributes::ChangesRequireRecalculation(
    const ParallelCoordinatesAttributes &obj)
{
    if (extentMinima != obj.extentMinima ||
        extentMaxima != obj.extentMaxima ||
        drawLines != obj.drawLines ||
        drawContext != obj.drawContext ||
        drawLinesOnlyIfExtentsOn != obj.drawLinesOnlyIfExtentsOn ||
        contextNumPartitions != obj.contextNumPartitions ||
        contextGamma != obj.contextGamma ||
        orderedAxisNames != obj.orderedAxisNames ||
        unifyAxisExtents != obj.unifyAxisExtents)
    {
        return true;
    }
    return false;
}

Function: CopyAttributes
Declaration: virtual bool CopyAttributes(const AttributeGroup *);
Definition:
// ****************************************************************************
// Method: ParallelCoordinatesAttributes::CopyAttributes
//
// Purpose: Sets the attributes from another attribute group
//
// Programmer: Jeremy Meredith
// Creation:   January 31, 2008
//
// Modifications:
//    Jeremy Meredith, Fri Feb  1 17:56:21 EST 2008
//    Added support for axis restrictions.
//   
//    Jeremy Meredith, Thu Feb  7 17:45:11 EST 2008
//    Allow empty axis name list; this happens for array variables.
//
// ****************************************************************************
bool
ParallelCoordinatesAttributes::CopyAttributes(const AttributeGroup *atts)
{
    bool retval = false;

    if(TypeName() == atts->TypeName())
    {
        // Call assignment operator.
        const ParallelCoordinatesAttributes *tmp =
            (const ParallelCoordinatesAttributes *)atts;
        *this = *tmp;
        retval = true;
    }
    else if (atts->TypeName() == "AxisRestrictionAttributes")
    {
        const AxisRestrictionAttributes *ar =
            (const AxisRestrictionAttributes *)atts;

        if (orderedAxisNames.size() == 0)
        {
            extentMinima = ar->GetMinima();
            extentMaxima = ar->GetMaxima();
        }
        else
        {
            for (int i=0; i<extentMinima.size(); i++)
            {
                extentMinima[i] = ar->GetMinima()[i];
                extentMaxima[i] = ar->GetMaxima()[i];
            }
        }
        SelectExtentMinima();
        SelectExtentMaxima();

        retval = true;
    }
    return retval;
}

Function: CreateCompatible
Declaration: virtual AttributeSubject *CreateCompatible(const std::string &) const;
Definition:
// ****************************************************************************
//  Method:  ParallelCoordinatesAttributes::CreateCompatible
//
//  Purpose:
//    Creates an object of the specified type initialized with the
//    attributes from this object.
//
//  Arguments:
//    tname : The typename of the object that we want to create.
//
//  Returns:    A new object of the type specified by tname or 0.
//
//  Programmer:  Jeremy Meredith
//  Creation:    February  8, 2008
//
// ****************************************************************************
AttributeSubject *
ParallelCoordinatesAttributes::CreateCompatible(const std::string &tname) const
{
    AttributeSubject *retval = 0;

    if(TypeName() == tname)
    {
        retval = new ParallelCoordinatesAttributes(*this);
    }
    else if(tname == "AxisRestrictionAttributes")
    {
        AxisRestrictionAttributes *ar = new AxisRestrictionAttributes;

        ar->SetMinima(extentMinima);
        ar->SetMaxima(extentMaxima);

        retval = ar;
    }
}


Function: ResetAxes
Declaration: void ResetAxes();
Definition:
// ****************************************************************************
//  Method:  ParallelCoordinatesAttributes::ResetAxes
//
//  Purpose:
//    Clear out all the variable axes.
//
//  Arguments:
//    none
//
//  Programmer:  Jeremy Meredith
//  Creation:    February  7, 2008
//
// ****************************************************************************
void
ParallelCoordinatesAttributes::ResetAxes()
{
    orderedAxisNames.clear();
    extentMinima.clear();
    extentMaxima.clear();
    
    SelectAll();
}
