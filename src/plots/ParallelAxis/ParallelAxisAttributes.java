// ***************************************************************************
//
// Copyright (c) 2000 - 2006, The Regents of the University of California
// Produced at the Lawrence Livermore National Laboratory
// All rights reserved.
//
// This file is part of VisIt. For details, see http://www.llnl.gov/visit/. The
// full copyright notice is contained in the file COPYRIGHT located at the root
// of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
//
//  - Redistributions of  source code must  retain the above  copyright notice,
//    this list of conditions and the disclaimer below.
//  - Redistributions in binary form must reproduce the above copyright notice,
//    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
//    documentation and/or materials provided with the distribution.
//  - Neither the name of the UC/LLNL nor  the names of its contributors may be
//    used to  endorse or  promote products derived from  this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
// ARE  DISCLAIMED.  IN  NO  EVENT  SHALL  THE  REGENTS  OF  THE  UNIVERSITY OF
// CALIFORNIA, THE U.S.  DEPARTMENT  OF  ENERGY OR CONTRIBUTORS BE  LIABLE  FOR
// ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
// SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
// CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
// LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
// OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ***************************************************************************

package llnl.visit.plots;

import llnl.visit.AttributeSubject;
import llnl.visit.CommunicationBuffer;
import llnl.visit.Plugin;
import java.util.Vector;
import java.lang.Double;

// ****************************************************************************
// Class: ParallelAxisAttributes
//
// Purpose:
//    This class contains the plot attributes for the ParallelAxis plot.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   Wed Aug 16 18:29:25 PST 2006
//
// Modifications:
//   
// ****************************************************************************

public class ParallelAxisAttributes extends AttributeSubject implements Plugin
{
    public ParallelAxisAttributes()
    {
        super(6);

        orderedAxisNames = new Vector();
        orderedAxisNames.addElement(new String("default"));
        shownVarAxisPosition = 0;
        axisMinima = new Vector();
        axisMinima.addElement(new Double(-1e+37));
        axisMaxima = new Vector();
        axisMaxima.addElement(new Double(1e+37));
        extentMinima = new Vector();
        extentMinima.addElement(new Double(0));
        extentMaxima = new Vector();
        extentMaxima.addElement(new Double(1));
    }

    public ParallelAxisAttributes(ParallelAxisAttributes obj)
    {
        super(6);

        int i;

        orderedAxisNames = new Vector(obj.orderedAxisNames.size());
        for(i = 0; i < obj.orderedAxisNames.size(); ++i)
            orderedAxisNames.addElement(new String((String)obj.orderedAxisNames.elementAt(i)));

        shownVarAxisPosition = obj.shownVarAxisPosition;
        axisMinima = new Vector(obj.axisMinima.size());
        for(i = 0; i < obj.axisMinima.size(); ++i)
        {
            Double dv = (Double)obj.axisMinima.elementAt(i);
            axisMinima.addElement(new Double(dv.doubleValue()));
        }

        axisMaxima = new Vector(obj.axisMaxima.size());
        for(i = 0; i < obj.axisMaxima.size(); ++i)
        {
            Double dv = (Double)obj.axisMaxima.elementAt(i);
            axisMaxima.addElement(new Double(dv.doubleValue()));
        }

        extentMinima = new Vector(obj.extentMinima.size());
        for(i = 0; i < obj.extentMinima.size(); ++i)
        {
            Double dv = (Double)obj.extentMinima.elementAt(i);
            extentMinima.addElement(new Double(dv.doubleValue()));
        }

        extentMaxima = new Vector(obj.extentMaxima.size());
        for(i = 0; i < obj.extentMaxima.size(); ++i)
        {
            Double dv = (Double)obj.extentMaxima.elementAt(i);
            extentMaxima.addElement(new Double(dv.doubleValue()));
        }


        SelectAll();
    }

    public boolean equals(ParallelAxisAttributes obj)
    {
        int i;

        // Create the return value
        return ((orderedAxisNames == obj.orderedAxisNames) &&
                (shownVarAxisPosition == obj.shownVarAxisPosition) &&
                (axisMinima == obj.axisMinima) &&
                (axisMaxima == obj.axisMaxima) &&
                (extentMinima == obj.extentMinima) &&
                (extentMaxima == obj.extentMaxima));
    }

    public String GetName() { return "ParallelAxis"; }
    public String GetVersion() { return "1.0"; }

    // Property setting methods
    public void SetOrderedAxisNames(Vector orderedAxisNames_)
    {
        orderedAxisNames = orderedAxisNames_;
        Select(0);
    }

    public void SetShownVarAxisPosition(int shownVarAxisPosition_)
    {
        shownVarAxisPosition = shownVarAxisPosition_;
        Select(1);
    }

    public void SetAxisMinima(Vector axisMinima_)
    {
        axisMinima = axisMinima_;
        Select(2);
    }

    public void SetAxisMaxima(Vector axisMaxima_)
    {
        axisMaxima = axisMaxima_;
        Select(3);
    }

    public void SetExtentMinima(Vector extentMinima_)
    {
        extentMinima = extentMinima_;
        Select(4);
    }

    public void SetExtentMaxima(Vector extentMaxima_)
    {
        extentMaxima = extentMaxima_;
        Select(5);
    }

    // Property getting methods
    public Vector GetOrderedAxisNames() { return orderedAxisNames; }
    public int    GetShownVarAxisPosition() { return shownVarAxisPosition; }
    public Vector GetAxisMinima() { return axisMinima; }
    public Vector GetAxisMaxima() { return axisMaxima; }
    public Vector GetExtentMinima() { return extentMinima; }
    public Vector GetExtentMaxima() { return extentMaxima; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteStringVector(orderedAxisNames);
        if(WriteSelect(1, buf))
            buf.WriteInt(shownVarAxisPosition);
        if(WriteSelect(2, buf))
            buf.WriteDoubleVector(axisMinima);
        if(WriteSelect(3, buf))
            buf.WriteDoubleVector(axisMaxima);
        if(WriteSelect(4, buf))
            buf.WriteDoubleVector(extentMinima);
        if(WriteSelect(5, buf))
            buf.WriteDoubleVector(extentMaxima);
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        for(int i = 0; i < n; ++i)
        {
            int index = (int)buf.ReadByte();
            switch(index)
            {
            case 0:
                SetOrderedAxisNames(buf.ReadStringVector());
                break;
            case 1:
                SetShownVarAxisPosition(buf.ReadInt());
                break;
            case 2:
                SetAxisMinima(buf.ReadDoubleVector());
                break;
            case 3:
                SetAxisMaxima(buf.ReadDoubleVector());
                break;
            case 4:
                SetExtentMinima(buf.ReadDoubleVector());
                break;
            case 5:
                SetExtentMaxima(buf.ReadDoubleVector());
                break;
            }
        }
    }


    // Attributes
    private Vector orderedAxisNames; // vector of String objects
    private int    shownVarAxisPosition;
    private Vector axisMinima; // vector of Double objects
    private Vector axisMaxima; // vector of Double objects
    private Vector extentMinima; // vector of Double objects
    private Vector extentMaxima; // vector of Double objects
}

