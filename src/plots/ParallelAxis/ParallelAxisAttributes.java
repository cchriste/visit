// ***************************************************************************
//
// Copyright (c) 2000 - 2008, Lawrence Livermore National Security, LLC
// Produced at the Lawrence Livermore National Laboratory
// LLNL-CODE-400142
// All rights reserved.
//
// This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
// full copyright notice is contained in the file COPYRIGHT located at the root
// of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
//
//  - Redistributions of  source code must  retain the above  copyright notice,
//    this list of conditions and the disclaimer below.
//  - Redistributions in binary form must reproduce the above copyright notice,
//    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
//    documentation and/or other materials provided with the distribution.
//  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
// ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
// LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
// DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
// SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
// CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
// LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
// OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ***************************************************************************

package llnl.visit.plots;

import llnl.visit.AttributeSubject;
import llnl.visit.CommunicationBuffer;
import llnl.visit.Plugin;
import java.util.Vector;
import java.lang.Double;
import java.lang.Integer;
import llnl.visit.ColorAttribute;

// ****************************************************************************
// Class: ParallelAxisAttributes
//
// Purpose:
//    This class contains the plot attributes for the ParallelAxis plot.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   omitted
//
// Modifications:
//   
// ****************************************************************************

public class ParallelAxisAttributes extends AttributeSubject implements Plugin
{

    public ParallelAxisAttributes()
    {
        super(22);

        orderedAxisNames = new Vector();
        orderedAxisNames.addElement(new String("default"));
        shownVarAxisOrdinal = 0;
        axisMinima = new Vector();
        axisMinima.addElement(new Double(-1e+37));
        axisMaxima = new Vector();
        axisMaxima.addElement(new Double(1e+37));
        extentMinima = new Vector();
        extentMinima.addElement(new Double(0));
        extentMaxima = new Vector();
        extentMaxima.addElement(new Double(1));
        extMinTimeOrds = new Vector();
        extMinTimeOrds.addElement(new Integer(0));
        extMaxTimeOrds = new Vector();
        extMaxTimeOrds.addElement(new Integer(0));
        plotToolModeFlags = 0;
        axisGroupNames = new Vector();
        axisGroupNames.addElement(new String("(not_in_a_group)"));
        axisInfoFlagSets = new Vector();
        axisXPositions = new Vector();
        axisXPositions.addElement(new Double(-1));
        axisAttributeVariables = new Vector();
        axisAttributeVariables.addElement(new String("default"));
        attributesPerAxis = 0;
        axisAttributeData = new Vector();
        drawLines = true;
        linesColor = new ColorAttribute(128, 0, 0);
        drawContext = true;
        contextGamma = 2f;
        contextNumPartitions = 512;
        contextColor = new ColorAttribute(0, 220, 0);
        drawLinesOnlyIfExtentsOn = true;
    }

    public ParallelAxisAttributes(ParallelAxisAttributes obj)
    {
        super(22);

        int i;

        orderedAxisNames = new Vector(obj.orderedAxisNames.size());
        for(i = 0; i < obj.orderedAxisNames.size(); ++i)
            orderedAxisNames.addElement(new String((String)obj.orderedAxisNames.elementAt(i)));

        shownVarAxisOrdinal = obj.shownVarAxisOrdinal;
        axisMinima = new Vector(obj.axisMinima.size());
        for(i = 0; i < obj.axisMinima.size(); ++i)
        {
            Double dv = (Double)obj.axisMinima.elementAt(i);
            axisMinima.addElement(new Double(dv.doubleValue()));
        }

        axisMaxima = new Vector(obj.axisMaxima.size());
        for(i = 0; i < obj.axisMaxima.size(); ++i)
        {
            Double dv = (Double)obj.axisMaxima.elementAt(i);
            axisMaxima.addElement(new Double(dv.doubleValue()));
        }

        extentMinima = new Vector(obj.extentMinima.size());
        for(i = 0; i < obj.extentMinima.size(); ++i)
        {
            Double dv = (Double)obj.extentMinima.elementAt(i);
            extentMinima.addElement(new Double(dv.doubleValue()));
        }

        extentMaxima = new Vector(obj.extentMaxima.size());
        for(i = 0; i < obj.extentMaxima.size(); ++i)
        {
            Double dv = (Double)obj.extentMaxima.elementAt(i);
            extentMaxima.addElement(new Double(dv.doubleValue()));
        }

        extMinTimeOrds = new Vector();
        for(i = 0; i < obj.extMinTimeOrds.size(); ++i)
        {
            Integer iv = (Integer)obj.extMinTimeOrds.elementAt(i);
            extMinTimeOrds.addElement(new Integer(iv.intValue()));
        }
        extMaxTimeOrds = new Vector();
        for(i = 0; i < obj.extMaxTimeOrds.size(); ++i)
        {
            Integer iv = (Integer)obj.extMaxTimeOrds.elementAt(i);
            extMaxTimeOrds.addElement(new Integer(iv.intValue()));
        }
        plotToolModeFlags = obj.plotToolModeFlags;
        axisGroupNames = new Vector(obj.axisGroupNames.size());
        for(i = 0; i < obj.axisGroupNames.size(); ++i)
            axisGroupNames.addElement(new String((String)obj.axisGroupNames.elementAt(i)));

        axisInfoFlagSets = new Vector();
        for(i = 0; i < obj.axisInfoFlagSets.size(); ++i)
        {
            Integer iv = (Integer)obj.axisInfoFlagSets.elementAt(i);
            axisInfoFlagSets.addElement(new Integer(iv.intValue()));
        }
        axisXPositions = new Vector(obj.axisXPositions.size());
        for(i = 0; i < obj.axisXPositions.size(); ++i)
        {
            Double dv = (Double)obj.axisXPositions.elementAt(i);
            axisXPositions.addElement(new Double(dv.doubleValue()));
        }

        axisAttributeVariables = new Vector(obj.axisAttributeVariables.size());
        for(i = 0; i < obj.axisAttributeVariables.size(); ++i)
            axisAttributeVariables.addElement(new String((String)obj.axisAttributeVariables.elementAt(i)));

        attributesPerAxis = obj.attributesPerAxis;
        axisAttributeData = new Vector(obj.axisAttributeData.size());
        for(i = 0; i < obj.axisAttributeData.size(); ++i)
        {
            Double dv = (Double)obj.axisAttributeData.elementAt(i);
            axisAttributeData.addElement(new Double(dv.doubleValue()));
        }

        drawLines = obj.drawLines;
        linesColor = new ColorAttribute(obj.linesColor);
        drawContext = obj.drawContext;
        contextGamma = obj.contextGamma;
        contextNumPartitions = obj.contextNumPartitions;
        contextColor = new ColorAttribute(obj.contextColor);
        drawLinesOnlyIfExtentsOn = obj.drawLinesOnlyIfExtentsOn;

        SelectAll();
    }

    public boolean equals(ParallelAxisAttributes obj)
    {
        int i;

        // Compare the elements in the orderedAxisNames vector.
        boolean orderedAxisNames_equal = (obj.orderedAxisNames.size() == orderedAxisNames.size());
        for(i = 0; (i < orderedAxisNames.size()) && orderedAxisNames_equal; ++i)
        {
            // Make references to String from Object.
            String orderedAxisNames1 = (String)orderedAxisNames.elementAt(i);
            String orderedAxisNames2 = (String)obj.orderedAxisNames.elementAt(i);
            orderedAxisNames_equal = orderedAxisNames1.equals(orderedAxisNames2);
        }
        // Compare the elements in the axisMinima vector.
        boolean axisMinima_equal = (obj.axisMinima.size() == axisMinima.size());
        for(i = 0; (i < axisMinima.size()) && axisMinima_equal; ++i)
        {
            // Make references to Double from Object.
            Double axisMinima1 = (Double)axisMinima.elementAt(i);
            Double axisMinima2 = (Double)obj.axisMinima.elementAt(i);
            axisMinima_equal = axisMinima1.equals(axisMinima2);
        }
        // Compare the elements in the axisMaxima vector.
        boolean axisMaxima_equal = (obj.axisMaxima.size() == axisMaxima.size());
        for(i = 0; (i < axisMaxima.size()) && axisMaxima_equal; ++i)
        {
            // Make references to Double from Object.
            Double axisMaxima1 = (Double)axisMaxima.elementAt(i);
            Double axisMaxima2 = (Double)obj.axisMaxima.elementAt(i);
            axisMaxima_equal = axisMaxima1.equals(axisMaxima2);
        }
        // Compare the elements in the extentMinima vector.
        boolean extentMinima_equal = (obj.extentMinima.size() == extentMinima.size());
        for(i = 0; (i < extentMinima.size()) && extentMinima_equal; ++i)
        {
            // Make references to Double from Object.
            Double extentMinima1 = (Double)extentMinima.elementAt(i);
            Double extentMinima2 = (Double)obj.extentMinima.elementAt(i);
            extentMinima_equal = extentMinima1.equals(extentMinima2);
        }
        // Compare the elements in the extentMaxima vector.
        boolean extentMaxima_equal = (obj.extentMaxima.size() == extentMaxima.size());
        for(i = 0; (i < extentMaxima.size()) && extentMaxima_equal; ++i)
        {
            // Make references to Double from Object.
            Double extentMaxima1 = (Double)extentMaxima.elementAt(i);
            Double extentMaxima2 = (Double)obj.extentMaxima.elementAt(i);
            extentMaxima_equal = extentMaxima1.equals(extentMaxima2);
        }
        // Compare the elements in the extMinTimeOrds vector.
        boolean extMinTimeOrds_equal = (obj.extMinTimeOrds.size() == extMinTimeOrds.size());
        for(i = 0; (i < extMinTimeOrds.size()) && extMinTimeOrds_equal; ++i)
        {
            // Make references to Integer from Object.
            Integer extMinTimeOrds1 = (Integer)extMinTimeOrds.elementAt(i);
            Integer extMinTimeOrds2 = (Integer)obj.extMinTimeOrds.elementAt(i);
            extMinTimeOrds_equal = extMinTimeOrds1.equals(extMinTimeOrds2);
        }
        // Compare the elements in the extMaxTimeOrds vector.
        boolean extMaxTimeOrds_equal = (obj.extMaxTimeOrds.size() == extMaxTimeOrds.size());
        for(i = 0; (i < extMaxTimeOrds.size()) && extMaxTimeOrds_equal; ++i)
        {
            // Make references to Integer from Object.
            Integer extMaxTimeOrds1 = (Integer)extMaxTimeOrds.elementAt(i);
            Integer extMaxTimeOrds2 = (Integer)obj.extMaxTimeOrds.elementAt(i);
            extMaxTimeOrds_equal = extMaxTimeOrds1.equals(extMaxTimeOrds2);
        }
        // Compare the elements in the axisGroupNames vector.
        boolean axisGroupNames_equal = (obj.axisGroupNames.size() == axisGroupNames.size());
        for(i = 0; (i < axisGroupNames.size()) && axisGroupNames_equal; ++i)
        {
            // Make references to String from Object.
            String axisGroupNames1 = (String)axisGroupNames.elementAt(i);
            String axisGroupNames2 = (String)obj.axisGroupNames.elementAt(i);
            axisGroupNames_equal = axisGroupNames1.equals(axisGroupNames2);
        }
        // Compare the elements in the axisInfoFlagSets vector.
        boolean axisInfoFlagSets_equal = (obj.axisInfoFlagSets.size() == axisInfoFlagSets.size());
        for(i = 0; (i < axisInfoFlagSets.size()) && axisInfoFlagSets_equal; ++i)
        {
            // Make references to Integer from Object.
            Integer axisInfoFlagSets1 = (Integer)axisInfoFlagSets.elementAt(i);
            Integer axisInfoFlagSets2 = (Integer)obj.axisInfoFlagSets.elementAt(i);
            axisInfoFlagSets_equal = axisInfoFlagSets1.equals(axisInfoFlagSets2);
        }
        // Compare the elements in the axisXPositions vector.
        boolean axisXPositions_equal = (obj.axisXPositions.size() == axisXPositions.size());
        for(i = 0; (i < axisXPositions.size()) && axisXPositions_equal; ++i)
        {
            // Make references to Double from Object.
            Double axisXPositions1 = (Double)axisXPositions.elementAt(i);
            Double axisXPositions2 = (Double)obj.axisXPositions.elementAt(i);
            axisXPositions_equal = axisXPositions1.equals(axisXPositions2);
        }
        // Compare the elements in the axisAttributeVariables vector.
        boolean axisAttributeVariables_equal = (obj.axisAttributeVariables.size() == axisAttributeVariables.size());
        for(i = 0; (i < axisAttributeVariables.size()) && axisAttributeVariables_equal; ++i)
        {
            // Make references to String from Object.
            String axisAttributeVariables1 = (String)axisAttributeVariables.elementAt(i);
            String axisAttributeVariables2 = (String)obj.axisAttributeVariables.elementAt(i);
            axisAttributeVariables_equal = axisAttributeVariables1.equals(axisAttributeVariables2);
        }
        // Compare the elements in the axisAttributeData vector.
        boolean axisAttributeData_equal = (obj.axisAttributeData.size() == axisAttributeData.size());
        for(i = 0; (i < axisAttributeData.size()) && axisAttributeData_equal; ++i)
        {
            // Make references to Double from Object.
            Double axisAttributeData1 = (Double)axisAttributeData.elementAt(i);
            Double axisAttributeData2 = (Double)obj.axisAttributeData.elementAt(i);
            axisAttributeData_equal = axisAttributeData1.equals(axisAttributeData2);
        }
        // Create the return value
        return (orderedAxisNames_equal &&
                (shownVarAxisOrdinal == obj.shownVarAxisOrdinal) &&
                axisMinima_equal &&
                axisMaxima_equal &&
                extentMinima_equal &&
                extentMaxima_equal &&
                extMinTimeOrds_equal &&
                extMaxTimeOrds_equal &&
                (plotToolModeFlags == obj.plotToolModeFlags) &&
                axisGroupNames_equal &&
                axisInfoFlagSets_equal &&
                axisXPositions_equal &&
                axisAttributeVariables_equal &&
                (attributesPerAxis == obj.attributesPerAxis) &&
                axisAttributeData_equal &&
                (drawLines == obj.drawLines) &&
                (linesColor == obj.linesColor) &&
                (drawContext == obj.drawContext) &&
                (contextGamma == obj.contextGamma) &&
                (contextNumPartitions == obj.contextNumPartitions) &&
                (contextColor == obj.contextColor) &&
                (drawLinesOnlyIfExtentsOn == obj.drawLinesOnlyIfExtentsOn));
    }

    public String GetName() { return "ParallelAxis"; }
    public String GetVersion() { return "1.0"; }

    // Property setting methods
    public void SetOrderedAxisNames(Vector orderedAxisNames_)
    {
        orderedAxisNames = orderedAxisNames_;
        Select(0);
    }

    public void SetShownVarAxisOrdinal(int shownVarAxisOrdinal_)
    {
        shownVarAxisOrdinal = shownVarAxisOrdinal_;
        Select(1);
    }

    public void SetAxisMinima(Vector axisMinima_)
    {
        axisMinima = axisMinima_;
        Select(2);
    }

    public void SetAxisMaxima(Vector axisMaxima_)
    {
        axisMaxima = axisMaxima_;
        Select(3);
    }

    public void SetExtentMinima(Vector extentMinima_)
    {
        extentMinima = extentMinima_;
        Select(4);
    }

    public void SetExtentMaxima(Vector extentMaxima_)
    {
        extentMaxima = extentMaxima_;
        Select(5);
    }

    public void SetExtMinTimeOrds(Vector extMinTimeOrds_)
    {
        extMinTimeOrds = extMinTimeOrds_;
        Select(6);
    }

    public void SetExtMaxTimeOrds(Vector extMaxTimeOrds_)
    {
        extMaxTimeOrds = extMaxTimeOrds_;
        Select(7);
    }

    public void SetPlotToolModeFlags(int plotToolModeFlags_)
    {
        plotToolModeFlags = plotToolModeFlags_;
        Select(8);
    }

    public void SetAxisGroupNames(Vector axisGroupNames_)
    {
        axisGroupNames = axisGroupNames_;
        Select(9);
    }

    public void SetAxisInfoFlagSets(Vector axisInfoFlagSets_)
    {
        axisInfoFlagSets = axisInfoFlagSets_;
        Select(10);
    }

    public void SetAxisXPositions(Vector axisXPositions_)
    {
        axisXPositions = axisXPositions_;
        Select(11);
    }

    public void SetAxisAttributeVariables(Vector axisAttributeVariables_)
    {
        axisAttributeVariables = axisAttributeVariables_;
        Select(12);
    }

    public void SetAttributesPerAxis(int attributesPerAxis_)
    {
        attributesPerAxis = attributesPerAxis_;
        Select(13);
    }

    public void SetAxisAttributeData(Vector axisAttributeData_)
    {
        axisAttributeData = axisAttributeData_;
        Select(14);
    }

    public void SetDrawLines(boolean drawLines_)
    {
        drawLines = drawLines_;
        Select(15);
    }

    public void SetLinesColor(ColorAttribute linesColor_)
    {
        linesColor = linesColor_;
        Select(16);
    }

    public void SetDrawContext(boolean drawContext_)
    {
        drawContext = drawContext_;
        Select(17);
    }

    public void SetContextGamma(float contextGamma_)
    {
        contextGamma = contextGamma_;
        Select(18);
    }

    public void SetContextNumPartitions(int contextNumPartitions_)
    {
        contextNumPartitions = contextNumPartitions_;
        Select(19);
    }

    public void SetContextColor(ColorAttribute contextColor_)
    {
        contextColor = contextColor_;
        Select(20);
    }

    public void SetDrawLinesOnlyIfExtentsOn(boolean drawLinesOnlyIfExtentsOn_)
    {
        drawLinesOnlyIfExtentsOn = drawLinesOnlyIfExtentsOn_;
        Select(21);
    }

    // Property getting methods
    public Vector         GetOrderedAxisNames() { return orderedAxisNames; }
    public int            GetShownVarAxisOrdinal() { return shownVarAxisOrdinal; }
    public Vector         GetAxisMinima() { return axisMinima; }
    public Vector         GetAxisMaxima() { return axisMaxima; }
    public Vector         GetExtentMinima() { return extentMinima; }
    public Vector         GetExtentMaxima() { return extentMaxima; }
    public Vector         GetExtMinTimeOrds() { return extMinTimeOrds; }
    public Vector         GetExtMaxTimeOrds() { return extMaxTimeOrds; }
    public int            GetPlotToolModeFlags() { return plotToolModeFlags; }
    public Vector         GetAxisGroupNames() { return axisGroupNames; }
    public Vector         GetAxisInfoFlagSets() { return axisInfoFlagSets; }
    public Vector         GetAxisXPositions() { return axisXPositions; }
    public Vector         GetAxisAttributeVariables() { return axisAttributeVariables; }
    public int            GetAttributesPerAxis() { return attributesPerAxis; }
    public Vector         GetAxisAttributeData() { return axisAttributeData; }
    public boolean        GetDrawLines() { return drawLines; }
    public ColorAttribute GetLinesColor() { return linesColor; }
    public boolean        GetDrawContext() { return drawContext; }
    public float          GetContextGamma() { return contextGamma; }
    public int            GetContextNumPartitions() { return contextNumPartitions; }
    public ColorAttribute GetContextColor() { return contextColor; }
    public boolean        GetDrawLinesOnlyIfExtentsOn() { return drawLinesOnlyIfExtentsOn; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteStringVector(orderedAxisNames);
        if(WriteSelect(1, buf))
            buf.WriteInt(shownVarAxisOrdinal);
        if(WriteSelect(2, buf))
            buf.WriteDoubleVector(axisMinima);
        if(WriteSelect(3, buf))
            buf.WriteDoubleVector(axisMaxima);
        if(WriteSelect(4, buf))
            buf.WriteDoubleVector(extentMinima);
        if(WriteSelect(5, buf))
            buf.WriteDoubleVector(extentMaxima);
        if(WriteSelect(6, buf))
            buf.WriteIntVector(extMinTimeOrds);
        if(WriteSelect(7, buf))
            buf.WriteIntVector(extMaxTimeOrds);
        if(WriteSelect(8, buf))
            buf.WriteInt(plotToolModeFlags);
        if(WriteSelect(9, buf))
            buf.WriteStringVector(axisGroupNames);
        if(WriteSelect(10, buf))
            buf.WriteIntVector(axisInfoFlagSets);
        if(WriteSelect(11, buf))
            buf.WriteDoubleVector(axisXPositions);
        if(WriteSelect(12, buf))
            buf.WriteStringVector(axisAttributeVariables);
        if(WriteSelect(13, buf))
            buf.WriteInt(attributesPerAxis);
        if(WriteSelect(14, buf))
            buf.WriteDoubleVector(axisAttributeData);
        if(WriteSelect(15, buf))
            buf.WriteBool(drawLines);
        if(WriteSelect(16, buf))
            linesColor.Write(buf);
        if(WriteSelect(17, buf))
            buf.WriteBool(drawContext);
        if(WriteSelect(18, buf))
            buf.WriteFloat(contextGamma);
        if(WriteSelect(19, buf))
            buf.WriteInt(contextNumPartitions);
        if(WriteSelect(20, buf))
            contextColor.Write(buf);
        if(WriteSelect(21, buf))
            buf.WriteBool(drawLinesOnlyIfExtentsOn);
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        for(int i = 0; i < n; ++i)
        {
            int index = (int)buf.ReadByte();
            switch(index)
            {
            case 0:
                SetOrderedAxisNames(buf.ReadStringVector());
                break;
            case 1:
                SetShownVarAxisOrdinal(buf.ReadInt());
                break;
            case 2:
                SetAxisMinima(buf.ReadDoubleVector());
                break;
            case 3:
                SetAxisMaxima(buf.ReadDoubleVector());
                break;
            case 4:
                SetExtentMinima(buf.ReadDoubleVector());
                break;
            case 5:
                SetExtentMaxima(buf.ReadDoubleVector());
                break;
            case 6:
                SetExtMinTimeOrds(buf.ReadIntVector());
                break;
            case 7:
                SetExtMaxTimeOrds(buf.ReadIntVector());
                break;
            case 8:
                SetPlotToolModeFlags(buf.ReadInt());
                break;
            case 9:
                SetAxisGroupNames(buf.ReadStringVector());
                break;
            case 10:
                SetAxisInfoFlagSets(buf.ReadIntVector());
                break;
            case 11:
                SetAxisXPositions(buf.ReadDoubleVector());
                break;
            case 12:
                SetAxisAttributeVariables(buf.ReadStringVector());
                break;
            case 13:
                SetAttributesPerAxis(buf.ReadInt());
                break;
            case 14:
                SetAxisAttributeData(buf.ReadDoubleVector());
                break;
            case 15:
                SetDrawLines(buf.ReadBool());
                break;
            case 16:
                linesColor.Read(buf);
                Select(16);
                break;
            case 17:
                SetDrawContext(buf.ReadBool());
                break;
            case 18:
                SetContextGamma(buf.ReadFloat());
                break;
            case 19:
                SetContextNumPartitions(buf.ReadInt());
                break;
            case 20:
                contextColor.Read(buf);
                Select(20);
                break;
            case 21:
                SetDrawLinesOnlyIfExtentsOn(buf.ReadBool());
                break;
            }
        }
    }

    public String toString(String indent)
    {
        String str = new String();
        str = str + stringVectorToString("orderedAxisNames", orderedAxisNames, indent) + "\n";
        str = str + intToString("shownVarAxisOrdinal", shownVarAxisOrdinal, indent) + "\n";
        str = str + doubleVectorToString("axisMinima", axisMinima, indent) + "\n";
        str = str + doubleVectorToString("axisMaxima", axisMaxima, indent) + "\n";
        str = str + doubleVectorToString("extentMinima", extentMinima, indent) + "\n";
        str = str + doubleVectorToString("extentMaxima", extentMaxima, indent) + "\n";
        str = str + intVectorToString("extMinTimeOrds", extMinTimeOrds, indent) + "\n";
        str = str + intVectorToString("extMaxTimeOrds", extMaxTimeOrds, indent) + "\n";
        str = str + intToString("plotToolModeFlags", plotToolModeFlags, indent) + "\n";
        str = str + stringVectorToString("axisGroupNames", axisGroupNames, indent) + "\n";
        str = str + intVectorToString("axisInfoFlagSets", axisInfoFlagSets, indent) + "\n";
        str = str + doubleVectorToString("axisXPositions", axisXPositions, indent) + "\n";
        str = str + stringVectorToString("axisAttributeVariables", axisAttributeVariables, indent) + "\n";
        str = str + intToString("attributesPerAxis", attributesPerAxis, indent) + "\n";
        str = str + doubleVectorToString("axisAttributeData", axisAttributeData, indent) + "\n";
        str = str + boolToString("drawLines", drawLines, indent) + "\n";
        str = str + indent + "linesColor = {" + linesColor.Red() + ", " + linesColor.Green() + ", " + linesColor.Blue() + ", " + linesColor.Alpha() + "}\n";
        str = str + boolToString("drawContext", drawContext, indent) + "\n";
        str = str + floatToString("contextGamma", contextGamma, indent) + "\n";
        str = str + intToString("contextNumPartitions", contextNumPartitions, indent) + "\n";
        str = str + indent + "contextColor = {" + contextColor.Red() + ", " + contextColor.Green() + ", " + contextColor.Blue() + ", " + contextColor.Alpha() + "}\n";
        str = str + boolToString("drawLinesOnlyIfExtentsOn", drawLinesOnlyIfExtentsOn, indent) + "\n";
        return str;
    }


    // Attributes
    private Vector         orderedAxisNames; // vector of String objects
    private int            shownVarAxisOrdinal;
    private Vector         axisMinima; // vector of Double objects
    private Vector         axisMaxima; // vector of Double objects
    private Vector         extentMinima; // vector of Double objects
    private Vector         extentMaxima; // vector of Double objects
    private Vector         extMinTimeOrds; // vector of Integer objects
    private Vector         extMaxTimeOrds; // vector of Integer objects
    private int            plotToolModeFlags;
    private Vector         axisGroupNames; // vector of String objects
    private Vector         axisInfoFlagSets; // vector of Integer objects
    private Vector         axisXPositions; // vector of Double objects
    private Vector         axisAttributeVariables; // vector of String objects
    private int            attributesPerAxis;
    private Vector         axisAttributeData; // vector of Double objects
    private boolean        drawLines;
    private ColorAttribute linesColor;
    private boolean        drawContext;
    private float          contextGamma;
    private int            contextNumPartitions;
    private ColorAttribute contextColor;
    private boolean        drawLinesOnlyIfExtentsOn;
}

