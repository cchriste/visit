/*****************************************************************************
*
* Copyright (c) 2000 - 2008, Lawrence Livermore National Security, LLC
* Produced at the Lawrence Livermore National Laboratory
* LLNL-CODE-400142
* All rights reserved.
*
* This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
* full copyright notice is contained in the file COPYRIGHT located at the root
* of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
*
* Redistribution  and  use  in  source  and  binary  forms,  with  or  without
* modification, are permitted provided that the following conditions are met:
*
*  - Redistributions of  source code must  retain the above  copyright notice,
*    this list of conditions and the disclaimer below.
*  - Redistributions in binary form must reproduce the above copyright notice,
*    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
*    documentation and/or other materials provided with the distribution.
*  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
*    be used to endorse or promote products derived from this software without
*    specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
* ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
* LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
* DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
* SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
* CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
* LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
* OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
* DAMAGE.
*
*****************************************************************************/

#ifndef PARALLELAXISATTRIBUTES_H
#define PARALLELAXISATTRIBUTES_H
#include <string>
#include <AttributeSubject.h>
#include <ColorAttribute.h>
#include <ExtentsAttributes.h>

#define PCP_LEFT_AXIS_X_FRACTION          0.04
#define PCP_RIGHT_AXIS_X_FRACTION         0.96
#define PCP_H_BOTTOM_AXIS_Y_FRACTION      0.09
#define PCP_V_BOTTOM_AXIS_Y_FRACTION      0.12
#define PCP_H_TOP_AXIS_Y_FRACTION         0.90
#define PCP_V_TOP_AXIS_Y_FRACTION         0.87
#define PCP_MAX_HORIZONTAL_TEXT_INFO_AXES 7
#define PCP_MIN_H_INFO_AXIS_INTERVAL_FRAC 0.15
#define PCP_MIN_V_INFO_AXIS_INTERVAL_FRAC 0.05
#define PCP_NO_VALUE_TOKEN                0
#define PCP_VARIABLE_NAME_TOKEN           1
#define PCP_INTEGER_TOKEN                 2
#define PCP_FLOATING_POINT_NUMBER_TOKEN   3
#define PCP_LEFT_PARENTHESIS_TOKEN        100
#define PCP_RIGHT_PARENTHESIS_TOKEN       101
#define PCP_COMMA_TOKEN                   102
#define PCP_END_OF_EXPRESSION_TOKEN       -1
#define PCP_ATTRIBUTES_PER_AXIS           4
#define PCP_GROUP_ID_ATTRIBUTE_OFFSET     0
#define PCP_AXIS_SPACING_ATTRIBUTE_OFFSET 1
#define PCP_LOWER_BOUND_ATTRIBUTE_OFFSET  2
#define PCP_UPPER_BOUND_ATTRIBUTE_OFFSET  3
#define PCP_GROUP_ID_ATTRIBUTE_FLAG      (1 << PCP_GROUP_ID_ATTRIBUTE_OFFSET)
#define PCP_AXIS_SPACING_ATTRIBUTE_FLAG  (1 << PCP_AXIS_SPACING_ATTRIBUTE_OFFSET)
#define PCP_LOWER_BOUND_ATTRIBUTE_FLAG   (1 << PCP_LOWER_BOUND_ATTRIBUTE_OFFSET)
#define PCP_UPPER_BOUND_ATTRIBUTE_FLAG   (1 << PCP_UPPER_BOUND_ATTRIBUTE_OFFSET)
#define PCP_IMPLICIT_AXIS_GROUP_ID       -1000000001
#define PCP_FIRST_DUMMY_AXIS_GROUP_ID    -1000000000
#define PCP_LEFT_BRACKET_TOKEN               103
// ****************************************************************************
// Class: ParallelAxisAttributes
//
// Purpose:
//    This class contains the plot attributes for the ParallelAxis plot.
//
// Notes:      Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Thu Oct 25 10:13:45 PDT 2007
//
// Modifications:
//   
// ****************************************************************************

class ParallelAxisAttributes : public AttributeSubject
{
public:

    ParallelAxisAttributes();
    ParallelAxisAttributes(const ParallelAxisAttributes &obj);
    virtual ~ParallelAxisAttributes();

    virtual ParallelAxisAttributes& operator = (const ParallelAxisAttributes &obj);
    virtual bool operator == (const ParallelAxisAttributes &obj) const;
    virtual bool operator != (const ParallelAxisAttributes &obj) const;

    virtual const std::string TypeName() const;
    virtual bool CopyAttributes(const AttributeGroup *);
    virtual AttributeSubject *CreateCompatible(const std::string &) const;
    virtual AttributeSubject *NewInstance(bool) const;

    // Property selection methods
    virtual void SelectAll();
    void SelectOrderedAxisNames();
    void SelectAxisMinima();
    void SelectAxisMaxima();
    void SelectExtentMinima();
    void SelectExtentMaxima();
    void SelectExtMinTimeOrds();
    void SelectExtMaxTimeOrds();
    void SelectAxisGroupNames();
    void SelectAxisInfoFlagSets();
    void SelectAxisXPositions();
    void SelectAxisAttributeVariables();
    void SelectAxisAttributeData();
    void SelectLinesColor();
    void SelectContextColor();

    // Property setting methods
    void SetOrderedAxisNames(const stringVector &orderedAxisNames_);
    void SetShownVarAxisOrdinal(int shownVarAxisOrdinal_);
    void SetAxisMinima(const doubleVector &axisMinima_);
    void SetAxisMaxima(const doubleVector &axisMaxima_);
    void SetExtentMinima(const doubleVector &extentMinima_);
    void SetExtentMaxima(const doubleVector &extentMaxima_);
    void SetExtMinTimeOrds(const intVector &extMinTimeOrds_);
    void SetExtMaxTimeOrds(const intVector &extMaxTimeOrds_);
    void SetPlotToolModeFlags(int plotToolModeFlags_);
    void SetAxisGroupNames(const stringVector &axisGroupNames_);
    void SetAxisInfoFlagSets(const intVector &axisInfoFlagSets_);
    void SetAxisXPositions(const doubleVector &axisXPositions_);
    void SetAxisAttributeVariables(const stringVector &axisAttributeVariables_);
    void SetAttributesPerAxis(int attributesPerAxis_);
    void SetAxisAttributeData(const doubleVector &axisAttributeData_);
    void SetDrawLines(bool drawLines_);
    void SetLinesColor(const ColorAttribute &linesColor_);
    void SetDrawContext(bool drawContext_);
    void SetContextGamma(float contextGamma_);
    void SetContextNumPartitions(int contextNumPartitions_);
    void SetContextColor(const ColorAttribute &contextColor_);
    void SetDrawLinesOnlyIfExtentsOn(bool drawLinesOnlyIfExtentsOn_);

    // Property getting methods
    const stringVector   &GetOrderedAxisNames() const;
          stringVector   &GetOrderedAxisNames();
    int                  GetShownVarAxisOrdinal() const;
    const doubleVector   &GetAxisMinima() const;
          doubleVector   &GetAxisMinima();
    const doubleVector   &GetAxisMaxima() const;
          doubleVector   &GetAxisMaxima();
    const doubleVector   &GetExtentMinima() const;
          doubleVector   &GetExtentMinima();
    const doubleVector   &GetExtentMaxima() const;
          doubleVector   &GetExtentMaxima();
    const intVector      &GetExtMinTimeOrds() const;
          intVector      &GetExtMinTimeOrds();
    const intVector      &GetExtMaxTimeOrds() const;
          intVector      &GetExtMaxTimeOrds();
    int                  GetPlotToolModeFlags() const;
    const stringVector   &GetAxisGroupNames() const;
          stringVector   &GetAxisGroupNames();
    const intVector      &GetAxisInfoFlagSets() const;
          intVector      &GetAxisInfoFlagSets();
    const doubleVector   &GetAxisXPositions() const;
          doubleVector   &GetAxisXPositions();
    const stringVector   &GetAxisAttributeVariables() const;
          stringVector   &GetAxisAttributeVariables();
    int                  GetAttributesPerAxis() const;
    const doubleVector   &GetAxisAttributeData() const;
          doubleVector   &GetAxisAttributeData();
    bool                 GetDrawLines() const;
    const ColorAttribute &GetLinesColor() const;
          ColorAttribute &GetLinesColor();
    bool                 GetDrawContext() const;
    float                GetContextGamma() const;
    int                  GetContextNumPartitions() const;
    const ColorAttribute &GetContextColor() const;
          ColorAttribute &GetContextColor();
    bool                 GetDrawLinesOnlyIfExtentsOn() const;

    // Persistence methods
    virtual bool CreateNode(DataNode *node, bool completeSave, bool forceAdd);
    virtual void SetFromNode(DataNode *node);


    // Keyframing methods
    virtual std::string               GetFieldName(int index) const;
    virtual AttributeGroup::FieldType GetFieldType(int index) const;
    virtual std::string               GetFieldTypeName(int index) const;
    virtual bool                      FieldsEqual(int index, const AttributeGroup *rhs) const;

    // User-defined methods
    void InsertAxis(const std::string &axisName_);
    void DeleteAxis(const std::string &axisName_, int minAxisCount);
    bool AttributesAreConsistent() const;
    bool ChangesRequireRecalculation(const ParallelAxisAttributes &obj);
    void ShowPreviousAxisVariableData();
    void ShowNextAxisVariableData();
    std::string &GetShownVariableAxisName();
    int GetShownVariableAxisNormalHumanOrdinal() const;
    void DetermineShownAndSelectedAxisSequences(int &leftShownAxisID, int &rightShownAxisID, int &leftSelectedAxisID, int &rightSelectedAxisID);
    void AdjustAxisSequencesAfterInsertingNewAxis(int &leftShownAxisID, int &rightShownAxisID, int &leftSelectedAxisID, int &rightSelectedAxisID, int insertedAxisID);
    void AdjustAxisSequencesAfterDeletingAxis(int &leftShownAxisID, int &rightShownAxisID, int &leftSelectedAxisID, int &rightSelectedAxisID, int deletedAxisID, int axisCountBeforeDelete);
    void MarkShownAndSelectedAxisSequences(int leftShownAxisID, int rightShownAxisID, int leftSelectedAxisID, int rightSelectedAxisID);
    void RecalculateAxisXPositions(int leftShownAxisID, int rightShownAxisID);
    void IdentifyReasonableAxesToLabel();
    void DetermineAxisBoundsAndGroupNames();
    void ReconfigureAxes(int leftShownAxisID, int rightShownAxisID);
private:
    stringVector   orderedAxisNames;
    int            shownVarAxisOrdinal;
    doubleVector   axisMinima;
    doubleVector   axisMaxima;
    doubleVector   extentMinima;
    doubleVector   extentMaxima;
    intVector      extMinTimeOrds;
    intVector      extMaxTimeOrds;
    int            plotToolModeFlags;
    stringVector   axisGroupNames;
    intVector      axisInfoFlagSets;
    doubleVector   axisXPositions;
    stringVector   axisAttributeVariables;
    int            attributesPerAxis;
    doubleVector   axisAttributeData;
    bool           drawLines;
    ColorAttribute linesColor;
    bool           drawContext;
    float          contextGamma;
    int            contextNumPartitions;
    ColorAttribute contextColor;
    bool           drawLinesOnlyIfExtentsOn;

    // Static class format string for type map.
    static const char *TypeMapFormatString;
};

#endif
