/*****************************************************************************
*
* Copyright (c) 2000 - 2007, The Regents of the University of California
* Produced at the Lawrence Livermore National Laboratory
* All rights reserved.
*
* This file is part of VisIt. For details, see http://www.llnl.gov/visit/. The
* full copyright notice is contained in the file COPYRIGHT located at the root
* of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
*
* Redistribution  and  use  in  source  and  binary  forms,  with  or  without
* modification, are permitted provided that the following conditions are met:
*
*  - Redistributions of  source code must  retain the above  copyright notice,
*    this list of conditions and the disclaimer below.
*  - Redistributions in binary form must reproduce the above copyright notice,
*    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
*    documentation and/or materials provided with the distribution.
*  - Neither the name of the UC/LLNL nor  the names of its contributors may be
*    used to  endorse or  promote products derived from  this software without
*    specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
* ARE  DISCLAIMED.  IN  NO  EVENT  SHALL  THE  REGENTS  OF  THE  UNIVERSITY OF
* CALIFORNIA, THE U.S.  DEPARTMENT  OF  ENERGY OR CONTRIBUTORS BE  LIABLE  FOR
* ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
* SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
* CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
* LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
* OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
* DAMAGE.
*
*****************************************************************************/



// ****************************************************************************
// Module: README
//
// Purpose: This module fully describes all operation of the ParallelAxis plot
//          and its interactive companion, the Extents tool.  It also explains
//          their interaction with the Threshold operator.
//
// Programmer: Mark Blair
// Creation:   Fri Nov  2 19:36:34 PDT 2007
//
// Modifications:
//
// ****************************************************************************



                Using VisIt's ParallelAxis Plot and Extents Tool
                                
OVERVIEW

The ParallelAxis plot is a 2-D type of plot in VisIt that makes it possible to
discern patterns in data of many dimensions.  Input to the plot is a group of
scalar N-tuples.  In the plot are N equal-length parallel lines representing the
N axes of an N-dimensional data space.  Each N-tuple is represented on these
axes as a series of N-1 connected line segments (i.e., a polyline of N-1 line
segments) joining the points where the tuple's N scalar component values fall on
their respective axes.  In VisIt, the N axes of a ParallelAxis plot typically
correspond to N scalar quantities associated with the zones (cells) and/or nodes
(points) of a mesh, such as temperature, pressure, density, etc.  If there are M
zones or nodes in the mesh, then there will be M polylines in the plot.

The ParallelAxis plot is VisIt's implementation of the "parallel coordinates"
plot, a scheme for the representation of multivariate (multi-dimensional) data
which has been in use for many years.  Simple patterns in multivariate data can
stand out quite dramatically when represented on this type of plot.  If axes are
arranged such that two scalars with high correlation in the data are plotted on
two adjacent axes, then the line segments connecting points on these axes will
all be fairly parallel and will cross each other very little.  In the opposite
case where there's a significant reverse correlation, these lines will cross
over each other in a giant X-shaped configuration.

One of VisIt's six interactive tools, the Extents tool, was designed to be used
with the ParallelAxis plot.  When enabled, this tool adds (among other features)
two draggable sliding arrowheads to each axis of the plot.  One arrowhead slides
up from the bottom of the axis and the other slides down from the top of the
axis.  At any time, only those N-tuple polylines whose component scalar values
all lie between the two arrowheads of their respective axes will be drawn on the
plot.  The extent of each component scalar value among the polylines that are
actually plotted can thus be constrained independently.  This provides a
powerful mechanism to interactively discover highly specific correlations and
other patterns in the data.

The Extents tool may also be used as a graphical "front end" for VisIt's
Threshold operator.  A Threshold operator may be applied to almost any type of
plot in VisIt to constrain, or threshold, scalar input values of any or all of
the scalar variables in a user-specified list, using minimum and maximum
threshold values also specified by the user.  Observe that this is exactly what
the Extents tool also allows the user to do, only in graphical form.  And in
fact, VisIt has been engineered so that a ParallelAxis plot with an Extents tool
in one window can be locked to a second type of plot (like a Pseudocolor plot)
with an attached Threshold operator in a second window so that sliding the axis
arrowheads in the first window causes a corresponding change in the thresholded
input to the second window, which is immediately updated to reflect that change.

A ParallelAxis plot can also be combined with VisIt's extensive Expression
pre-processing capability to produce a proportional-bin-width histogram curve
plot (sometimes referred to as a "spectrum plot" or "energy group" plot).  By
appropriately defining an "array expression" and handing it to the ParallelAxis
plot, one or more groups of contiguous axes can be laid out in the plot.  Within
each group, horizontal spacings between the axes may be specified individually
and all the group's axes may be set up to share the same minimum and maximum,
which may be specified explicitly or calculated automatically.  If each axis in
a group represents a range of frequencies (or energy levels), for instance, and
the horizontal spacing to the left or right of the axis is proportional to that
range, then it is possible to input N-tuples whose component scalar values are
amplitude values corresponding to the frequency ranges, in which case the
resultant polylines will represent true discretized "spectrum curves" of the
distribution of energy across those frequencies (energy levels).

In addition to the N axes and the polylines of N-1 segments that appear in a
ParallelAxis plot, a background "Context" is also drawn.  (As a matter of fact,
by default, this and the axes are the ONLY things that are drawn when the plot
first appears in its window; the polylines must be turned on explicitly.)  In
this Context, all axes are partitioned into P segments.  Between each axis and
the one to its right are defined P*P "bands" or "belts" connecting each segment
of the left axis to every segment of the right axis.  When the plot is drawn,
each such belt (roughly speaking) is filled with a shade of some user-specified
basic color such that the intensity of that shade is proportional to the number
of polyline segments that lie across that belt.  This can sometimes provide a
quick handy look at where the "hot spots" are in the input data, i.e., those
spots where many values of some component variable in the input N-tuples fall
within a very narrow range of that variable.


BASIC USE OF THE PARALLELAXIS PLOT

As of this writing, the ParallelAxis plot plugin is not enabled in VisIt by
default.  In order to enable it, you'll have to use VisIt's Plugin Manager:
From the Options pulldown menu in the main menu bar, select "Plugin Manager".
The Plugin Manager's window will appear.  In this window, select the Plots tab
(which is selected by default).  Scroll through the list of plots.  If the box
next to "ParallelAxis" is already checked, the ParallelAxis plot is already
enabled.  If not, check the box and hit the Apply button.  Then dismiss the
Plugin Manager's window, return to the Options menu, and select "Save Settings".
When this is done, exit VisIt and restart it.  The ParallelAxis plot should now
be enabled and ready for use.

To (1) open a data file, (2) specify a set of its scalar variables and an axis
order interactively, and (3) display a ParallelAxis plot of those variables:
Open a data file as usual in VisIt.  In the middle menu bar, press "Plots".
From the list of plot types displayed, select "ParallelAxis", and from the list
of variable names that appears, select a scalar variable.  This will bring up a
small window entitled "ParallelAxis Plot Wizard".  Note that it is meaningless
to specify only a single scalar variable for a ParallelAxis plot, since the plot
must contain at least two parallel axes.  This is why the wizard appears, to aid
you in selecting N-1 more scalar variables to add to the one you've already
selected, which together will make up the N scalar variables that correspond to
the N axes of the plot.  Observe that the variable already selected appears as
the leftmost axis of a miniature ParallelAxis plot diagram in the left portion
of the wizard.  Proceed step by step through the wizard, selecting additonal
axis variables in the left-to-right order desired.  The growing plot diagram
will reflect your changes.  When the wizard's Finish button is pressed, the
wizard will disappear.  Press the Draw button in VisIt's main GUI and a plot
with axes in the selected order should appear in its viewing window.

By default, this plot will show only the axes and the "Context", as explained
above in the OVERVIEW.  To show the individual polylines:  Press "PlotAtts" in
VisIt's middle menu bar.  From the list of plot types displayed, select
"ParallelAxis".  This will bring up the ParallelAxis plot's GUI window.  In this
window, click the toggle button labeled "Draw individual lines", then click the
Apply button.  The polylines corresponding to the plot input will appear on top
of the Context.  The toggle button labeled "Draw context" can also be clicked,
and followed by Apply, to turn off the Context.  Together these two buttons can
be used to display any desired combination of the Context and polylines.

[Side note: VisIt's Scatter plot, like the ParallelAxis plot, needs more than
one scalar variable for its type of display.  When selected, it also brings up a
wizard very similar to that of the ParallelAxis plot.]

The two black title and file name annotations that appear in the upper left and
lower right of the plot, along with their border square, can be annoying, since
they can obscure part of the ParallelAxis plot itself.  To turn off these
annotations, pull down the Controls menu from the main menu bar and select
"Annotation" from this menu.  VisIt's Annotation window will appear.  Press the
button labeled "No annotations", then press the Apply button.  The annotations
will disappear.

Another way to set up the axes of a ParallelAxis plot interactively involves use
of VisIt's Expression pre-processor.  After opening a data file in VisIt, select
Controls->Expressions from the main menu bar to bring up the Expressions window.
Click the New button to create a new expression and type a name for it in the
Name text field.  Click the button to the right of "Type".  This will pull down
a list of 6 variable types.  Select "Array Mesh Variable" from this list.  Then
in the text area labeled "Definition", type an expression definition of the
following form:

        array_compose(varname1, varname2, . . . varnameN)
        
Here varname1, varname2, etc. represent the names of scalar variables in the
data file currently open.  (Actually, an expression can be defined in this
manner at any time and the variable names need not correspond to those of any
currently open file.)  Now hit the Apply button, then the Dismiss button to hide
the Expressions window.  If you now click Plots->ParallelAxis to initiate a
ParallelAxis plot, the list of selectable variables will include the name of the
array expression you just created.  If you select this variable, the wizard will
NOT appear.  Press the Draw button immediately and a ParallelAxis plot will
be displayed with axes corresponding to variable names as they appear in the
array expression from left to right.

An array expression can also be defined via the DefineArrayExpression Python
command, which can be typed directly as a CLI command, or included as a command
in a Python script or as a command in a VisIt session file.  (This is discussed
in greater detail below.)

After you first create and peruse a ParallelAxis plot, you may want to add more
axes to the plot or delete existing axes.  The plot's wizard, as a matter of
fact, only allows the user to set up a maximum of 8 axes in the plot.  To add or
delete axes in the plot: Click PlotAtts->ParallelAxis as described above to
bring up the ParallelAxis plot's GUI window.  In the upper left of this window
is a list of axes currently in the plot, ordered according to their position in
the plot from left to right.  In the column of 4 buttons to the right of this
list, click the one labeled "Add axis", then select "Scalars" from the small
menu that cascades from this.  A list of selectable scalar variable names will
appear.  If you click one of these names and click the Apply button, and if the
corresponding axis doesn't already exist in the plot, a new axis by that name
will be added as the rightmost axis of the plot and the variable name will be
added at the bottom of the GUI window's list.  If you highlight a variable name
in this list and click the "Delete axis" button, then hit the Apply button, the
corresponding axis will disappear from the plot and the name will disappear from
the list.  If you highlight a listed variable name, then click the "Move up" or
"Move down" button, the corresponding name will move up or down accordingly in
the list.  Pressing the Apply button after this will cause the plot's axes to be
shuffled in the new listed order.


BASIC USE OF THE EXTENTS TOOL

When a ParallelAxis plot is active in a VisIt viewing window, the Extents tool
may be enabled in that window by pressing its button in the window's interactive
tool bar.  (As of this writing, this is the rightmost of 6 icon buttons in that
tool bar.)  When enabled, the Extents tool superimposes a variety of interaction
mechanisms on the plot in the form of draggable arrowheads, simple push buttons,
and toggle buttons.  Here's what they do:

The Red Arrowheads: As explained above in the OVERVIEW, two draggable sliding
arrowheads are added to each axis of the plot, both colored red.  One arrowhead
points upward and slides upward from the bottom, minimum-valued end of the axis.
The other points downward and slides downward from the top, maximum-valued end
of the axis.  If one of your axes is for variable "var1", and if you slide its
arrowheads to positions that correspond to a lower value of L and an upper value
of U, then only the polylines for those N-tuples with var1 values bewteen L and
U will be drawn on the plot.  The polylines, if active, are recalculated and
redrawn at the moment an arrowhead is released after being dragged.  Drawable
value ranges for all axes may be constrained in this manner simultaneously, so
that a polyline must satisfy all the axis range constraints (extents) at once to
be drawn on the plot.  The bottom and top red arrowheads of an axis are also
respectively called its "minimum extent selector" and "maximum extent selector".

The Blue Arrowheads: Two draggable blue arrowheads slide horizontally across
the top of the plot.  These arrowheads are the left and right "axis selectors".
The left axis selector points to the right and slides rightward from the left
side of the plot.  The right axis selector points to the left and slides
leftward from the right side of the plot.  Each of these selectors, when moved,
will always position itself on the nearest axis when released.  At any given
moment, the axis on which the left axis selector is positioned is referred to as
the "left selected axis".  Similarly, the axis on which the right axis selector
is positioned is known as the "right selected axis".  Functions performed by the
Extents tool's 10 buttons all refer to the selected (or "marked") axes.

The "Move left mark" and "Move right mark" Buttons: Any of these 4 buttons may
be pressed to move the corresponding axis selector (also called an "axis mark")
one axis to the left or right.  If axes in some area of the plot are so closely
spaced that it is difficult to drag an axis selector to the desired axis, these
buttons can be quite handy.

The "Left mark axis info shown" and "Right mark axis info shown" Buttons: These
two buttons are toggles.  If the toggle is on, it will contain an 'X'.  If it is
off, it will be empty.  The "axis information", or simply "axis info", for an
axis on the plot consists of (1) the axis title, which is just the name of the
scalar variable corresponding to the axis; (2) the axis bounds, which are two
numbers at the bottom and top of the axis, drawn in the same color as the axis
itself, that are respectively the minimum and maximum values of the range of the
variable corresponding to the axis; (3) the extent bounds, which are two numbers
drawn in red at the bottom and top of the axis that respectively correspond to
data values currently marked by the axis's minimum and maximum extent selectors.
If the "Left mark axis info shown" toggle is on, all information for the axis
currently selected by the left axis selector will be drawn on the plot.  If the
toggle is off, none of this information will be drawn.  The "Right mark axis
info shown" controls the visibility of information for the right selected axis
in a similar manner.  Once it is set, the presence or absence of information for
a given axis will remain in effect, regardless of the positions of the axis
selectors, until one of the axis selectors is moved to that axis again and the
toggle is pressed to turn the information on or off.

Turning axis information on/off on an individual-axis basis is useful when the
axes in some area of the plot are so closely spaced that the information for two
or more adjacent axes would otherwise overlap.  This is particularly the case
when the horizontal spacing between axes is not uniform, as it generally is in a
"spectrum" plot.  You will notice that the Extents tool, when enabled, will not
initially draw information for all axes in areas of the plot where the axes are
densely packed; it will only draw information for as many axes as it can without
causing overlap.

The "Expand between marks" Button: In areas of the plot where the axes are very
closely spaced, it may be necessary to "zoom in" in order to see what's going on
with polyline segments between the axes.  If you hit the "Expand between marks"
button, that portion of the plot between those axes marked by the left and right
axis selectors will be stretched (linearly) to fill the entire width of the
plot.  This is sort of a "horizontal zoom".  You can thus position the two axis
selectors (marks) on either side of a congested area in the plot, then press the
Expand button to view the area in greater detail.

The "Undo last expansion" Button: Expansions, or "horizontal zooms", triggered
by the "Expand between marks" button are recursive.  You can position the axis
selectors, then expand the selected area, then position the axis selectors again
within the expanded area and hit the "Expand between marks" button to expand
even further, etc.  Pressing the "Undo last expansion" button simply undoes the
last expansion.  Pressing it again would undo the last expansion before that,
etc.

The "Threshold between marks" Button: Ordinarily, the polyline corresponding to
an input N-tuple is drawn only if ALL the tuple's component values lie within
the currently selected extents of their respective axes.  The "Threshold between
marks" button is a toggle.  If the toggle is on, a polyline corresponding to an
input N-tuple will be drawn only if those component values for axes bounded by
the two axis selectors (marks) lie within the currently selected extents of
their respective axes.  All other selected extents will be ignored.  This mode
will remain in effect until the toggle is hit again to return it to its default
state in which ALL component values of an N-tuple must fall within their
respective extents in order for the corresponding polyline to be drawn.

The "Show axis titles only" Button: This is another toggle.  For any axis whose
axis information is to be drawn (see the description of the "Left mark axis info
shown" and "Right mark axis info shown" buttons above), only the axis title
(i.e., the name of the scalar variable corresponding to the axis), and no other
information, will be drawn if this toggle is on.  If the toggle is off (its
default state), all information for the axis will be drawn.  Like the two
toggles that control the visibility of axis information on an axis-by-axis
basis, the "Show axis titles only" mode toggle can be used to further alleviate
the potential overlap of axis information in crowded areas of the plot.

While the Extents tool is enabled, axes can still be added to the plot and
deleted from the plot as usual by using the ParallelAxis plot's dialogue GUI
window.  Press the Extents tool's icon button again to disable it and restore
the plot to the way it was before the tool was enabled (except for the absence
or presence of new axes).


ADVANCED USE OF THE PARALLELAXIS PLOT: AXIS GROUPS AND "SPECTRUM" PLOTS

As explained above in the OVERVIEW, VisIt's powerfull expression pre-processing
capability can be harnessed to create ParallelAxis plots in which one or more
groups of contiguous axes can be designated.  Within each such group, the axes
can optionally share the same automatically calculated or user-specified axis
bounds and individual horizontal spacings between axes can be specified.  This
makes it possible to turn a ParallelAxis plot into a histogram curve plot in
which the widths of the histogram bins are proportional to a set of values
supplied by the user.  One useful form of this proportional-bin-width histogram
curve plot is the "spectrum plot" or "energy group plot", which is also briefly
described above in the OVERVIEW.

A plot of this type is set up by using an extended form of the "array_compose"
syntax for defining array expressions, which is presented in its simplest form
above in the "BASIC USE OF THE PARALLELAXIS PLOT" section.  Define a "spectrum
array expression" as one of the form:

	array_compose(ssd1, ssd2, . . . ssdN)
	
Each ssd1, ssd2, . . . ssdN is a "spectrum scalar descriptor", i.e., a sequence
consisting of a scalar variable name followed by zero or more floating-point
constants.  The variable name and constants are all separated by commas.  It
thus forms a subsequence of the sequence of component scalar expressions in an
array mesh variable.  A spectrum scalar descriptor is interpreted as follows:

If descriptor ssdi consists of only a scalar variable name Vi, it simply connotes
that values of scalar variable Vi will be plotted on the i-th axis of the plot.
Suppose ssdi consists of a scalar variable name Vi followed by an integer j
(which of course reads perfectly well as a floating-point number):

	Vi, j
	
This also connotes that values of Vi will appear on the plot's i-th axis.  It
also specifies that the i-th axis is a member of an "axis group" whose ID number
or index is j.  Any or all of the descriptors ssd1, ssd2, . . . ssdN may define
their respective scalar variables as members of axis group j and the descriptors
for this axis group need not be contiguous in the spectrum array expression
definition.

An axis group n has the following properties:  (1) All the group's axes will
share the same minimum and maximum.  By default, the minimum will be computed as
the minimum of the data minima of all variables in axis group n.  Similarly, the
maximum will be computed as the maximum of the data maxima of all the group's
variables.  (2) If all descriptors for axis group n are contiguous within the
spectrum array expression definition, then Wn = W * (Pn / (P-1)).  Here W is the
plot's width, or more specifically, the distance between the plot's leftmost and
rightmost axes.  P represents the total number of axes in the plot and Pn is the
number of axes in group n.  Wn then represents the distance between the leftmost
axis of group n and the leftmost axis that is not a member of axis group n.  The
latter axis does not exist if the plot's rightmost axis is a member of group n,
so the formula becomes Wn = W * ((Pn-1) / (P-1)) and Wn now represents the
distance between the leftmost axis of group n and the plot's rightmost axis.  By
default, the axes of group n are equally spaced within that group's fraction of
the plot's total width W.  Even if the axes of group n are not contiguous in the
plot, the sum of all distances Dn, with each such distance Dn being the distance
between an axis of group n and the axis to the right of it, is still expressed
accurately by the two formulas for Wn.

Suppose spectrum scalar descriptor ssdi consists of 3 elements:

	Vi, j, Rdi
	
Here Rdi specifies the relative distance between the plot's i-th axis and the
axis to the right of it.  The true distance Tdi between these two axes is given
by Tdi = Wj * (Rdi / Rdsj).  Here Wj is defined as above and Rdsj is the sum of
all relative distances Rdj appearing in descriptors for axis group j.  These
individual spacings for axes of group j thus override the default equal spacing.
If p of the group's descriptors have relative distances and q do not, then the
formula becomes Tdi = Wj * (p / (p+q)) * (Rdi / Rdsj).  In this case, Rdsj is
just the sum of relative distances that do appear in the group's descriptors.

Finally, suppose that spectrum scalar descriptor ssdi is as follows:

	Vi, j, Rdi, Lbi, Ubi

Here Lbi and Ubi are respective lower and upper bounds to assume for values of
Vi.  If all descriptors for axis group j include lower and upper bounds, the
minimum shared by all the group's axes will be computed as the minimum of all
the lower bounds.  Similarly, the shared axis maximum will be computed as the
maximum of all the upper bounds.  This minimum and maximum will override the
default minimum and maximum described above.  If p of the group's descriptors
have bounds and q do not, then (1) an axis minimum and maximum for subgroup p
are computed from the bounds in those descriptors, (2) a second axis minimum
and maximum are computed for subgroup q using the data minima and maxima of
variables in that subgroup, then (3) the shared axis minimum for the entire
group is calculated as the minimum of the two minima and the shared axis maximum
is calculated as the maximum of the two maxima.

Including lower and upper bounds in the descriptors for an axis group is highly
recommended.  This ensures that the group's shared axis bounds will not vary as
different datasets are displayed on the group's axes, which would otherwise
occur if the axis bounds were being computed as a function of the data.  It also
obviates the need to read through all the input data for the corresponding
scalar variables before all that data would be traversed a second time to draw
polylines of the ParallelAxis plot itself.

In any of the spectrum scalar descriptor forms that include arguments after the
variable name, any or all of those arguments may be replaced with the string
"NO_VALUE".  If a descriptor's axis group ID has no value:  (1) Any Rdi values
that appear in descriptors of this type will be treated as though their axes
belonged to a single implicit group and the relative spacing of those axes will
be computed as described above.  (2) Any Lbi and Ubi values that appear in
groupless descriptors will simply be applied as the bounds for the corresponding
axis.

If either of Lbi and Ubi is designated NO_VALUE in the descriptor forms above,
then the other must also be designated NO_VALUE, else the descriptor is invalid.

As described in detail above in "BASIC USE OF THE PARALLELAXIS PLOT", an array
expression can be defined interactively in VisIt by typing the definition into
VisIt's Expressions dialogue window, which is invoked by selecting "Expressions"
from the Controls puldown menu in the main menu bar.  An array expression can
also be defined via the DefineArrayExpression Python command, which can be typed
directly as a CLI command, or included as a command in a Python script or as a
command in a VisIt session file.  A command of this type takes the form:

      DefineArrayExpression("<arrayvar>", "array_compose(ssd1, ssd2, . . ssdN)")

Here <arrayvar> is the name of the array mesh variable being defined.  This name
will show up in the list of selectable scalar variables that pops up when the
plot is created by clicking Plots->ParallelAxis.  The "array_compose" part of
the DefineArrayExpression command is as described above.


RELATED CAPABILITIES

VisIt's Threshold operator may be applied to almost any type of plot in VisIt to
constrain, or threshold, input values of any or all of the scalar variables in a
user-specified list, using minimum and maximum threshold values also specified
by the user.  The operator has its own dialogue window that enables the user to
manually select threshold variables and type in threshold minima and maxima for
those variables.  The OVERVIEW section above mentions how the Extents tool
controlling a ParallelAxis plot can be used as a graphical "front end" to a
Threshold operator that's applied to a second type of plot in a second view
window.  Here's how to set up the type of scenario that takes advantage of this:

Suppose view window 1 contains a ParallelAxis plot with an Extents tool.  And
suppose that view window 2 contains a second type of plot (like a Pseudocolor
plot) with a Threshold operator applied.  Go to the "Active window" drop-down
list and set the active view window to 1.  Then from the main menu bar select
Windows->Lock->Tools.  Now set the active window to 2 and also select Windows->
Lock->Tools.  Suppose that "var1" is the name of a scalar variable currently in
the list of threshold variables selected in window 2's Threshold operator.  If
"var1" is also a variable that corresponds to an axis in the ParallelAxis plot
in window 1, and if you slide a red arrowhead on that axis to adjust an extent
minimum or maximum, the corresponding "var1" minimum or maximum in the Threshold
operator of window 2 will also change accordingly.  If the operator's dialogue
window happens to be visible at the time, you'll see that number change to match
the changed extent bound in the ParallelAxis plot.  Of course you'd also expect
to see some kind of corresponding change in the second plot where the Threshold
operator is applied.

In the "Draw individual lines" portion of the ParallelAxis plot's dialogue GUI
window is another toggle labeled "... but only when extents have been limited".
If (1) the Extents tool has just been freshly enabled, (2) the "Draw individual
lines" toggle is on in the ParallelAxis plot's dialogue, and (3) the "... but
only when extents ..." toggle is also on, the polylines will not initially be
drawn on the plot and will only appear when the first red Extents tool arrowhead
is moved.  If the "Draw individual lines" toggle is on and the "... but only
when extents ..." toggle is off, the polylines will always be drawn.  (This can
admittedly be somewhat confusing; a ParallelAxis plot by itself doesn't even
involve the notion of "extents being limited".  Perhaps this will someday be
changed. :>) )
