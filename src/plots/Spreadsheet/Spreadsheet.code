Function: ChangesRequireRecalculation
Declaration: bool ChangesRequireRecalculation(const SpreadsheetAttributes &) const;
Definition:

bool
SpreadsheetAttributes::ChangesRequireRecalculation(const SpreadsheetAttributes &obj) const
{
    return (subsetName != obj.subsetName);
}

Function: CopyAttributes
Declaration: bool CopyAttributes(const AttributeGroup *atts);
Definition:
// ****************************************************************************
// Method: SpreadsheetAttributes::CopyAttributes
//
// Purpose:
//   CopyAttributes method for the SpreadsheetAttributes class.
//
// Note:       Autogenerated by xml2atts.
//
// Programmer: Hank Childs
// Creation:   August 31, 2007
//
// Modifications:
//   Gunther H. Weber, Fri Sep 14 11:33:48 PDT 2007
//   Copy pick letters. Move clearing of pick history to custom
//   SetSubsetName() method.
//
// ****************************************************************************

bool
SpreadsheetAttributes::CopyAttributes(const AttributeGroup *atts)
{
    if (atts->TypeName() == "PlaneAttributes")
    {
        PlaneAttributes *p = (PlaneAttributes *) atts;
        const double *n = p->GetNormal();
        if (fabs(n[2]) >= fabs(n[0]) && fabs(n[2]) >= fabs(n[1]))
            SetNormal(Z);
        else if (fabs(n[1]) >= fabs(n[0]) && fabs(n[1]) >= fabs(n[2]))
            SetNormal(Y);
        else
            SetNormal(X);
        return true;
    }
    if (atts->TypeName() == "PickAttributes")
    {
        // If we got this from a pick, then the tracer plane will just
        // get in the way, so turn it off.
        SetShowTracerPlane(false);

        PickAttributes *p = (PickAttributes *) atts;

        // Handle a clear of pick points
        if (p->GetClearWindow())
        {
            pastPicks.clear();
            pastPickLetters.clear();
            currentPickValid = false;
            return true;
        }

        // Handle subset changes
        if (p->GetSubsetName() != "" &&
            p->GetSubsetName() != subsetName)
        {
            SetSubsetName(p->GetSubsetName());
        }

        // Add current pick to history, if valid
        if (currentPickValid)
        {
            pastPicks.push_back(currentPick[0]);
            pastPicks.push_back(currentPick[1]);
            pastPicks.push_back(currentPick[2]);
            pastPickLetters.push_back(GetCurrentPickLetter());
        }

        // Set current pick based on history
        currentPickValid = true;
        SetCurrentPick(p->GetCellPoint());
        SetCurrentPickLetter(p->GetPickLetter());

        return true;
    }

    if(TypeName() != atts->TypeName())
        return false;

    // Call assignment operator.
    const SpreadsheetAttributes *tmp = (const SpreadsheetAttributes *)atts;
    *this = *tmp;

    return true;
}

Function: CreateCompatible
Declaration: virtual AttributeSubject *CreateCompatible(const std::string &) const;
Definition:
// ****************************************************************************
// Method: SpreadsheetAttributes::CreateCompatible
//
// Purpose:
//   CreateCompatible method for the SpreadsheetAttributes class.
//
// Programmer: Hank Childs
// Creation:   September 14, 2007
//
// Modifications:
//
// ****************************************************************************

AttributeSubject *
SpreadsheetAttributes::CreateCompatible(const std::string &tname) const
{
    AttributeSubject *retval = 0;
    if(TypeName() == tname)
        retval = new SpreadsheetAttributes(*this);
    else if (tname == "PickAttributes")
    {
        PickAttributes *p = new PickAttributes();
        p->SetSubsetName(GetSubsetName());
        retval = p;
    }
    return retval;
}

Function: SetSubsetName
Declaration: void SetSubsetName(const std::string &subsetName_)
Definition:
// ****************************************************************************
// Method: SpreadsheetAttributes::SetSubsetName
//
// Purpose:
//   Custom SetSubsetName method for the SpreadsheetAttributes class
//   that clears the pick history if the subset changes.
//
// Note:       Autogenerated by xml2atts.
//
// Programmer: Gunther H. Weber
// Creation:   September 13, 2007
//
// Modifications:
//
// ****************************************************************************

void
SpreadsheetAttributes::SetSubsetName(const std::string &subsetName_)
{
    subsetName = subsetName_;
    pastPicks.clear();
    pastPickLetters.clear();
    SetCurrentPickValid(false);
    Select(0, (void *)&subsetName);
}

