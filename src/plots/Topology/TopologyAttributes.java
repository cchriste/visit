package llnl.visit.plots;

import llnl.visit.AttributeSubject;
import llnl.visit.CommunicationBuffer;
import llnl.visit.Plugin;
import llnl.visit.ColorAttributeList;

// ****************************************************************************
// Class: TopologyAttributes
//
// Purpose:
//    This class contains the plot attributes for the topology plot
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   Tue Jul 1 08:44:45 PDT 2003
//
// Modifications:
//   
// ****************************************************************************

public class TopologyAttributes extends AttributeSubject implements Plugin
{
    public TopologyAttributes()
    {
        super(9);

        tolerance = 1e-06;
        multiColor = new ColorAttributeList();
        lineWidth = 2;
        lineStyle = 0;
        hitpercent = 0.6;
        minOpacity = 1;
        minPlateauOpacity = 1;
        maxPlateauOpacity = 1;
        maxOpacity = 1;
    }

    public TopologyAttributes(TopologyAttributes obj)
    {
        super(9);

        tolerance = obj.tolerance;
        multiColor = new ColorAttributeList(obj.multiColor);
        lineWidth = obj.lineWidth;
        lineStyle = obj.lineStyle;
        hitpercent = obj.hitpercent;
        minOpacity = obj.minOpacity;
        minPlateauOpacity = obj.minPlateauOpacity;
        maxPlateauOpacity = obj.maxPlateauOpacity;
        maxOpacity = obj.maxOpacity;

        SelectAll();
    }

    public boolean equals(TopologyAttributes obj)
    {
        // Create the return value
        return ((tolerance == obj.tolerance) &&
                (multiColor == obj.multiColor) &&
                (lineWidth == obj.lineWidth) &&
                (lineStyle == obj.lineStyle) &&
                (hitpercent == obj.hitpercent) &&
                (minOpacity == obj.minOpacity) &&
                (minPlateauOpacity == obj.minPlateauOpacity) &&
                (maxPlateauOpacity == obj.maxPlateauOpacity) &&
                (maxOpacity == obj.maxOpacity));
    }

    public String GetName() { return "Topology"; }
    public String GetVersion() { return "1.0"; }

    // Property setting methods
    public void SetTolerance(double tolerance_)
    {
        tolerance = tolerance_;
        Select(0);
    }

    public void SetMultiColor(ColorAttributeList multiColor_)
    {
        multiColor = multiColor_;
        Select(1);
    }

    public void SetLineWidth(int lineWidth_)
    {
        lineWidth = lineWidth_;
        Select(2);
    }

    public void SetLineStyle(int lineStyle_)
    {
        lineStyle = lineStyle_;
        Select(3);
    }

    public void SetHitpercent(double hitpercent_)
    {
        hitpercent = hitpercent_;
        Select(4);
    }

    public void SetMinOpacity(double minOpacity_)
    {
        minOpacity = minOpacity_;
        Select(5);
    }

    public void SetMinPlateauOpacity(double minPlateauOpacity_)
    {
        minPlateauOpacity = minPlateauOpacity_;
        Select(6);
    }

    public void SetMaxPlateauOpacity(double maxPlateauOpacity_)
    {
        maxPlateauOpacity = maxPlateauOpacity_;
        Select(7);
    }

    public void SetMaxOpacity(double maxOpacity_)
    {
        maxOpacity = maxOpacity_;
        Select(8);
    }

    // Property getting methods
    public double             GetTolerance() { return tolerance; }
    public ColorAttributeList GetMultiColor() { return multiColor; }
    public int                GetLineWidth() { return lineWidth; }
    public int                GetLineStyle() { return lineStyle; }
    public double             GetHitpercent() { return hitpercent; }
    public double             GetMinOpacity() { return minOpacity; }
    public double             GetMinPlateauOpacity() { return minPlateauOpacity; }
    public double             GetMaxPlateauOpacity() { return maxPlateauOpacity; }
    public double             GetMaxOpacity() { return maxOpacity; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteDouble(tolerance);
        if(WriteSelect(1, buf))
            multiColor.Write(buf);
        if(WriteSelect(2, buf))
            buf.WriteInt(lineWidth);
        if(WriteSelect(3, buf))
            buf.WriteInt(lineStyle);
        if(WriteSelect(4, buf))
            buf.WriteDouble(hitpercent);
        if(WriteSelect(5, buf))
            buf.WriteDouble(minOpacity);
        if(WriteSelect(6, buf))
            buf.WriteDouble(minPlateauOpacity);
        if(WriteSelect(7, buf))
            buf.WriteDouble(maxPlateauOpacity);
        if(WriteSelect(8, buf))
            buf.WriteDouble(maxOpacity);
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        for(int i = 0; i < n; ++i)
        {
            int index = (int)buf.ReadByte();
            switch(index)
            {
            case 0:
                SetTolerance(buf.ReadDouble());
                break;
            case 1:
                multiColor.Read(buf);
                Select(1);
                break;
            case 2:
                SetLineWidth(buf.ReadInt());
                break;
            case 3:
                SetLineStyle(buf.ReadInt());
                break;
            case 4:
                SetHitpercent(buf.ReadDouble());
                break;
            case 5:
                SetMinOpacity(buf.ReadDouble());
                break;
            case 6:
                SetMinPlateauOpacity(buf.ReadDouble());
                break;
            case 7:
                SetMaxPlateauOpacity(buf.ReadDouble());
                break;
            case 8:
                SetMaxOpacity(buf.ReadDouble());
                break;
            }
        }
    }


    // Attributes
    private double             tolerance;
    private ColorAttributeList multiColor;
    private int                lineWidth;
    private int                lineStyle;
    private double             hitpercent;
    private double             minOpacity;
    private double             minPlateauOpacity;
    private double             maxPlateauOpacity;
    private double             maxOpacity;
}

