Target: xml2python
Code: PyCurveAttributes_getattr
Prefix:
Postfix:
    // Try and handle legacy fields in CurveAttributes
    if(strcmp(name, "cycleColors") == 0)
    {
        CurveAttributesObject *curveObj = (CurveAttributesObject *)self;
        bool cycleColors = curveObj->data->GetCurveColorSource() == CurveAttributes::Custom;
        return PyInt_FromLong(cycleColors?1L:0L);
    }
    // Try and handle legacy fields in CurveAttributes
    if(strcmp(name, "color") == 0)
    {
        return CurveAttributes_GetCurveColor(self, NULL);
    }

Code: PyCurveAttributes_setattr
Prefix:
Postfix:
   // Try and handle legacy fields in CurveAttributes
    if(obj == NULL)
    {
        CurveAttributesObject *CurveObj = (CurveAttributesObject *)self;
        if(strcmp(name, "color") == 0)
        {
            obj = CurveAttributes_SetCurveColor(self, tuple);
        }
        if(strcmp(name, "cycleColors") == 0)
        {
            int ival;
            if(!PyArg_ParseTuple(tuple, "i", &ival))
            {
                Py_DECREF(tuple);
                return -1;
            }
            if(ival == 0)
                CurveObj->data->SetCurveColorSource(CurveAttributes::Custom);
            else
                CurveObj->data->SetCurveColorSource(CurveAttributes::Cycle);
    
            Py_INCREF(Py_None);
            obj = Py_None;
        }
    }

Target: xml2atts
Function: CopyAttributes
Declaration: virtual bool CopyAttributes(const AttributeGroup *);
Definition:
bool
CurveAttributes::CopyAttributes(const AttributeGroup *atts)
{
    bool retval = false;

    if(TypeName() == atts->TypeName())
    {
        // Call assignment operator.
        const CurveAttributes *tmp = (const CurveAttributes *)atts;
        *this = *tmp;
        retval = true;
    }
    else if(atts->TypeName() == "Line")
    {
        const Line *tmp = (const Line*)atts;
        SetDesignator(tmp->GetDesignator());
        SetCurveColor(tmp->GetColor());
        retval = true;
    }

    return retval;
}

Function: CreateCompatible
Declaration: virtual AttributeSubject *CreateCompatible(const std::string &) const;
Definition:
AttributeSubject *
CurveAttributes::CreateCompatible(const std::string &tname) const
{
    AttributeSubject *retval = 0;

    if(TypeName() == tname)
    {
        retval = new CurveAttributes(*this);
    }
    else if(tname == "Line")
    {
        Line *line = new Line;
        line->SetDesignator(GetDesignator());
        line->SetColor(GetCurveColor());
        line->SetLineStyle(GetLineStyle());
        line->SetLineWidth(GetLineWidth());
        retval = line;
    }

    return retval;
}

Function: ChangesRequireRecalculation
Declaration: bool ChangesRequireRecalculation(const CurveAttributes &) const;
Definition:
bool
CurveAttributes::ChangesRequireRecalculation(const CurveAttributes &obj) const
{
    return false;
}

Function: Print
Declaration: void Print(ostream &, bool) const;
Definition:
void
CurveAttributes::Print(ostream &out, bool selected_only) const
{
    out << "CurveAttributes" << "\n";
    out << "{";
    for(int i = 0; i < NumAttributes(); ++i)
    {
        if(selected_only && !IsSelected(i))
            continue;

        switch(i)
        {
          case  0: out << "lineStyle=  " << GetLineStyle();      break;
          case  1: out << "lineWidth=  " << GetLineWidth();      break;
          case  2: double color[4];
                   GetCurveColor().GetRgba(color);
                   out << "color=      " 
                       << color[0] << " " << color[1] << " " 
                       << color[2] << " " << color[3];
                   GetDesignator();    break;
          case  3: out << "showLabels= " << GetShowLabels();    break;
          case  4: out << "designator= " << GetDesignator().c_str();    break;
          case  5: out << "showPoints= " << GetShowPoints();    break;
          case  6: out << "pointSize=  " << GetPointSize();    break;
          case  7: out << "legend=  " << (GetShowLegend()?"true":"false");    break;
//          case  8: out << "curveColor=" << (GetCurveColor()==CurveColor::Cycle?"cycle":"custom"); break;
          case  9: out << "renderMode=" << RenderMode_ToString(GetRenderMode()).c_str(); break;
          case  10: out << "symbol=" << SymbolTypes_ToString(GetSymbol()).c_str(); break;
          case  11: out << "symbolDensity=" << GetSymbolDensity(); break;
        }
        out << ",";
    }

    out << "}";
}

Target: xml2info
Function: CurveViewerPluginInfo::InitializeGlobalObjects
Declaration: static void InitializeGlobalObjects();
Definition:
// ****************************************************************************
//  Method:  CurveViewerPluginInfo::InitializeGlobalObjects
//
//  Purpose:
//    Initialize the plot atts.
//
//  Programmer: whitlocb -- generated by xml2info
//  Creation:   Fri Mar 26 15:09:32 PST 2004
//
//  Modifications:
//    Kathleen Bonnell, Mon Oct 31 17:05:35 PST 2005
//    Initialize colorIndex. 
//
// ****************************************************************************
static int colorIndex;
void
CurveViewerPluginInfo::InitializeGlobalObjects()
{
    colorIndex = 0;
    CurveViewerPluginInfo::clientAtts  = new CurveAttributes;
    CurveViewerPluginInfo::defaultAtts = new CurveAttributes;
}

Function: CurveViewerPluginInfo::InitializePlotAtts
Declaration: virtual void InitializePlotAtts(AttributeSubject *atts, ViewerPlot *);
Definition:
// ****************************************************************************
//  Method: CurveViewerPluginInfo::InitializePlotAtts
//
//  Purpose:
//    Initialize the plot attributes to the default attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//    md        The metadata used to initialize.
//    atts      The variable name used to initialize.
//
//  Programmer: whitlocb -- generated by xml2info
//  Creation:   Fri Mar 26 15:09:32 PST 2004
//
//  Modifications:
//    Kathleen Bonnell, Mon Oct 31 17:05:35 PST 2005
//    Added call to SetColor.
//
// ****************************************************************************

void
CurveViewerPluginInfo::InitializePlotAtts(AttributeSubject *atts,
    ViewerPlot *)
{
    *(CurveAttributes*)atts = *defaultAtts;
    SetColor(atts);
}

Function: CurveViewerPluginInfo::SetColor
Declaration: void SetColor(AttributeSubject *);
Definition:
// ****************************************************************************
//  Method: CurveViewerPluginInfo::SetColor
//
//  Purpose:
//    Sets the color if the CycleColors att is set to true. 
//
//  Arguments:
//    atts      The attribute subject. 
//
//  Programmer: Kathleen Bonnell 
//  Creation:   October 31, 2005 
//
// ****************************************************************************
#include <avtColorTables.h>

void
CurveViewerPluginInfo::SetColor(AttributeSubject *atts)
{
    CurveAttributes *curveAtts = (CurveAttributes *)atts;

    if (curveAtts->GetCurveColorSource())
    {
        ColorAttribute c;
        unsigned char rgb[3] = {0,0,0};

        //
        // Try and get the color for the colorIndex'th color in the default
        // discrete color table.
        //
        avtColorTables *ct = avtColorTables::Instance();
        if(ct->GetControlPointColor(ct->GetDefaultDiscreteColorTable(),
           colorIndex, rgb))
        {
            c.SetRed(int(rgb[0]));
            c.SetGreen(int(rgb[1]));
            c.SetBlue(int(rgb[2]));
        }
        curveAtts->SetCurveColor(c);
        // Increment the color index.
        colorIndex = (colorIndex + 1) % ct->GetNumColors();
    }
}

Function: CurveViewerPluginInfo::PermitsCurveViewScaling
Declaration: virtual bool PermitsCurveViewScaling() const;
Definition:
bool
CurveViewerPluginInfo::PermitsCurveViewScaling() const
{
    return true;
}

