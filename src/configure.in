dnl Process this file with autoconf to produce configure.
dnl 
dnl 
dnl 
dnl                            Copyright 2000 - 2008
dnl                 The Regents of the University of California.
dnl                             All rights reserved.
dnl 
dnl This work was produced at the University of California, Lawrence Livermore
dnl National Laboratory (UC LLNL)  under contract no.  W-7405-ENG-48 (Contract
dnl 48) between  the U.S. Department of Energy  (DOE)  and The Regents  of the
dnl University  of  California  (University)  for  the  operation of  UC LLNL.
dnl Copyright   is  reserved to  the   University for  purposes  of controlled
dnl dissemination,   commercialization  through  formal licensing,   or  other
dnl disposition under  terms of Contract   48; DOE policies,  regulations  and
dnl orders; and  U.S. statutes.  The    rights of the  Federal Government  are
dnl reserved under Contract 48 subject to  the restrictions agreed upon by DOE
dnl and University.
dnl 
dnl                                 DISCLAIMER
dnl 
dnl This software was prepared as an account of work sponsored by an agency of
dnl the United States Government. Neither the United States Government nor the
dnl University  of California nor any of  their employees, makes any warranty,
dnl express or implied,  or assumes  any liability  or responsiblity  for  the
dnl accuracy, completeness, or    usefullness of any  information,  apparatus,
dnl product, or  process   disclosed, or represents that  its   use would  not
dnl infringe privately    owned  rights. Reference   herein  to  any  specific
dnl commercial  products, process,  or    service by trade   name,  trademark,
dnl manufacturer, or otherwise, does  not necessarily constitute or imply  its
dnl endorsement, recommendation, or  favoring by the United  States Government
dnl or the   University  of  California.  The views   and  opinions of authors
dnl expressed herein do not  necessarily state or  reflect those of the United
dnl States Government  or the University of  California, and shall not be used
dnl for advertising or product endorsement purposes.
dnl

dnl
dnl
dnl Modifications:
dnl    Jeremy Meredith, Mon Aug  7 12:02:49 PDT 2000
dnl    Added the parsing of object files from the Makefile.in's.
dnl
dnl    Kathleen Bonnell, Thu Oct 12 12:18:02 PDT 2000
dnl    Added visit_vtk subdirectory, VISIT_VTK_CPPFLAGS, VISIT_VTK_FILES
dnl
dnl    Brad Whitlock, Tue Oct 31 14:40:24 PST 2000
dnl    Made sure libvtkqt.a gets built. I also removed the check for GLR
dnl    remotely rendered hw accelerated graphics.
dnl
dnl    Eric Brugger, Tue Nov 14 08:20:47 PST 2000
dnl    Remove unnecessary tests.
dnl
dnl    Eric Brugger, Fri Nov 17 11:51:58 PST 2000
dnl    I added checks for -lXt and -lXext on AIX systems.  I removed the test
dnl    for inline.
dnl
dnl    Hank Childs, Mon Nov 20 15:24:32 PST 2000
dnl    Set up components for parallel.
dnl
dnl    Eric Brugger, Wed Dec  6 12:35:25 PST 2000
dnl    I added the option --disable-mdserver.  I modified the script to not
dnl    build components/VisWindow if --disable-gui is on.  I made a few
dnl    other fixes for building a parallel version on AIX systems.
dnl
dnl    Eric Brugger, Thu Dec  7 12:03:10 PST 2000
dnl    I added checks for -lXt on OSF systems.
dnl
dnl    Jeremy Meredith, Tue Dec 12 13:48:44 PST 2000
dnl    Added "mir" common directory.
dnl
dnl    Eric Brugger, Fri Feb 16 17:57:34 PST 2001
dnl    I made the checks for the X and OpenGL always occur since the engine
dnl    now needs them and the engine is always built.
dnl
dnl    Eric Brugger, Mon Feb 26 15:35:22 PST 2001
dnl    I added the outputing of Makefiles for all the directories in the
dnl    plot directory tree.
dnl
dnl    Eric Brugger, Fri Mar  2 14:43:44 PST 2001
dnl    I added the outputing of the Makefile in the plot/Contour directory.
dnl
dnl    Eric Brugger, Tue Mar  6 16:34:17 PST 2001
dnl    I renamed the file config.h to visit-config.h to avoid name conflicts
dnl    with public header files.
dnl
dnl    Hank Childs, Thu Mar  8 15:40:26 PST 2001
dnl    Added directories for components/Database.
dnl
dnl    Eric Brugger, Thu Mar  8 08:42:05 PST 2001
dnl    I added the outputing of the Makefile in the plot/Manager directory.
dnl
dnl    Hank Childs, Sat Mar 10 18:20:57 PST 2001
dnl    Added an option for timings.
dnl
dnl    Eric Brugger, Thu Mar 15 17:13:09 PST 2001
dnl    Modify the script to not generate viewer/cli/Makefile since the cli
dnl    directory has been removed.
dnl
dnl    Jim Reus, Fri Mar 23 06:42:10 PST 2001
dnl    Add tests for ZLIB, HDF5, VBT/DSL, and SAF. These are loosely based
dnl    on previous work I had done for the SAF read-only driver for SILO.
dnl    This added four new "with" options to configure:
dnl
dnl        --with-zlib=INCDIR,LIBDIR
dnl        --with-hdf=INCDIR,LIBDIR
dnl        --with-vbt=INCDIR,LIBDIR
dnl        --with-saf=INCDIR,LIBDIR
dnl
dnl    Eric Brugger, Mon Mar 26 13:07:16 PST 2001
dnl    Turn off the compilation of the GUI sources in the plot directories
dnl    if the GUI is disabled.
dnl
dnl    Jeremy Meredith, Wed Mar 28 15:15:25 PST 2001
dnl    Changed the way the GUI is disabled.  Added substitution parameters
dnl    to disable the viewer and engine as well.
dnl
dnl    Sean Ahern, Wed Apr 25 08:52:41 PDT 2001
dnl    Made the OS_RULE apply always so we don't wink in things across OSes.
dnl    Changed some of the "dnl" comments to "#" so that we get them in
dnl    "configure".
dnl
dnl    Jeremy Meredith, Thu Apr 26 13:53:14 PDT 2001
dnl    Added check for SysV vs BSD style pseudo-tty.
dnl
dnl    Eric Brugger, Fri Apr 27 18:40:54 PDT 2001
dnl    I added a check to see if there exists a prototype for ftime in
dnl    "sys/timeb.h".
dnl
dnl    Jeremy Meredith, Thu May 10 17:26:29 PDT 2001
dnl    Added checks for network libraries for SunOS (nsl, socket, resolv).
dnl    Added check for qgl.  Added code for plugins.
dnl    Added stuff to figure out how to build shared libraries.
dnl
dnl    Jeremy Meredith, Wed Jun  6 22:19:11 PDT 2001
dnl    Added a check to see if socklen_t exists.
dnl
dnl    Hank Childs, Wed Jun 13 16:01:50 PDT 2001
dnl    Changed around the location of a bunch of Makefiles.
dnl
dnl    Jeremy Meredith, Mon Jun 25 21:43:10 PDT 2001
dnl    Added PX (Parallel eXtension) as either _ser or _par.
dnl    Changed the definitions of SHLIB_POSTPROCESS slightly.
dnl    Added definition of PLUGIN_EXTENSION.
dnl
dnl    Jeremy Meredith, Mon Jul 23 00:46:57 PDT 2001
dnl    Made it search for qgl in the $QTDIR/lib directory.  It sometimes
dnl    happened that QTDIR pointed to one without a separate qgl, but there
dnl    was still a qgl elsewhere in the library search path.
dnl
dnl    Jeremy Meredith, Thu Jul 26 02:45:06 PDT 2001
dnl    Added operator plugins.
dnl
dnl    Jeremy Meredith, Fri Jul 27 13:51:00 PDT 2001
dnl    Made it automatically disable the gui, viewer, mdserver when building
dnl    in parallel.  Also made engine proxy build only when viewer is built.
dnl
dnl    Hank Childs, Wed Aug  8 17:41:12 PDT 2001
dnl    Add --disable-annotation.  Also add support for Qt-2.2.1.
dnl
dnl    Jeremy Meredith, Tue Aug 28 16:04:51 PDT 2001
dnl    Added tools/xml.
dnl
dnl    Sean Ahern, Thu Aug 30 16:54:07 PDT 2001
dnl    Added the splash screen.
dnl
dnl    Jeremy Meredith, Tue Sep  4 10:37:27 PDT 2001
dnl    Added ./include/make-targets-libmulti.in as LIBMULTITARGETS
dnl    and ./include/maketargets-lisingle.in as LIBSINGLETARGETS.
dnl
dnl    Hank Childs, Sun Sep  9 20:34:43 PDT 2001
dnl    Added tools/avtprep, components/Preprocessor.
dnl
dnl    Hank Childs, Wed Sep 12 10:52:30 PDT 2001
dnl    Added --enable-buildall option.
dnl
dnl    Jeremy Meredith, Mon Sep 24 17:41:28 PDT 2001
dnl    Added Transform operator and removed Shift operator.
dnl
dnl    Jeremy Meredith, Fri Sep 28 13:24:26 PDT 2001
dnl    Added ILIBS for engine, gui, viewer.
dnl
dnl    Hank Childs, Mon Oct  8 15:38:52 PDT 2001
dnl    Added enable/disable exodus.
dnl
dnl    Brad Whitlock, Mon Oct 1 12:28:19 PDT 2001
dnl    Added Tools directory to components/VisWindow.
dnl
dnl    Kathleen Bonnell, Fri Oct 19 15:33:35 PDT 2001 
dnl    Added Subset directory to plots.
dnl
dnl    Brad Whitlock, Tue Oct 16 15:38:32 PST 2001
dnl    Added Math directory to components.
dnl
dnl    Hank Childs, Tue Oct 23 11:22:33 PDT 2001
dnl    Add ColorIso directory.
dnl
dnl    Hank Childs, Tue Oct 23 15:25:40 PDT 2001
dnl    Add Threshold operator.
dnl
dnl    Jeremy Meredith, Thu Oct 25 13:00:54 PDT 2001
dnl    Added Database/Ghost, and moved MIR from Pipeline to Database.
dnl
dnl    Hank Childs, Mon Nov  5 16:37:59 PST 2001
dnl    Added Displace operator.
dnl
dnl    Eric Brugger, Wed Nov  7 13:35:23 PST 2001
dnl    Removed --enable-timings.
dnl
dnl    Jeremy Meredith, Mon Nov 12 13:36:36 PST 2001
dnl    Added tools/silex.
dnl    Added check for static QT so we can use it if possible.
dnl
dnl    Hank Childs, Mon Nov 12 16:52:17 PST 2001
dnl    Added box operator.
dnl
dnl    Eric Brugger, Wed Dec  5 11:04:36 PST 2001
dnl    Added tools/curv3dprep.
dnl
dnl    Brad Whitlock, Sun Jul 8 2001
dnl    Added visitpy directory and support for scripting plugins.
dnl
dnl    Kathleen Bonnell, Thu Nov 15 12:48:49 PST 2001
dnl    Modified VTK_INCLUDES and VTK_LIB to match VTK 4.0 directory tree. 
dnl
dnl    Jeremy Meredith, Thu Jan  3 15:25:42 PST 2002
dnl    Cleared out SHLIB_MPI_LIBS if not building in parallel.
dnl    Split library target includes into ones for serial/parallel and ones
dnl    for parallel only.  Changed AIX to check to make sure parallel is
dnl    enabled before setting SHLIB_MPI_LIBS.  Explicitly substitute
dnl    SHLIB_MPI_LIBS instead of always stuffing it into SHLIB_LIBS.
dnl
dnl    Jeremy Meredith, Sat Jan  5 17:53:36 PST 2002
dnl    Added SiloDump operator.
dnl    Created a PARALLEL_CPPFLAGS.
dnl
dnl    Jeremy Meredith, Wed Jan  9 13:17:05 PST 2002
dnl    Removed the strangeness of AIX's shared library processes.
dnl    The right combination of things has converged to make building them
dnl    mostly "normal" finally.
dnl
dnl    Jeremy Meredith, Wed Jan 16 09:43:06 PST 2002
dnl    Allow concurrent serial and parallel builds:
dnl    --enable-parallel no longer implies --disable-mdserver and --disable-gui
dnl    removed PX, duplicated other defines into PAR and SER versions.
dnl
dnl    Jeremy Meredith, Fri Feb  1 10:05:04 PST 2002
dnl    Added LIBSHAREDPAR_UPDATEONLY.
dnl
dnl    Jeremy Meredith, Fri Feb 15 13:49:37 PST 2002
dnl    Removed some AIX shared library stuff I forgot to remove earlier.
dnl
dnl    Eric Brugger, Tue Feb 19 14:49:34 PST 2002
dnl    I added the creation of a makefile in the data directory.
dnl
dnl    Sean Ahern, Thu Mar  7 13:03:35 PST 2002
dnl    Changed how BUILDALL for operators works.
dnl
dnl    Hank Childs, Thu Mar  7 10:20:47 PST 2002
dnl    Added reflect operator.
dnl
dnl    Hank Childs, Thu Mar  7 12:54:44 PST 2002
dnl    Fix a bug with specifying --without-exodus.
dnl
dnl    Jeremy Meredith, Mon Mar 11 16:43:35 PST 2002
dnl    Renamed SplashScreen to splashscreen.
dnl    Removed the multi lib targets; everything is single.
dnl
dnl    Brad Whitlock, Tue Mar 12 14:29:39 PST 2002
dnl    I rewrote the check for Qt's version and made it check for version
dnl    3.0.0 or later.
dnl
dnl    Eric Brugger, Thu Mar 21 15:10:34 PST 2002
dnl    Add the sphere slice operator.
dnl
dnl    Kathleen Bonnell, Tue Apr  9 16:51:14 PDT 2002 
dnl    Add new vtk libs. 
dnl
dnl    Jeremy Meredith, Mon Apr 15 12:20:36 PDT 2002
dnl    Added check for streambuf::setbuf publicly accessible.
dnl
dnl    Brad Whitlock, Thu Mar 21 17:13:22 PST 2002
dnl    Removed the rpc library. Added slash character check.
dnl
dnl    Eric Brugger, Tue Apr 16 09:23:42 PDT 2002
dnl    Added a check for mesa.
dnl
dnl    Hank Childs, Tue Apr 16 10:44:14 PDT 2002
dnl    Added Isosurface operator.
dnl
dnl    Jeremy Meredith, Fri Apr 19 15:23:49 PDT 2002
dnl    Removed IsoSurfaceVolume and RangeVolume plots.
dnl
dnl    Kathleen Bonnell, Thu Apr 25 15:46:34 PDT 2002  
dnl    Added subdirs: plots/Curve,  operators/Lineout. 
dnl
dnl    Brad Whitlock, Wed May 15 13:07:35 PST 2002
dnl    Added help viewer.
dnl
dnl    Hank Childs, Wed May 22 14:02:48 PDT 2002 
dnl    Put an extra set of '[]' around the 'tr' command so that m4 doesn't
dnl    take them out.  The '[]' are required for 'tr' with Solaris 5.8
dnl
dnl    Hank Childs, Wed May 29 15:33:12 PDT 2002 
dnl    Added cone operator.
dnl
dnl    Hank Chidls, Wed Jun  5 08:14:29 PDT 2002
dnl    Added IndexSelect operator.  Removed ColorIso.
dnl
dnl    Sean Ahern, Mon Jun 10 16:20:48 PDT 2002
dnl    Added make-targets-dir so that we can get rid of a lot of rules.
dnl
dnl    Jeremy Meredith, Fri Jul 12 14:35:08 PDT 2002
dnl    Unified the include file locations to the root /include tree.
dnl    This includes mesa, qt, vtk, and visit.  Also linked moc to our
dnl    private bin directory and used it there.  Added makefiles for our
dnl    root include and bin directories.  Added check for ios::noreplace.
dnl    Removed all plot and operator plugin makefile.in's since all are
dnl    now generated at runtime.
dnl
dnl    Jeremy Meredith, Thu Jul 18 13:11:36 PDT 2002
dnl    Assume python library is in our private lib directory (probably as
dnl    a symbolic link).
dnl
dnl    Jeremy Meredith, Thu Jul 18 13:11:36 PDT 2002
dnl    Made it build the include and lib directories, and xml2atts and
dnl    the plot and operator plugin makefiles automatically after 
dnl    config.status is created and has been run.
dnl
dnl    Jeremy Meredith, Thu Jul 25 15:24:44 PDT 2002
dnl    Added a message for parallel enabled.
dnl
dnl    Jeremy Meredith, Sat Aug  3 11:38:23 PDT 2002
dnl    Renamed BUILDALL.
dnl
dnl    Brad Whitlock, Wed Aug 14 16:48:22 PST 2002
dnl    I added a --enable-java test.
dnl
dnl    Eric Brugger, Tue Aug 20 11:44:00 PDT 2002
dnl    Disable the exodus reader if the VTK exodus reader doesn't exist.
dnl
dnl    Brad Whitlock, Wed Aug 21 11:45:18 PDT 2002
dnl    I made tools make clean before building xml2makefile in case I've
dnl    run configure on another platform before running it again on the
dnl    current platform. I also made configure build a small Java class
dnl    file that contains the VisIt version.
dnl
dnl    Jeremy Meredith, Wed Aug 21 14:46:24 PDT 2002
dnl    Added database plugins.  Changed the exodus and saf checks a little.
dnl
dnl    Brad Whitlock, Thu Sep 26 15:54:03 PST 2002
dnl    If the test for pthreads succeeds, I made it define a macro in
dnl    visit-config.h
dnl
dnl    Hank Childs, Thu Oct  3 11:32:29 PDT 2002
dnl    Made an HDF5 symbol for database plugins.
dnl
dnl    Sean Ahern, Fri Oct  4 11:16:52 PDT 2002
dnl    Moved the expression parser to its own library.
dnl
dnl    Hank Childs, Sun Oct 13 21:07:20 PDT 2002
dnl    Add PDB check based on work by Brad Whitlock.
dnl
dnl    Jeremy Meredith, Thu Oct 17 16:07:02 PDT 2002
dnl    Added xml editor.
dnl
dnl    Brad Whitlock, Wed Nov 6 12:25:37 PDT 2002
dnl    I added a check for Java's jar utility.
dnl
dnl    Sean Ahern, Mon Nov 18 13:10:38 PST 2002
dnl    Added --with-{plots,operators,dbs} options.
dnl
dnl    Hank Childs, Tue Nov 19 06:44:03 PST 2002
dnl    Added Expressions and Queries directory.
dnl
dnl    Sean Ahern, Tue Nov 19 13:10:27 PST 2002
dnl    Added --with-config option.
dnl
dnl    Eric Brugger, Tue Dec  3 08:03:09 PST 2002
dnl    Removed -I/usr/local/include from CPPFLAGS and -L/usr/local/lib from
dnl    LDFLAGS.
dnl
dnl    Brad Whitlock, Fri Dec 13 11:49:40 PDT 2002
dnl    I added PTHREAD_CXXFLAGS that is defined when we can find pthreads.
dnl
dnl    Hank Childs, Sun Dec 29 12:12:17 PST 2002
dnl    Added tools/annotations.
dnl
dnl    Kathleen Bonnell, Thu Jan  2 09:06:57 PST 2003 
dnl    Add new vtk libs vtkfreetype, vtkftgl. 
dnl
dnl    Brad Whitlock, Thu Jan 16 16:37:35 PST 2003
dnl    Added tools/escan to the list of Makefiles.
dnl
dnl    Jeremy Meredith, Fri Jan 24 11:51:58 PST 2003
dnl    Fixed bug with building optional plugins.
dnl
dnl    Eric Brugger, Thu Mar 27 14:29:09 PST 2003
dnl    Changed the location of vtkexpat, vtkfreetype, vtkftgl, vtkjpeg,
dnl    vtkpng, vtktiff and vtkzlib in the link line so that they are loaded
dnl    in the proper order.  Removed some unnecessary X libraries.  Moved
dnl    the GL library to the end of VTK_LIBS since it is only used by VTK.
dnl
dnl    Hank Childs, Thu Apr 10 16:45:02 PDT 2003
dnl    Added support for Mili.
dnl
dnl    Jeremy Meredith, Tue Apr 15 21:12:12 PDT 2003
dnl    Made references to TOPDIR interpolate at build time instead of
dnl    configure-time.  This also required adding TOPDIR as a variable
dnl    substitution and replacing some references to "pwd" to use TOPDIR.
dnl
dnl    Brad Whitlock, Fri May 2 15:06:12 PST 2003
dnl    I added libproxybase and the new launcher component.
dnl
dnl    Sean Ahern, Fri Aug  9 15:52:39 PDT 2002
dnl    Made UNAME be run as few times as possible.  Removed the memmove
dnl    test, as we weren't using it.  Added Darwin (Mac OS X) support.
dnl
dnl    Sean Ahern, Wed Jun 11 16:36:52 PDT 2003
dnl    Fixed pthreads test.
dnl
dnl    Akira Haddox, Thu Jun 12 08:56:16 PDT 2003
dnl    Added support for HDF4.
dnl
dnl    Akira Haddox, Tue Jul  1 12:36:01 PDT 2003
dnl    Added tools/makemili.
dnl
dnl    Hank Childs, Wed Jul  2 09:50:00 PDT 2003
dnl    Added tools/surfcomp.
dnl
dnl    Brad Whitlock, Thu Jun 19 13:10:18 PST 2003
dnl    I removed the splashscreen.
dnl
dnl    Brad Whitlock, Tue Jul 29 15:51:29 PST 2003
dnl    Added mpeg_encode to the tools directory.
dnl
dnl    Hank Childs, Wed Jul 30 18:05:32 PDT 2003
dnl    Add support for fake exceptions.
dnl
dnl    Jeremy Meredith, Wed Aug 20 09:52:28 PDT 2003
dnl    Added the MIR library.
dnl
dnl    Akira Haddox, Wed Aug 20 10:45:41 PDT 2003
dnl    Added support for Boxlib3D.
dnl
dnl    Hank Childs, Tue Sep  9 07:36:21 PDT 2003
dnl    Added tools/convert.
dnl
dnl    Jeremy Meredith, Fri Oct 10 12:32:27 PDT 2003
dnl    Added check for 3D texturing support in OpenGL.
dnl
dnl    Brad Whitlock, Wed Sep 3 10:55:28 PDT 2003
dnl    Added more Darwin support and added logic to create bundles.
dnl
dnl    Kathleen Bonnell, Wed Nov 12 17:20:03 PST 2003 
dnl    Add new vtk lib vtkDICOMParser. 
dnl
dnl    Eric Brugger, Thu Nov 20 08:54:13 PST 2003
dnl    Modify the script to handle the absence of the help directory.
dnl
dnl    Hank Childs, Sat Jan 24 11:39:13 PST 2004
dnl    Re-organized many libraries to enable mdserver to link against less.
dnl
dnl    Brad Whitlock, Thu Jan 29 10:48:59 PDT 2004
dnl    I added more versions of Qt to the list of supported versions.
dnl
dnl    Mark C. Miller, Thu Feb 26 10:44:14 PDT 2004
dnl    Modified to defualt to using PDB lite (in libsilo.a) but still
dnl    accept --with-pdb option if PDB proper is desired
dnl
dnl    Hank Childs, Thu Mar  4 08:32:01 PST 2004
dnl    Added new Qt VisWindow library.
dnl
dnl    Brad Whitlock, Mon Mar 15 09:39:17 PDT 2004
dnl    Fixed the pthreads test when PTHREAD_LIB is defined in the config-site.
dnl
dnl    Brad Whitlock, Tue Mar 30 09:05:27 PDT 2004
dnl    Added PDB_EXEC to fix test suite.
dnl
dnl    Brad Whitlock, Wed Apr 21 17:42:20 PST 2004
dnl    Added Makefile magic for MacOS X to make automatic segment offset
dnl    calculations possible for prebinding.
dnl
dnl    Brad Whitlock, Thu May 20 18:58:29 PST 2004
dnl    Fixed a bug that made configure report the wrong Qt version.
dnl
dnl    Jeremy Meredith, Tue Jun 22 09:45:01 PDT 2004
dnl    Have it build optimized if no CXXFLAGS were specified through
dnl    the environment variable.
dnl
dnl    Brad Whitlock, Tue Jun 29 09:01:46 PDT 2004
dnl    Prevented links to Silo, Mili, and HDF5 from being created on MacOS X
dnl    if those libraries are not found by configure.
dnl
dnl    Jeremy Meredith, Wed Jul  7 11:48:33 PDT 2004
dnl    Made the VTK_LIGHTWEIGHT_LIBS include all VTK libraries under OSX.
dnl
dnl    Jeremy Meredith, Thu Jul  8 11:35:29 PDT 2004
dnl    Remove xml2makefile before trying to build it to ensure it does get
dnl    rebuilt even if your make program doesn't realize it is needed.
dnl
dnl    Eric Brugger, Mon Jul 26 15:44:24 PDT 2004
dnl    Replaced fstream.h with fstream.
dnl
dnl    Brad Whitlock, Wed Aug 11 15:04:49 PST 2004
dnl    I changed the build offset for MacOS X.
dnl
dnl    Jeremy Meredith, Tue Aug 24 21:26:15 PDT 2004
dnl    Added engine wrapper library and simulation prototype.
dnl
dnl    Mark C. Miller, Tue Sep 28 19:32:50 PDT 2004
dnl    Added ViSUS
dnl
dnl    Eric Brugger, Thu Sep 30 10:51:22 PDT 2004
dnl    I corrected a bug that was causing the check for using siloh5 to fail
dnl    if hdf5 was built with z lib support.
dnl
dnl    Eric Brugger, Tue Oct  5 10:46:12 PDT 2004
dnl    I replaced QTDIR with QT_BIN, QT_INCLUDE and QT_LIB.
dnl
dnl    Mark C. Miller, Tue Oct  5 12:41:41 PDT 2004
dnl    Fixed issues '--with-<lib>=' argument where '-I' and '-L' would be
dnl    missing from final make variable names that were created
dnl
dnl    Jeremy Meredith, Mon Aug 30 16:55:36 PDT 2004
dnl    Added parallel directory to visit_vtk.
dnl
dnl    Jeremy Meredith, Wed Nov 24 11:40:55 PST 2004
dnl    Refactored the expression parser into two separate libraries.
dnl
dnl    Jeremy Meredith, Thu Nov 11 12:38:16 PST 2004
dnl    Made host-specific site configs come before OS-type site configs.  
dnl    This lets us do host-type flags conditioned on what kind of compiler
dnl    we are using.  Added support for xlC on AIX.  Put back some
dnl    commented-out code to support strangeness on shared libraries on AIX
dnl    if we decide we want to use it again.  
dnl
dnl    Brad Whitlock, Thu Jan 6 13:01:21 PST 2005
dnl    Added support for creating a link to the HDF4 libraries on MacOS X.
dnl
dnl    Jeremy Meredith, Tue Feb 22 18:48:19 PST 2005
dnl    Renamed "convert" to "visitconvert".
dnl
dnl    Hank Childs, Wed Apr  6 13:13:10 PDT 2005
dnl    Added tools/writer.
dnl
dnl    Brad Whitlock, Mon Apr 11 16:58:53 PST 2005
dnl    Changed the location of the linkedit.py script used on the Mac.
dnl
dnl    Jeremy Meredith, Thu Apr 28 17:46:44 PDT 2005
dnl    Added explicit versioning for the VisIt Engine Library.
dnl
dnl    Brad Whitlock, Wed Jul 13 09:36:25 PDT 2005
dnl    Updated MacOS X start address due to library size changes.
dnl
dnl    Brad Whitlock, Tue Aug 9 17:31:30 PST 2005
dnl    I added checks for netCDF.
dnl
dnl    Brad Whitlock, Tue Aug 30 15:57:15 PST 2005
dnl    I added checks for CGNS.
dnl
dnl    Brad Whitlock, Fri Sep 2 15:07:19 PST 2005
dnl    Fixed up some things for MacOS X 10.4
dnl
dnl    Brad Whitlock, Tue Sep 6 11:24:53 PDT 2005
dnl    I added checks for GDAL.
dnl
dnl    Kathleen Bonnell, Thu Sep 22 16:49:12 PDT 2005 
dnl    Added 'vtkexpat' to lightweight libs, so VTK XML file format can
dnl    link properly to mdserver. 
dnl
dnl    Jeremy Meredith, Thu Oct 13 13:55:32 PDT 2005
dnl    Added cqscore, the tool for scoring tickets.  Also forced a make on
dnl    the bin directory before exiting configure.
dnl
dnl    Mark C. Miller, Thu Nov  3 16:59:41 PST 2005
dnl    I added code to check for libbz2 (bzip2)
dnl    I also added -I$(TOPDIR)/include to COMPONENT_CPPFLAGS so that
dnl    components could include visit-config.h
dnl
dnl    Eric Brugger, Mon Nov 14 11:25:18 PST 2005
dnl    I removed VTK_CAMERA_SRC.
dnl
dnl    Kathleen Bonnell, Wed Nov 16 08:51:43 PST 2005 
dnl    Added -lXt to X_LIBS. 
dnl
dnl    Mark C. Miller, Thu Dec  1 19:31:07 PST 2005
dnl    Changed support for bzip2 to a third_party_builtin library
dnl    This means it is part of the distribution and gets built whenever
dnl    VisIt gets built. It can be disabled with --disable-bzip2
dnl
dnl    Mark C. Miller, Mon Dec 12 20:53:03 PST 2005
dnl    Moved -lbz2 to BZIP2_LIBS config/make variable
dnl
dnl    Brad Whitlock, Fri Dec 16 17:03:10 PST 2005
dnl    Improved glTexImage3D detection on MacOS X.
dnl
dnl    Eric Brugger, Tue Jan 24 11:21:01 PST 2006
dnl    I added QUI_LIBS which is used by the gui to dynamically load custom
dnl    simulation control windows.
dnl
dnl    Eric Brugger, Thu Feb  2 08:51:04 PST 2006
dnl    I removed -lg2c as a boxlib library dependence when using gcc.
dnl
dnl    Hank Childs, Mon Feb 13 20:58:37 PST 2006
dnl    Added subdirectory /components/DDF.
dnl
dnl    Shelly Prevost, Mon Mar 13 16:14:47 PST 2006
dnl    Moved the location of the simulation Makefile from sim to sim/lib.
dnl
dnl    Brad Whitlock, Thu Jul 20 11:55:51 PDT 2006
dnl    Added CFITSIO support.
dnl
dnl    Jeremy Meredith, Mon Aug 28 17:35:44 EDT 2006
dnl    Forced test for glTexImage3D to occur in C++ mode; the library
dnl    may have it, but without a correct prototype it will fail to
dnl    compile in the main code.  Sometimes to pick it up we need to
dnl    define GL_GLEXT_PROTOTYPES, so I added a check for that as well.
dnl
dnl    Brad Whitlock, Fri Sep 15 10:31:23 PDT 2006
dnl    Added support for GLEW library and removed GL_GLEXT_PROTOTYPES. Also
dnl    fixed a problem with building beta versions on the Mac.
dnl
dnl    Mark C. Miller, Wed Oct 18 08:21:44 PDT 2006
dnl    Made it handle situation where there was a libsiloh5.a but not also
dnl    a libsilo.a in the DEFAULT_SILO_LIBRARY directory. Previously, it
dnl    would attempt to find there a libsilo.a and if not, fail to correctly
dnl    set SILO_LIB variable.
dnl
dnl    Eric Brugger, Mon Oct 23 13:26:26 PDT 2006
dnl    Modified the test that determines wether to use BSD or SYSV pseudo
dnl    terminals to use the normal test instead of assuming it is BSD on
dnl    Linux.
dnl
dnl    Brad Whitlock, Thu Nov 9 14:27:00 PST 2006
dnl    Made sure data manual examples get their Makefiles created.
dnl
dnl    Brad Whitlock, Tue Sep 19 17:04:41 PST 2006
dnl    Added mpeg2encode support.
dnl
dnl    Thomas R. Treadway, Tue Feb  6 13:45:49 PST 2007
dnl    Removed the Mac prebinding stuff, added better universal binary
dnl    support.
dnl
dnl    Thomas R. Treadway, Wed Feb  7 15:32:27 PST 2007
dnl    Added CREATE_BOXLIB2D_LINK, CREATE_BOXLIB3D_LINK,
dnl    and CREATE_CFITSIO_LINK (and friends).
dnl
dnl    Thomas R. Treadway, Thu Feb  8 14:22:10 PST 2007
dnl    Removed checking for HDF5 for the MacOS X, assumed silo always
dnl    links with hdf5 (Never worked right anyway).
dnl
dnl    Eric Brugger, Fri Mar  9 10:56:59 PST 2007
dnl    Removed the exodus and netcdf libraries from the list of vtk libraries.
dnl
dnl    Brad Whitlock, Tue Mar 13 18:20:38 PST 2007
dnl    Changed how Python is used in CLI.
dnl
dnl    Eric Brugger, Tue Mar 20 11:27:01 PDT 2007
dnl    Removed MESA_LIBS and GL_LIBS from the definition of VTK_LIBS.
dnl
dnl    Eric Brugger, Wed Mar 21 14:51:01 PDT 2007
dnl    Added support for building mesa_stub.
dnl
dnl    Eric Brugger, Tue Mar 27 12:01:37 PDT 2007
dnl    Added --enable-viewer-mesa-stub, which controls if the viewer uses
dnl    the mesa library or the mesa stub library.
dnl
dnl    Eric Brugger, Fri Apr  6 08:53:18 PDT 2007
dnl    Added NETCDF_CXX_LIB, which contains the netcdf c++ library, for
dnl    use with the S3D database plugin.
dnl
dnl    Thomas R. Treadway, Fri Apr  6 13:18:53 PDT 2007
dnl    Filled in PREBIND_LIBS (for mdserver linking).
dnl
dnl    Hank Childs, Sat Apr  7 18:31:21 PDT 2007
dnl    Adaptively find data directory.  Its location is dependent on whether
dnl    you are in ClearCase or Subversion.  And for Subversion, it might not
dnl    be available at all.
dnl
dnl    Gunther H. Weber, Thu Apr 19 18:22:49 PDT 2007
dnl    Adaptively replace relative visit path in data directory
dnl
dnl    Gunther H. Weber, Mon May 21 15:55:12 PDT 2007
dnl    Added check for H5Part
dnl
dnl    Jeremy Meredith, Tue May 22 11:43:30 EDT 2007
dnl    Added --enable-minimal-plugins to only build the few most common
dnl    plugins, like the Pseudocolor plot and Slice operator.   
dnl 
dnl    Gunther H. Weber, Tue May 22 10:20:31 PDT 2007
dnl    Merged Jeremy's last change (Tue May 22 11:43:30 EDT 2007) and my
dnl    last change (Mon May 21 15:55:12 PDT 2007).
dnl
dnl    Thomas R. Treadway, Wed May 23 17:04:07 PDT 2007
dnl    FreeBSD patches from Nathan Lay <nlay@scs.fsu.edu>
dnl
dnl    Mark C. Miller, Thu May 24 22:54:35 PDT 2007
dnl    Removed use of rpath options from iTaps lib symbols. Made it build
dnl    symbolic link in lib dir for iTaps libs
dnl
dnl    Jeremy Meredith, Tue Jun  5 17:32:39 EDT 2007
dnl    Added the "PARDEP" substitution that expands to $(PARDEP) when parallel
dnl    builds are enabled.  This lets us avoid building dependencies for
dnl    parallel object files if we're not building parallel objects.
dnl
dnl    Jeremy Meredith, Thu Jun 14 11:22:29 EDT 2007
dnl    Added the tools/clidriver directory.
dnl
dnl    Thomas R. Treadway, Wed Jul 11 16:08:40 PDT 2007
dnl    Added CREATE_H5PART_LINK for H5Part support.
dnl
dnl    Cyrus Harrison, Tue Jul 24 14:36:54 PDT 2007
dnl    Added support to skip compile of mesa stub if not needed.
dnl
dnl    Brad Whitlock, Thu Aug 2 14:45:17 PST 2007
dnl    Added support for libccmio for the GNEP Star-CD reader.
dnl
dnl    Thomas R. Treadway, Tue Sep 18 15:48:47 PDT 2007
dnl    Added szip library.
dnl    Created a HDF5_LIBDIR variable
dnl
dnl    Hank Childs, Mon Oct 15 08:24:44 PDT 2007
dnl    Make change to 'tr' syntax pointed out by Matt Wheeler.
dnl
dnl    Jeremy Meredith, Wed Oct 17 16:26:13 EDT 2007
dnl    Added runtime check for disabling the simulation plugins.
dnl    This is currently triggered by a check for OS X.
dnl
dnl    Jeremy Meredith, Thu Oct 18 09:50:46 EDT 2007
dnl    Removed all sleep's.  They're slowing down the build and are probably
dnl    no longer needed.
dnl
dnl    Thomas R. Treadway, Tue Oct 30 14:14:47 PDT 2007
dnl    Replacing #if define with PANTHERHACK define.
dnl
dnl    Jeremy Meredith, Thu Nov  1 16:41:12 EDT 2007
dnl    Stop allowing Qt versions prior to 3.0.
dnl
dnl    Jeremy Meredith, Fri Nov  2 17:57:52 EDT 2007
dnl    Re-enable simulation apis for darwin.
dnl    Check for --export-dynamic support (we want it for the sim examples).
dnl
dnl    Hank Childs, Mon Nov  5 11:35:30 PST 2007
dnl    Fix typo with export-dynamic where existing LDFLAGS were ignored.
dnl
dnl    Hank Childs, Thu Nov  8 15:09:28 PST 2007
dnl    Add a configure flag to get around a bug with threads getting hangup
dnl    signals.
dnl
dnl    Hank Childs, Fri Dec  7 16:52:10 PST 2007
dnl    Put the SVN version of the /src directory into visit-config.h.
dnl
dnl    Cyrus Harrison, Tue Dec 18 11:53:59 PST 2007
dnl    Added subdirectory components/Shapelets.
dnl
dnl    Eric Brugger, Mon Jan  7 11:54:11 PST 2008
dnl    Added a test for the function setenv.
dnl
dnl    Brad Whitlock, Thu Jan 10 10:29:40 PST 2008
dnl    Added support for building SLIVR library and its dependencies 
dnl    (cmake, teem).
dnl
dnl    Eric Brugger, Fri Jan 11 12:16:03 PST 2008
dnl    Added a test for the function strtof.
dnl
dnl    Hank Childs, Sat Feb  9 15:22:00 PST 2008
dnl    Rename components directory to avt.
dnl
dnl    Christoph Garth (by way of Hank Childs), Mon Feb 25 19:18:45 PST 2008
dnl    Add avt/IVP/Makefile.in.
dnl
dnl    Mark C. Miller, Thu Apr  3 18:06:01 PDT 2008
dnl    Added quotes for $CXXFLAGS in test for emptycxxflags,
dnl    Courtesy of Matthias Langer <mlangc@gmx.at>. Thanks Matthias.
dnl
dnl    Mark C. Miller, Mon Apr  7 14:55:58 PDT 2008
dnl    Added options to build against external bzip2/glew.
dnl    Courtesy of Matthias Langer <mlangc@gmx.at>.
dnl
dnl    Eric Brugger, Tue Apr  8 09:58:31 PDT 2008
dnl    Added a test for the function isfinite.
dnl
dnl    Eric Brugger, Fri Apr 18 13:13:11 PDT 2008
dnl    Added HDF5_EXEC to allow the data directory to conditionally run
dnl    HDF5 based programs that create HDF5 data files.
dnl
dnl    Tom Fogal, Sun Jun  8 14:56:22 EDT 2008
dnl    Added macro to check for ICE-T.
dnl
dnl    Hank Childs, Fri Jun 13 15:05:02 PDT 2008
dnl    Add support for tcmalloc from google-perftools.
dnl
dnl    Tom Fogal, Thu Jun 19 13:46:15 EDT 2008
dnl    Moved ac macro file to its own subdirectory, and appropriately use
dnl    aclocal.m4 to include it (instead of here).
dnl
dnl    Jeremy Meredith, Tue Jun 24 14:42:58 EDT 2008
dnl    Added runtime check for OSMesa's offscreen window size limit.
dnl    (Couple other cleanups, like duplicate messages for pthreads and
dnl    not removing temporary files.)
dnl
dnl    Tom Fogal, Fri Jun 27 13:21:10 EDT 2008
dnl    Removed the sinclude, as we do that in acinclude.m4 now (more
dnl    appropriately).
dnl    Added a description for the define of OSMESA_SIZE_LIMIT; autoheader
dnl    complains as is.
dnl
dnl    Tom Fogal, Mon Jun 30 16:54:33 EDT 2008
dnl    Added a call to the macro I added in ac/icet.m4.
dnl
dnl    Gunther H. Weber Thu Jul 17 14:21:40 PDT 2008
dnl    Add --rpath relative to $ORIGIN enabling visit to run on some MPI
dnl    implementations (e.g., MPICH with p4 davice) that do pass environment
dnl    variables and where the -setupenv option does not work since command
dnl    line option are not available prior to calling MPI_Init.
dnl
dnl    Tom Fogal, Sun Jul 27 11:58:16 EDT 2008
dnl    Configure cognomen if the user is doing a parallel build.
dnl    
dnl    Mark C. Miller, Tue Aug 19 23:34:41 PDT 2008
dnl    Added AC_PROG_EGREP. See note near it as to why. What a pain!
dnl
dnl    Hank Childs, Wed Aug 20 11:58:50 MDT 2008
dnl    Add test for stropts.h for SYSV vs BSD.
dnl
dnl    Brad Whitlock, Mon Aug 18 11:01:03 PDT 2008
dnl    Added tools/embedviewer. Removed some viewer source stuff.
dnl
dnl    Mark C. Miller, Thu Sep 10 ??:??:?? PDT 2008
dnl    Changed how ITAPS is handled to permit multiple implementations of
dnl    the ITAPS interfaces being built from the same plugin source code.
dnl    
dnl    Mark C. Miller, Thu Sep 11 10:31:38 PDT 2008
dnl    Adjusted how ITAPS implementations are handled to deal with possible
dnl    -Wl,-rpath= or -Wl,--rpath, directive in the libs component.
dnl    
dnl    Mark C. Miller, Mon Sep 15 17:29:27 PDT 2008
dnl    Replaced all refs to $SHORT_UNAME to $UNAME. The two were being used
dnl    inter-changeably and I wanted to make it consistent.
dnl
dnl    Tom Fogal, Fri Sep 19 11:24:08 MDT 2008
dnl    Define variables of filenames for SLIVR, to decide which parts to
dnl    conditionally compile.
dnl
dnl    Mark C. Miller, Thu Oct  9 18:07:17 PDT 2008
dnl    Wrapped AC_TRY_COMPILE attempts on Silo with PUSH/POP LANG C++. This
dnl    should be harmless for installations of Silo that DO NOT include the
dnl    new C++ compression code and will enable it to work correctly for those
dnl    that do.
dnl
dnl    Mark C. Miller, Tue Oct 21 09:09:10 PDT 2008
dnl    Modified to use new VAC_ARG_WITH3RD macro for HDF5. This macro is in
dnl    aclocal.m4 and is intended to replace most of the code currently here
dnl    handling third party libs. Also removed SZIP stuff because it was there
dnl    only as a possibility that HDF5 might be using szip. Simplifed Silo
dnl    logic a lot and removed need for AC_TRY_COMPILE in Silo logic. Removed
dnl    'create xxx link' logic for HDF5 and SZIP. That occurs automatically
dnl    as a consequence of using VAC_ARG_WITH3RD. Removed makefiles for old
dnl    siloobj code and prep tool. Improved PDB logic to fall back to PDB lite
dnl    in Silo only if silo is defined. Fixed typo in ZLIB_LIB symbol where
dnl    a trailing 'S' was included.
dnl
dnl    Mark C. Miller, Tue Oct 21 10:35:59 PDT 2008
dnl    Fixed HDF4 to handle an SZIP created by build_visit
dnl
dnl    Brad Whitlock, Tue Oct 21 11:23:55 PDT 2008
dnl    Added a few Silo-related variables back in so they can be substituted
dnl    into lib/Makefile.in for the Mac since we want to use the create_silo_link
dnl    target there.
dnl
dnl    Eric Brugger, Wed Oct 22 16:10:34 PDT 2008
dnl    Added DATA_EXE_LDFLAGS, which is used in the data directory to set
dnl    the rpath to $ORIGIN/../src/lib on linux systems.
dnl 
dnl --------------------------------------------------------------------------

dnl
dnl Configuration header stuff...
dnl
AC_REVISION($Id$)dnl
AC_INIT(Makefile.in)
AC_CONFIG_HEADER(include/visit-config.h)
AC_CONFIG_AUX_DIR(./bin)

dnl The builtin `pwd' command fails with `bad file unit number' from the
dnl shell on some systems, so try to use `/bin/pwd' instead.
dnl
if test -x /bin/pwd; then
   pwd=/bin/pwd
else
   pwd=pwd
fi
TOPDIR=`$pwd`
AC_SUBST(TOPDIR)

dnl
dnl Make note if no CXXFLAGS have yet been specified; we won't like the
dnl defaults that configure chooses and this lets us override them easily
dnl
emptycxxflags="no"
if test -z "${CXXFLAGS}"; then
    emptycxxflags="yes"
fi

### Init the tflops_override variable.
tflops_override=no

###     Derive the OS type, as a check for reusing the autoconf cache
OS_type="`(uname -s -r) 2>/dev/null`"
if test -z "$OS_type" ; then
    OS_type="`(hostname) 2>/dev/null`"
fi
AC_CACHE_VAL(vc_cv_os_type,[vc_cv_os_type="$OS_type"])
test -z "$OS_type" && OS_type="$vc_cv_os_type"
test -n "$vc_cv_os_type" && AC_MSG_RESULT("Configuring for $vc_cv_os_type")

if test ".$OS_type" != ".$vc_cv_os_type" ; then
    AC_MSG_RESULT("The cached Operating System does not agree with this OS type.")
    AC_ERROR("Please run \"make distclean\" and try again.")
fi

# Grab the version number
AC_MSG_CHECKING(what version the package is)
VERSION=`cat VERSION`
AC_DEFINE_UNQUOTED(VERSION,"$VERSION",[VisIt version])
AC_MSG_RESULT($VERSION)

# Get the SVN version number.
AC_MSG_CHECKING(what subversion revision is)
if test -r SVN_REVISION; then
   SVN_REVISION=`cat SVN_REVISION`
else
   SVN_REVISION=`svn info . | grep "Revision:" | cut -d' ' -f2`
fi
AC_DEFINE_UNQUOTED(SVN_REVISION,"$SVN_REVISION",[Subversion revision])
AC_MSG_RESULT($SVN_REVISION)

# Set the slash characters used in filenames.
AC_DEFINE_UNQUOTED(SLASH_CHAR,'/',[Define the slash character])
AC_DEFINE_UNQUOTED(SLASH_STRING,"/",[Define the slash string])

# Load the site configuration file if present.
# Also check for hostnames where the first field is a node name.
AC_MSG_CHECKING(for site configuration file)
site_conf=config-site/`hostname`.conf
if test -r $site_conf; then
   AC_MSG_RESULT($site_conf)
   . $site_conf
else
   site_conf=config-site/`hostname | cut -f2- -d.`.conf
   if test -r $site_conf; then
      AC_MSG_RESULT($site_conf)
      . $site_conf
   else
      AC_MSG_RESULT(none found)
   fi
fi

# If the user has a ~/.visit/default.conf file, load that
AC_MSG_CHECKING([for user configuration file $HOME/.visit/default.conf])
if test -r "$HOME/.visit/default.conf"; then
   AC_MSG_RESULT(found)
   . $HOME/.visit/default.conf
else
   AC_MSG_RESULT([none found])
fi

# Load any user-specified configuration file
AC_MSG_CHECKING([for user-specified configuration file])
AC_ARG_WITH(config,
            [  --with-config=file      Specify a configuration file to execute],
            user_conf=$withval,
            user_conf="none")
if test "$user_conf" = "yes" -o "$user_conf" = ""; then
    AC_MSG_ERROR([You must specify a file when using --with-config=file])
fi
if test "$user_conf" != "none"; then
   AC_MSG_RESULT($user_conf)
   . $user_conf
else
   AC_MSG_RESULT([none specified])
fi

# Load the OS configuration file if present.
UNAME="`uname 2>/dev/null`"
AC_MSG_CHECKING(for OS configuration file)
site_conf=config-site/$UNAME.conf
if test -r $site_conf; then
    AC_MSG_RESULT($site_conf)
    . $site_conf
else
    AC_MSG_RESULT(none found)
fi

#
# Check for platform specific flags.
#
AC_SUBST(PLATFORM_CPPFLAGS)

#
# Check for CMake
#
CMAKE=""
AC_ARG_WITH(cmake,
	    [  --with-cmake=path to cmake     Location of cmake utility.],
           cmake_specified="yes",
           cmake_specified="no"
           )
if test "$cmake_specified" = "yes"; then
   AC_MSG_CHECKING(for cmake)
   if test "$withval" != "no"; then
      CMAKE="$withval"
   fi
   AC_MSG_RESULT($CMAKE)
else
   if test "$DEFAULT_CMAKE" != ""; then
       # Get the cmake value from the config-site file.
       AC_MSG_CHECKING(for cmake)
       CMAKE="$DEFAULT_CMAKE"
       AC_MSG_RESULT($CMAKE)
   else
       # No cmake was specified, look for it.
       AC_PATH_PROG([CMAKE], [cmake], "")
   fi
fi
AC_SUBST(CMAKE)

#
# Set up fake exceptions if requested.
#
AC_ARG_ENABLE(fake-exceptions,
   [  --enable-fake-exceptions       do not make use of C++'s exception library ],
   UseFakeExceptions=$enableval, UseFakeExceptions=not_specified)
doFakeExceptions="no"
if test "$UseFakeExceptions" = "yes" ; then
  doFakeExceptions="yes"
fi
AC_MSG_CHECKING([whether or not to use fake exceptions])
FAKE_EXCEPTIONS_BY_DEFAULT="xx$FAKE_EXCEPTIONS_BY_DEFAULT"
if test "$FAKE_EXCEPTIONS_BY_DEFAULT" = "xxyes" ; then
  if test "$UseFakeExceptions" = "not_specified" ; then
     doFakeExceptions="yes"
  fi
fi
if test "$doFakeExceptions" = "yes" ; then
  AC_MSG_RESULT([yes])
  CXXFLAGS="$CXXFLAGS -DFAKE_EXCEPTIONS"
else
  AC_MSG_RESULT([no])
fi
AC_SUBST(CXXFLAGS)

#
# Allow for hangup signals to be ignored, which gets around an OS bug.
# (Bug is that for xterm -e <prog>, if prog uses threads, then when one of
# the child threads exits, the master thread gets a HUP.)
#
AC_ARG_ENABLE(ignore-hangups,
   [  --enable-ignore-hangups        ignore hangup signals (this avoids RHEL3 bug) ],
   UseIgnoreHups=$enableval, UseIgnoreHups=not_specified)
doIgnoreHups="no"
if test "$UseIgnoreHups" = "yes" ; then
  doIgnoreHups="yes"
fi
AC_MSG_CHECKING([whether or not to use ignore hangup signals])
IGNORE_HUPS="xx$IGNORE_HUPS"
if test "$IGNORE_HUPS" = "xxyes" ; then
  if test "$UseIgnoreHups" = "not_specified" ; then
     doIgnoreHups="yes"
  fi
fi
if test "$doIgnoreHups" = "yes" ; then
  AC_MSG_RESULT([yes])
  CXXFLAGS="$CXXFLAGS -DIGNORE_HUPS"
else
  AC_MSG_RESULT([no])
fi
AC_SUBST(CXXFLAGS)

#
# VisIt DOES NOT need this. However, this configure script uses
# tests like AC_CHECK_HEADERS which can actually wind up setting
# value for $EGREP and AC_TYPE_UID_T which depends on it. So,
# you can wind up with cases where AC_TYPE_UID_T behaves strangely
# depending on whether AC_CHECK_HEADERS was invoked ahead of it.
# To avoid this issue (and probably others with autoconf's bizarre
# behavior), we explicitly make a request for egrep here and it
# will set $EGREP
#
AC_PROG_EGREP

#
# Get the simple C++ tests out of the way
#
AC_LANG_CPLUSPLUS
AC_TRY_LINK[]
AC_LANG_C

#
# Check to see if the parallel version is enabled.
#
AC_ARG_ENABLE(parallel,
   [  --enable-parallel       make the parallel version],
   UseParallel=$enableval, UseParallel=no)

ax_build_cog=""
ax_lib_cog=""
AC_MSG_CHECKING(for parallel features)
if test "$UseParallel" = "yes"; then
   AC_MSG_RESULT(enabled)
   PARALLEL="parallel"
   PARALLEL_CPPFLAGS="-DPARALLEL"
   LIBSTATICPAR="$""(LIBSTATICPAR)"
   LIBSHAREDPAR="$""(LIBSHAREDPAR)"
   LIBSHAREDPAR_UPDATEONLY="libsharedpar_updateonly"
   PARDEP="$""(PARDEP)"

   if test "$UNAME" != "AIX"; then
       if (test -z "$MPI_LIBS") then
           MPI_LIBS="-lmpi"
       fi
   fi

   # Check if the user has specified a C compiler for MPI
   if test -n "$MPI_CC"; then
       MPI_CC="CC=$MPI_CC"
   fi

   # Check if the user has specified a C++ compiler for MPI
   if test -n "$MPI_CXX"; then
       MPI_CXX="CXX=$MPI_CXX"
   fi

   export MPI_LIBS
   export MPI_CC
   ax_build_cog="cognomen"
   ax_lib_cog="-lcognomen"
   CPPFLAGS="${CPPFLAGS} -I$""(TOPDIR)/include/cognomen"
else
   AC_MSG_RESULT(disabled)
   PARALLEL=""
   PARALLEL_CPPFLAGS=""
   MPI_LIBS=""
   SHLIB_MPI_LIBS=""
   MPI_CC=""
   MPI_CXX=""
   LIBSTATICPAR=""
   LIBSHAREDPAR=""
   LIBSHAREDTEMPPAR=""
   PARDEP=""
fi
AC_SUBST(PARALLEL)
AC_SUBST(PARALLEL_CPPFLAGS)
AC_SUBST(MPI_LIBS)
AC_SUBST(MPI_CC)
AC_SUBST(MPI_CXX)
AC_SUBST(LIBSTATICPAR)
AC_SUBST(LIBSHAREDPAR)
AC_SUBST(LIBSHAREDPAR_UPDATEONLY)
AC_SUBST(PARDEP)
AC_SUBST(BUILD_COGNOMEN, $ax_build_cog)
AC_SUBST(LIBCOGNOMEN, $ax_lib_cog)

#
# Set up some Mesa variables.
#
AC_MSG_CHECKING(for Mesa)
if test -n "$MESA"; then
   AC_MSG_RESULT(found)
   MESA_DIR=$MESA
   MESA_INCLUDE="-I$""(TOPDIR)/include/mesa"
   MESA_LIBS="-lOSMesa -lMesaGL"
else
   AC_MSG_RESULT(not found)
   MESA_DIR=""
   MESA_INCLUDE=""
   MESA_LIBS=""
fi
AC_SUBST(MESA_DIR)
AC_SUBST(MESA_INCLUDE)
AC_SUBST(MESA_LIBS)

#
# Check to see if we should use the mesa stub library in the viewer.
#
AC_MSG_CHECKING(for use of the mesa stub library in the viewer)
AC_ARG_ENABLE(viewer-mesa-stub,
   [  --enable-viewer-mesa-stub     use the mesa stub library in the viewer],
   UseViewerMesaStub=$enableval, UseViewerMesaStub=yes)

if test "$UseViewerMesaStub" = "yes"; then
   AC_MSG_RESULT(enabled)
   VIEWER_MESA_STUB_CPPFLAGS="-DMESA_STUB"
   VIEWER_MESA_LIBS="-lMesaStub"
   BUILD_MESA_STUB="mesa_stub"
else
   AC_MSG_RESULT(disabled)
   VIEWER_MESA_STUB_CPPFLAGS=""
   VIEWER_MESA_LIBS=$MESA_LIBS
   BUILD_MESA_STUB=""
fi
AC_SUBST(VIEWER_MESA_STUB_CPPFLAGS)
AC_SUBST(VIEWER_MESA_LIBS)
AC_SUBST(BUILD_MESA_STUB)

dnl
dnl IceT check.
dnl
AX_ICET_OPTIONS
if test "x$UseParallel" == "xno" -a "x$enable_icet" == "xyes" ; then
	AC_MSG_ERROR([
IceT usage requested, but you're not doing a parallel build.  IceT requires
'--enable-parallel' to be specified.])
elif test "x$UseParallel" == "xyes" -a "x$enable_icet" == "xyes" ; then
	AX_CHECK_ICET
fi
dnl Always needed: this sets up the object files we'll build, and should
dnl therefore be called even if IceT is disabled! (to explicitly set it to
dnl nothing).
AX_VISIT_ICET

#
# The check for OpenGL can be disabled with `--disable-ogl'.
#
AC_ARG_ENABLE(ogl,
   [  --disable-ogl           do not check for the SGI ogl library],
   UseOGL="$enable_ogl", UseOGL=yes)

#
# Try to find the OpenGL libraries
#
GL_LIBS=""
if test "$UseOGL" = "yes"; then
    AC_CHECK_LIB(GL, main,   GL_LIBS="-lGL")
fi
# If we're on Darwin, OpenGL is a framework.
if test "$UNAME" = "Darwin"; then
    # We're on MacOS X and it always has an OpenGL framework.
    AC_MSG_CHECKING(for OpenGL)
    GL_LIBS="-framework OpenGL"
    AC_MSG_RESULT(found $GL_LIBS)
# Turn off ssh tunnleing if on Panther
    VERS=`uname -r`
    case $VERS in
       7*) AC_DEFINE(PANTHERHACK, [1], [Disable ssh tunneling on Panther.]);;
       *);;
    esac
fi

AC_SUBST(GL_LIBS)

AC_LANG_C

#
# Set up some VTK variables.
#
AC_MSG_CHECKING(for VTK)
if test -n "$VTK"; then
    AC_MSG_RESULT(found)
    VTK_DIR=$VTK
    VTK_INCROOT="$""(TOPDIR)/include/vtk"
    VTK_INCLUDES="-I$VTK_INCROOT -I$VTK_INCROOT/Common -I$VTK_INCROOT/Filtering -I$VTK_INCROOT/Graphics -I$VTK_INCROOT/Hybrid -I$VTK_INCROOT/IO -I$VTK_INCROOT/Imaging -I$VTK_INCROOT/Rendering -I$VTK_INCROOT/Utilities"
    VTK_LIBS="-lvtkCommon -lvtkDICOMParser -lvtkFiltering -lvtkGraphics -lvtkHybrid -lvtkIO -lvtkImaging -lvtkRendering -lvtkzlib -lvtkexpat -lvtkjpeg -lvtkpng -lvtktiff -lvtkftgl -lvtkfreetype -lvtksys -lvtkMPEG2Encode "
    if test "$UNAME" = "Darwin"; then
        VTK_LIGHTWEIGHT_LIBS=$VTK_LIBS
    else
        VTK_LIGHTWEIGHT_LIBS="-lvtkCommon -lvtkFiltering -lvtkzlib -lvtkexpat -lvtksys"
    fi
else
    AC_MSG_RESULT(not found)
    VTK_DIR=""
    VTK_INCLUDES=""
    VTK_LIBS=""
    VTK_LIGHTWEIGHT_LIBS=""
fi
AC_SUBST(VTK_DIR)
AC_SUBST(VTK_INCLUDES)
AC_SUBST(VTK_LIBS)
AC_SUBST(VTK_LIGHTWEIGHT_LIBS)

#
# Check for the common directory
#
AC_MSG_CHECKING(for common)
if test -d common; then
    AC_MSG_RESULT(found)
    COMMON="common"
else
    AC_MSG_RESULT(not found)
    COMMON=""
fi

#
# Check for the avtprep directory
#
AC_MSG_CHECKING(for avtprep)
if test -d tools/avtprep; then
    AC_MSG_RESULT(found)
    AVTPREP_SER="$""(tmpbin)/avtprep_ser"
    if test -n "$PARALLEL"; then
        AVTPREP_PAR="$""(tmpbin)/avtprep_par"
    else
        AVTPREP_PAR=""
    fi
else
    AC_MSG_RESULT(not found)
    AVTPREP_SER=""
    AVTPREP_PAR=""
fi
AC_SUBST(AVTPREP_SER)
AC_SUBST(AVTPREP_PAR)

#
# Check for the convert directory
#
AC_MSG_CHECKING(for convert)
if test -d tools/convert; then
    AC_MSG_RESULT(found)
    CONVERT_SER="$""(tmpbin)/visitconvert_ser"
    if test -n "$PARALLEL"; then
        CONVERT_PAR="$""(tmpbin)/visitconvert_par"
    else
        CONVERT_PAR=""
    fi
else
    AC_MSG_RESULT(not found)
    CONVERT_SER=""
    CONVERT_PAR=""
fi
AC_SUBST(CONVERT_SER)
AC_SUBST(CONVERT_PAR)

#
#
# Check for the makemili directory
#
AC_MSG_CHECKING(for makemili)
if test -d tools/makemili; then
    AC_MSG_RESULT(found)
    MAKEMILI_SER="$""(tmpbin)/makemili_ser"
    if test -n "$PARALLEL"; then
        MAKEMILI_PAR="$""(tmpbin)/makemili_par"
    else
        MAKEMILI_PAR=""
    fi
else
    AC_MSG_RESULT(not found)
    MAKEMILI_SER=""
    MAKEMILI_PAR=""
fi
AC_SUBST(MAKEMILI_SER)
AC_SUBST(MAKEMILI_PAR)

#
# Check for the engine directory
#
AC_MSG_CHECKING(for engine)
if test -d engine; then
    AC_MSG_RESULT(found)
    ENGINE="engine"
    ENGINE_SER="$""(tmpbin)/engine_ser"
    ENGINELIBSER="$""(ESERDSO)"
    if test -n "$PARALLEL"; then
        ENGINE_PAR="$""(tmpbin)/engine_par"
        ENGINELIBPAR="$""(EPARDSO)"
    else
        ENGINE_PAR=""
        ENGINELIBPAR=""
        ENGINEWRAPPAR=""
    fi
    if test -z "$VTK"; then
        AC_MSG_ERROR([engine is here, but no VTK library was specified. 
The engine cannot be built without VTK.  Make sure the VTK environment variable
is set and rerun 'configure'.])
    fi
else
    AC_MSG_RESULT(not found)
    ENGINE_SER=""
    ENGINE_PAR=""
    ENGINELIBSER=""
    ENGINELIBPAR=""
fi
AC_SUBST(ENGINE_SER)
AC_SUBST(ENGINE_PAR)
AC_SUBST(ENGINELIBSER)
AC_SUBST(ENGINELIBPAR)

#
# Check to see if the mdserver was enabled.
#
AC_MSG_CHECKING(if mdserver is enabled)
AC_ARG_ENABLE(mdserver,
              [  --disable-mdserver      build without mdserver],
              UseMDSERVER="$enable_mdserver", UseMDSERVER=yes)
if test "$UseMDSERVER" = "yes"; then
    AC_MSG_RESULT(yes)

    dnl
    dnl Check for the mdserver directory
    dnl
    AC_MSG_CHECKING(for mdserver)
    if test -d mdserver; then
        AC_MSG_RESULT(found)
        METADATA_SERVER="mdserver"
        MDSERVERLIB="$""(MDSO)"
        MDSERVEROBJ="$""(MOBJ)"
    else
        AC_MSG_RESULT(not found)
        METADATA_SERVER=""
    fi
else
    AC_MSG_RESULT(no)
    METADATA_SERVER=""
fi
AC_SUBST(METADATA_SERVER)
AC_SUBST(MDSERVERLIB)
AC_SUBST(MDSERVEROBJ)

#
# Check to see if scripting features are enabled.
#
AC_MSG_CHECKING(if scripting features are enabled)
AC_ARG_ENABLE(scripting,
              [  --disable-scripting     build without CLI Python scripting capability],
              UseScripting="$enable_scripting", UseScripting=yes)
if test "X$UseScripting" = "Xyes"; then
    AC_MSG_RESULT(yes)
    enable_scripting=yes

    VISITPY="visitpy"
    SCRIPTINGLIB="$""(SDSO)"
    SCRIPTINGOBJ="$""(SOBJ)"

    #
    # Check to see if VisIt module should be built.
    #
    AC_MSG_CHECKING(if VisIt Python module will be built)
    AC_ARG_ENABLE(visitmodule,
                  [  --enable-visitmodule    build a VisIt Python module],
                  [UsePythonModule=yes])
    if test "X$UsePythonModule" = "Xyes"; then
        AC_MSG_RESULT(yes)
        PY_BUILD_VISITMODULE="visitmodule"
    else
        AC_MSG_RESULT(no)
        PY_BUILD_VISITMODULE=""
    fi
else
    AC_MSG_RESULT(no)
    enable_scripting=no

    VISITPY=""
    SCRIPTINGLIB=""
    SCRIPTINGOBJ=""
    PY_BUILD_VISITMODULE=""
fi
AC_SUBST(VISITPY)
AC_SUBST(SCRIPTINGLIB)
AC_SUBST(SCRIPTINGOBJ)
AC_SUBST(PY_BUILD_VISITMODULE)


# Check to see if the --disable-gui configure flag was given. If
# if was then we will use the enable_gui variable later on to see
# if we should test for X. We will also not build the Gui or the
# viewer.
#
dnl
AC_MSG_CHECKING(if GUI features are enabled)
AC_ARG_ENABLE(gui,
              [  --disable-gui           build without gui],
              UseGUI="$enable_gui", UseGUI=yes)
if test "$UseGUI" = "yes"; then
    AC_MSG_RESULT(yes)
    enable_gui=yes

    dnl
    dnl Check for the viewer directory
    dnl
    AC_MSG_CHECKING(for viewer)
    if test -d viewer; then
        AC_MSG_RESULT(found)
        VIEWER="viewer"
        VISWINDOW="VisWindow"
        VIEWERLIB="$""(VDSO)"
        VIEWEROBJ="$""(VOBJ)"

        if test -z "$VTK"; then
            AC_MSG_ERROR([viewer is here, but no VTK library was specified. 
The viewer cannot be built without VTK.  Make sure the VTK environment variable
is set and rerun 'configure'.])
        fi
    else
        AC_MSG_RESULT(not found)
        VIEWER=""
        VISWINDOW=""
    fi

    dnl
    dnl Gui checking is enabled, look for the gui directory.
    dnl
    AC_MSG_CHECKING(for gui)
    if test -d gui; then
        AC_MSG_RESULT(found)
        GUI="gui"
        GUILIB="$""(GDSO)"
        GUIOBJ="$""(GOBJ)"
        if test "$UNAME" = "Darwin"; then
            GUIFRAMEWORKS="-framework Carbon"
        else
            GUIFRAMEWORKS=""
        fi
        if test -z "$METADATA_SERVER"; then
            AC_MSG_ERROR([gui is here, but the metadata server is not.
The gui will not run without the metadata server. Check to see that the
mdserver directory exists and rerun 'configure'.])
        fi
    else
        AC_MSG_RESULT(not found)
        GUI=""
        GUIOBJ=""
        GUIFRAMEWORKS=""
    fi

    ENGINEPROXYDIR="proxy"
else
    AC_MSG_RESULT(no)
    enable_gui=no
    ENGINEPROXYDIR=""
    GUI_CXXFLAGS=""
fi
AC_SUBST(GUI)
AC_SUBST(GUILIB)
AC_SUBST(GUIOBJ)
AC_SUBST(GUIFRAMEWORKS)
AC_SUBST(VIEWER)
AC_SUBST(VISWINDOW)
AC_SUBST(VIEWERLIB)
AC_SUBST(VIEWEROBJ)
AC_SUBST(ENGINEPROXYDIR)

#
# Check to see if we should disable annotations.
#
AC_ARG_ENABLE(annotations,
              [  --disable-annotations   build without annotations],
              UseAnnotations="$enable_annotations", UseAnnotations=yes)
if test "$UseAnnotations" = "no"; then
    ANNOTATION_FLAGS="$ANNOTATION_FLAGS -DNO_ANNOTATIONS"
fi
AC_SUBST(ANNOTATION_FLAGS)

#
# Check to see if the java client is enabled.
#
AC_ARG_ENABLE(java,
   [  --enable-java           build the Java client library],
   UseJava=$enableval, UseJava=no)

AC_MSG_CHECKING(if Java client is enabled)
if test "$UseJava" = "yes"; then
    AC_MSG_RESULT(yes)
 
    # Somehow check that Java is at least Java 2 v1.4.0

    JAVAC="javac"
    JAVA_TARGET="java"
    JAR="jar"
    JAVAFLAGS="-source 1.4"
    JAVAPLUGINFLAGS=""
else
    AC_MSG_RESULT(no)
    JAVAC=""
    JAVA_TARGET=""
    JAR=""
    JAVAFLAGS=""
    JAVAPLUGINFLAGS=""
fi
AC_SUBST(JAVAC)
AC_SUBST(JAVA_TARGET)
AC_SUBST(JAR)
AC_SUBST(JAVAFLAGS)
AC_SUBST(JAVAPLUGINFLAGS)

#
# Check to see if the SLIVR is enabled.
#
AC_ARG_ENABLE(slivr,
   [  --enable-slivr           build with the SLIVR volume rendering library],
   UseSLIVR=$enableval, UseSLIVR=no)

SLIVR_GUI_IMPL=""
SLIVR_GUI_HDR=""
AC_MSG_CHECKING(if SLIVR is enabled)
TEEM_CMAKE_C_FLAGS=""
SLIVR_CMAKE_SHARED_LINKER_FLAGS=""
if test "$UseSLIVR" = "yes"; then
    if test "$CMAKE" != "" ; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(HAVE_LIBSLIVR, [1], [Define if you have the SLIVR library.])
        BUILD_SLIVR="slivr"
        SLIVR_INCLUDE="-I$""(TOPDIR)/include/teem -I$""(TOPDIR)/include/slivr"
        SLIVR_LIBS="-lslivrV -lslivrG -lnrrd -lair -lbiff -lhest"
        if test "$UNAME" = "Darwin"; then
            TEEM_CMAKE_C_FLAGS="-D CMAKE_C_FLAGS:STRING=-fno-common"
            SLIVR_CMAKE_SHARED_LINKER_FLAGS="-D CMAKE_SHARED_LINKER_FLAGS:STRING=-Wl,-undefined,dynamic_lookup"
        fi
        SLIVR_GUI_IMPL="QvisCMap2Display.C QvisCMap2Widget.C"
        SLIVR_GUI_HDR="QvisCMap2Display.h QvisCMap2Widget.h"
    else
        AC_MSG_RESULT(no because cmake was not found)
        BUILD_SLIVR=""
        SLIVR_INCLUDE=""
        SLIVR_LIBS=""
    fi
else
    AC_MSG_RESULT(no)
    BUILD_SLIVR=""
    SLIVR_INCLUDE=""
    SLIVR_LIBS=""
fi
AC_SUBST(BUILD_SLIVR)
AC_SUBST(SLIVR_INCLUDE)
AC_SUBST(SLIVR_LIBS)
AC_SUBST(TEEM_CMAKE_C_FLAGS)
AC_SUBST(SLIVR_CMAKE_SHARED_LINKER_FLAGS)
AC_SUBST(SLIVR_GUI_IMPL)
AC_SUBST(SLIVR_GUI_HDR)

#
# Check if the help directory is present.
#
if test -d help; then
    HELP="help"
else
    HELP=""
fi
AC_SUBST(HELP)

#
# Check to see if we should build all of the plugins.
#
AC_ARG_ENABLE(buildall,
  [  --enable-buildall       build all plugins],
  buildall="all", buildall=base)

AC_ARG_ENABLE(minimal-plugins,
  [  --enable-minimal-plugins   build only a few of the most common plugins],
  buildall="minimal")

AC_MSG_CHECKING([which plot plugins to build])
AC_ARG_WITH(plots,
            [  --with-plots=all,base   What plot plugins to build (overrides --enable-buildall)],
            ,
            withval=$buildall)
case $withval in
    all)
        PLOT_BUILD_DIRS="$""(REQUIRED) $""(OPTIONAL)"
        AC_MSG_RESULT([all])
        ;;
    base)
        PLOT_BUILD_DIRS="$""(REQUIRED)"
        AC_MSG_RESULT([base only])
        ;;
    minimal)
        PLOT_BUILD_DIRS="$""(MINIMAL)"
        AC_MSG_RESULT([minimal only])
        ;;
    *)
        AC_MSG_ERROR([Please specify one of "all" or "base" for --with-plots.])
esac
AC_SUBST(PLOT_BUILD_DIRS)

AC_MSG_CHECKING([which operator plugins to build])
AC_ARG_WITH(operators,
            [  --with-operators=all,base What operator plugins to build (overrides --enable-buildall)],
            ,
            withval=$buildall)
case $withval in
    all)
        OPERATOR_BUILD_DIRS="$""(REQUIRED) $""(OPTIONAL)"
        AC_MSG_RESULT([all])
        ;;
    base)
        OPERATOR_BUILD_DIRS="$""(REQUIRED)"
        AC_MSG_RESULT([base only])
        ;;
    minimal)
        OPERATOR_BUILD_DIRS="$""(MINIMAL)"
        AC_MSG_RESULT([minimal only])
        ;;
    *)
        AC_MSG_ERROR([Please specify one of "all" or "base" for --with-operators.])
esac
AC_SUBST(OPERATOR_BUILD_DIRS)

AC_MSG_CHECKING([which database plugins to build])
AC_ARG_WITH(dbs,
            [  --with-dbs=all,base     What database plugins to build (overrides --enable-buildall)],
            ,
            withval=$buildall)
case $withval in
    all)
        DB_BUILD_DIRS="$""(REQUIRED) $""(THIRDPARTY_DEPENDENT) $""(OPTIONAL) $""(SAMPLES)"
        AC_MSG_RESULT([all])
        ;;
    base)
        DB_BUILD_DIRS="$""(REQUIRED) $""(THIRDPARTY_DEPENDENT)"
        AC_MSG_RESULT([base only])
        ;;
    minimal)
        DB_BUILD_DIRS="$""(MINIMAL)"
        AC_MSG_RESULT([minimal only])
        ;;
    *)
        AC_MSG_ERROR([Please specify one of "all" or "base" for --with-dbs.])
esac
AC_SUBST(DB_BUILD_DIRS)

dnl
dnl glew related stuff 
dnl
AC_ARG_ENABLE(glew,
   AC_HELP_STRING([--disable-glew], [do not build or use glew library -- disables detection of OpenGL extensions]),
   Useglew="$enable_glew", Useglew=yes)

AC_ARG_WITH(glew,
   AC_HELP_STRING([--with-glew], [build against external glew in INC-DIR,LIB-DIR (may be ommitted)]),
   [WithExternalGlew=$withval],
   [WithExternalGlew="no"])

BUILD_GLEW=""
GLEW_LIBS=""
GLEW_INCLUDE=""
if test "$Useglew" = "yes"; then
    if test $WithExternalGlew != "no"; then
        if test $WithExternalGlew != "yes"; then
            GLEW_INCLUDE="-I`echo $WithExternalGlew | cut -f1 -d,`"
            GLEW_LIBS="-L`echo $WithExternalGlew | cut -f2 -d, -s`"
        fi
    else
    BUILD_GLEW="glew"
    GLEW_INCLUDE="-I$""(TOPDIR)/include/glew"
    fi
    AC_DEFINE(HAVE_LIBGLEW, [1], [Define if you have the GLEW library.])
    GLEW_LIBS="${GLEW_LIBS} -lGLEW"
fi
AC_SUBST(BUILD_GLEW)
AC_SUBST(GLEW_INCLUDE)
AC_SUBST(GLEW_LIBS)

dnl
dnl Disable building boost interval library. Only necessary if boost-interval
dnl headers prevent VisIt from building somewhere
dnl
AC_ARG_ENABLE(bilib,
   [  --disable-bilib         do not use boost interval template library -- disables adaptive CSG discretization],
   Usebilib="$enable_bilib", Usebilib=yes)
BUILD_BILIB=""
if test "$Usebilib" = "yes"; then
    BUILD_BILIB="bilib"
    AC_DEFINE(HAVE_BILIB, [1], [Define if you have the boost interval template library.])
fi
AC_SUBST(BUILD_BILIB)

dnl
dnl Make note if no CXXFLAGS have STILL yet been specified; this is the
dnl same check as for emptycxxflags above, except it is possible that a
dnl config-site file added some, in which case we need to append, not
dnl replace, the cxxflags.
dnl
defaultcxxflags="no"
if test -z "$CXXFLAGS"; then
    defaultcxxflags="yes"
fi

# Check for programs.
# We shouldn't depend on too many!
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_CC
AC_PROG_CPP
AC_PROG_F77

# Keep checking for programs.
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_CHECK_PROG(MAKEDEPEND,makedepend,makedepend)
AC_ISC_POSIX

dnl
dnl Set BUILD_FORTRAN based on how F77 is defined
dnl
BUILD_FORTRAN=""
if test -n "$F77"; then
    BUILD_FORTRAN="\$(BUILD_FORTRAN)"
fi
AC_SUBST(BUILD_FORTRAN)

dnl
dnl If they didn't specify any CXXFLAGS through an environment variable,
dnl then we should choose optimized for them.
dnl
if test $emptycxxflags = "yes"; then
    if test $defaultcxxflags = "yes"; then
        CXXFLAGS="-O2"
    else
        CXXFLAGS="-O2 $CXXFLAGS"
    fi
fi

# Check to see if we're running clearmake.
# If we are, set the build verbosity to 0 so that output won't mess up the rest
# of "configure".
AC_MSG_CHECKING(for clearmake)
if test "`${MAKE-make} -version 2>/dev/null | cut -d' ' -f1`" = "clearmake"; then
    AC_MSG_RESULT(yes)
    CLEARCASE_BLD_VERBOSITY=0; export CLEARCASE_BLD_VERBOSITY
else
    AC_MSG_RESULT(no)
fi
# Set the compilation rule to include the OS, so that clearmake won't wink
# in object files across OSes.
#
# Note that the first character in the OS_RULE is a tab.  Don't change this 
# to spaces; it's used in the Makefiles.
OS_RULE="	: $OS_type"
AC_SUBST(OS_RULE)

dnl We always use the install-sh script, so don't uncomment the following line.
dnl AC_PROG_INSTALL

#
# Check for C++ specific features.
#
AC_LANG_CPLUSPLUS

dnl Check for bool type.
AC_MSG_CHECKING(C++ for bool)
AC_TRY_COMPILE(, bool t=true;bool f=false, AC_MSG_RESULT(yes),
  AC_MSG_RESULT(no)
  CPPFLAGS=$CPPFLAGS" -Dbool=int -Dtrue=1 -Dfalse=0"
  AC_SUBST(CPPFLAGS))

dnl Check for exceptions
AC_MSG_CHECKING(C++ for exceptions)
AC_TRY_COMPILE(, try{int a = 5;}catch(...){int b=2;}, AC_MSG_RESULT(yes)
  HAVE_EXCEPTIONS="yes",
  AC_MSG_RESULT(no)
  HAVE_EXCEPTIONS="false")

dnl Check for the prototype for ftime in "sys/timeb.h".
AC_MSG_CHECKING(for prototype for ftime)
AC_TRY_COMPILE([#include <sys/time.h>
                #include <sys/timeb.h>],
               [struct timeb *tp; ftime(tp)],
               AC_MSG_RESULT(yes)
               AC_DEFINE(HAVE_FTIME_PROTOTYPE, [1], [Define if you have the prototype for ftime in the <sys/timeb.h>.]),
               AC_MSG_RESULT(no))

dnl Check for setbuf in streambuf
AC_MSG_CHECKING(for setbuf)
AC_TRY_COMPILE([#include <fstream>],
                [fstream out("/dev/null",std::ios::out); out.rdbuf()->setbuf((char*)0,0);],
                AC_MSG_RESULT(yes),
                AC_MSG_RESULT(no)
                AC_DEFINE(NO_SETBUF, [1], [Define NO_SETBUF if streambuf::setbuf is not public.]))

dnl Check for ios::noreplace
AC_MSG_CHECKING(for ios::noreplace)
AC_TRY_COMPILE([#include <fstream>],
               [ofstream f("dummy",std::ios::out|std::ios::noreplace);],
               AC_MSG_RESULT(yes)
               AC_DEFINE(HAVE_IOS_NOREPLACE, [1], [Define if you have ios::noreplace.]),
               AC_MSG_RESULT(no))
               
AC_LANG_C


#
# Check for use of PTYs
#
AC_MSG_CHECKING(whether to use PTYs)
AC_ARG_WITH(pty,
	[  --without-pty           Disable PTY use],
        USE_PTY=$withval,
        USE_PTY="yes")
AC_MSG_RESULT($USE_PTY)

if test "$USE_PTY" = "yes"; then
    AC_DEFINE(USE_PTY, [1], [Define USE_PTY if we want to use PTYs.])

    # Check for SYSV versus BSD style pseudo-ttys
    AC_MSG_CHECKING(for SYSV vs BSD style ptys)
    if test "$UNAME" = "FreeBSD" || test "$UNAME" = "AIX" || test "$UNAME" = "Darwin"; then
        AC_MSG_RESULT(BSD)
    else
        AC_TRY_LINK([#include <stdlib.h>
                     #include <stropts.h>], grantpt(0),
            AC_MSG_RESULT(SYSV)
            AC_DEFINE(PTY_SYSV, [1], [Define PTY_SYSV if we have System V style pty functions -- BSD otherwise.]),
            AC_MSG_RESULT(BSD))
    fi

fi

#
# Check for -ldl if we're on SunOS or linux.
#
AC_MSG_CHECKING(for Linux and -ldl)
if test "$UNAME" = "Linux" || test "$UNAME" = "SunOS"; then
    AC_CHECK_LIB(dl, main,   LIBS="-ldl $LIBS")
else
    AC_MSG_RESULT(no)
fi

#
# We need to check for the networking libraries on SunOS
#
AC_MSG_CHECKING(for SunOS and -lnsl)
if test "$UNAME" = "SunOS"; then
    AC_CHECK_LIB(nsl, main,   LIBS="-lnsl $LIBS")
else
    AC_MSG_RESULT(no)
fi
AC_MSG_CHECKING(for SunOS and -lsocket)
if test "$UNAME" = "SunOS"; then
    AC_CHECK_LIB(socket, main,   LIBS="-lsocket $LIBS")
else
    AC_MSG_RESULT(no)
fi
AC_MSG_CHECKING(for SunOS and -lresolv)
if test "$UNAME" = "SunOS"; then
    AC_CHECK_LIB(resolv, main,   LIBS="-lresolv $LIBS")
else
    AC_MSG_RESULT(no)
fi

#
# Check if socklen_t is a type.
#
AC_MSG_CHECKING(for socklen_t)
AC_TRY_COMPILE([#include <sys/types.h>
                #include <sys/socket.h>],
               [socklen_t dummy;],
               AC_MSG_RESULT(yes)
               AC_DEFINE(HAVE_SOCKLEN_T, [1], [Define if socklen_t is defined.]),
               AC_MSG_RESULT(no))


#
# Check for non-graphics libraries in the reverse order that they
# are needed.  The libraries are added to the beginning of `LIBS'.
#
AC_CHECK_LIB(m, main)

#
# Handle zlib. By default, we try to find a zlib because VisIt can
# use compression when shipping data between engine and viewer. 
# Since zlib may not be available everywhere, we also support it
# as a 3rd party builtin. So, the logic here handles several cases.
# If we can find it 'normally', we use that. If finding 'normally'
# fails, we use our 3rd party builtin. Alternatively, the user
# can explicitly specify to use our 3rd party builtin effectively
# disabling the step where we find it 'normally.' Likewise, the user
# can explicitly specify zlib inc/lib dirs s/he wants or disable zlib
# entirely though that also disables any compression in VisIt between
# engine and viewer.
#
BUILD_ZLIB=""
ZLIB_LIB="-lz"
AC_ARG_WITH(zlib,[  --with-zlib=INC-DIR,LIB-DIR     Use the GNU zlib compression],,withval=yes)
case $withval in
    yes)
        # This is the 'default' action when --with-zlib= is NOT
        # given on the command line to configure. So, we look
        # for zlib headers and lib 'normally'
        AC_CHECK_HEADERS(zlib.h,have_zlib_h="yes")
        if test -n "$have_zlib_h"; then
            AC_CHECK_LIB(z, compress2)
            if test -z "`echo $LIBS | tr ' ' '\n' | grep -x -e '-lz'`"; then
                # If we get here, there was a problem with the 'normal'
                # way of finding zlib. So, we'll fallback to our 3rd
                # party builtin. Note that in this case, zlib.h will
                # appear in VisIt's include dir. So, all we need to
                # do is add '-lz' to LIBS variable.
                BUILD_ZLIB=zlib
                LIBS="-lz $LIBS"
                ZLIB_LIB="-lz"
                AC_DEFINE(HAVE_ZLIB_H,1)
            fi
        fi
        ;;
    builtin)
        # This is the case where they user has specified --with-zlib=builtin
        # to skip the attempt to look for zlib 'normally' and explicilty force 
        # the use of our 3rd party builtin. Note that in this case, zlib.h
        # will appear in VisIt's include dir. So, all we need to do is
        # add '-lz' to LIBS variable.
        AC_MSG_CHECKING(for GNU zlib)
        BUILD_ZLIB=zlib
        LIBS="-lz $LIBS"
        AC_DEFINE(HAVE_ZLIB_H,1)
        AC_MSG_RESULT(builtin)
        ;;
    no)
        # Totally disable zlib
        ZLIB_LIB=""
        AC_MSG_CHECKING(for GNU zlib)
        AC_MSG_RESULT(suppressed)
        ;;
    *)
	# Use a zlib at the specified inc/lib dir pair
        AC_MSG_CHECKING(for GNU zlib)
        zlib_inc="`echo $withval |cut -f1 -d,`"
        if test ! -f $zlib_inc/zlib.h; then
            AC_MSG_ERROR(no zlib.h found in $zlib_inc)
        fi
        CPPFLAGS="$CPPFLAGS -I$zlib_inc"
        zlib_lib="`echo $withval |cut -f2 -d, -s`"
        if test ! -f $zlib_lib/libz.a && test ! -f $zlib_lib/libz.so; then
            AC_MSG_ERROR(no libz.a or libz.so found in $zlib_lib)
        fi
        LDFLAGS="$LDFLAGS -L$zlib_lib"
        LIBS="-lz $LIBS"
        AC_DEFINE(HAVE_ZLIB_H,1)
        ZLIB_LIB="-L$zlib_lib -lz"
        AC_MSG_RESULT(-I$zlib_inc -L$zlib_lib -lz)
        ;;
esac
AC_SUBST(BUILD_ZLIB)
AC_SUBST(ZLIB_LIB) # primarily for mac pre-binding

#
# Handle hdf5 library using new VAC_ARG_WITH3RD macro
# All libs should be switched to use this new macro.
#
VAC_ARG_WITH3RD(hdf5)
# Check for possible zlib dependence. If there is, we'll just add -lz
if test -n "$HDF5_LIB"; then
    if test -n "`strings $HDF5_LIBFILE | grep -i inflateInit`"; then
        if test -z "`echo $LIBS | tr ' ' '\n' | grep -x -e '-lz'`"; then
            if test -z "$ZLIB_LIB"; then
                AC_MSG_ERROR(HDF5 appears to have a dependence on zlib. Add dependent libs after ':' in --with-hdf5 arg.)
            else
                HDF5_LIB="$HDF5_LIB $ZLIB_LIB"
                AC_SUBST(HDF5_LIB)
            fi
        fi
    fi
    # Check for possible szip dependence.
    if test -n "`strings $HDF5_LIBFILE | grep -i szip_compress_memory`"; then
        if test -z "`echo $HDF5_LIB | tr ' ' '\n' | grep -x -e '-lsz'`"; then
            AC_MSG_ERROR(HDF5 appears to have a dependence on szip. Add dependent libs after ':' in --with-hdf5 arg.)
        fi
    fi
fi

#
# Handle the Silo library
#
VAC_ARG_WITH3RD(silo,,siloxx siloh5 silo)

dnl
dnl Check for exodus libraries
dnl
AC_ARG_WITH(exodus,
            [  --with-exodus[=<DIR>]           enable Exodus driver],
            ,
            withval="unspecified")
AC_MSG_CHECKING(for Exodus support)

case $withval in
  no)
    exodus_enabled="no"
    ;;
  yes)
    exodus_enabled="yes"
    ;;
  unspecified)
    dnl don't do anything yet
    ;;
  *)
    dnl use include and lib directories under where they specified
    if test -d $withval/inc; then
        exodus_inc="$withval/inc"
    else
        exodus_inc="$withval/include"
    fi
    exodus_lib="$withval/lib"
    ;;
esac

dnl
dnl If the VTK exodus reader is not in the distribution then disable
dnl the exodus reader.
dnl
if test ! -d databases/Exodus && test ! -d databases/TimeVaryingExodus; then
    exodus_enabled=no
fi

if test "$exodus_enabled" != "no"; then
    dnl As long as they didn't say "--without-exodus", let them
    dnl manually specify the include and lib directories
    AC_ARG_WITH(exodus-include,
                [  --with-exodus-include[=<DIR>]   specify Exodus include path],
                exodus_inc=$withval)
    AC_ARG_WITH(exodus-lib,
                [  --with-exodus-lib[=<DIR>]       specify Exodus lib path],                    exodus_lib=$withval)

    dnl
    dnl Allow for it to be set by environment variables.
    dnl
    if test -n "$DEFAULT_EXODUS_INCLUDES" && test -z "$exodus_inc" ; then
        exodus_inc="$DEFAULT_EXODUS_INCLUDES"
    fi
    if test -n "$DEFAULT_EXODUS_LIBRARY" && test -z "$exodus_lib" ; then
        exodus_lib="$DEFAULT_EXODUS_LIBRARY"
    fi
    
    if test -n "$exodus_inc" || test -n "$exodus_lib"; then
        exodus_enabled="yes"
    fi
fi

EXODUS=""
EXODUS_FLAGS=""
EXODUS_LIBS=""
EXODUS_LIB=""
if test "$exodus_enabled" = "yes"; then
    EXODUS="$""(EXODUS)"
    EXODUS_FLAGS="$EXODUS_FLAGS -I$exodus_inc"
    EXODUS_LIBS="-L$exodus_lib -lexoIIv2c -lnetcdf"
    if test "$UNAME" = "Darwin"; then
        EXODUS_LIB="$exodus_lib/libexoIIv2c.dylib"
    else
        EXODUS_LIB="$exodus_lib/libexoIIv2c.a"
    fi
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_SUBST(EXODUS)
AC_SUBST(EXODUS_LIB)
AC_SUBST(EXODUS_LIBS)
AC_SUBST(EXODUS_FLAGS)

#
# See of --with-pdb was specified. Use PDB lite otherwise.
#
VAC_ARG_WITH3RD(pdb)
if test -z "$PDB_LIB"; then
    AC_MSG_CHECKING(for PDB lite (e.g Silo))
    if test -n "$SILO_LIB"; then
        PDB_INCLUDE="$SILO_INCLUDE"
        PDB_LIB="$SILO_LIB"
        PDB_TARGET="$""(PDB_TARGET)"
        AC_MSG_RESULT(yes)
        AC_SUBST(PDB_INCLUDE)
        AC_SUBST(PDB_LIB)
        AC_SUBST(PDB_TARGET)
    fi
else
    PDB_LIB="$PDB_LIB -lpdb -lscore -lpml"
    AC_SUBST(PDB_LIB)
fi

#
# Look for Mili.
#
AC_MSG_CHECKING(for Mili)
MILI=""
MILI_FLAGS=""
MILI_LIBS=""
AC_ARG_WITH(mili,
	    [  --with-mili=DIR      Location of Mili header and library],
           mili_specified="yes",
           mili_specified="no"
           )
if test "$mili_specified" = "yes"; then
   if test "$withval" != "no"; then
      MILI_DIR=`echo $withval | cut -f1 -d`
      MILI_FLAGS="-I$MILI_DIR"
      MILI_LIBS="-L$MILI_DIR -lmili"
   fi
else
   if test "$MILI_DIR" != "" ; then
      MILI_FLAGS="-I$MILI_DIR $MILI_FLAGS"
      MILI_LIBS="-L$MILI_DIR -lmili $MILI_LIBS"
   fi
fi
if test "$MILI_LIBS" != "" ; then
   if test "$MILI_FLAGS" != "" ; then
      MILI="$""(MILI)"
      AC_MSG_RESULT(yes)
   else
      AC_MSG_RESULT(no)
   fi
else
   AC_MSG_RESULT(no)
fi
AC_SUBST(MILI)
AC_SUBST(MILI_FLAGS)
AC_SUBST(MILI_LIBS)
AC_SUBST(MILI_DIR)

#
# Look for google-perftools's tcmalloc.
#
AC_MSG_CHECKING(for google_perftools)
TCMALLOC_LIB=""
CREATE_TCMALLOC_LINK=""
AC_ARG_WITH(google_perftools,
	    [  --with-google-perftools=DIR      Location of tc-malloc from google-perftools],
           google_perftools_specified="yes",
           google_perftools_specified="no"
           )
if test "$google_perftools_specified" = "yes"; then
   if test "$withval" != "no"; then
      TCMALLOC_DIR=`echo $withval | cut -f1 -d' '`
      TCMALLOC_LIB="-ltcmalloc"
   fi
else
   if test "$DEFAULT_TCMALLOC_DIR" != "" ; then
      TCMALLOC_DIR=$DEFAULT_TCMALLOC_DIR
      TCMALLOC_LIB="-ltcmalloc"
   fi
fi
if test "$TCMALLOC_LIB" != "" ; then
   AC_MSG_RESULT(yes)
   CREATE_TCMALLOC_LINK="create_tcmalloc_link"
else
   AC_MSG_RESULT(no)
fi
AC_SUBST(TCMALLOC_LIB)
AC_SUBST(TCMALLOC_DIR)
AC_SUBST(CREATE_TCMALLOC_LINK)

#
# Look for HDF4.
#
AC_MSG_CHECKING(for HDF4)
HDF4=""
HDF4_FLAGS=""
HDF4_LIBS=""
HDF4_LIBDIR=""
AC_ARG_WITH(hdf4,
	    [  --with-hdf4=INC-DIR,LIB-DIR      Location of HDF4 header and library],
           hdf4_specified="yes",
           hdf4_specified="no"
           )
if test "$hdf4_specified" = "yes"; then
   if test "$withval" != "no"; then
      HDF4_FLAGS="-I`echo $withval |cut -f1 -d,`"
      HDF4_LIBS="-L`echo $withval |cut -f2 -d, -s`"
      HDF4_LIBDIR="`echo $withval |cut -f2 -d, -s`"
   fi
else
   if test "$DEFAULT_HDF4_FLAGS" != "" ; then
      HDF4_FLAGS="-I$DEFAULT_HDF4_FLAGS $HDF4_FLAGS"
   fi
   if test "$DEFAULT_HDF4_LIBS" != "" ; then
      # Having removed SZIP from VisIt's configure (10/21/08), this logic for
      # SZIP_LIB is here solely to prevent having to modify build_visit
      # where HDF4 in concerned. If build_visit builds an HDF4 with SZIP
      # dependence, it will also define the DEFAULT_SZIP_LIB symbol. If
      # some person builds HDF4 with szip dependence and attempts to
      # handle it via the --with-hdf4 config option to VisIt, it will
      # fail because the DEFAULT_SZIP_LIB symbol will not have been
      # defined. They will have to specify it either to configure or
      # in a config-site file. This situation should be rare and in
      # any event, will change shortly after 1.11 is released.
      if test -n "$DEFAULT_SZIP_LIB"; then
          SZIP_LIB="-L$DEFAULT_SZIP_LIB -lsz"
      fi
      if test "$UNAME" = "Darwin"; then
          HDF4_LIBS="-L$DEFAULT_HDF4_LIBS -lmfhdf -ldf -lvtkjpeg $SZIP_LIB -lz"
      else
          HDF4_LIBS="-L$DEFAULT_HDF4_LIBS -lmfhdf -ldf -ljpeg $SZIP_LIB -lz"
      fi
      HDF4_LIBDIR="$DEFAULT_HDF4_LIBS"
   fi
fi
if test "$HDF4_LIBS" != "" ; then
   if test "$HDF4_FLAGS" != "" ; then
      HDF4="$""(HDF4)"
      AC_MSG_RESULT(yes)
   else
      AC_MSG_RESULT(no)
   fi
else
   AC_MSG_RESULT(no)
fi
AC_SUBST(HDF4)
AC_SUBST(HDF4_FLAGS)
AC_SUBST(HDF4_LIBS)
AC_SUBST(HDF4_LIBDIR)

#
# Look for Boxlib2D.
#
AC_MSG_CHECKING(for Boxlib2D)
BOXLIB2D=""
BOXLIB2D_INCLUDE=""
BOXLIB2D_LIBS=""
BOXLIB2D_LIBDIR=""
AC_ARG_WITH(boxlib2d,
	    [  --with-boxlib2d=INC-DIR,LIB-DIR      Location of Boxlib2D header and library],
           boxlib2d_specified="yes",
           boxlib2d_specified="no"
           )
if test "$boxlib2d_specified" = "yes"; then
   if test "$withval" != "no"; then
      BOXLIB2D_INCLUDE="-I`echo $withval |cut -f1 -d,`"
      BOXLIB2D_LIBS="-L`echo $withval |cut -f2 -d, -s`"
      BOXLIB2D_LIBDIR="`echo $withval |cut -f2 -d, -s`"
   fi
else
   if test "$DEFAULT_BOXLIB2D_INCLUDE" != "" ; then
      BOXLIB2D_INCLUDE="-I$DEFAULT_BOXLIB2D_INCLUDE $BOXLIB2D_INCLUDE"
   fi
   if test "$DEFAULT_BOXLIB2D_LIBS" != "" ; then
      BOXLIB2D_LIBS="-L$DEFAULT_BOXLIB2D_LIBS -lbox2D"
      BOXLIB2D_LIBDIR="$DEFAULT_BOXLIB2D_LIBS"
   fi
fi
if test "$BOXLIB2D_LIBS" != "" ; then
   if test "$BOXLIB2D_INCLUDE" != "" ; then
      BOXLIB2D="$""(BOXLIB2D)"
      AC_MSG_RESULT(yes)
   else
      AC_MSG_RESULT(no)
   fi
else
   AC_MSG_RESULT(no)
fi
AC_SUBST(BOXLIB2D)
AC_SUBST(BOXLIB2D_INCLUDE)
AC_SUBST(BOXLIB2D_LIBS)
AC_SUBST(BOXLIB2D_LIBDIR)


#
# Look for Boxlib3D.
#
AC_MSG_CHECKING(for Boxlib3D)
BOXLIB3D=""
BOXLIB3D_INCLUDE=""
BOXLIB3D_LIBS=""
BOXLIB3D_LIBDIR=""
AC_ARG_WITH(boxlib3d,
	    [  --with-boxlib3d=INC-DIR,LIB-DIR      Location of Boxlib3D header and library],
           boxlib3d_specified="yes",
           boxlib3d_specified="no"
           )
if test "$boxlib3d_specified" = "yes"; then
   if test "$withval" != "no"; then
      BOXLIB3D_INCLUDE="-I`echo $withval |cut -f1 -d,`"
      BOXLIB3D_LIBS="-L`echo $withval |cut -f2 -d, -s`"
      BOXLIB3D_LIBDIR="`echo $withval |cut -f2 -d, -s`"
   fi
else
   if test "$DEFAULT_BOXLIB3D_INCLUDE" != "" ; then
      BOXLIB3D_INCLUDE="-I$DEFAULT_BOXLIB3D_INCLUDE $BOXLIB3D_INCLUDE"
   fi
   if test "$DEFAULT_BOXLIB3D_LIBS" != "" ; then
      BOXLIB3D_LIBS="-L$DEFAULT_BOXLIB3D_LIBS -lbox3D"
      BOXLIB3D_LIBDIR="$DEFAULT_BOXLIB3D_LIBS"
   fi
fi
if test "$BOXLIB3D_LIBS" != "" ; then
   if test "$BOXLIB3D_INCLUDE" != "" ; then
      BOXLIB3D="$""(BOXLIB3D)"
      AC_MSG_RESULT(yes)
   else
      AC_MSG_RESULT(no)
   fi
else
   AC_MSG_RESULT(no)
fi
AC_SUBST(BOXLIB3D)
AC_SUBST(BOXLIB3D_INCLUDE)
AC_SUBST(BOXLIB3D_LIBS)
AC_SUBST(BOXLIB3D_LIBDIR)

#
# Look for H5Part
#
AC_MSG_CHECKING(for H5Part)
H5PART=""
H5PART_INCLUDE=""
H5PART_LIB=""
H5PART_LIBDIR=""
AC_ARG_WITH(h5part,
            [  --with-h5part=INC-DIR,LIB-DIR       Location of H5Part headers and library],
           h5part_specified="yes",
           h5part_specified="no",
           )
if test "$h5part_specified" = "yes"; then
   if test "$withval" != "no"; then
      H5PART_INCLUDE="-I`echo $withval |cut -f1 -d,`"
      H5PART_LIB="-L`echo $withval |cut -f2 -d, -s`"
      H5PART_LIBDIR="`echo $withval |cut -f2 -d, -s`"
   fi
else
   if test "$DEFAULT_H5PART_INCLUDE" != "" ; then
      H5PART_INCLUDE="-I$DEFAULT_H5PART_INCLUDE $H5PART_INCLUDE"
   fi
   if test "$DEFAULT_H5PART_LIB" != "" ; then
      H5PART_LIB="-L$DEFAULT_H5PART_LIB -lH5Part"
      H5PART_LIBDIR="$DEFAULT_H5PART_LIB"
   fi
fi
if test "$H5PART_LIB" != "" ; then
   if test "$H5PART_INCLUDE" != "" ; then
      H5PART="$""(H5PART)"
      AC_MSG_RESULT(yes)
   else
      AC_MSG_RESULT(no)
   fi
else
   AC_MSG_RESULT(no)
fi
AC_SUBST(H5PART)
AC_SUBST(H5PART_INCLUDE)
AC_SUBST(H5PART_LIB)
AC_SUBST(H5PART_LIBDIR)

#
# Look for ViSUS 
#
AC_MSG_CHECKING(for ViSUS)
VISUS=""
VISUS_INCLUDE=""
VISUS_LIB=""
AC_ARG_WITH(visus,
            [  --with-visus=INC-DIR,LIB-DIR      Location of ViSUS header and library],
           visus_specified="yes",
           visus_specified="no"
           )
if test "$visus_specified" = "yes"; then
   if test "$withval" != "no"; then
      VISUS_INCLUDE="-I`echo $withval |cut -f1 -d,`"
#      VISUS_LIB="-L`echo $withval |cut -f2 -d, -s` -lidx_io -lidx_i -llocal -lz"
      VISUS_LIB="-L`echo $withval |cut -f2 -d, -s` -lidx_i -llocal -lz"
   fi
else
   if test "$DEFAULT_VISUS_INCLUDE" != "" ; then
      VISUS_INCLUDE="-I$DEFAULT_VISUS_INCLUDE"
   fi
   if test "$DEFAULT_VISUS_LIB" != "" ; then
#      VISUS_LIB="-L$DEFAULT_VISUS_LIB -lidx_io -lidx_i -llocal -lz"
      VISUS_LIB="-L$DEFAULT_VISUS_LIB -lidx_i -llocal -lz"
   fi
fi
if test "$VISUS_LIB" != "" ; then
   if test "$VISUS_INCLUDE" != "" ; then
      VISUS="$""(VISUS)"
      AC_MSG_RESULT(yes)
   else
      AC_MSG_RESULT(no)
   fi
else
   AC_MSG_RESULT(no)
fi
AC_SUBST(VISUS)
AC_SUBST(VISUS_INCLUDE)
AC_SUBST(VISUS_LIB)

#
# Look for netCDF
#
AC_MSG_CHECKING(for netCDF)
NETCDF=""
NETCDF_INCLUDE=""
NETCDF_LIB=""
NETCDF_CXX_LIB=""
AC_ARG_WITH(netcdf,
	    [  --with-netcdf=INC-DIR,LIB-DIR     Location of netCDF header and library],
           netcdf_specified="yes",
           netcdf_specified="no"
           )
if test "$UNAME" = "Darwin"; then
    NETCDF_LIBEXT="dylib"
else
    NETCDF_LIBEXT="a"
fi
if test "$netcdf_specified" = "yes"; then
   if test "$withval" != "no"; then
      NETCDF_INCLUDE="-I`echo $withval |cut -f1 -d,`"
      NETCDF_LIB="`echo $withval |cut -f2 -d, -s`/libnetcdf.$NETCDF_LIBEXT"
      NETCDF_CXX_LIB="`echo $withval |cut -f2 -d, -s`/libnetcdf_c++.$NETCDF_LIBEXT"
   fi
else
   if test "$DEFAULT_NETCDF_INCLUDE" != "" ; then
      NETCDF_INCLUDE="-I$DEFAULT_NETCDF_INCLUDE $NETCDF_INCLUDE"
   fi
   if test "$DEFAULT_NETCDF_LIB" != "" ; then
      NETCDF_LIB="$DEFAULT_NETCDF_LIB/libnetcdf.$NETCDF_LIBEXT $NETCDF_LIB"
      NETCDF_CXX_LIB="$DEFAULT_NETCDF_LIB/libnetcdf_c++.$NETCDF_LIBEXT $NETCDF_CXX_LIB"
   fi
fi
if test "$NETCDF_LIB" != "" ; then
   if test "$NETCDF_INCLUDE" != "" ; then
      NETCDF="$""(NETCDF)"
      AC_MSG_RESULT(yes)
      AC_DEFINE(HAVE_NETCDF_H, [1], [Define if you have the netcdf header.])
      AC_DEFINE(HAVE_LIBNETCDF, [1], [Define if you have the netcdf library.])
   else
      AC_MSG_RESULT(no)
   fi
else
   AC_MSG_RESULT(no)
fi
AC_SUBST(NETCDF)
AC_SUBST(NETCDF_INCLUDE)
AC_SUBST(NETCDF_LIB)
AC_SUBST(NETCDF_CXX_LIB)

#
# Look for CGNS
#
AC_MSG_CHECKING(for CGNS)
CGNS=""
CGNS_INCLUDE=""
CGNS_LIB=""
AC_ARG_WITH(cgns,
	    [  --with-cgns=INC-DIR,LIB-DIR     Location of CGNS header and library],
           cgns_specified="yes",
           cgns_specified="no"
           )
if test "$UNAME" = "Darwin"; then
    CGNS_LIBEXT="dylib"
else
    CGNS_LIBEXT="a"
fi
if test "$cgns_specified" = "yes"; then
   if test "$withval" != "no"; then
      CGNS_INCLUDE="-I`echo $withval |cut -f1 -d,`"
      CGNS_LIB="`echo $withval |cut -f2 -d, -s`/libcgns.$CGNS_LIBEXT"
   fi
else
   if test "$DEFAULT_CGNS_INCLUDE" != "" ; then
      CGNS_INCLUDE="-I$DEFAULT_CGNS_INCLUDE $CGNS_INCLUDE"
   fi
   if test "$DEFAULT_CGNS_LIB" != "" ; then
      CGNS_LIB="$DEFAULT_CGNS_LIB/libcgns.$CGNS_LIBEXT $CGNS_LIB"
   fi
fi
if test "$CGNS_LIB" != "" ; then
   if test "$CGNS_INCLUDE" != "" ; then
      CGNS="$""(CGNS)"
      AC_MSG_RESULT(yes)
      AC_DEFINE(HAVE_CGNS_H, [1], [Define if you have the cgns headers.])
      AC_DEFINE(HAVE_LIBCGNS, [1], [Define if you have the cgns library.])
   else
      AC_MSG_RESULT(no)
   fi
else
   AC_MSG_RESULT(no)
fi
AC_SUBST(CGNS)
AC_SUBST(CGNS_INCLUDE)
AC_SUBST(CGNS_LIB)


#
# Look for GDAL
#
AC_MSG_CHECKING(for GDAL)
GDAL=""
GDAL_INCLUDE=""
GDAL_LIB=""
GDAL_LIBS=""
AC_ARG_WITH(GDAL,
	    [  --with-GDAL=INC-DIR,LIB-DIR     Location of GDAL header and library],
           GDAL_specified="yes",
           GDAL_specified="no"
           )
if test "$UNAME" = "Darwin"; then
    GDAL_LIBEXT="dylib"
else
    GDAL_LIBEXT="a"
fi
if test "$GDAL_specified" = "yes"; then
   if test "$withval" != "no"; then
      GDAL_INCLUDE="-I`echo $withval |cut -f1 -d,`"
      GDAL_LIB="`echo $withval |cut -f2 -d, -s`/libgdal.$GDAL_LIBEXT"
   fi
else
   if test "$DEFAULT_GDAL_INCLUDE" != "" ; then
      GDAL_INCLUDE="-I$DEFAULT_GDAL_INCLUDE $GDAL_INCLUDE"
   fi
   if test "$DEFAULT_GDAL_LIB" != "" ; then
      GDAL_LIB="$DEFAULT_GDAL_LIB/libgdal.$GDAL_LIBEXT $GDAL_LIB"
   fi
fi
if test "$GDAL_LIB" != "" ; then
   if test "$GDAL_INCLUDE" != "" ; then
      if test "$GDAL_WITH_HDF5" == "yes"; then
          GDAL_LIBS="$GDAL_LIB $HDF5_LIB"
      else
          GDAL_LIBS="$GDAL_LIB"
      fi
      GDAL="$""(GDAL)"
      AC_MSG_RESULT(yes)
      AC_DEFINE(HAVE_GDAL_H, [1], [Define if you have the gdal headers.])
      AC_DEFINE(HAVE_LIBGDAL, [1], [Define if you have the gdal library.])
   else
      AC_MSG_RESULT(no)
   fi
else
   AC_MSG_RESULT(no)
fi
AC_SUBST(GDAL)
AC_SUBST(GDAL_INCLUDE)
AC_SUBST(GDAL_LIB)
AC_SUBST(GDAL_LIBS)

#
# Look for CFITSIO
#
AC_MSG_CHECKING(for CFITSIO)
CFITSIO=""
CFITSIO_INCLUDE=""
CFITSIO_LIB=""
CFITSIO_LIBDIR=""
AC_ARG_WITH(CFITSIO,
	    [  --with-cfitsio=INC-DIR,LIB-DIR     Location of CFITSIO header and library],
           CFITSIO_specified="yes",
           CFITSIO_specified="no"
           )
if test "$UNAME" = "Darwin"; then
    CFITSIO_LIBEXT="dylib"
else
    CFITSIO_LIBEXT="a"
fi
if test "$CFITSIO_specified" = "yes"; then
   if test "$withval" != "no"; then
      CFITSIO_INCLUDE="-I`echo $withval |cut -f1 -d,`"
      CFITSIO_LIB="`echo $withval |cut -f2 -d, -s`/libcfitsio.$CFITSIO_LIBEXT"
      CFITSIO_LIBDIR="`echo $withval |cut -f2 -d, -s`"
   fi
else
   if test "$DEFAULT_CFITSIO_INCLUDE" != "" ; then
      CFITSIO_INCLUDE="-I$DEFAULT_CFITSIO_INCLUDE $CFITSIO_INCLUDE"
   fi
   if test "$DEFAULT_CFITSIO_LIB" != "" ; then
      CFITSIO_LIB="$DEFAULT_CFITSIO_LIB/libcfitsio.$CFITSIO_LIBEXT $CFITSIO_LIB"
      CFITSIO_LIBDIR="$DEFAULT_CFITSIO_LIB"
   fi
fi
if test "$CFITSIO_LIB" != "" ; then
   if test "$CFITSIO_INCLUDE" != "" ; then
      CFITSIO="$""(CFITSIO)"
      AC_MSG_RESULT(yes)
   else
      AC_MSG_RESULT(no)
   fi
else
   AC_MSG_RESULT(no)
fi
AC_SUBST(CFITSIO)
AC_SUBST(CFITSIO_INCLUDE)
AC_SUBST(CFITSIO_LIB)
AC_SUBST(CFITSIO_LIBDIR)

#
# Handle all ITAPS implementations.
# ITAPS is a bit unusual in that there can be multiple implementations
# of ITAPS library. So, a single plugin source using the ITAPS API has
# to be compiled and linked against each implementation and, ideally,
#  assigned a different but meaingful plugin id. We handle that by making
# multiple copies of the database plugin source directory AT CONFIGURE TIME
# and fudging with the files a bit.
#
ITAPS_C=""
AC_MSG_CHECKING(for ITAPS Implementations)
AC_ARG_WITH(itaps-impls,
            AC_HELP_STRING([--with-itaps-impls],[See config-site/hoth.llnl.gov.conf for example of how to format the argument to this option]),
           ,
           with_itaps_impls=$DEFAULT_ITAPS_IMPLS)

#
# Iterate over all specified implementations
#
if test -n "$with_itaps_impls" && test with_itaps_impls != "no"; then
    AC_MSG_RESULT(see below)

    itaps_impl_id=0
    for impl_spec in $with_itaps_impls; do

        #
        # Scan out all the parts of this implementation. Handle the special
        # case of the -Wl,-rpath option in the LIBS component.
        #
        impl_name="ITAPS_`echo $impl_spec | cut -d':' -f1`"
        impl_exts=`echo $impl_spec | cut -d':' -f2 | tr ',' ' '`
        impl_incs=`echo $impl_spec | cut -d':' -f3 | tr ',' ' '`
        impl_libs=`echo $impl_spec | cut -d':' -f4 | sed -e 's/-Wl,-rpath=/-Wl;-rpath=/g' -e 's/-Wl,--rpath,/-Wl;--rpath;/g'`
        impl_libs=`echo $impl_libs | tr ',' ' '`
        impl_libs=`echo $impl_libs | tr ';' ','`

        #
        # Handle the 'special' case where we are just using a single
        # implementation named ITAPS_C
        #
        if test "$impl_name" = "ITAPS_ITAPS_C"; then
            ITAPS_C_INCLUDE=${impl_incs}
            ITAPS_C_LIB=${impl_libs}
            AC_SUBST(ITAPS_C_INCLUDE)
            AC_SUBST(ITAPS_C_LIB)
            ITAPS_C="ITAPS_C"
            AC_MSG_RESULT(Instantiated ITAPS_C)
            break
        fi

        #
        # Check for pre-existing dir and remove if appropriate, fail otherwise
        #
        if test -d databases/$impl_name; then
            if test ! -e databases/${impl_name}/DO_NOT_MODIFY_THE_FILES_IN_THIS_DIR; then
                AC_ERROR("Configure needs to remove ITAPS implementation copy databases/${impl_name}. But that directory appears to be populated with something other than a copy of the ITAPS_C database plugin.")
            fi
            chmod -R u+wX databases/$impl_name
            rm -rf databases/$impl_name
        fi

        #
        # Make a copy of the src/database/ITAPS_C dir
        #
        cp -R databases/ITAPS_C databases/$impl_name
        rm -rf databases/$impl_name/.svn
        rm -f databases/$impl_name/*.o
        rm -f databases/$impl_name/*.d
        rm -f databases/$impl_name/Makefile

        #
        # Change all the filenames and file contents
        #
        for f in databases/$impl_name/*; do
            newf=`echo $f | sed -e "s/ITAPS_C/${impl_name}/"`
            mv $f $newf
        done
        sed -i -e "s/ITAPS_C/${impl_name}/g" databases/$impl_name/*

        #
        # Fix contents of the .xml file 
        #
        sed -i -e "s%<Extensions>\(.*\)</Extensions>%<Extensions>${impl_exts}</Extensions>%" databases/$impl_name/$impl_name.xml
        sed -i -e "s%<CXXFLAGS>\(.*\)</CXXFLAGS>%<CXXFLAGS>$\(ITAPS_C${itaps_impl_id}_INCLUDE)</CXXFLAGS>%" databases/$impl_name/$impl_name.xml
        sed -i -e "s%<LIBS>\(.*\)</LIBS>%<LIBS>$\(ITAPS_C${itaps_impl_id}_LIB)</LIBS>%" databases/$impl_name/$impl_name.xml

        #
        # Fix the extensions in the PluginInfo.C file
        #
        sed -i -e "s%defaultExtensions.push_back(\(.*\));%defaultExtensions.push_back(\"itaps_foo\");%" databases/$impl_name/${impl_name}PluginInfo.C
        for ext in $impl_exts; do
            sed -i -e "1,/defaultExtensions.push_back/s%defaultExtensions.push_back(\"itaps_foo\");%defaultExtensions.push_back(\"${ext}\");%" databases/$impl_name/${impl_name}PluginInfo.C
        done
        sed -i -e "/defaultExtensions.push_back(\"itaps_foo\");/d" databases/$impl_name/${impl_name}PluginInfo.C

        #
        # Make a warning file
        #
        cat > databases/$impl_name/DO_NOT_MODIFY_THE_FILES_IN_THIS_DIR << EOF
The sources in this directory are a copy of the sources in the ITAPS_C
directory. This copy was made to facilitate linking a single ITAPS_C source
to multiple, various implementations of the ITAPS libraries.

All modifications made here will be lost if this source code
tree is ever re-configured. Do NOT make modifications here. Instead,
make modifications in the ITAPS_C sources.
EOF

        #
        # Lastly, make everything in this dir read-only so someone doesn't
        # accidentally try to modify these sources.
        #
        chmod u-w,g-w,o-w databases/$impl_name/*

        #
        # Define the appropriate make variables. We have to handle this part
        # of the process this way because the shell code that gets generated
        # from these autoconf macros is determined at autoconf time, not
        # configure time.
        #
        case $itaps_impl_id in
            0)
                ITAPS_C0_INCLUDE=${impl_incs}
                ITAPS_C0_LIB=${impl_libs}
                AC_SUBST(ITAPS_C0_INCLUDE)
                AC_SUBST(ITAPS_C0_LIB)
            ;;
            1)
                ITAPS_C1_INCLUDE=${impl_incs}
                ITAPS_C1_LIB=${impl_libs}
                AC_SUBST(ITAPS_C1_INCLUDE)
                AC_SUBST(ITAPS_C1_LIB)
            ;;
            2)
                ITAPS_C2_INCLUDE=${impl_incs}
                ITAPS_C2_LIB=${impl_libs}
                AC_SUBST(ITAPS_C2_INCLUDE)
                AC_SUBST(ITAPS_C2_LIB)
            ;;
            3)
                ITAPS_C3_INCLUDE=${impl_incs}
                ITAPS_C3_LIB=${impl_libs}
                AC_SUBST(ITAPS_C3_INCLUDE)
                AC_SUBST(ITAPS_C3_LIB)
            ;;
            4)
                ITAPS_C4_INCLUDE=${impl_incs}
                ITAPS_C4_LIB=${impl_libs}
                AC_SUBST(ITAPS_C4_INCLUDE)
                AC_SUBST(ITAPS_C4_LIB)
            ;;
            5)
                AC_ERROR("Configure is designed to support up to a maximum of $itaps_impl_id ITAPS implementations")
            ;;
        esac

        ITAPS_C="$ITAPS_C $impl_name"
        itaps_impl_id=`expr $itaps_impl_id + 1`
        AC_MSG_RESULT(Instantiated $impl_name)
    done
fi
AC_SUBST(ITAPS_C)

#
# Look for CCMIO.
#
AC_MSG_CHECKING(for CCMIO)
CCMIO=""
CCMIO_INCLUDE=""
CCMIO_LIBS=""
CCMIO_LIBDIR=""
AC_ARG_WITH(CCMIO,
	    [  --with-ccmio=INC-DIR,LIB-DIR      Location of CCMIO header and library],
           CCMIO_specified="yes",
           CCMIO_specified="no"
           )
if test "$CCMIO_specified" = "yes"; then
   if test "$withval" != "no"; then
      CCMIO_INCLUDE="-I`echo $withval |cut -f1 -d,`"
      CCMIO_LIBS="-L`echo $withval |cut -f2 -d, -s`"
      CCMIO_LIBDIR="`echo $withval |cut -f2 -d, -s`"
   fi
else
   if test "$DEFAULT_CCMIO_INCLUDE" != "" ; then
      CCMIO_INCLUDE="-I$DEFAULT_CCMIO_INCLUDE $CCMIO_INCLUDE"
   fi
   if test "$DEFAULT_CCMIO_LIB" != "" ; then
      if test "$UNAME" = "Darwin"; then
          CCMIO_LIBS="-L$DEFAULT_CCMIO_LIB -lccmio -ladf $CCMIO_LIBS"
      else
          CCMIO_LIBS="-L$DEFAULT_CCMIO_LIB -lccmio -ladf $CCMIO_LIBS"
      fi
      CCMIO_LIBDIR="$DEFAULT_CCMIO_LIB"
   fi
fi
if test "$CCMIO_LIBS" != "" ; then
   if test "$CCMIO_INCLUDE" != "" ; then
      CCMIO="$""(CCMIO)"
      AC_MSG_RESULT(yes)
   else
      AC_MSG_RESULT(no)
   fi
else
   AC_MSG_RESULT(no)
fi
AC_SUBST(CCMIO)
AC_SUBST(CCMIO_INCLUDE)
AC_SUBST(CCMIO_LIBS)
AC_SUBST(CCMIO_LIBDIR)

#
# Determine if we should enable the simulation APIs
#
AC_MSG_CHECKING(to see if simulation APIs should be enabled)
SIMULATION="$""(SIMULATION)"
AC_MSG_RESULT(yes)
AC_SUBST(SIMULATION)

#
# Determine if the linker support --export-dynamic
#
AC_MSG_CHECKING(to see if --export-dynamic is supported)
oldldflags="$LDFLAGS"
EXPORT_DYNAMIC="-Wl,--export-dynamic"
LDFLAGS="$EXPORT_DYNAMIC $LDFLAGS";
AC_TRY_LINK([],[],
        AC_MSG_RESULT(yes),
        AC_MSG_RESULT(no)
        EXPORT_DYNAMIC="")
LDFLAGS="$oldldflags"
AC_SUBST(EXPORT_DYNAMIC)

#
# Add Some include paths to the engine's CPPFLAGS.
#
ENGINE_CPPFLAGS="$ENGINE_CPPFLAGS $VTK_INCLUDES"
AC_SUBST(ENGINE_CPPFLAGS)

#
# Add some include paths to the preprocessor's includes CPPFLAGS.
# Also add the parallel source files when building in parallel.
#
PREPROCESSOR_CPPFLAGS="$PREPROCESSOR_CPPFLAGS $SILO_INCLUDE "
PREPROCESSOR_CPPFLAGS="$PREPROCESSOR_CPPFLAGS -I$""(TOPDIR)/include/visit"
AC_SUBST(PREPROCESSOR_CPPFLAGS)
if test -n "$PARALLEL"; then
    PREPROCESSOR_PARALLEL_SRC="MPIResourceManager.C"
else
    PREPROCESSOR_PARALLEL_SRC=""
fi
AC_SUBST(PREPROCESSOR_PARALLEL_SRC)

COMPONENT_CPPFLAGS="$COMPONENT_CPPFLAGS -I$""(TOPDIR)/include "
COMPONENT_CPPFLAGS="$COMPONENT_CPPFLAGS -I$""(TOPDIR)/include/visit "
COMPONENT_CPPFLAGS="$COMPONENT_CPPFLAGS $VTK_INCLUDES "
AC_SUBST(COMPONENT_CPPFLAGS)

VISIT_VTK_CPPFLAGS="$VISIT_VTK_CPPFLAGS $VTK_INCLUDES -I$""(TOPDIR)/include/visit"
AC_SUBST(VISIT_VTK_CPPFLAGS)
AC_SUBST(VISIT_VTK_LDFLAGS)

#
# Check to see if we can compile with Gui support. If we can't then
# make sure no windowing system stuff gets in.
#
if test "$enable_gui" = "yes"; then
    dnl
    dnl Add some include paths to the viewer includes.
    dnl
    VIEWER_CPPFLAGS="$VIEWER_CPPFLAGS $VTK_INCLUDES"
    VIEWER_CPPFLAGS="$VIEWER_CPPFLAGS $SILO_INCLUDE"
    AC_SUBST(VIEWER_CPPFLAGS)

    dnl
    dnl Looking for a supported version of Qt.
    dnl
    if test -z "$QT_BIN" || test -z "$QT_INCLUDE" || test -z "$QT_LIB"; then
       AC_MSG_ERROR([The QT_BIN, QT_INCLUDE and QT_LIB environment variables must be set in order to find Qt])
    fi
    AC_MSG_CHECKING(for supported Qt version)
    QtVersion=""
    QtGlobalInc="$QT_INCLUDE/qglobal.h"

    if test -f $QtGlobalInc; then
        ## Check for supported versions of Qt.
	for ver in  3.3.0  3.3.1  3.3.2  3.3.3  3.3.4 3.3.7 3.3.8 \
                    3.2.0  3.2.1  3.2.2  3.2.3 \
                    3.1.2  3.1.1  3.1.0 \
                    3.0.4  3.0.3  3.0.2  3.0.1  3.0.0 \
                    ; do
            QtVer=`grep \"$ver\" $QtGlobalInc`
            if test -n "$QtVer"; then
                QtVersion=$ver
                break
            fi
        done
    fi

    if test -z "$QtVersion"; then
        AC_MSG_ERROR([  Sorry, but you need Qt version 3.0 or higher to compile VisIt. ])
    else
        AC_MSG_RESULT(Qt $QtVersion in $QT_INCLUDE)
    fi

    if test -f $QT_LIB/libqt-mt.so -o -f $QT_LIB/libqt-mt.dylib; then
	AC_MSG_RESULT(Linking to libqt-mt)
	LIBQT=libqt-mt
    	QT_LIBS=-lqt-mt
    else
	AC_MSG_RESULT(Linking to libqt)
	LIBQT=libqt
    	QT_LIBS=-lqt
    fi

    AC_SUBST(QT_BIN)
    AC_SUBST(QT_INCLUDE)
    AC_SUBST(QT_LIB)
    AC_SUBST(LIBQT)
    AC_SUBST(QT_LIBS)
    QUI_LIBS=-lqui
    AC_SUBST(QUI_LIBS)
    QT_LDFLAGS=""
    AC_SUBST(QT_LDFLAGS)
    QT_STATICLDFLAGS=-L$QT_LIB
    AC_SUBST(QT_STATICLDFLAGS)
    if test "$UNAME" = "Darwin"; then
        QTMAC_FLAGS="-DMACOSX_102"
    fi
    QT_CXXFLAGS="-I$""(TOPDIR)/include/qt $QT_CXXFLAGS $QTMAC_FLAGS"
    AC_SUBST(QT_CXXFLAGS)
    QT_MOC="$""(TOPDIR)/bin/moc"
    AC_SUBST(QT_MOC)
else
    dnl We are building with ONLY off-screen graphics support. That
    dnl means no X.
    X_LIBS=""
    AC_SUBST(X_LIBS)
    QT_BIN=""
    AC_SUBST(QT_BIN)
    QT_INCLUDE=""
    AC_SUBST(QT_INCLUDE)
    QT_LIB=""
    AC_SUBST(QT_LIB)
    QT_LIBS=""
    AC_SUBST(QT_LIBS)
    QUI_LIBS=""
    AC_SUBST(QUI_LIBS)
    QT_LDFLAGS=""
    AC_SUBST(QT_LDFLAGS)
    QT_CXXFLAGS=""
    AC_SUBST(QT_CXXFLAGS)
    QT_MOC=""
    AC_SUBST(QT_MOC)
fi

#
# Only enable VTKQT if we're building the viewer. 
#
if test -n "$VIEWER"; then
   VTKQT_CPPFLAGS="-I$""(TOPDIR)/vtkqt"
   VTKQT="vtkqt"
   #
   # TEMP HACK FOR BUILDING ON MacOS X.
   #
   if test "$UNAME" = "Darwin"; then
      VTKQT_LIBS="-lvtkqt $QT_LIBS"
   else
      VTKQT_LIBS=""
   fi
else
   VTKQT_CPPFLAGS=""
   VTKQT=""
   VTKQT_LIBS=""
fi
AC_SUBST(VTKQT_CPPFLAGS)
AC_SUBST(VTKQT)
AC_SUBST(VTKQT_LIBS)

#
# Do we need to tell the compiler about the location of the X 
# include files?  We're trying to keep the compiler command line
# as short and readable as possible.  We must tell the compiler
# about the include directory if the user explicitly gave one with
# `--x-includes=DIR'.
#
user_specified_x_includes="$x_includes"
user_specified_x_libraries="$x_libraries"
AC_PATH_X

if test "$no_x" != "yes" && test "$user_specified_x_includes" = NONE; then
   AC_MSG_CHECKING(if compiler knows about X11 header files)
   AC_TRY_CPP([#include <X11/Xlib.h>],
   AC_MSG_RESULT(yes),
       AC_MSG_RESULT(no)
         if test -n "$x_includes"; then
            CPPFLAGS="$CPPFLAGS -I`echo $x_includes|sed 's/ 	*/ -I/g'`"
         fi)
elif test "$x_includes" != NONE; then
   CPPFLAGS="$CPPFLAGS -I`echo $x_includes|sed 's/  */ -I/g'`"
fi

#
# Do we need to tell the linker about the location of the libraries?
# Watch out, because on some systems (like Linux) where more than
# one output file format can be created the libraries found by
# AC_PATH_X might be wrong!  Use that directory only if the compiler
# can't find the appropriate library for -lX11.  The search
# directory is added to the end of LDFLAGS.  If the user specified a
# library directory with `--x-libraries=DIR' then we must supply it to
# the linker!
#
if test "$no_x" != "yes" && test "$user_specified_x_libraries" = NONE; then
    oldlibs="$LIBS"
    LIBS="-lX11 -lXt $LIBS"

    AC_MSG_CHECKING(if linker knows about X11 libraries)
    AC_TRY_LINK([#include <X11/Xlib.h>],[XOpenDisplay((char*)0)],
                AC_MSG_RESULT(yes),
                AC_MSG_RESULT(no)
                if test -n "$x_libraries"; then
                    LDFLAGS="$LDFLAGS -L`echo $x_libraries|sed 's/  */ -L/g'`"
                fi)
    LIBS="$oldlibs"
elif test "$x_libraries" != NONE; then
    LDFLAGS="$LDFLAGS -L`echo $x_libraries|sed 's/  */ -L/g'`"
fi

#
# Is the X library available if we need it?
#
if test "$no_x" != "yes"; then
    AC_CHECK_LIB(X11,  main, X_LIBS="-lX11 -lXt $X_LIBS"         ,,$X_LIBS)
else
    X_LIBS=""
fi
AC_SUBST(X_LIBS)

#
# Look for pthreads. If they are present then define a flag
# that tells the engine to use pthreads in VTK. Also define
# a macro in visit-config.h
#
AC_MSG_CHECKING(for pthread library)
if test -z "$PTHREAD_LIB"; then
   AC_TRY_LINK([#include <pthread.h>],[pthread_attr_t attr;
                pthread_attr_init(&attr)],
               HAVE_PTHREADS="Yes",
               HAVE_PTHREADS="No")
   if test "$HAVE_PTHREADS" = "Yes" ; then
       ENGINE_CPPFLAGS="$ENGINE_CPPFLAGS"
       AC_SUBST(ENGINE_CPPFLAGS)
       PTHREAD_LIB="-lpthread"
       AC_DEFINE(HAVE_THREADS, [1], [Define if you have the pthread library.])
       AC_MSG_RESULT(found)
   else
       PTHREAD_LIB=""
       PTHREAD_CXXFLAGS=""
       AC_MSG_RESULT(not found)
   fi
else
   # In this case, PTHREAD_LIB was found in the config-site file so
   # we don't need to define it.
   AC_MSG_RESULT(found)
   PTHREAD_CXXFLAGS=""
   # Make sure that we define the HAVE_THREADS macro because if it does
   # not get defined then we'll never get the connection progress window
   AC_DEFINE(HAVE_THREADS, [1], [Define if you have the pthread library.])
fi
AC_SUBST(PTHREAD_LIB)
AC_SUBST(PTHREAD_CXXFLAGS)


#
# Do a check to determine the actual limit of an OSMesa
# window size.  Unfortunately, this must be done using
# the C API and is thus a runtime check.
#
AC_MSG_CHECKING(for OSMesa offscreen window size limit)
AC_LANG_PUSH(C++)
oldcxxflags="$CXXFLAGS"
oldldflags="$LDFLAGS"
oldlibs="$LIBS"
CXXFLAGS="-I$MESA/include"
if test "$UNAME" = "Linux"; then
    LDFLAGS="-L$MESA/lib -Wl,-rpath=$MESA/lib $LDFLAGS"
else
    LDFLAGS="-L$MESA/lib $LDFLAGS"
fi
LIBS="-lOSMesa -lMesaGL $GL_LIBS $X_LIBS $PTHREAD_LIB"
OSMESA_SIZE_LIMIT="4096"
AC_TRY_RUN([
        #include <fstream>
        #include <GL/osmesa.h>
        using namespace std;
        int main()
        {
            int w,h;    
            OSMesaGetIntegerv(OSMESA_MAX_WIDTH, &w);
            OSMesaGetIntegerv(OSMESA_MAX_HEIGHT, &h);
            ofstream out("junk.txt");
            out << ((w < h) ? w : h) << endl;
            out.close();
            return 0;
        }
        ]
        ,
        OSMESA_SIZE_LIMIT=`cat junk.txt`
        AC_MSG_RESULT($OSMESA_SIZE_LIMIT)
        ,
        AC_MSG_RESULT(Test failed... assuming $OSMESA_SIZE_LIMIT)
        ,
        AC_MSG_RESULT(Cross-compiling... assuming $OSMESA_SIZE_LIMIT)
)
rm -f junk.txt
AC_DEFINE_UNQUOTED(OSMESA_SIZE_LIMIT, $OSMESA_SIZE_LIMIT,
                   [OSMesa Window Size Limit.])
CXXFLAGS="$oldcxxflags"
LDFLAGS="$oldldflags"
LIBS="$oldlibs"
AC_LANG_POP()


#
# Look for the python include files if scripting is enabled.
#
if test "$enable_scripting" = "yes"; then
    AC_MSG_CHECKING(for Python)
    if test -z "$PYDIR"; then
        AC_MSG_ERROR([PYDIR is not set])
        AC_MSG_RESULT([$PYDIR])
    fi
    if test -z "$PYVERSION"; then
        AC_MSG_ERROR([PYVERSION is not set])
        AC_MSG_RESULT([$PYVERSION])
    fi
    AC_MSG_RESULT([$PYDIR, version $PYVERSION])
    PY_INCLUDEDIR="$""(TOPDIR)/include/python"
    PY_CXXFLAGS="-I$PY_INCLUDEDIR"
    PY_LIB="-l$PYVERSION"
    PY_CLI_LIB="$PY_LIB -lpthread"

    case $UNAME in
        Linux)
            PY_CLI_LIB="$PY_CLI_LIB -lutil"
            ;;
        Darwin)
            PY_CXXFLAGS="-Wno-long-double -I$PY_INCLUDEDIR"
            ;;
    esac
else
    PYDIR=""
    PYVERSION=""
    PY_INCLUDEDIR=""
    PY_CXXFLAGS=""
    PY_LDFLAGS="$PY_LDFLAGS"
    PY_LIB=""
    PY_CLI_LIB=""
fi
AC_SUBST(PYDIR)
AC_SUBST(PYVERSION)
AC_SUBST(PY_INCLUDEDIR)
AC_SUBST(PY_CXXFLAGS)
AC_SUBST(PY_LDFLAGS)
AC_SUBST(PY_LIB)
AC_SUBST(PY_CLI_LIB)

#
# Checks for header files.
#
AC_HEADER_STDC
AC_HEADER_TIME

#
# If we don't have these header files, we can't continue.
#
AC_CHECK_HEADERS(fcntl.h limits.h sys/time.h sys/types.h unistd.h,
                 ,
AC_MSG_ERROR([$0 wasn't able to find a necessary header file
(see above).  Please rectify this and rerun configure.
See the file INSTALL_FAQ in this directory for possible reasons
this might have happened.]
            )
                )

#
# Checks for constants, typedefs, structures, and compiler characteristics.
#
AC_TYPE_UID_T

#
# If tflops_override is 'no' then do the following checks.
#
if test 'no' = $tflops_override; then
    dnl
    dnl Check for library functions.  If we don't have one, we can't continue.
    dnl
    AC_CHECK_FUNCS(select div strerror,
                   ,
                   AC_MSG_ERROR([$0 wasn't able to find a necessary library
                                function (see above).])
                  )
fi


#
# Figure out how to create shared libraries
#
# these defaults are tied to the case statement below and cannot be overriden
SHLIB_POSTPROCESS="mv $""(LIBSHAREDTEMP) $""@"
SHLIB_POSTPROCESS_SER="mv $""(LIBSHAREDTEMPSER) $""@"
SHLIB_POSTPROCESS_PAR="mv $""(LIBSHAREDTEMPPAR) $""@"
EXE_LDFLAGS=${EXE_LDFLAGS-""}
PLUGIN_LDFLAGS=${PLUGIN_LDFLAGS-""}
DATA_EXE_LDFLAGS=${DATA_EXE_LDFLAGS-""}
AC_SUBST(EXE_LDFLAGS)
AC_SUBST(PLUGIN_LDFLAGS)
AC_SUBST(DATA_EXE_LDFLAGS)

case $UNAME in
  FreeBSD)
    # Expecting g++
    if test -z "$SHLIB_CREATEPROG"; then
        SHLIB_CREATEPROG="$""(CXX) -shared -o"
    fi
    ;;

  Irix)
    # Both g++ and CC use this
    if test -z "$SHLIB_CREATEPROG"; then
        SHLIB_CREATEPROG="$""(CXX) -shared -o"
    fi
    ;;

  SunOS)
    # Expecting g++, but -shared doesn't work right now, so we manually pass
    # -G to Sun's linker.  (This may be because g++'s libstdc++ is not a .so.)
    if test -z "$SHLIB_CREATEPROG"; then
        SHLIB_CREATEPROG="$""(CXX) -Wl,-G -o"
    fi
    ;;

  HP-UX)
    # This is how HP's CC works, although it is not well tested.
    if test -z "$SHLIB_CREATEPROG"; then
        SHLIB_CREATEPROG="$""(CXX) -b -o"
    fi
    if test -z "$SHLIB_SOEXT" ; then SHLIB_SOEXT="so"; fi
    if test -z "$SHLIB_LIBEXT"; then SHLIB_LIBEXT="a"; fi
    ;;

  AIX)
    if test "`echo $CXX | cut -c1-3`" = "g++"; then
        # AIX used to be the weird one.  It is mostly normal finally,
        # as long as you use g++.  It should be noted that for AIX to find
        # .so's as libraries, it requires "-Wl,-brtl" in the LDFLAGS.
        # This is handled in the AIX.conf file.
        if test -z "$SHLIB_CREATEPROG"; then
            SHLIB_CREATEPROG="$""(CXX) -Wl,-G -shared -o"
        fi
    else # assume $CXX = xlC
	# -G and -brtl are understood by the linker.
        if test -z "$SHLIB_CREATEPROG"; then
            SHLIB_CREATEPROG="$""(CXX) -G -brtl -o"
        fi

	# Here's the code to use .a's filled with .so's and fully
        # resolving all shared library symbols as we go, a la
        # MacOSX.  If we can get this to work, it could possibly
        # launch faster.

        dnl         if test -z "$SHLIB_CREATEPROG"; then
        dnl             SHLIB_CREATEPROG="$""(CXX) -qmkshrobj -o"
        dnl         fi
        dnl         if test -z "$SHLIB_SOEXT" ; then SHLIB_SOEXT="so"; fi
        dnl         if test -z "$SHLIB_LIBEXT"; then SHLIB_LIBEXT="a"; fi

        dnl         SHLIB_LIBS="$""(LIBS)"
        dnl         SHLIB_SERLIBS="$""(SERLIBS)"
        dnl         SHLIB_PARLIBS="$""(PARLIBS)"

        dnl         SHLIB_ILIBS="$""(ILIBS)"
        dnl         SHLIB_GLIBS="$""(GLIBS)"
        dnl         SHLIB_SLIBS="$""(SLIBS)"
        dnl         SHLIB_VLIBS="$""(VLIBS)"
        dnl         SHLIB_MLIBS="$""(MLIBS)"
        dnl         SHLIB_ESERLIBS="$""(ESERLIBS)"
        dnl         SHLIB_EPARLIBS="$""(EPARLIBS)"

        dnl         SHLIB_POSTPROCESS="ar rc $""@ $""(LIBSHAREDTEMP)"
        dnl         SHLIB_POSTPROCESS_SER="ar rc $""@ $""(LIBSHAREDTEMPSER)"
        dnl         SHLIB_POSTPROCESS_PAR="ar rc $""@ $""(LIBSHAREDTEMPPAR)"

        dnl         SHLIB_POSTPROCESS_ILIBS="ar rc $""(TOPDIR)/plugins/$""(PLUGINDIR)/libI$""(PLUGINNAME).a $""(IDSO)"
        dnl         SHLIB_POSTPROCESS_GLIBS="ar rc $""(TOPDIR)/plugins/$""(PLUGINDIR)/libG$""(PLUGINNAME).a $""(GDSO)"
        dnl         SHLIB_POSTPROCESS_SLIBS="ar rc $""(TOPDIR)/plugins/$""(PLUGINDIR)/libS$""(PLUGINNAME).a $""(SDSO)"
        dnl         SHLIB_POSTPROCESS_VLIBS="ar rc $""(TOPDIR)/plugins/$""(PLUGINDIR)/libV$""(PLUGINNAME).a $""(VDSO)"
        dnl         SHLIB_POSTPROCESS_MLIBS="ar rc $""(TOPDIR)/plugins/$""(PLUGINDIR)/libM$""(PLUGINNAME).a $""(MDSO)"
        dnl         SHLIB_POSTPROCESS_ESERLIBS="ar rc $""(TOPDIR)/plugins/$""(PLUGINDIR)/libE$""(PLUGINNAME)_ser.a $""(ESERDSO)"
        dnl         SHLIB_POSTPROCESS_EPARLIBS="ar rc $""(TOPDIR)/plugins/$""(PLUGINDIR)/libE$""(PLUGINNAME)_par.a $""(EPARDSO)"
    fi
    ;;

  OSF)
    # Expecting g++, but DEC's linker *still* warns about unresolved symbols
    if test -z "$SHLIB_CREATEPROG"; then
        SHLIB_CREATEPROG="$""(CXX) -Wl,-expect_unresolved -Wl,'*' -shared -o"
    fi
    ;;

  Linux)
    # Expecting g++
    if test -z "$SHLIB_CREATEPROG"; then
        SHLIB_CREATEPROG="$""(CXX) -shared -o"
    fi
    # Set RPATH relative to executable
    EXE_LDFLAGS="$EXE_LDFLAGS -Wl,--rpath,\\\$\$ORIGIN/../lib"
    PLUGIN_LDFLAGS="$PLUGIN_LDFLAGS -Wl,--rpath,\\\$\$ORIGIN/../../lib"
    DATA_EXE_LDFLAGS="$DATA_EXE_LDFLAGS -Wl,--rpath,\\\$\$ORIGIN/../src/lib"
    ;;

  Darwin)
    # Expecting g++
    if test -z "$SHLIB_CREATEPROG"; then
        SHLIB_CREATEPROG="$""(CXX) -dynamiclib -o"
    fi
    if test -z "$SHLIB_SOEXT"; then SHLIB_SOEXT="dylib"; fi
    if test -z "$SHLIB_LIBEXT"; then SHLIB_LIBEXT="dylib"; fi

    # Set SHLIB_TMPDIR so that libraries are created directly in the lib directory.
    SHLIB_TMPDIR="$""(TOPDIR)/lib/"
    # And now we don't need to move them anywhere.
    SHLIB_POSTPROCESS=""
    SHLIB_POSTPROCESS_SER="" 
    SHLIB_POSTPROCESS_PAR="" 
    COMPATIBILITY_VERSION=`sed -e "s/b//" VERSION`

    # Set SHLIB_LIBS so the right libraries are added to the link line but also ensure
    # that the shared library is created with a unique starting address so we can
    # prebind.
    SHLIB_LIBS="$""(LIBS) -Wl,-install_name,@executable_path/../lib/$""(LIB).dylib,-compatibility_version,$COMPATIBILITY_VERSION,-current_version,$COMPATIBILITY_VERSION"
    SHLIB_SERLIBS="$""(SERLIBS) -Wl,-install_name,@executable_path/../lib/$""(LIB)_ser.dylib,-compatibility_version,$COMPATIBILITY_VERSION,-current_version,$COMPATIBILITY_VERSION"
    SHLIB_PARLIBS="$""(PARLIBS) -Wl,-install_name,@executable_path/../lib/$""(LIB)_par.dylib,-compatibility_version,$COMPATIBILITY_VERSION,-current_version,$COMPATIBILITY_VERSION"

    #
    # Targets for creating prebound plugins.
    #
    SHLIB_ILIBS="$""(ILIBS) -Wl,-install_name,@executable_path/../plugins/$""(PLUGINDIR)/libI$""(PLUGINNAME).dylib,-compatibility_version,$COMPATIBILITY_VERSION,-current_version,$COMPATIBILITY_VERSION"
    SHLIB_GLIBS="$""(GLIBS) -Wl,-install_name,@executable_path/../plugins/$""(PLUGINDIR)/libG$""(PLUGINNAME).dylib,-compatibility_version,$COMPATIBILITY_VERSION,-current_version,$COMPATIBILITY_VERSION"
    SHLIB_SLIBS="$""(SLIBS) -Wl,-install_name,@executable_path/../plugins/$""(PLUGINDIR)/libS$""(PLUGINNAME).dylib,-compatibility_version,$COMPATIBILITY_VERSION,-current_version,$COMPATIBILITY_VERSION"
    SHLIB_VLIBS="$""(VLIBS) -Wl,-install_name,@executable_path/../plugins/$""(PLUGINDIR)/libV$""(PLUGINNAME).dylib,-compatibility_version,$COMPATIBILITY_VERSION,-current_version,$COMPATIBILITY_VERSION"
    SHLIB_MLIBS="$""(MLIBS) -Wl,-install_name,@executable_path/../plugins/$""(PLUGINDIR)/libM$""(PLUGINNAME).dylib,-compatibility_version,$COMPATIBILITY_VERSION,-current_version,$COMPATIBILITY_VERSION"
    SHLIB_ESERLIBS="$""(ESERLIBS) -Wl,-install_name,@executable_path/../plugins/$""(PLUGINDIR)/libE$""(PLUGINNAME)_ser.dylib,-compatibility_version,$COMPATIBILITY_VERSION,-current_version,$COMPATIBILITY_VERSION"
    SHLIB_EPARLIBS="$""(EPARLIBS) -Wl,-install_name,@executable_path/../plugins/$""(PLUGINDIR)/libE$""(PLUGINNAME)_par.dylib,-compatibility_version,$COMPATIBILITY_VERSION,-current_version,$COMPATIBILITY_VERSION"

    PREBIND_LIBS="$""(PREBIND_LIBS) $""(GLEW_LIBS) $""(MESA_LIBS) -lvisit_vtk"
    ;;
esac
# these might be overridden in a config-site file and thus must be set last
if test -z "$SHLIB_SOEXT"  ; then SHLIB_SOEXT="so"; fi
if test -z "$SHLIB_LIBEXT" ; then SHLIB_LIBEXT="so"; fi

AC_SUBST(SHLIB_CREATEPROG)
AC_SUBST(SHLIB_LIBS)
AC_SUBST(SHLIB_SERLIBS)
AC_SUBST(SHLIB_PARLIBS)
AC_SUBST(SHLIB_MPI_LIBS)
AC_SUBST(SHLIB_ILIBS)
AC_SUBST(SHLIB_GLIBS)
AC_SUBST(SHLIB_VLIBS)
AC_SUBST(SHLIB_MLIBS)
AC_SUBST(SHLIB_ESERLIBS)
AC_SUBST(SHLIB_EPARLIBS)
AC_SUBST(SHLIB_SLIBS)
AC_SUBST(SHLIB_POSTPROCESS_ILIBS)
AC_SUBST(SHLIB_POSTPROCESS_GLIBS)
AC_SUBST(SHLIB_POSTPROCESS_VLIBS)
AC_SUBST(SHLIB_POSTPROCESS_MLIBS)
AC_SUBST(SHLIB_POSTPROCESS_ESERLIBS)
AC_SUBST(SHLIB_POSTPROCESS_EPARLIBS)
AC_SUBST(SHLIB_POSTPROCESS_SLIBS)
AC_SUBST(SHLIB_SOEXT)
AC_SUBST(SHLIB_LIBEXT)
AC_SUBST(SHLIB_POSTPROCESS)
AC_SUBST(SHLIB_POSTPROCESS_SER)
AC_SUBST(SHLIB_POSTPROCESS_PAR)
AC_SUBST(SHLIB_TMPDIR)
AC_SUBST(PREBIND_LIBS)

AC_DEFINE_UNQUOTED(PLUGIN_EXTENSION, ".${SHLIB_SOEXT}", [Shared library extension])

#
# Now that we know about shared libraries, specify the engine wrapper library.
# This is versioned to ensure compatibility with future changes.
#
if test -d engine; then
    ENGINEWRAPSER="$""(libdir)/libvisitenginev1_ser.${SHLIB_SOEXT}"
    if test -n "$PARALLEL"; then
        ENGINEWRAPPAR="$""(libdir)/libvisitenginev1_par.${SHLIB_SOEXT}"
    fi
fi
AC_SUBST(ENGINEWRAPSER)
AC_SUBST(ENGINEWRAPPAR)

#
# This helps the Makefile in the lib directory make the right links
# to Silo, Mili, HDF4, HDF5, NETCDF, CGNS, GDAL, Exodus, BoxLib, and
# CFITSIO. It is only needed on MacOS X because on other platforms, 
# these libraries are statically linked into the database plugins 
# and on MacOS X they are dynamically linked.
#
CREATE_MILI_LINK=""
CREATE_HDF4_LINK=""
CREATE_NETCDF_LINK=""
CREATE_CGNS_LINK=""
CREATE_GDAL_LINK=""
CREATE_EXODUS_LINK=""
CREATE_BOXLIB2D_LINK=""
CREATE_BOXLIB3D_LINK=""
CREATE_CFITSIO_LINK=""
CREATE_H5PART_LINK=""
CREATE_CCMIO_LINK=""
case $UNAME in
  Darwin)
    if test "$MILI_LIBS" != "" ; then
        CREATE_MILI_LINK="create_mili_link"
    fi
    if test "$HDF4_LIBS" != "" ; then
        CREATE_HDF4_LINK="create_hdf4_link"
    fi
    if test "$NETCDF_LIB" != "" ; then
        CREATE_NETCDF_LINK="create_netcdf_link"
    fi
    if test "$CGNS_LIB" != "" ; then
        CREATE_CGNS_LINK="create_cgns_link"
    fi
    if test "$GDAL_LIB" != "" ; then
        CREATE_GDAL_LINK="create_gdal_link"
    fi
    if test "$EXODUS_LIB" != "" ; then
        CREATE_EXODUS_LINK="create_exodus_link"
    fi
    if test "$BOXLIB2D_LIBS" != "" ; then
        CREATE_BOXLIB2D_LINK="create_boxlib2D_link"
    fi
    if test "$BOXLIB3D_LIBS" != "" ; then
        CREATE_BOXLIB3D_LINK="create_boxlib3D_link"
    fi
    if test "$CFITSIO_LIB" != "" ; then
        CREATE_CFITSIO_LINK="create_cfitsio_link"
    fi
    if test "$H5PART_LIB" != "" ; then
        CREATE_H5PART_LINK="create_h5part_link"
    fi
    if test "$CCMIO_LIBS" != "" ; then
        CREATE_CCMIO_LINK="create_ccmio_link"
    fi
  ;;
esac
AC_SUBST(CREATE_MILI_LINK)
AC_SUBST(CREATE_HDF4_LINK)
AC_SUBST(CREATE_NETCDF_LINK)
AC_SUBST(CREATE_CGNS_LINK)
AC_SUBST(CREATE_GDAL_LINK)
AC_SUBST(CREATE_EXODUS_LINK)
AC_SUBST(CREATE_BOXLIB2D_LINK)
AC_SUBST(CREATE_BOXLIB3D_LINK)
AC_SUBST(CREATE_CFITSIO_LINK)
AC_SUBST(CREATE_H5PART_LINK)
AC_SUBST(CREATE_CCMIO_LINK)
AC_SUBST(VAC_CV_LIBDIR_CREATE_LINKS)
AC_SUBST(VAC_CV_LIBDIR_DESTROY_LINKS)

#
# Check for library functions that can work around, or that we have
# replacements for.
#

AC_MSG_CHECKING(for isfinite)
AC_LANG_PUSH(C++)
AC_TRY_COMPILE([#include <math.h>],
               [float x=1.0;int i = isfinite(x)],
               AC_MSG_RESULT(yes)
               AC_DEFINE(HAVE_ISFINITE, [1], [Define if you have isfinite.]),
               AC_MSG_RESULT(no))
AC_LANG_POP()

AC_CHECK_FUNCS(memmove)
AC_CHECK_FUNCS(setenv)
AC_CHECK_FUNCS(strtof)

#
# Check for prototype for strtof in "stdlib.h", since checking for
# the function is not good enough.
#
AC_MSG_CHECKING(for prototype for strtof)
AC_LANG_PUSH(C++)
AC_TRY_COMPILE([#include <stdlib.h>],
               [char *endptr; float f = strtof("3.5", &endptr)],
               AC_MSG_RESULT(yes)
               AC_DEFINE(HAVE_STRTOF_PROTOTYPE, [1], [Define if you have the prototype for strtof in the <stdlib.h>.]),
               AC_MSG_RESULT(no))
AC_LANG_POP()
               
#
# Checks for typedefs, structures, and compiler characteristics.
#
AC_CHECK_SIZEOF(char,0)
AC_CHECK_SIZEOF(short,0)
AC_CHECK_SIZEOF(int,0)
AC_CHECK_SIZEOF(long,0)
AC_CHECK_SIZEOF(long long,0)
AC_CHECK_SIZEOF(unsigned char,0)
AC_CHECK_SIZEOF(unsigned short,0)
AC_CHECK_SIZEOF(unsigned int,0)
AC_CHECK_SIZEOF(unsigned long,0)
AC_CHECK_SIZEOF(unsigned long long,0)
AC_CHECK_SIZEOF(float,0)
AC_CHECK_SIZEOF(long float,0)
AC_CHECK_SIZEOF(double,0)
AC_CHECK_SIZEOF(long double,0)
AC_CHECK_SIZEOF(void *,0)

AC_CHECK_SIZEOF(boolean,0)

#
# Use size of off64_t to determine which form of stat() calls to make
#
AC_CHECK_SIZEOF(off64_t)

AC_C_BIGENDIAN

dnl
# Makefile stubs.
dnl The `VARIABLES' file goes at the beginning of each Makefile and
dnl defines make variables for things which are the same for every
dnl makefile.  The `TARGETS' file will be appended to the end of
dnl each makefile and defines targets which are the same for all
dnl makefiles.  The targets include a file to handle updating of source
dnl dependencies.  There are currently two flavors: a GNU-make version
dnl that uses a `.depend' file in each directory, and a non-GNU-make
dnl version that tacks dependencies onto the end of each Makefile.
dnl
AC_SUBST_FILE(VARIABLES)
VARIABLES=include/make-variables
AC_SUBST_FILE(TARGETS)
TARGETS=include/make-targets
AC_SUBST_FILE(DIRTARGETS)
DIRTARGETS=include/make-targets-dir
AC_SUBST_FILE(LIBTARGETS)
LIBTARGETS=include/make-targets-lib
AC_SUBST_FILE(PARLIBTARGETS)
PARLIBTARGETS=include/make-targets-parlib
AC_MSG_CHECKING(for GNU Make)
if test "`${MAKE-make} --version -f /dev/null 2>/dev/null|sed -n 1p|cut -c1-8`" = "GNU Make"; then
   AC_MSG_RESULT(yes)
   if test -n "$GCC"; then
      # Darwin's universal build doesn't like the make-depend-gnu
      if test "$UNAME" = "Darwin"; then
         SOURCE_DEPENDENCIES=include/make-depend-std
         MG=""
      else
         SOURCE_DEPENDENCIES=include/make-depend-gnu
         MG="-MG"
      fi
      AC_SUBST(MG)
   elif test -n "$MAKEDEPEND"; then
      SOURCE_DEPENDENCIES=include/make-depend-std
   else
      SOURCE_DEPENDENCIES=/dev/null
   fi
else
   AC_MSG_RESULT(no. Auto dependencies not used. Clean make not used.)
   if test -n "$MAKEDEPEND"; then
      SOURCE_DEPENDENCIES=include/make-depend-std
   else
      SOURCE_DEPENDENCIES=/dev/null
   fi
fi
AC_SUBST_FILE(SOURCE_DEPENDENCIES)

# Temporary directories.
dnl The makefiles build libraries, include files, and executables into
dnl these temporary directories which should exist under the current
dnl directory.  The TOPDIR provides the full path name of the directory
dnl since Makefiles are invoked at various levels in the source tree.
dnl

AC_SUBST(tmpbin)
tmpbin="$""(TOPDIR)/exe"
AC_SUBST(tmpinc)
tmpinc="$""(TOPDIR)/include"
AC_SUBST(tmplib)
tmplib="$""(TOPDIR)/archives"
AC_SUBST(libdir)
libdir="$""(TOPDIR)/lib"
AC_SUBST(plotplugindir)
plotplugindir="$""(TOPDIR)/plugins/plots"
AC_SUBST(operatorplugindir)
operatorplugindir="$""(TOPDIR)/plugins/operators"
AC_SUBST(databaseplugindir)
databaseplugindir="$""(TOPDIR)/plugins/databases"

LDFLAGS="-L$libdir $LDFLAGS"


dnl
# Expand variables.
dnl Each file listed here must have a corresponding `*.in' file which
dnl may contain `@VARIABLE@' variable references.  Such variables will
dnl be expanded when creating the new file.  Some of these have to
dnl be in a particular order!
dnl
STANDARD_FILES="include/make-variables
		include/make-depend-gnu
                include/make-depend-std
		include/make-targets
		include/make-targets-dir
                include/make-targets-lib
		include/make-targets-parlib
                include/Makefile
                lib/Makefile
                bin/Makefile
                Makefile"

if test -n "$METADATA_SERVER"; then
    MDSERVER_FILES="mdserver/Makefile 
                    mdserver/rpc/Makefile
                    mdserver/proxy/Makefile
                    mdserver/main/Makefile"
else
    MDSERVER_FILES=""
fi

if test -n "$GUI" && test "$enable_gui" = "yes" ; then
    GUI_FILES="gui/Makefile"
else
    GUI_FILES=""
fi

if test -n "$HELP"; then
    HELP_FILES="help/Makefile"
else
    HELP_FILES=""
fi

WINUTIL_FILES="winutil/Makefile"

if test -n "$VIEWER"; then
    VIEWER_FILES="viewer/Makefile
                  viewer/rpc/Makefile
                  viewer/proxy/Makefile
                  viewer/main/Makefile"
else
    VIEWER_FILES=""
fi

if test -n "$ENGINE"; then
    ENGINE_FILES="engine/Makefile
                  engine/rpc/Makefile
                  engine/parstate/Makefile
                  engine/proxy/Makefile
                  engine/main/Makefile"
else
    ENGINE_FILES=""
fi

if test -n "$VTKQT"; then
    VTKQT_FILES="vtkqt/Makefile"
else
    VTKQT_FILES=""
fi

COMMON_FILES="common/Makefile
              common/Exceptions/Makefile
              common/comm/Makefile
              common/misc/Makefile
              common/parser/Makefile
              common/expr/Makefile
              common/plugin/Makefile
              common/proxybase/Makefile
              common/state/Makefile
              common/utility/Makefile"

TOOLS_FILES="tools/Makefile
             tools/DataManualExamples/Makefile
             tools/DataManualExamples/CreatingCompatible/Makefile
             tools/DataManualExamples/CreatingCompatibleAdvanced/Makefile
             tools/DataManualExamples/Simulations/Makefile
             tools/annotations/Makefile
             tools/avtprep/Makefile
             tools/clidriver/Makefile
             tools/clipeditor/Makefile
             tools/convert/Makefile
             tools/curv3dprep/Makefile
             tools/embedviewer/Makefile
             tools/escan/Makefile
             tools/imagetools/Makefile
             tools/makemili/Makefile
             tools/mpeg2encode/Makefile
             tools/mpeg_encode/Makefile
             tools/protocol/Makefile
             tools/silex/Makefile
             tools/surfcomp/Makefile
             tools/windowmaker/Makefile 
             tools/writer/Makefile 
             tools/xml/Makefile
             tools/xmledit/Makefile"
VISIT_VTK_FILES="visit_vtk/Makefile
                 visit_vtk/lightweight/Makefile
                 visit_vtk/full/Makefile
                 visit_vtk/parallel/Makefile"
COMPONENT_FILES="avt/Makefile
                 avt/DBAtts/Makefile
                 avt/DDF/Makefile
                 avt/Database/Makefile
                 avt/Expressions/Makefile
                 avt/FileWriter/Makefile
                 avt/Filters/Makefile
                 avt/IVP/Makefile
                 avt/Math/Makefile
                 avt/MIR/Makefile
                 avt/Pipeline/Makefile
                 avt/Plotter/Makefile
                 avt/Preprocessor/Makefile
                 avt/Queries/Makefile
                 avt/Shapelets/Makefile
                 avt/View/Makefile
                 avt/VisWindow/Makefile
                 avt/QtVisWindow/Makefile"
PLOT_FILES="plots/Makefile"
OPERATOR_FILES="operators/Makefile"
DATABASE_FILES="databases/Makefile"

DATA_FILES=""
if test -f ../data/Makefile.in ; then
   DATA_FILES="../data/Makefile"
   DATA_REL_VISIT_PATH="../src"
   AC_SUBST(DATA_REL_VISIT_PATH)
fi
if test -f data/Makefile.in ; then
   DATA_FILES="data/Makefile"
   DATA_REL_VISIT_PATH=".."
   AC_SUBST(DATA_REL_VISIT_PATH)
fi

SIMULATION_PROTOTYPE_FILES="sim/Makefile
                            sim/examples/Makefile
                            sim/lib/Makefile"
CQSCORE_FILES="cqscore/Makefile"
THIRD_PARTY_BUILTIN_FILES="third_party_builtin/Makefile
                           third_party_builtin/zlib/Makefile
                           third_party_builtin/glew/Makefile
                           third_party_builtin/bilib/Makefile
                           third_party_builtin/mesa_stub/Makefile
                           third_party_builtin/slivr/Makefile
                           third_party_builtin/slivr/slivr/Makefile
                           third_party_builtin/slivr/teem/Makefile
                           third_party_builtin/bow/Makefile
                           third_party_builtin/cognomen/Makefile"

if test "$enable_scripting" = "yes"; then
    VISITPY_FILES="visitpy/Makefile
                   visitpy/visitpy/Makefile
                   visitpy/cli/Makefile
                   visitpy/visitmodule/Makefile"
else
    VISITPY_FILES=""
fi

if test -n "$JAVA_TARGET"; then
    JAVA_FILES="java/Makefile"
else
    JAVA_FILES=""
fi

LAUNCHER_FILES="launcher/Makefile
                launcher/rpc/Makefile
                launcher/proxy/Makefile
                launcher/main/Makefile"

AC_OUTPUT($STANDARD_FILES
          $GUI_FILES
          $HELP_FILES
          $WINUTIL_FILES
          $VIEWER_FILES
          $ENGINE_FILES
          $MDSERVER_FILES
          $LAUNCHER_FILES
          $COMMON_FILES
          $TOOLS_FILES
          $VISIT_VTK_FILES
          $VTKQT_FILES
          $COMPONENT_FILES
          $PLOT_FILES
          $OPERATOR_FILES
          $DATABASE_FILES
          $DATA_FILES
          $VISITPY_FILES
          $SIMULATION_PROTOTYPE_FILES
          $CQSCORE_FILES
	  $THIRD_PARTY_BUILTIN_FILES
          $JAVA_FILES,
          echo timestamp > include/stamp-h)

# Darwin's universal build needs to modify config.h
if test "$UNAME" = "Darwin"; then
   if test -n "include/visit-config.h"; then
      echo "" >> include/visit-config.h 
      echo "/* Hooks for Darwin's universal build */" >> include/visit-config.h 
      echo "#if defined (__APPLE__) && defined (__LITTLE_EDIAN__) && defined (WORDS_BIGENDIAN)" >> include/visit-config.h 
      echo "#undef WORDS_BIGENDIAN" >> include/visit-config.h 
      echo "#endif" >> include/visit-config.h 
      echo "#if defined (__APPLE__) && defined (__BIG_EDIAN__) && !defined (WORDS_BIGENDIAN)" >> include/visit-config.h 
      echo "#define WORDS_BIGENDIAN 1" >> include/visit-config.h 
      echo "#endif" >> include/visit-config.h 
   fi
fi
#         
# We want to build the xml2makefile tool and the plugin makefiles
# after config.status has been run
#
(cd include   && ${MAKE-make})
(cd lib       && ${MAKE-make})
(cd bin       && ${MAKE-make})
rm -f $TOPDIR/exe/xml2makefile
(cd tools/xml && ${MAKE-make} $TOPDIR/exe/xml2makefile)

# If we 're on a Darwin system, make bundles for the gui and the viewer.
if test "$UNAME" = "Darwin";  then
    svn_bin/makebundles
fi

(cd plots     && ${MAKE-make} dirmakefiles)
(cd operators && ${MAKE-make} dirmakefiles)
(cd databases && ${MAKE-make} dirmakefiles)
if test -n "$JAVA_TARGET"; then
(cd java      && ${MAKE-make} version)
fi
