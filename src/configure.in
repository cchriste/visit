dnl Process this file with autoconf to produce configure.
dnl 
dnl 
dnl                            Copyright 2000 - 2009
dnl                 The Regents of the University of California.
dnl                             All rights reserved.
dnl 
dnl This work was produced at the University of California, Lawrence Livermore
dnl National Laboratory (UC LLNL)  under contract no.  W-7405-ENG-48 (Contract
dnl 48) between  the U.S. Department of Energy  (DOE)  and The Regents  of the
dnl University  of  California  (University)  for  the  operation of  UC LLNL.
dnl Copyright   is  reserved to  the   University for  purposes  of controlled
dnl dissemination,   commercialization  through  formal licensing,   or  other
dnl disposition under  terms of Contract   48; DOE policies,  regulations  and
dnl orders; and  U.S. statutes.  The    rights of the  Federal Government  are
dnl reserved under Contract 48 subject to  the restrictions agreed upon by DOE
dnl and University.
dnl 
dnl                                 DISCLAIMER
dnl 
dnl This software was prepared as an account of work sponsored by an agency of
dnl the United States Government. Neither the United States Government nor the
dnl University  of California nor any of  their employees, makes any warranty,
dnl express or implied,  or assumes  any liability  or responsiblity  for  the
dnl accuracy, completeness, or    usefullness of any  information,  apparatus,
dnl product, or  process   disclosed, or represents that  its   use would  not
dnl infringe privately    owned  rights. Reference   herein  to  any  specific
dnl commercial  products, process,  or    service by trade   name,  trademark,
dnl manufacturer, or otherwise, does  not necessarily constitute or imply  its
dnl endorsement, recommendation, or  favoring by the United  States Government
dnl or the   University  of  California.  The views   and  opinions of authors
dnl expressed herein do not  necessarily state or  reflect those of the United
dnl States Government  or the University of  California, and shall not be used
dnl for advertising or product endorsement purposes.
dnl
dnl
dnl
dnl Modifications:
dnl    Cyrus Harrison, Thu Dec  3 12:04:23 PST 2009
dnl    Gutted old script for transition to cmake.
dnl    'configure' now calls cmake and handles only a handful of options.
dnl
dnl    Brad Whitlock, Tue Feb 2 10:32:34 PDT 2009
dnl    I added --enable-java for compatibility with build_visit.
dnl
dnl --------------------------------------------------------------------------

dnl --------------------------------------------------------------------------
dnl
dnl VisIt's build system now uses cmake!
dnl This 'configure' script is a simple wrapper that does the following:
dnl   1) locates cmake
dnl   2) translates supported options to cmake defines
dnl   3) invokes cmake
dnl 
dnl Supported command line options:
dnl  --with-cmake=[/path/to/cmake]
dnl  --prefix=[/abs/path/]
dnl  --enable-java
dnl  --enable-parallel
dnl  --enable-slivr
dnl  --enable-tuvok
dnl  --enable-visitmodule
dnl  --enable-buildall
dnl
dnl Supported Environment Variables:
dnl  CFLAGS
dnl  CXXFLAGS
dnl
dnl  Please do not edit this script to expand the avalaible options.
dnl  If you need to set additional options try:
dnl   editing the config-site/`hostname`.cmake file
dnl   invoking cmake with the proper defines
dnl   invoking ccmake
dnl
dnl  Directly invoking cmake is the prefered method to configure VisIt.
dnl
dnl

AC_INIT(configure.in)

AC_MSG_RESULT(-- STARTING VISIT CMAKE WRAPPER --)
AC_MSG_RESULT(** VisIt's configure script is a simple wrapper for cmake.)
AC_MSG_RESULT(** For more control call cmake directly or use ccmake.)

#
# Locate this host's config-site cmake file.
# (the first line of this contains a path hint for cmake binary)
#

AC_MSG_RESULT( -- LOCATING CMAKE --)
HOSTCONF_CMAKE=""
AC_MSG_CHECKING(for config-site for host)
site_conf=config-site/`hostname`.cmake
if test -r $site_conf; then
   AC_MSG_RESULT($site_conf)
   HOSTCONF_CMAKE=`head -1 $site_conf`
   HOSTCONF_CMAKE=${HOSTCONF_CMAKE:1}
else
   AC_MSG_RESULT(warning: could not locate config-site file: $site_conf)
fi

#
# Locate CMake
#

CMAKE=""
AC_ARG_WITH(cmake,
        [  --with-cmake=path to cmake     Location of cmake utility.],
           cmake_specified="yes",
           cmake_specified="no"
           )
if test "$cmake_specified" = "yes"; then
   AC_MSG_CHECKING(for cmake)
   if test "$withval" != "no"; then
      CMAKE="$withval"
   fi
   AC_MSG_RESULT($CMAKE)
else
   AC_MSG_CHECKING(for cmake binary location from config-site )
   if test -f $HOSTCONF_CMAKE; then
       # Get the cmake value from the config-site file.
       CMAKE="$HOSTCONF_CMAKE"
       AC_MSG_RESULT($HOSTCONF_CMAKE)
   else
       if test "$HOSTCONF_CMAKE" != ""; then
            AC_MSG_RESULT(warning: $HOSTCONF_CMAKE is an invalid path!)
       fi
       # No cmake was specified, look for it.
       AC_PATH_PROG([CMAKE], [cmake], "")
   fi
fi


if test "$CMAKE" = ""; then
    AC_ERROR(cmake is required to build VisIt)
fi

AC_MSG_RESULT(-- CONFIGURING --)

#
# Handle supported configure options.
#

#
# Check if --prefix was specified
#

VCONF_PREFIX=""
AC_MSG_CHECKING(for custom install prefix)
if test "x$prefix" != xNONE; then
    AC_MSG_RESULT(--prefix=$prefix)
    VCONF_PREFIX="-DVISIT_INSTALL_PREFIX:PATH=\"$prefix\""
else
    AC_MSG_RESULT(no)
fi


#
# Handle --enable-java
#
AC_MSG_CHECKING(if a Java client interface will be built)
AC_ARG_ENABLE(java,
   [  --enable-java       make the Java client interface],
   EnableJava=$enableval, EnableJava=no)

if test "$EnableJava" = "yes"; then
    AC_MSG_RESULT(yes)
    VCONF_JAVA="-DVISIT_JAVA:BOOL=ON"
else
    AC_MSG_RESULT(no)
    VCONF_JAVA="-DVISIT_JAVA:BOOL=OFF"
fi


#
# Handle --enable-parallel.
#
AC_MSG_CHECKING(if a parallel version of VisIt will be built)
AC_ARG_ENABLE(parallel,
   [  --enable-parallel       make the parallel version],
   EnableParallel=$enableval, EnableParallel=no)

if test "$EnableParallel" = "yes"; then
    AC_MSG_RESULT(yes)
    VCONF_PARALLEL="-DVISIT_PARALLEL:BOOL=ON"
else
    AC_MSG_RESULT(no)
    VCONF_PARALLEL="-DVISIT_PARALLEL:BOOL=OFF"
fi


#
# Handle --enable-slivr
#
AC_MSG_CHECKING(if SLIVR volume rendering will be enabled)
AC_ARG_ENABLE(slivr,
   [  --enable-slivr           build with the SLIVR volume rendering library],
    EnableSLIVR=$enableval, EnableSLIVR=no)

if test "$EnableSLIVR" = "yes"; then
    AC_MSG_RESULT(yes)
    VCONF_SLIVR="-DVISIT_SLIVR:BOOL=ON"
else
    AC_MSG_RESULT(no)
    VCONF_SLIVR="-DVISIT_SLIVR:BOOL=OFF"
fi


#
# Handle --enable-tuvok
#
AC_MSG_CHECKING(if Tuvok volume rendering will be enabled)
AC_ARG_ENABLE(tuvok,
   [  --enable-tuvok           build with the Tuvok volume rendering library],
    EnableTuvok=$enableval, EnableTuvok=no)

if test "$EnableTuvok" = "yes"; then
    AC_MSG_RESULT(yes)
    VCONF_TUVOK="-DVISIT_TUVOK:BOOL=ON"
else
    AC_MSG_RESULT(no)
    VCONF_TUVOK="-DVISIT_TUVOK:BOOL=OFF"
fi


#
# Handle --enable-visitmodule
#
AC_MSG_CHECKING(if the VisIt Python module will be built)
AC_ARG_ENABLE(visitmodule,
              [  --enable-visitmodule    build a VisIt Python module],
               EnablePythonModule=$enableval, EnablePythonModule=no)

if test "$EnablePythonModule" = "yes"; then
    AC_MSG_RESULT(yes)
    VCONF_VMODULE="-DVISIT_PYTHON_MODULE:BOOL=ON"
else
    AC_MSG_RESULT(no)
    VCONF_VMODULE="-DVISIT_PYTHON_MODULE:BOOL=OFF"
fi

#
# Handle --enable-buildall
#
AC_MSG_CHECKING(if all plugins VisIt will be built)
AC_ARG_ENABLE(buildall,
   [  --enable-buildall       build all plugins],
   EnableBuildAll=$enableval, EnableBuildAll=no)

if test "$EnableBuildAll" = "yes"; then
    AC_MSG_RESULT(yes)
    VCONF_BUILDALL="-DVISIT_BUILD_ALL_PLUGINS:BOOL=ON"
else
    AC_MSG_RESULT(no)
fi

#
# Check if --install-thirdparty was specified
#

VCONF_PREFIX=""
AC_MSG_CHECKING(for whether 3rd party includes and libs get installed)
AC_ARG_ENABLE(install-thirdparty,
   [  --enable-install-thirdparty       install 3rd party includes and libs during installation],
   EnableInstall3rdParty=$enableval, EnableInstall3rdParty=no)
if test "$EnableInstall3rdParty" = "yes"; then
    AC_MSG_RESULT(yes)
    VCONF_INSTALL_THIRD_PARTY="-DVISIT_INSTALL_THIRD_PARTY:BOOL=ON"
else
    AC_MSG_RESULT(no)
    VCONF_INSTALL_THIRD_PARTY="-DVISIT_INSTALL_THIRD_PARTY:BOOL=OFF"
fi

#
# Check for C & CXX Flags
#

VCONF_CFLAGS=""
VCONF_CXXFLAGS=""

AC_MSG_CHECKING(for custom CFLAGS)
if test "$CFLAGS" != ""; then
    AC_MSG_RESULT(CFLAGS="$CFLAGS")
    VCONF_CFLAGS="-DVISIT_C_FLAGS:STRING=\"$CFLAGS\""
else
    AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(for custom CXXFLAGS)
if test "$CXXFLAGS" != ""; then
    AC_MSG_RESULT(CXXFLAGS="$CXXFLAGS")
    VCONF_CXXFLAGS="-DVISIT_CXX_FLAGS:STRING=\"$CXXFLAGS\""
else
    AC_MSG_RESULT(no)
fi

#
# Remove old "CMakeCache.txt"
#
AC_MSG_CHECKING(for old CMakeCache.txt)
if test -f CMakeCache.txt; then
    # Get the cmake value from the config-site file.
    rm -f CMakeCache.txt
    AC_MSG_RESULT(removed)
else
    AC_MSG_RESULT(no)
fi

#
# Invoke cmake
#

AC_MSG_RESULT(-- INVOKING CMAKE --)
echo $CMAKE . $VCONF_PREFIX $VCONF_CFLAGS $VCONF_CXXFLAGS \
         $VCONF_JAVA \
         $VCONF_PARALLEL \
         $VCONF_SLIVR \
         $VCONF_TUVOK \
         $VCONF_VMODULE \
         $VCONF_INSTALL_THIRD_PARTY \
         $VCONF_BUILDALL 

$CMAKE . $VCONF_PREFIX $VCONF_CFLAGS $VCONF_CXXFLAGS \
         $VCONF_JAVA \
         $VCONF_PARALLEL \
         $VCONF_SLIVR \
         $VCONF_TUVOK \
         $VCONF_VMODULE \
         $VCONF_INSTALL_THIRD_PARTY \
         $VCONF_BUILDALL 
