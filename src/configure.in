dnl Process this file with autoconf to produce configure.
dnl 
dnl 
dnl Copyright (c) 2000 - 2012, Lawrence Livermore National Security, LLC
dnl Produced at the Lawrence Livermore National Laboratory
dnl LLNL-CODE-442911
dnl All rights reserved.
dnl
dnl This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
dnl full copyright notice is contained in the file COPYRIGHT located at the root
dnl of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
dnl
dnl Redistribution  and  use  in  source  and  binary  forms,  with  or  without
dnl modification, are permitted provided that the following conditions are met:
dnl
dnl  - Redistributions of  source code must  retain the above  copyright notice,
dnl    this list of conditions and the disclaimer below.
dnl  - Redistributions in binary form must reproduce the above copyright notice,
dnl    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
dnl    documentation and/or other materials provided with the distribution.
dnl  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
dnl    be used to endorse or promote products derived from this software without
dnl    specific prior written permission.
dnl
dnl THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
dnl AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
dnl IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
dnl ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
dnl LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
dnl DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
dnl DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
dnl SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
dnl CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
dnl LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
dnl OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
dnl DAMAGE.
dnl
dnl
dnl Modifications:
dnl    Cyrus Harrison, Thu Dec  3 12:04:23 PST 2009
dnl    Gutted old script for transition to cmake.
dnl    'configure' now calls cmake and handles only a handful of options.
dnl
dnl    Brad Whitlock, Tue Feb 2 10:32:34 PDT 2009
dnl    I added --enable-java for compatibility with build_visit.
dnl
dnl    Mark C. Miller, Sun Aug 29 23:24:19 PDT 2010
dnl    Added logic to re-enable dbio-only
dnl
dnl    Eric Brugger, Fri Jan 14 09:45:47 PST 2011
dnl    Moved the "." from before the options to after the options for the
dnl    cmake command. This fix was provided by Dorian Krause.
dnl
dnl --------------------------------------------------------------------------

dnl --------------------------------------------------------------------------
dnl
dnl VisIt's build system now uses cmake!
dnl This 'configure' script is a simple wrapper that does the following:
dnl   1) locates cmake
dnl   2) translates supported options to cmake defines
dnl   3) invokes cmake
dnl 
dnl Supported command line options:
dnl  --with-cmake=[/path/to/cmake]
dnl  --prefix=[/abs/path/]
dnl  --enable-java
dnl  --enable-parallel
dnl  --enable-slivr
dnl  --enable-tuvok
dnl  --enable-visitmodule
dnl  --enable-buildall
dnl
dnl Supported Environment Variables:
dnl  CFLAGS
dnl  CXXFLAGS
dnl
dnl  Please do not edit this script to expand the avalaible options.
dnl  If you need to set additional options try:
dnl   editing the config-site/`hostname`.cmake file
dnl   invoking cmake with the proper defines
dnl   invoking ccmake
dnl
dnl  Directly invoking cmake is the prefered method to configure VisIt.
dnl
dnl

AC_INIT(configure.in)

AC_MSG_RESULT(-- STARTING VISIT CMAKE WRAPPER --)
AC_MSG_RESULT(** VisIt's configure script is a simple wrapper for cmake.)
AC_MSG_RESULT(** For more control call cmake directly or use ccmake.)

#
# Locate this host's config-site cmake file.
# (the first line of this contains a path hint for cmake binary)
#

AC_MSG_RESULT( -- LOCATING CMAKE --)
HOSTCONF_CMAKE=""
AC_MSG_CHECKING(for config-site for host)
site_conf=config-site/`hostname`.cmake
if test -r $site_conf; then
   AC_MSG_RESULT($site_conf)
   HOSTCONF_CMAKE=`head -1 $site_conf`
   HOSTCONF_CMAKE=${HOSTCONF_CMAKE:1}
else
   AC_MSG_RESULT(warning: could not locate config-site file: $site_conf)
fi

#
# Locate CMake
#

CMAKE=""
AC_ARG_WITH(cmake,
        [  --with-cmake=path to cmake     Location of cmake utility.],
           cmake_specified="yes",
           cmake_specified="no"
           )
if test "$cmake_specified" = "yes"; then
   AC_MSG_CHECKING(for cmake)
   if test "$withval" != "no"; then
      CMAKE="$withval"
   fi
   AC_MSG_RESULT($CMAKE)
else
   AC_MSG_CHECKING(for cmake binary location from config-site )
   if test -f $HOSTCONF_CMAKE; then
       # Get the cmake value from the config-site file.
       CMAKE="$HOSTCONF_CMAKE"
       AC_MSG_RESULT($HOSTCONF_CMAKE)
   else
       if test "$HOSTCONF_CMAKE" != ""; then
            AC_MSG_RESULT(warning: $HOSTCONF_CMAKE is an invalid path!)
       fi
       # No cmake was specified, look for it.
       AC_PATH_PROG([CMAKE], [cmake], "")
   fi
fi


if test "$CMAKE" = ""; then
    AC_ERROR(cmake is required to build VisIt)
fi

AC_MSG_RESULT(-- CONFIGURING --)

#
# Handle supported configure options.
#

#
# Check if --prefix was specified
#

VCONF_PREFIX=""
AC_MSG_CHECKING(for custom install prefix)
if test "x$prefix" != xNONE; then
    AC_MSG_RESULT(--prefix=$prefix)
    VCONF_PREFIX="-DVISIT_INSTALL_PREFIX:PATH=\"$prefix\""
else
    AC_MSG_RESULT(no)
fi


#
# Handle --enable-java
#
AC_MSG_CHECKING(if a Java client interface will be built)
AC_ARG_ENABLE(java,
   [  --enable-java       make the Java client interface],
   EnableJava=$enableval, EnableJava=no)

if test "$EnableJava" = "yes"; then
    AC_MSG_RESULT(yes)
    VCONF_JAVA="-DVISIT_JAVA:BOOL=ON"
else
    AC_MSG_RESULT(no)
    VCONF_JAVA="-DVISIT_JAVA:BOOL=OFF"
fi

#
# Handle --enable-dbio-only
#
AC_MSG_CHECKING(if this is a dbio-only build)
AC_ARG_ENABLE(dbio-only,
   [  --enable-dbio-only  build only enough for database i/o],
   EnableDbioOnly=$enableval, EnableDbioOnly=no)

if test "$EnableDbioOnly" = "yes"; then
    AC_MSG_RESULT(yes)
    VCONF_DBIO_ONLY="-DVISIT_DBIO_ONLY:BOOL=ON"
else
    AC_MSG_RESULT(no)
    VCONF_DBIO_ONLY="-DVISIT_DBIO_ONLY:BOOL=OFF"
fi


#
# Handle --enable-parallel.
#
AC_MSG_CHECKING(if a parallel version of VisIt will be built)
AC_ARG_ENABLE(parallel,
   [  --enable-parallel       make the parallel version],
   EnableParallel=$enableval, EnableParallel=no)

if test "$EnableParallel" = "yes"; then
    AC_MSG_RESULT(yes)
    VCONF_PARALLEL="-DVISIT_PARALLEL:BOOL=ON"
else
    AC_MSG_RESULT(no)
    VCONF_PARALLEL="-DVISIT_PARALLEL:BOOL=OFF"
fi


#
# Handle --enable-slivr
#
AC_MSG_CHECKING(if SLIVR volume rendering will be enabled)
AC_ARG_ENABLE(slivr,
   [  --enable-slivr           build with the SLIVR volume rendering library],
    EnableSLIVR=$enableval, EnableSLIVR=no)

if test "$EnableSLIVR" = "yes"; then
    AC_MSG_RESULT(yes)
    VCONF_SLIVR="-DVISIT_SLIVR:BOOL=ON"
else
    AC_MSG_RESULT(no)
    VCONF_SLIVR="-DVISIT_SLIVR:BOOL=OFF"
fi


#
# Handle --enable-tuvok
#
AC_MSG_CHECKING(if Tuvok volume rendering will be enabled)
AC_ARG_ENABLE(tuvok,
   [  --enable-tuvok           build with the Tuvok volume rendering library],
    EnableTuvok=$enableval, EnableTuvok=no)

if test "$EnableTuvok" = "yes"; then
    AC_MSG_RESULT(yes)
    VCONF_TUVOK="-DVISIT_TUVOK:BOOL=ON"
else
    AC_MSG_RESULT(no)
    VCONF_TUVOK="-DVISIT_TUVOK:BOOL=OFF"
fi


#
# Handle --enable-visitmodule
#
AC_MSG_CHECKING(if the VisIt Python module will be built)
AC_ARG_ENABLE(visitmodule,
              [  --enable-visitmodule    build a VisIt Python module],
               EnablePythonModule=$enableval, EnablePythonModule=no)

if test "$EnablePythonModule" = "yes"; then
    AC_MSG_RESULT(yes)
    VCONF_VMODULE="-DVISIT_PYTHON_MODULE:BOOL=ON"
else
    AC_MSG_RESULT(no)
    VCONF_VMODULE="-DVISIT_PYTHON_MODULE:BOOL=OFF"
fi

#
# Handle --enable-buildall
#
AC_MSG_CHECKING(if all plugins VisIt will be built)
AC_ARG_ENABLE(buildall,
   [  --enable-buildall       build all plugins],
   EnableBuildAll=$enableval, EnableBuildAll=no)

if test "$EnableBuildAll" = "yes"; then
    AC_MSG_RESULT(yes)
    VCONF_BUILDALL="-DVISIT_BUILD_ALL_PLUGINS:BOOL=ON"
else
    AC_MSG_RESULT(no)
fi

#
# Check if --install-thirdparty was specified
#

VCONF_PREFIX=""
AC_MSG_CHECKING(for whether 3rd party includes and libs get installed)
AC_ARG_ENABLE(install-thirdparty,
   [  --enable-install-thirdparty       install 3rd party includes and libs during installation],
   EnableInstall3rdParty=$enableval, EnableInstall3rdParty=no)
if test "$EnableInstall3rdParty" = "yes"; then
    AC_MSG_RESULT(yes)
    VCONF_INSTALL_THIRD_PARTY="-DVISIT_INSTALL_THIRD_PARTY:BOOL=ON"
else
    AC_MSG_RESULT(no)
    VCONF_INSTALL_THIRD_PARTY="-DVISIT_INSTALL_THIRD_PARTY:BOOL=OFF"
fi

#
# Check for C & CXX Flags
#

VCONF_CFLAGS=""
VCONF_CXXFLAGS=""

AC_MSG_CHECKING(for custom CFLAGS)
if test "$CFLAGS" != ""; then
    AC_MSG_RESULT(CFLAGS="$CFLAGS")
    VCONF_CFLAGS="-DVISIT_C_FLAGS:STRING=$CFLAGS"
else
    AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(for custom CXXFLAGS)
if test "$CXXFLAGS" != ""; then
    AC_MSG_RESULT(CXXFLAGS="$CXXFLAGS")
    VCONF_CXXFLAGS="-DVISIT_CXX_FLAGS:STRING=$CXXFLAGS"
else
    AC_MSG_RESULT(no)
fi

#
# Remove old "CMakeCache.txt"
#
AC_MSG_CHECKING(for old CMakeCache.txt)
if test -f CMakeCache.txt; then
    # Get the cmake value from the config-site file.
    rm -f CMakeCache.txt
    AC_MSG_RESULT(removed)
else
    AC_MSG_RESULT(no)
fi

#
# Invoke cmake
#

AC_MSG_RESULT(-- INVOKING CMAKE --)
set -x
$CMAKE   $VCONF_PREFIX \
         "$VCONF_CFLAGS" \
         "$VCONF_CXXFLAGS" \
         $VCONF_JAVA \
         $VCONF_PARALLEL \
         $VCONF_SLIVR \
         $VCONF_TUVOK \
         $VCONF_DBIO_ONLY \
         $VCONF_VMODULE \
         $VCONF_INSTALL_THIRD_PARTY \
         $VCONF_BUILDALL .
set +x
