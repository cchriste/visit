/*****************************************************************************
*
* Copyright (c) 2000 - 2007, The Regents of the University of California
* Produced at the Lawrence Livermore National Laboratory
* All rights reserved.
*
* This file is part of VisIt. For details, see http://www.llnl.gov/visit/. The
* full copyright notice is contained in the file COPYRIGHT located at the root
* of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
*
* Redistribution  and  use  in  source  and  binary  forms,  with  or  without
* modification, are permitted provided that the following conditions are met:
*
*  - Redistributions of  source code must  retain the above  copyright notice,
*    this list of conditions and the disclaimer below.
*  - Redistributions in binary form must reproduce the above copyright notice,
*    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
*    documentation and/or materials provided with the distribution.
*  - Neither the name of the UC/LLNL nor  the names of its contributors may be
*    used to  endorse or  promote products derived from  this software without
*    specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
* ARE  DISCLAIMED.  IN  NO  EVENT  SHALL  THE  REGENTS  OF  THE  UNIVERSITY OF
* CALIFORNIA, THE U.S.  DEPARTMENT  OF  ENERGY OR CONTRIBUTORS BE  LIABLE  FOR
* ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
* SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
* CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
* LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
* OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
* DAMAGE.
*
*****************************************************************************/

#ifndef AVTSPECIESMETADATA_H
#define AVTSPECIESMETADATA_H
#include <dbatts_exports.h>
#include <string>
#include <AttributeSubject.h>
class avtMatSpeciesMetaData;

// ****************************************************************************
// Class: avtSpeciesMetaData
//
// Purpose:
//    Contains species metadata attributes
//
// Notes:      Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Fri Mar 9 16:13:19 PST 2007
//
// Modifications:
//   
// ****************************************************************************

class DBATTS_API avtSpeciesMetaData : public AttributeSubject
{
public:
    avtSpeciesMetaData();
    avtSpeciesMetaData(const avtSpeciesMetaData &obj);
    virtual ~avtSpeciesMetaData();

    virtual avtSpeciesMetaData& operator = (const avtSpeciesMetaData &obj);
    virtual bool operator == (const avtSpeciesMetaData &obj) const;
    virtual bool operator != (const avtSpeciesMetaData &obj) const;

    virtual const std::string TypeName() const;
    virtual bool CopyAttributes(const AttributeGroup *);
    virtual AttributeSubject *CreateCompatible(const std::string &) const;
    virtual AttributeSubject *NewInstance(bool) const;

    // Property selection methods
    virtual void SelectAll();
    void SelectSpecies();

    // Property setting methods

    // Property getting methods
    const AttributeGroupVector &GetSpecies() const;
          AttributeGroupVector &GetSpecies();


    // Attributegroup convenience methods
    void AddSpecies(const avtMatSpeciesMetaData &);
    void ClearSpecies();
    void RemoveSpecies(int i);
    int  GetNumSpecies() const;
    avtMatSpeciesMetaData &GetSpecies(int i);
    const avtMatSpeciesMetaData &GetSpecies(int i) const;

    avtMatSpeciesMetaData &operator [] (int i);
    const avtMatSpeciesMetaData &operator [] (int i) const;

    // User-defined methods
    avtSpeciesMetaData::avtSpeciesMetaData(const std::string &n, const std::string &meshn, const std::string &matn, int nummat, const intVector &ns, const std::vector<stringVector> &sn);
    void Print(ostream &, int = 0) const;
protected:
    AttributeGroup *CreateSubAttributeGroup(int index);
public:
    std::string          name;
    std::string          originalName;
    bool                 validVariable;
    std::string          meshName;
    std::string          materialName;
    int                  numMaterials;
private:
    AttributeGroupVector species;

    // Static class format string for type map.
    static const char *TypeMapFormatString;
};

#endif
