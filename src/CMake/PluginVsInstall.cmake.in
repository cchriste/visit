#*****************************************************************************
#
# Copyright (c) 2000 - 2014, Lawrence Livermore National Security, LLC
# Produced at the Lawrence Livermore National Laboratory
# LLNL-CODE-442911
# All rights reserved.
#
# This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
# full copyright notice is contained in the file COPYRIGHT located at the root
# of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
#
# Redistribution  and  use  in  source  and  binary  forms,  with  or  without
# modification, are permitted provided that the following conditions are met:
#
#  - Redistributions of  source code must  retain the above  copyright notice,
#    this list of conditions and the disclaimer below.
#  - Redistributions in binary form must reproduce the above copyright notice,
#    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
#    documentation and/or other materials provided with the distribution.
#  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
#    be used to endorse or promote products derived from this software without
#    specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
# ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
# LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
# DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
# SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
# CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
# LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
# OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.
#
# Modifications:
#   David M. Camp, Th Jan 14 11:50:00 PST 2010
#   Added new function ADD_TARGET_DEFINITIONS to add defines to targets.
#   This was needed for the plots to define ENGINE only for the engine build.
#
#   Brad Whitlock, Thu May 27 09:30:00 PDT 2010
#   Wrap setting the compiler in an if-exists test.
#
#   Mark C. Miller, Thu Jul 29 17:37:32 PDT 2010
#   Added block for compiler version comments.
#
#   Brad Whitlock, Tue Aug 17 09:17:19 PDT 2010
#   I added NETCDF_CXX_LIB.
#
#   Brad Whitlock, Wed Oct 27 14:12:19 PDT 2010
#   Make sure that TESSELLATION_LIBRARY gets saved.
#
#   Kathleen Bonnell, Thu Dec 2 15:45:44 MST 2010
#   Allow plugin installs on Windows. 
#   Added BOOST_INCLUDE_DIR, TESSELLATION_LIBRARY. 
#   Expand SLIVR_INCLUDE_DIR.  
#   Add defintions for HAVE_LIBGLEW, HAVE_LIBSLIVR (if VISIT_SLIVR).  
#   Only set TUVOK_LIB if VISIT_TUVOK is ON.  
#   Add preprocessor definitions for Windows.
#   Add VISIT_PYTHON_SCRIPTING.
#
#   Brad Whitlock, Thu Jun 23 17:03:35 PDT 2011
#   Fix python library extension for Mac.
#
#   Kathleen Biagas, Thu Jun 21 11:12:57 MST 2012
#   Include paths for vtk, exodusii, python and lib names for ptyhon are 
#   different on windows than unix, so use special vars set in root 
#   CMakeLists.txt file.  Fix boxlib include and lib var names.
#   Added fix for automatic debug flags setting on windows, to allow proper
#   linking with our default release-version third-party libraries.
#   Added 'ADD_TARGET_INCLUDE' function, change how parallel flags are 
#   handled on windows. Fix glitch with ADD_TARGET_DEFINITIONS when target
#   had more than one definition set already.
#
#   Kathleen Biagas, Tue Oct 29 12:24:32 MST 2013
#   Fixed typos in Functions that prevented caused problems on Windows.
#
#****************************************************************************/

##
## This file gets generated by VisIt's top-level CMakeLists.txt and gets 
## installed along with VisIt so 3rd party plugins can be developed against an 
## installed version of VisIt.
##

# Build shared libraries since we're building plugins.
SET(BUILD_SHARED_LIBS 1)

# Warn if compilers might be incompatible.
IF(EXISTS @CMAKE_C_COMPILER@ AND
   NOT ${CMAKE_C_COMPILER} STREQUAL @CMAKE_C_COMPILER@)
  MESSAGE(WARNING "C compiler used for VisIt differs from the one used for
                   the current project!  They may incompatible.")
ENDIF(EXISTS @CMAKE_C_COMPILER@ AND
      NOT ${CMAKE_C_COMPILER} STREQUAL @CMAKE_C_COMPILER@)

IF(EXISTS @CMAKE_CXX_COMPILER@ AND
   NOT ${CMAKE_CXX_COMPILER} STREQUAL @CMAKE_CXX_COMPILER@)
  MESSAGE(WARNING "C++ compiler used for VisIt differs from the one used for
                   the current project!  They may incompatible.")
ENDIF(EXISTS @CMAKE_CXX_COMPILER@ AND
      NOT ${CMAKE_CXX_COMPILER} STREQUAL @CMAKE_CXX_COMPILER@)


# The comment below is intended to capture version information
# of the compiler in use at the time CMake was invoked to build
# VisIt. If there is no comment in the intervening lines, then
# compiler version information was not successfully obtained.
# -------------------------------------------------------------
# @CMAKE_C_COMPILER_VERSION_MESSAGE@
# @CMAKE_CXX_COMPILER_VERSION_MESSAGE@
# -------------------------------------------------------------

# Commonly used VisIt include directories
SET(VISIT_COMMON_INCLUDES
    ${VISIT_INCLUDE_DIR}/visit/include
    ${VISIT_INCLUDE_DIR}/visit/common/Exceptions/Database
    ${VISIT_INCLUDE_DIR}/visit/common/Exceptions/Pipeline
    ${VISIT_INCLUDE_DIR}/visit/common/Exceptions/Plotter
    ${VISIT_INCLUDE_DIR}/visit/common/comm
    ${VISIT_INCLUDE_DIR}/visit/common/expr
    ${VISIT_INCLUDE_DIR}/visit/common/icons
    ${VISIT_INCLUDE_DIR}/visit/common/misc
    ${VISIT_INCLUDE_DIR}/visit/common/parser
    ${VISIT_INCLUDE_DIR}/visit/common/plugin
    ${VISIT_INCLUDE_DIR}/visit/common/proxybase
    ${VISIT_INCLUDE_DIR}/visit/common/state
    ${VISIT_INCLUDE_DIR}/visit/common/utility
)

# VisIt options
SET(VISIT_PYTHON_SCRIPTING       @VISIT_PYTHON_SCRIPTING@)
SET(VISIT_SERVER_COMPONENTS_ONLY @VISIT_SERVER_COMPONENTS_ONLY@)
SET(VISIT_ENGINE_ONLY            @VISIT_ENGINE_ONLY@)
SET(VISIT_DBIO_ONLY              @VISIT_DBIO_ONLY@)
SET(VISIT_PARALLEL               @VISIT_PARALLEL@)
SET(VISIT_JAVA                   @VISIT_JAVA@)
SET(VISIT_SLIVR                  @VISIT_SLIVR@)
SET(VISIT_TUVOK                  @VISIT_TUVOK@)

# Set up VTK
SET(VTK_INCLUDE_DIRS ${VISIT_INCLUDE_DIR}@vtk_include_relative_path@)
SET(VTK_LIBRARY_DIRS ${VISIT_LIBRARY_DIR})

# Set up Mesa
SET(MESA_INCLUDE_DIR ${VISIT_INCLUDE_DIR}/mesa/include)
SET(MESA_LIBRARY_DIR ${VISIT_LIBRARY_DIR})

# Set up GLEW
SET(GLEW_INCLUDE_DIR ${VISIT_INCLUDE_DIR}/visit/third_party_builtin/glew/glew/include)
SET(GLEW_LIBRARY_DIR ${VISIT_LIBRARY_DIR})
SET(GLEW_LIB         @GLEW_LIB@)
ADD_DEFINITIONS(-DHAVE_LIBGLEW)

# Set up OpenGL
SET(OPENGL_INCLUDE_DIR  @OPENGL_INCLUDE_DIR@)
SET(OPENGL_gl_LIBRARY   @OPENGL_gl_LIBRARY@)
SET(OPENGL_glu_LIBRARY  @OPENGL_glu_LIBRARY@)

# Set up the tessellation library
SET(TESSELLATION_LIBRARY @TESSELLATION_LIBRARY@)

# Set up BOOST
SET(BOOST_INCLUDE_DIR ${VISIT_INCLUDE_DIR}/visit/third_party_builtin/bilib/boost_1_42_0)

# Set up Qt
SET(QT_INCLUDE_DIR           ${VISIT_INCLUDE_DIR}/qt/include)
SET(QT_QTCORE_INCLUDE_DIR    ${VISIT_INCLUDE_DIR}/qt/include/QtCore)
IF(NOT WIN32)
    SET(QT_QTCORE_LIB        QtCore)
ELSE(NOT WIN32)
    SET(QT_QTCORE_LIB        QtCore4)
ENDIF(NOT WIN32)

SET(QT_QTGUI_INCLUDE_DIR     ${VISIT_INCLUDE_DIR}/qt/include/QtGui)
IF(NOT WIN32)
    SET(QT_QTGUI_LIB         QtGui)
ELSE(NOT WIN32)
    SET(QT_QTGUI_LIB         QtGui4)
ENDIF(NOT WIN32)

SET(QT_QTNETWORK_INCLUDE_DIR ${VISIT_INCLUDE_DIR}/qt/include/QtNetwork)
IF(NOT WIN32)
    SET(QT_QTNETWORK_LIB     QtNetwork)
ELSE(NOT WIN32)
    SET(QT_QTNETWORK_LIB     QtNetwork4)
ENDIF(NOT WIN32)

SET(QT_QTOPENGL_INCLUDE_DIR  ${VISIT_INCLUDE_DIR}/qt/include/QtOpenGL)
IF(NOT WIN32)
    SET(QT_QTOPENGL_LIB      QtOpenGL)
ELSE(NOT WIN32)
    SET(QT_QTOPENGL_LIB      QtOpenGL4)
ENDIF(NOT WIN32)

SET(QT_QTXML_INCLUDE_DIR     ${VISIT_INCLUDE_DIR}/qt/include/QtXml)
IF(NOT WIN32)
    SET(QT_QTXML_LIB         QtXml)
ELSE(NOT WIN32)
    SET(QT_QTXML_LIB         QtXml4)
ENDIF(NOT WIN32)

SET(QT_LIBRARY_DIR           ${VISIT_LIBRARY_DIR})
SET(QT_BIN                   ${VISIT_BINARY_DIR})
SET(QT_MOC_EXECUTABLE        ${VISIT_BINARY_DIR}/moc)

# Set up Python
SET(PYTHON_INCLUDE_PATH    ${VISIT_INCLUDE_DIR}@python_include_relative_path@)
SET(PYTHON_LIBRARY         ${VISIT_LIBRARY_DIR}/@PYLIB@)

# Set up SLIVR
SET(SLIVR_INCLUDE_DIR 
    ${VISIT_INCLUDE_DIR}/visit/third_party_builtin/slivr
    ${VISIT_INCLUDE_DIR}/visit/third_party_builtin/slivr/slivr
    ${VISIT_INCLUDE_DIR}/visit/third_party_builtin/slivr/teem-1.9.0-src/src
    ${VISIT_INCLUDE_DIR}/visit/third_party_builtin/slivr/teem-1.9.0-src/src/teem
)
SET(SLIVR_GUI_IMPL    QvisCMap2Display.C QvisCMap2Widget.C)
SET(SLIVR_GUI_HDR     QvisCMap2Display.h QvisCMap2Widget.h)
SET(SLIVR_LIB         slivrG slivrV)

IF(VISIT_SLIVR)
    ADD_DEFINITIONS(-DHAVE_LIBSLIVR)
ENDIF(VISIT_SLIVR)

# Set up 3rd party I/O libraries
SET(ADIOS_INCLUDE_DIR ${VISIT_INCLUDE_DIR}/adios/include)
SET(ADIOS_LIBRARY_DIR ${VISIT_LIBRARY_DIR} ${VISIT_ARCHIVE_DIR})
SET(ADIOS_LIB @ADIOS_LIB@)

SET(ADVIO_INCLUDE_DIR ${VISIT_INCLUDE_DIR}/advio/include)
SET(ADVIO_LIBRARY_DIR ${VISIT_LIBRARY_DIR} ${VISIT_ARCHIVE_DIR})
SET(ADVIO_LIB @ADVIO_LIB@)

SET(BOXLIB_INCLUDE_DIR ${VISIT_INCLUDE_DIR}/boxlib/include)
SET(BOXLIB_LIBRARY_DIR ${VISIT_LIBRARY_DIR} ${VISIT_ARCHIVE_DIR})
SET(BOXLIB_2D_LIB @BOXLIB_2D_LIB@)
SET(BOXLIB_3D_LIB @BOXLIB_3D_LIB@)

SET(CCMIO_INCLUDE_DIR ${VISIT_INCLUDE_DIR}/ccmio/include)
SET(CCMIO_LIBRARY_DIR ${VISIT_LIBRARY_DIR} ${VISIT_ARCHIVE_DIR})
SET(CCMIO_LIB @CCMIO_LIB@)

SET(CFITSIO_INCLUDE_DIR ${VISIT_INCLUDE_DIR}/cfitsio/include)
SET(CFITSIO_LIBRARY_DIR ${VISIT_LIBRARY_DIR} ${VISIT_ARCHIVE_DIR})
SET(CFITSIO_LIB @CFITSIO_LIB@)

SET(CGNS_INCLUDE_DIR ${VISIT_INCLUDE_DIR}/cgns/include)
SET(CGNS_LIBRARY_DIR ${VISIT_LIBRARY_DIR} ${VISIT_ARCHIVE_DIR})
SET(CGNS_LIB @CGNS_LIB@)

SET(EXODUSII_INCLUDE_DIR ${VISIT_INCLUDE_DIR}/@exodusii_inlcude_relative_path@)
SET(EXODUSII_LIBRARY_DIR ${VISIT_LIBRARY_DIR} ${VISIT_ARCHIVE_DIR})
SET(EXODUSII_LIB @EXODUSII_LIB@)

SET(FASTBIT_INCLUDE_DIR ${VISIT_INCLUDE_DIR}/fastbit/include)
SET(FASTBIT_LIBRARY_DIR ${VISIT_LIBRARY_DIR} ${VISIT_ARCHIVE_DIR})
SET(FASTBIT_LIB @FASTBIT_LIB@)

SET(GDAL_INCLUDE_DIR ${VISIT_INCLUDE_DIR}/gdal/include)
SET(GDAL_LIBRARY_DIR ${VISIT_LIBRARY_DIR} ${VISIT_ARCHIVE_DIR})
SET(GDAL_LIB @GDAL_LIB@)

SET(HDF4_INCLUDE_DIR ${VISIT_INCLUDE_DIR}/hdf4/include)
SET(HDF4_LIBRARY_DIR ${VISIT_LIBRARY_DIR} ${VISIT_ARCHIVE_DIR})
SET(HDF4_LIB @HDF4_LIB@)

SET(HDF5_INCLUDE_DIR ${VISIT_INCLUDE_DIR}/hdf5/include)
SET(HDF5_LIBRARY_DIR ${VISIT_LIBRARY_DIR} ${VISIT_ARCHIVE_DIR})
SET(HDF5_LIB @HDF5_LIB@)

SET(H5PART_INCLUDE_DIR ${VISIT_INCLUDE_DIR}/h5part/include)
SET(H5PART_LIBRARY_DIR ${VISIT_LIBRARY_DIR} ${VISIT_ARCHIVE_DIR})
SET(H5PART_LIB @H5PART_LIB@)

SET(MILI_INCLUDE_DIR ${VISIT_INCLUDE_DIR}/mili/include)
SET(MILI_LIBRARY_DIR ${VISIT_LIBRARY_DIR} ${VISIT_ARCHIVE_DIR})
SET(MILI_LIB @MILI_LIB@)

SET(NETCDF_INCLUDE_DIR ${VISIT_INCLUDE_DIR}/netcdf/include)
SET(NETCDF_LIBRARY_DIR ${VISIT_LIBRARY_DIR} ${VISIT_ARCHIVE_DIR})
SET(NETCDF_LIB @NETCDF_LIB@)
SET(NETCDF_CXX_LIB @NETCDF_CXX_LIB@)

SET(PDB_INCLUDE_DIR ${VISIT_INCLUDE_DIR}/silo/include)
SET(PDB_LIBRARY_DIR ${VISIT_LIBRARY_DIR} ${VISIT_ARCHIVE_DIR})
SET(PDB_LIB @SILO_LIB@)

SET(SILO_INCLUDE_DIR ${VISIT_INCLUDE_DIR}/silo/include)
SET(SILO_LIBRARY_DIR ${VISIT_LIBRARY_DIR} ${VISIT_ARCHIVE_DIR})
SET(SILO_LIB @SILO_LIB@)

SET(XDMF_INCLUDE_DIR  ${VISIT_INCLUDE_DIR}/xdmf/include)
SET(XDMF_LIBRARY_DIR  ${VISIT_LIBRARY_DIR} ${VISIT_ARCHIVE_DIR})
SET(XDMF_LIB @XDMF_LIB@)

# Set up TUVOK
IF(VISIT_TUVOK)
    SET(TUVOK_LIB         tuvok)
ENDIF(VISIT_TUVOK)

# Windows specific defines
IF(WIN32)
  ADD_DEFINITIONS(-D_USE_MATH_DEFINES)
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE)
  ADD_DEFINITIONS(-D_SCL_NO_DEPRECATE -D_SCL_SECURE_NO_DEPRECATE)
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)

  # cmake automatically uses _DEBUG and MDd for Debug flags, but our
  # third-party libs are NOT debug versions, so we won't be able to
  # link against them if those defines are used.  Replace those flags:
  # When we allow users to supply their own third-party libs, then
  # this will have to be rethought -- they may want to be able to c
  # change them and this currently forces.

  MACRO(REPLACE_FLAG OLD_FLAG NEW_FLAG FLAG_TYPE FLAG_STRING)
      STRING(REPLACE "${OLD_FLAG}" "${NEW_FLAG}" TMP "${${FLAG_TYPE}}")
      SET(${FLAG_TYPE} "${TMP}" CACHE STRING "${FLAG_STRING}" FORCE)
  ENDMACRO(REPLACE_FLAG)

  # Remove /_DEBUG From debug builds
  REPLACE_FLAG("/D_DEBUG" "" CMAKE_CXX_FLAGS_DEBUG 
               "Flags used by the compiler during debug builds")
  REPLACE_FLAG("/D_DEBUG" "" CMAKE_C_FLAGS_DEBUG 
               "Flags used by the compiler during debug builds")
  REPLACE_FLAG("/D_DEBUG" "" CMAKE_EXE_LINKER_FLAGS_DEBUG 
               "Flags used by the linker during debug builds")
  REPLACE_FLAG("/D_DEBUG" "" CMAKE_MODULE_LINKER_FLAGS_DEBUG 
               "Flags used by the linker during debug builds")
  # Change /MDd to /MD for debug builds
  REPLACE_FLAG("/MDd" "/MD" CMAKE_CXX_FLAGS_DEBUG 
               "Flags used by the compiler during debug builds")
  REPLACE_FLAG("/MDd" "/MD" CMAKE_C_FLAGS_DEBUG 
               "Flags used by the compiler during debug builds")
  REPLACE_FLAG("/MDd" "/MD" CMAKE_EXE_LINKER_FLAGS_DEBUG 
               "Flags used by the linker during debug builds")
  REPLACE_FLAG("/MDd" "/MD" CMAKE_MODULE_LINKER_FLAGS_DEBUG 
               "Flags used by the linker during debug builds")
ENDIF(WIN32)

# Installation macros
MACRO(VISIT_INSTALL_DATABASE_PLUGINS)
    FOREACH(target ${ARGN})
        SET_TARGET_PROPERTIES(${target} PROPERTIES
           RUNTIME_OUTPUT_DIRECTORY "${VISIT_PLUGIN_DIR}/databases"
           LIBRARY_OUTPUT_DIRECTORY "${VISIT_PLUGIN_DIR}/databases"
        )
    ENDFOREACH(target)
ENDMACRO(VISIT_INSTALL_DATABASE_PLUGINS)

MACRO(VISIT_INSTALL_OPERATOR_PLUGINS)
    FOREACH(target ${ARGN})
        SET_TARGET_PROPERTIES(${target} PROPERTIES
           RUNTIME_OUTPUT_DIRECTORY "${VISIT_PLUGIN_DIR}/operators"
           LIBRARY_OUTPUT_DIRECTORY "${VISIT_PLUGIN_DIR}/operators"
        )
    ENDFOREACH(target)
ENDMACRO(VISIT_INSTALL_OPERATOR_PLUGINS)

MACRO(VISIT_INSTALL_PLOT_PLUGINS)
    FOREACH(target ${ARGN})
        SET_TARGET_PROPERTIES(${target} PROPERTIES
           RUNTIME_OUTPUT_DIRECTORY "${VISIT_PLUGIN_DIR}/plots"
           LIBRARY_OUTPUT_DIRECTORY "${VISIT_PLUGIN_DIR}/plots"
        )
    ENDFOREACH(target)
ENDMACRO(VISIT_INSTALL_PLOT_PLUGINS)

MACRO(VISIT_PLUGIN_TARGET_RTOD type) 
    MESSAGE(STATUS "Skipping VISIT_PLUGIN_TARGET_RTOD macro")
ENDMACRO(VISIT_PLUGIN_TARGET_RTOD)

MACRO(VISIT_PLUGIN_TARGET_FOLDER type pname)
    MESSAGE(STATUS "Skipping VISIT_PLUGIN_TARGET_FOLDER macro")
ENDMACRO(VISIT_PLUGIN_TARGET_FOLDER)

# Parallel settings
SET(VISIT_PARALLEL_CXXFLAGS     @filtered_VISIT_PARALLEL_CXXFLAGS@)
SET(VISIT_PARALLEL_LINKER_FLAGS @filtered_VISIT_PARALLEL_LINKER_FLAGS@)
IF(UNIX)
    SET(VISIT_PARALLEL_LIBS     @filtered_VISIT_PARALLEL_LIBS@)
ELSE(UNIX)
    SET(VISIT_PARALLEL_LIBS     "@filtered_VISIT_PARALLEL_LIBS@")
ENDIF(UNIX)
SET(VISIT_PARALLEL_INCLUDE      "@filtered_VISIT_PARALLEL_INCLUDE@")
SET(VISIT_PARALLEL_DEFS         @filtered_VISIT_PARALLEL_DEFS@)


FUNCTION(ADD_TARGET_INCLUDE target inc)
    # Setting include_directories via set_target_properties overrides
    # the current settings, but we want to append, so first retrieve
    # the current values, then append the desired include.
    GET_TARGET_PROPERTY(currentInc ${target} INCLUDE_DIRECTORIES)
    LIST(APPEND currentInc ${inc})
    SET_TARGET_PROPERTIES(${target} PROPERTIES
                          INCLUDE_DIRECTORIES "${currentInc}")
    UNSET(currentInc)
ENDFUNCTION(ADD_TARGET_INCLUDE)

FUNCTION(ADD_TARGET_DEFINITIONS target newDefs)
    GET_TARGET_PROPERTY(currentDefs ${target} COMPILE_DEFINITIONS)
    # if there truly are current definitions, and more than 1 in the list, then
    # IF(${currentDefs} MATCHES NOTFOUND) causes a configure failure.  
    # Grab the first item in the list for comparison instead.
    if (currentDefs)
        LIST(GET currentDefs 0 firstItem )
        IF(${firstItem} MATCHES NOTFOUND)
            SET(allDefs ${newDefs})
        ELSE(${firstItem} MATCHES NOTFOUND)
            SET(allDefs ${currentDefs} ${newDefs})
        ENDIF(${firstItem} MATCHES NOTFOUND)
    endif()
    SET_TARGET_PROPERTIES(${target} PROPERTIES
        COMPILE_DEFINITIONS "${allDefs}"
    )
ENDFUNCTION(ADD_TARGET_DEFINITIONS)


FUNCTION(ADD_PARALLEL_LIBRARY target)
    ADD_LIBRARY(${target} ${ARGN})
    IF(UNIX)
      IF(VISIT_PARALLEL_CXXFLAGS)
        SET(PAR_COMPILE_FLAGS "")
        FOREACH(X ${VISIT_PARALLEL_CXXFLAGS})
            SET(PAR_COMPILE_FLAGS "${PAR_COMPILE_FLAGS} ${X}")
        ENDFOREACH(X)
        SET_TARGET_PROPERTIES(${target} PROPERTIES
            COMPILE_FLAGS ${PAR_COMPILE_FLAGS}
        )
        IF(VISIT_PARALLEL_LINKER_FLAGS)
            SET(PAR_LINK_FLAGS "")
            FOREACH(X ${VISIT_PARALLEL_LINKER_FLAGS})
                SET(PAR_LINK_FLAGS "${PAR_LINK_FLAGS} ${X}")
            ENDFOREACH(X)
            SET_TARGET_PROPERTIES(${target} PROPERTIES
                LINK_FLAGS ${PAR_LINK_FLAGS}
            )
        ENDIF(VISIT_PARALLEL_LINKER_FLAGS)
      ENDIF(VISIT_PARALLEL_CXXFLAGS)
      TARGET_LINK_LIBRARIES(${target} ${VISIT_PARALLEL_LIBS})
    ELSE(UNIX)
      ADD_TARGET_INCLUDE(${target} ${VISIT_PARALLEL_INCLUDE})
      ADD_TARGET_DEFINITIONS(${target} ${VISIT_PARALLEL_DEFS})
      TARGET_LINK_LIBRARIES(${target} "${VISIT_PARALLEL_LIBS}")
    ENDIF(UNIX)
ENDFUNCTION(ADD_PARALLEL_LIBRARY)


MACRO(VISIT_PLUGIN_TARGET_RTOD type) 
    IF(WIN32)
        SET_TARGET_PROPERTIES(${ARGN} PROPERTIES 
            RUNTIME_OUTPUT_DIRECTORY_RELEASE
                "${VISIT_PLUGIN_DIR}/${type}"
            RUNTIME_OUTPUT_DIRECTORY_DEBUG
                "${VISIT_PLUGIN_DIR}/${type}"
            RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO
                "${VISIT_PLUGIN_DIR}/${type}"
            RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL
                "${VISIT_PLUGIN_DIR}/${type}"
        )
    ENDIF(WIN32)
ENDMACRO(VISIT_PLUGIN_TARGET_RTOD)


