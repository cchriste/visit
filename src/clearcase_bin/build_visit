#!/bin/bash 
# *****************************************************************************
#   Script: build_visit
#
#   Purpose:
#       A script that performs a complete build of VisIt and its support
#       libraries.  The script will detect if support libraries have already
#       been built and, if so, use those pre-built libraries.
#
#   Warning:
#       This script is only expected to work for Linux, and Darwin systems.
#       If you need to build VisIt for another platform, you should consult
#       the BUILD_NOTES that come with the VisIt source.  That document
#       contains instructions on how to build VisIt and its third party
#       libraries.
#
#   This script has been tested and is known to work with the following OS/
#   compiler combinations:
#
#	OS	Hardware	Compiler	Machine
#	-----	--------	--------	-------
#       RHEL3,	x86,		GCC 3.4.6	staples.llnl.gov
#       RHEL3, 	x86,		GCC 3.2.3	hoth.llnl.gov
#       CHAOS, 	x86_64,		GCC 3.4.5	vertex.llnl.gov
#       CHAOS,	ia64, 		GCC 3.4.5	thunder.llnl.gov
#       SuSE,   x86_64,		GCC 4.0.2	antares.lbl.gov
#       SuSE,   x86_64,		GCC 4.1.0	octagon.lbl.gov
#       MacOSX  i386,		GCC 4.0.1	tread.llnl.gov
#       MacOSX  ppc,		GCC 4.0.1	snailbait.llnl.gov
#
#   It is believed that this script will also work with other Linux variations.
#   Please send feedback to visit-help@llnl.gov if you run into problems 
#   so that this script can be improved in the future.  If you have built
#   VisIt using this script on an OS/hardware/compiler combination not listed
#   above, please send a note to visit-help@llnl.gov, so we can add that
#   information to the script.
#
#   Setup:
#       This script assumes you have downloaded the VisIt source code and 
#       the necessary third party libraries and that they are placed in the
#       current directory.  If it does not locate these libraries, it will
#       try to download them.
#       You must have:
#          Qt		qt-x11-free-3.3.8.tar.gz
#                    or qt-mac-free-3.3.8.tar.gz (Mac)
#          Mesa         MesaLib-6.4.2.tar.gz
#          Python	Python-2.5.tgz
#          VTK		vtk-5.0.0c.tar.gz
#          CMake	cmake-2.4.5.tar.gz
#          Silo		silo060605.sh          
#
#        The following optional libraries need to be in the current directory
#        to be built. You must explicitly select which option library to
#        build, either through run string options or the dialog gui. If
#        the tarballs don't exist they will not be built or downloaded
#           Library  Version  Source Tarball Name    Command Option
#           Boxlib   2.5      boxlib.tar.gz          -b
#           CFITSIO  3006     cfitsio3006.tar.gz     -f
#           CGNS     2.4.3    cgnslib_2.4-3.tar.gz   -c
#           ExodusII 4.46     exodusii-4.46.tar.gz   -e
#           GDAL     1.3.2    gdal-1.3.2.tar.gz      -g (no AIX)
#           HDF4     2.4.1    HDF4.2r1.tar.gz        -4
#           HDF5     1.6.5    hdf5-1.6.5.tar.gz      -5
#           Mili     1.09     mili.tar.gz            -m
#           NetCDF   3.6.0    netcdf.tar.gz          -n
#
#   Layout:
#     Section 1:                    setting up inputs/environment variables
#     Function 1, check_files:      ensures input files are available
#     Function 2, check_parallel:   parallel build information
#     Function 2.1, check_variables:edit variable build information
#     Function 3, build_mesa:       build mangled Mesa
#     Function 4, build_qt:         build Qt
#     Function 5, build_cmake:      build CMake (like configure, for VTK)
#     Function 6, build_vtk:        build VTK
#     Function 7, build_python:     build Python
#     Function 8.1, build_hdf5:     build HDF5
#     Function 8.2, build_mili:     build Mili
#     Function 8.3, build_hdf4:     build HDF4
#     Function 8.4, build_netcdf:   build NetCDF
#     Function 8.5, build_cgns:     build CGNS
#     Function 8.6, build_gdal:     build GDAL
#     Function 8.7, build_exodus:   build Exodus
#     Function 8.8, build_boxlib:   build Boxlib
#     Function 8.9, build_cfitsio:  build CFITSIO
#     Function 8, build_silo:       build Silo
#     Function 9, build_hostconf:   build the config-site/host.conf file
#     Function 9.1, build_visit:    build the VisIt source code
#     Section 2:                    oversees build process (calls Functions 1-8)
#
#   Programmer: Hank Childs (with large portions borrowed from BUILD_NOTES,
#                            which is maintained by Eric Brugger)
#   Creation:   October 21, 2006
#
#   Modifications:
#
#     Hank Childs, Mon Oct 30 17:18:24 PST 2006
#     Fixed two bugs: (1) forgot to check return value of function that checks
#     to make sure third party libraries are there.  (2) construction of
#     "visit-arch" string involved undefined variable, which caused problems
#     on some platforms.
#
#     Brad Whitlock, Fri Dec 15 11:51:40 PDT 2006
#     Added support for Python 2.5.
#
#     Hank Childs, Sun Mar  4 11:14:54 PST 2007
#     Add support for parallelization.  Also misc bug fixes.
#
#     Brad Whitlock, Fri Apr 6 14:09:00 PST 2007
#     Added support for downloading missing source files and for graphical
#     progress dialogs and menus for making choices about parallel, etc.
#
#     Thomas R. Treadway, Mon Apr 16 09:01:29 PDT 2007
#     Added Gunther H. Weber changes for MacOS X support.
#     Tuned for building under both i386 and ppc.
#
#     Thomas R. Treadway, Wed Apr 25 13:22:57 PDT 2007
#     Added optional 3rd-party build information
#     New argument options, dialog checklist
#     Reordered logic to better support more architectures
#     Went back to the HDF4.2r1.tar.gz release ffor the Mac.
#
#     Thomas R. Treadway, Mon May  7 16:51:58 PDT 2007
#     More bug fixes, and argument options.
#
#     Thomas R. Treadway, Thu May 17 14:31:47 PDT 2007
#     Support for multiple architectures
#     Support bz2 uncompression
#     Added a variable editing dialog
#
#     Thomas R. Treadway, Wed May 23 17:04:07 PDT 2007
#     Using common libraries everywhere
#     Now using stable Mesa-6.4.2, cmake-2.4.5
#     Changes to support AIX (except for gdal)
#     Added a MAKE variable
#
#     Thomas R. Treadway, Thu May 24 16:26:37 PDT 2007
#     Added an option to disable building VisIt
#     Missing required libraries cause immediate abort
#
#     Thomas R. Treadway, Fri May 25 15:41:42 PDT 2007
#     Added an option to build from svn
#     Added a build_hostconf function to create the host conf file
#
#     Thomas R. Treadway, Thu May 31 16:05:36 PDT 2007
#     Modified Mesa install for 64-bit linux
#     Change Boxlib install path back to the legacy path 
#
# *****************************************************************************


# *************************************************************************** #
#                       Section 1, setting up inputs                          #
# --------------------------------------------------------------------------- #
# This section sets up the inputs to the VisIt script.  This is where you can #
# specify which compiler to use, which versions of the third party libraries, #
# etc.  Note that this script is really only known to work with gcc.          #
# *************************************************************************** #

export OPSYS=${OPSYS-$(uname -s)}
# Determine architecture
if [[ "$OPSYS" == "Darwin" ]]; then
   export ARCH=${ARCH-"Darwin"}
   export SO_EXT="dylib"
   export MACOSX_DEPLOYMENT_TARGET=10.3
   export C_COMPILER=${C_COMPILER-"gcc"}
   export CXX_COMPILER=${CXX_COMPILER-"g++"}
   export C_OPT_FLAGS=${C_OPT_FLAGS-"-O2 -fno-common -fexceptions"}
   export CXX_OPT_FLAGS=${CXX_OPT_FLAGS-"-O2 -fno-common -fexceptions"}
   export MESA_TARGET="darwin"
   export QT_PLATFORM=${QT_PLATFORM-"macx-g++"}
elif [[ "$OPSYS" == "Linux" ]]; then
   export ARCH=${ARCH-"linux"} # You can change this to say RHEL, SuSE, Fedora.
   export SO_EXT="so"
   if [[ "$(uname -m)" == "i686" ]] ; then
      export MESA_TARGET=${MESA_TARGET-"linux-x86"}
   elif [[ "$(uname -m)" == "x86_64" ]] ; then
      C_OPT_FLAGS="$C_OPT_FLAGS -m64 -fPIC"
      CXX_OPT_FLAGS="$CXX_OPT_FLAGS -m64 -fPIC"
      export MESA_TARGET=${MESA_TARGET-"linux-x86-64"}
      QT_PLATFORM="linux-g++-64"
   elif [[ "$(uname -m)" == "ia64" ]] ; then
      C_OPT_FLAGS="$C_OPT_FLAGS -fPIC"
      CXX_OPT_FLAGS="$CXX_OPT_FLAGS -fPIC"
      QT_PLATFORM="linux-g++-64"
   fi
   export C_COMPILER=${C_COMPILER-"gcc"}
   export CXX_COMPILER=${CXX_COMPILER-"g++"}
   export C_OPT_FLAGS=${C_OPT_FLAGS-"-O2"}
   export CXX_OPT_FLAGS=${CXX_OPT_FLAGS-"-O2"}
   export MESA_TARGET=${MESA_TARGET-"linux"}
   export QT_PLATFORM=${QT_PLATFORM-"linux-g++"}
elif [[ "$OPSYS" == "AIX" ]]; then
   export ARCH="aix" # You can change this to say RHEL, SuSE, Fedora, etc.
   export SO_EXT="so"
   export C_COMPILER=${C_COMPILER-"xlc"}
   export CXX_COMPILER=${CXX_COMPILER-"xlC"}
   export C_OPT_FLAGS=${C_OPT_FLAGS-"-O2"}
   export CXX_OPT_FLAGS=${CXX_OPT_FLAGS-"-O2"}
   export MAKE=${MAKE-"gmake"}
   export MESA_TARGET="aix"
   export QT_PLATFORM=${QT_PLATFORM-"aix-xlc"}
elif [[ "$OPSYS" == "IRIX64" ]]; then
   export ARCH="irix64" # You can change this to say RHEL, SuSE, Fedora, etc.
   export SO_EXT="so"
   export C_COMPILER=${C_COMPILER-"gcc"}
   export CXX_COMPILER=${CXX_COMPILER-"g++"}
   export C_OPT_FLAGS=${C_OPT_FLAGS-"-O2"}
   export CXX_OPT_FLAGS=${CXX_OPT_FLAGS-"-O2"}
   export MAKE=${MAKE-"gmake"}
   export MESA_TARGET="irix6-64-dso"
elif [[ "$OPSYS" == "SunOS" ]]; then
   export ARCH=${ARCH-"solaris"}
   export SO_EXT="so"
   export C_COMPILER=${C_COMPILER-"gcc"}
   export CXX_COMPILER=${CXX_COMPILER-"g++"}
   export C_OPT_FLAGS=${C_OPT_FLAGS-"-O2"}
   export CXX_OPT_FLAGS=${CXX_OPT_FLAGS-"-O2"}
   export MAKE=${MAKE-"gmake"}
   export MESA_TARGET="solaris-x86-gcc"
else
   export ARCH=${ARCH-"linux"} # You can change this to say RHEL, SuSE, Fedora.
   export SO_EXT="so"
   if [[ "$(uname -m)" == "x86_64" ]] ; then
      C_OPT_FLAGS="$C_OPT_FLAGS -m64 -fPIC"
      CXX_OPT_FLAGS="$CXX_OPT_FLAGS -m64 -fPIC"
      QT_PLATFORM="linux-g++-64"
   fi
   if [[ "$(uname -m)" == "ia64" ]] ; then
      C_OPT_FLAGS="$C_OPT_FLAGS -fPIC"
      CXX_OPT_FLAGS="$CXX_OPT_FLAGS -fPIC"
      QT_PLATFORM="linux-g++-64"
   fi
   export C_COMPILER=${C_COMPILER-"gcc"}
   export CXX_COMPILER=${CXX_COMPILER-"g++"}
   export C_OPT_FLAGS=${C_OPT_FLAGS-"-O2"}
   export CXX_OPT_FLAGS=${CXX_OPT_FLAGS-"-O2"}
   export QT_PLATFORM=${QT_PLATFORM-"linux-g++"}
fi
export MAKE=${MAKE-"make"}
export THIRD_PARTY_PATH=${THIRD_PARTY_PATH-"./visit"}

#
# OPTIONS
#
export DO_VISIT="yes"   # "yes" or "no"
export DO_SVN="no"
export DO_SILO="yes"
export DO_BOXLIB="no"
export DO_CFITSIO="no"
export DO_CGNS="no"
export DO_EXODUS="no"
export DO_GDAL="no"
export DO_HDF4="no"
export DO_HDF5="no"
export DO_MILI="no"
export DO_NETCDF="no"
export ABS_PATH="no"
parallel="no"          # "yes" or "no"
verify="no"
PAR_INCLUDE=""
PAR_LIBS=""
#PAR_INCLUDE="-I/usr/lib/mpi/gcc/mvapich-gen2/include"
#PAR_LIBS="-L/usr/lib/mpi/gcc/mvapich-gen2/lib -Wl,-rpath=/usr/lib/mpi/gcc/mvapich-gen2/lib/shared -lmpich -libverbs -lpthread -lsysfs -ldl"

#
# TARBALL LOCATIONS AND VERSIONS
#

export VISIT_FILE=${VISIT_FILE-"visit070330.tar.gz"}
export VISIT_VERSION=${VISIT_VERSION-"1.6"}

export VTK_FILE=${VTK_FILE-"vtk-5.0.0c.tar.gz"}
export VTK_VERSION=${VTK_VERSION-"5.0.0c"}

export CMAKE_FILE=${CMAKE_FILE-"cmake-2.4.5.tar.gz"}
export CMAKE_VERSION=${CMAKE_VERSION-"2.4.5"}
export MESA_FILE=${MESA_FILE-"MesaLib-6.4.2.tar.gz"}
export MESA_VERSION=${MESA_VERSION-"6.4.2"}
export MESA_DIR=${MESA_DIR-"Mesa-6.4.2"}  # The directory in the tarball

# The old Python version at LLNL does not work on Mac, we need a newer version
export PYTHON_FILE_SUFFIX="tgz" # This is for the new version. 
export PYTHON_VERSION=${PYTHON_VERSION-"2.5"}
# Need this for the dylib build
export PYTHON_COMPATIBILITY_VERSION=${PYTHON_COMPATIBILITY_VERSION-"2.5"}
export PYTHON_FILE="Python-$PYTHON_VERSION.$PYTHON_FILE_SUFFIX"

if [[ "$OPSYS" == "Darwin" ]] ; then
   export QT_FILE=${QT_FILE-"qt-mac-free-3.3.8.tar.gz"}
   export QT_VERSION=${QT_VERSION-"3.3.8"}
else
   export QT_FILE=${QT_FILE-"qt-x11-free-3.3.8.tar.gz"}
   export QT_VERSION=${QT_VERSION-"3.3.8"}
fi

export SILO_FILE=${SILO_FILE-"silo060605.sh"}
export SILO_VERSION=${SILO_VERSION-"4.5.1"}
export SILO_COMPATIBILITY_VERSION=${SILO_COMPATIBILITY_VERSION-"4.5"}

export HDF5_FILE=${HDF5_FILE-"hdf5-1.6.5.tar.gz"}
export HDF5_VERSION=${HDF5_VERSION-"1.6.5"}
export HDF5_COMPATIBILITY_VERSION=${HDF5_COMPATIBILITY_VERSION-"1.6"}

export HDF4_FILE=${HDF4_FILE-"HDF4.2r1.tar.gz"}
export HDF4_VERSION=${HDF4_VERSION-"4.2.1"}
export HDF4_COMPATIBILITY_VERSION=${HDF4_COMPATIBILITY_VERSION-"4.0"}

export MILI_FILE=${MILI_FILE-"mili.tar.gz"}
export MILI_VERSION=${MILI_VERSION-"1.10.0"}
export MILI_COMPATIBILITY_VERSION=${MILI_COMPATIBILITY_VERSION-"1.0"}

export NETCDF_FILE=${NETCDF_FILE-"netcdf.tar.gz"}
export NETCDF_VERSION=${NETCDF_VERSION-"3.6.0"}
export NETCDF_COMPATIBILITY_VERSION=${NETCDF_COMPATIBILITY_VERSION-"3.6"}

export CGNS_FILE=${CGNS_FILE-"cgnslib_2.4-3.tar.gz"}
export CGNS_VERSION=${CGNS_VERSION-"2.4"}
export CGNS_COMPATIBILITY_VERSION=${CGNS_COMPATIBILITY_VERSION-"2.4"}

export GDAL_FILE=${GDAL_FILE-"gdal-1.3.2.tar.gz"}
export GDAL_VERSION=${GDAL_VERSION-"1.3.2"}
export GDAL_COMPATIBILITY_VERSION=${GDAL_COMPATIBILITY_VERSION-"1.3"}

export EXODUS_FILE=${EXODUS_FILE-"exodusii-4.46.tar.gz"}
export EXODUS_VERSION=${EXODUS_VERSION-"4.46"}
export EXODUS_COMPATIBILITY_VERSION=${EXODUS_COMPATIBILITY_VERSION-"4.0"}

export BOXLIB_FILE=${BOXLIB_FILE-"boxlib.tar.gz"}
export BOXLIB_VERSION=${BOXLIB_VERSION-"2.5"}
export BOXLIB_COMPATIBILITY_VERSION=${BOXLIB_COMPATIBILITY_VERSION-"2.0"}

export CFITSIO_FILE=${CFITSIO_FILE-"cfitsio3006.tar.gz"}
export CFITSIO_VERSION=${CFITSIO_VERSION-"3.006"}
export CFITSIO_COMPATIBILITY_VERSION=${CFITSIO_COMPATIBILITY_VERSION-"3.0"}

# Dialog-related variables.
DLG="dialog"
DLG_BACKTITLE="VisIt $VISIT_VERSION Build Process"
DLG_HEIGHT="5"
DLG_WIDTH="60"
DLG_WIDTH_WIDE="80"
GRAPHICAL="yes"

# *************************************************************************** #
# Function: uncompress_untar
#                                                                             #
# Purpose: Uncompress and untar the file, checking if GNU tar can be used.    #
#                                                                             #
# Programmer: Thomas R. Treadway                                              #
# Date: Tue May 15 16:48:01 PDT 2007                                          #
#                                                                             #
# *************************************************************************** #

function uncompress_untar
{
    # Check if GUN tar
    if [[ $(echo $1 | egrep ".gz$" ) != "" ]] ; then
        COMPRESSTYPE="gzip"
    elif [[ $(echo $1 | egrep ".bz2$" ) != "" ]] ; then
        COMPRESSTYPE="bzip"
    elif [[ $(echo $1 | egrep ".tgz$" ) != "" ]] ; then
        COMPRESSTYPE="targzip"
    else
        echo "unsupported uncompression method"
        return 1
    fi
    TARVERSION=$(tar --version >/dev/null 2>&1)
    if [[ $? == 0 ]] ; then
        case $COMPRESSTYPE in
            gzip|targzip) tar zxf $1;;
            bzip) tar jxf $1;;
        esac
    else
        case $COMPRESSTYPE in
            gzip) 
               gunzip $1
               tar xf ${1%.gz}
               ;;
            targzip) 
               gunzip $1
               tar xf ${1%.tgz}
               ;;
            bzip)
               bunzip2 $1
               tar xf ${1%.bz2}
               ;;
        esac
    fi
}

# *************************************************************************** #
# Function: download_file                                                     #
#                                                                             #
# Purpose: Downloads a file using wget and show a dialog screen.              #
#                                                                             #
# Programmer: Brad Whitlock,                                                  #
# Date: Thu Apr 5 14:38:36 PST 2007                                           #
#                                                                             #
# *************************************************************************** #

function download_file
{
    # Print a dialog screen
    if [[ "$GRAPHICAL" == "yes" ]] ; then
        $DLG --backtitle "$DLG_BACKTITLE" --infobox \
"Downloading $2 . . ." $DLG_HEIGHT $DLG_WIDTH
    else
        echo "Downloading $2 . . ." 
    fi

    # Try and download the file.
    if [[ "$DO_SVN" == "yes" ]] ; then
        svn export \
            svn+ssh://$(whoami)@svn.nersc.gov/svn/visit/trunk/third_party/$2
    else
        if [[ "$1" == "" ]] ; then
            if [[ "$OPSYS" == "Darwin" ]]; then
                # MaxOS X comes with curl
                curl -sfo $2 "http://www.llnl.gov/visit/$2"
            else
                wget -o /dev/null "http://www.llnl.gov/visit/$2" 
            fi
        else
            if [[ "$OPSYS" == "Darwin" ]]; then
                curl -sfo $2 "http://www.llnl.gov/visit/$1/$2"
            else
                wget -o /dev/null "http://www.llnl.gov/visit/$1/$2" 
            fi
        fi
    fi
    if [[ -e $2 ]] ; then
        return 1
    fi
    return 0
}

# *************************************************************************** #
# Function: download_3rdparty                                                 #
#                                                                             #
# Purpose: Downloads a 3rd party file using wget and show a dialog screen.    #
#                                                                             #
# Programmer: Brad Whitlock,                                                  #
# Date: Thu Apr 5 14:38:36 PST 2007                                           #
#                                                                             #
# *************************************************************************** #

function download_3rdparty
{
    download_file "3rd_party" $1
    if [[ $? == 0 ]] ; then
        return 0
    fi
    return 1
}

# *************************************************************************** #
# Function: info_box                                                          #
#                                                                             #
# Purpose: Show an information box with a message.                            #
#                                                                             #
# Programmer: Brad Whitlock,                                                  #
# Date: Thu Apr 5 14:38:36 PST 2007                                           #
#                                                                             #
# *************************************************************************** #

function info_box
{
    if [[ "$GRAPHICAL" == "yes" ]] ; then
        $DLG --backtitle "$DLG_BACKTITLE" --infobox "$1" $DLG_HEIGHT $DLG_WIDTH
    fi
    return 0
}

# *************************************************************************** #
#                         Function 1, check_files                             #
# --------------------------------------------------------------------------- #
# This function will check to make sure that all of the necessary files       #
# actually exist.                                                             #
# *************************************************************************** #

function check_files
{
    rv=0

    # Show a screen
    if [[ "$GRAPHICAL" == "yes" ]] ; then
        $DLG --backtitle "$DLG_BACKTITLE" --infobox \
"Checking for files . . ." $DLG_HEIGHT $DLG_WIDTH
    fi

    #
    # Check for CMake
    #
    HAVE_CMAKE_TARBALL="NO"
    if [[ -e ${CMAKE_FILE%.gz} || -e ${CMAKE_FILE} ]] ; then
        HAVE_CMAKE_TARBALL="YES"
    fi
    
    if [[ "$HAVE_CMAKE_TARBALL" = "NO" ]] ; then
        download_3rdparty ${CMAKE_FILE}
        if [[ $? == 0 ]] ; then
            echo "Unable to build VisIt.  CMAKE is not available."
            return 1
        fi
    fi  

    #
    # VTK
    #
    HAVE_VTK_ALREADY="NO"
    HAVE_VTK_TARBALL="NO"
    if [[ -d "$VISITDIR/vtk/$VTK_VERSION/$VISITARCH" ]] ; then
       HAVE_VTK_ALREADY="YES"
    fi
    if [[ -e ${VTK_FILE%.gz} || -e ${VTK_FILE} ]] ; then
        HAVE_VTK_TARBALL="YES"
    fi
    
    if [[ "$HAVE_VTK_ALREADY" = "NO" && "$HAVE_VTK_TARBALL" = "NO" ]] ; then
        download_3rdparty ${VTK_FILE}
        if [[ $? == 0 ]] ; then
            echo "Unable to build VisIt.  VTK is not available."
            return 1
        fi
    fi
    
    #
    # Mesa
    #
    HAVE_MESA_ALREADY="NO"
    HAVE_MESA_TARBALL="NO"
    if [[ -d "$VISITDIR/mesa/$MESA_VERSION/$VISITARCH" ]] ; then
       HAVE_MESA_ALREADY="YES"
    fi
    if [[ -e ${MESA_FILE%.gz} || -e ${MESA_FILE} ]] ; then
       HAVE_MESA_TARBALL="YES"
    fi
    
    if [[ "$HAVE_MESA_ALREADY" = "NO" && "$HAVE_MESA_TARBALL" = "NO" ]] ; then
        download_3rdparty ${MESA_FILE}
        if [[ $? == 0 ]] ; then
            echo "Unable to build VisIt.  Mesa is not available."
            return 1
        fi
    fi
    
    #
    # Qt
    #
    HAVE_QT_ALREADY="NO"
    HAVE_QT_TARBALL="NO"
    if [[ -d "$VISITDIR/qt/$QT_VERSION/$VISITARCH" ]] ; then
       HAVE_QT_ALREADY="YES"
    fi
    if [[ -e ${QT_FILE%.gz} || -e ${QT_FILE} ]] ; then
       HAVE_QT_TARBALL="YES"
    fi
    if [[ "$HAVE_QT_ALREADY" = "NO" && "$HAVE_QT_TARBALL" = "NO" ]] ; then
        download_3rdparty ${QT_FILE}
        if [[ $? == 0 ]] ; then
            echo "Unable to build VisIt.  Qt is not available."
            return 1
        fi
    fi
    
    #
    # Python
    #
    HAVE_PYTHON_ALREADY="NO"
    HAVE_PYTHON_TARBALL="NO"
    if [[ -d "$VISITDIR/python/$PYTHON_VERSION/$VISITARCH" ]] ; then
       HAVE_PYTHON_ALREADY="YES"
    fi
    if [[ -e ${PYTHON_FILE%$PYTHON_FILE_SUFFIX}tar || \
       -e ${PYTHON_FILE} ]] ; then
       HAVE_PYTHON_TARBALL="YES"
    fi
    
    if [[ "$HAVE_PYTHON_ALREADY" = "NO" && "$HAVE_PYTHON_TARBALL" = "NO" ]]
    then
        download_3rdparty ${PYTHON_FILE}
        if [[ $? == 0 ]] ; then
            echo "Unable to build VisIt.  Python is not available."
            return 1
        fi
    fi
    
    #
    # Silo
    #
    HAVE_SILO_ALREADY="NO"
    HAVE_SILO_TARBALL="NO"
    if [[ -d "$VISITDIR/silo/$SILO_VERSION/$VISITARCH" ]] ; then
       HAVE_SILO_ALREADY="YES"
    fi
    if [[ -e $SILO_FILE ]] ; then
       HAVE_SILO_TARBALL="YES"
    fi

    if [[ "$HAVE_SILO_ALREADY" = "NO" && "$HAVE_SILO_TARBALL" = "NO" ]] ; then
        download_3rdparty $SILO_FILE
        if [[ $? == 0 ]] ; then
            echo "Unable to build VisIt.  Silo is not available."
            return 1
        fi
    fi

    #
    # VisIt source code
    #
    if [[ "$DO_VISIT" == "yes" ]] ; then
        if [[ "$DO_SVN" == "yes" ]] ; then
            if [[ -d src ]] ; then
               echo "VisIt svn src directory found, using it."
#              svn up svn+ssh://$(whoami)@svn.nersc.gov/svn/visit/trunk/src
#              if [[ $? == 0 ]] ; then
#                  echo "Unable to update VisIt.  SVN update failed."
#                  return 1
#              fi
            else
               svn co --quite --non-interactive \
                  svn+ssh://$(whoami)@svn.nersc.gov/svn/visit/trunk/src
#              if [[ $? == 0 ]] ; then
#                  echo "Unable to build VisIt.  SVN download failed."
#                  return 1
#              fi
            fi
        else
            if [[ -e ${VISIT_FILE%.gz} || -e ${VISIT_FILE} ]] ; then
                echo \
"Got VisIt. Lets look for 3rd party libraries."
            else
                download_file "${VISIT_VERSION}" "$VISIT_FILE"
                if [[ $? == 0 ]] ; then
                   echo \
"Unable to build VisIt.  Can't find source code: ${VISIT_FILE}."
                   return 1
                fi
            fi
        fi
    fi

    check_3rdparty
    return 0
}
# *************************************************************************** #
#                         Function 1.1, check_3rdparty                        #
# --------------------------------------------------------------------------- #
# This function will check to make sure that all of the necessary 3rd party   #
# source files actually exist.                                                #
# *************************************************************************** #

function check_3rdparty
{
    #
    # Boxlib
    #
    if [[ "$DO_BOXLIB" == "yes" ]] ; then
        HAVE_BOXLIB_ALREADY="NO"
        HAVE_BOXLIB_TARBALL="NO"
        if [[ -d "$VISITDIR/boxlib/$VISITARCH" ]] ; then
           HAVE_BOXLIB_ALREADY="YES"
        fi
        if [[ -e ${BOXLIB_FILE%.gz} || -e ${BOXLIB_FILE} ]] ; then
           HAVE_BOXLIB_TARBALL="YES"
        fi
        if [[ "$HAVE_BOXLIB_ALREADY" = "NO" && \
              "$HAVE_BOXLIB_TARBALL" = "NO" ]] ; then
            download_3rdparty ${BOXLIB_FILE}
            if [[ $? == 0 ]] ; then
                echo "Unable to build Boxlib.  ${BOXLIB_FILE} not found."
                DO_BOXLIB="no"
            fi
        fi
    fi
    #
    # CFITSIO
    #
    if [[ "$DO_CFITSIO" == "yes" ]] ; then
        HAVE_CFITSIO_ALREADY="NO"
        HAVE_CFITSIO_TARBALL="NO"
        if [[ -d "$VISITDIR/cfitsio/$CFITSIO_VERSION/$VISITARCH" ]] ; then
           HAVE_CFITSIO_ALREADY="YES"
        fi
        if [[ -e ${CFITSIO_FILE%.gz} || -e ${CFITSIO_FILE} ]] ; then
           HAVE_CFITSIO_TARBALL="YES"
        fi
        if [[ "$HAVE_CFITSIO_ALREADY" = "NO" && \
              "$HAVE_CFITSIO_TARBALL" = "NO" ]] ; then
            download_3rdparty ${CFITSIO_FILE}
            if [[ $? == 0 ]] ; then
                echo "Unable to build CFITSIO.  ${CFITSIO_FILE} not found."
                DO_CFITSIO="no"
            fi
        fi
    fi
    #
    # CGNS
    #
    if [[ "$DO_CGNS" == "yes" ]] ; then
        HAVE_CGNS_ALREADY="NO"
        HAVE_CGNS_TARBALL="NO"
        if [[ -d "$VISITDIR/cgns/$CGNS_VERSION/$VISITARCH" ]] ; then
           HAVE_CGNS_ALREADY="YES"
        fi
        if [[ -e ${CGNS_FILE%.gz} || -e ${CGNS_FILE} ]] ; then
           HAVE_CGNS_TARBALL="YES"
        fi
        if [[ "$HAVE_CGNS_ALREADY" = "NO" && \
              "$HAVE_CGNS_TARBALL" = "NO" ]] ; then
            download_3rdparty ${CGNS_FILE}
            if [[ $? == 0 ]] ; then
                echo "Unable to build CGNS.  ${CGNS_FILE} not found."
                DO_CGNS="no"
            fi
        fi
    fi
    #
    # ExodusII
    #
    if [[ "$DO_EXODUS" == "yes" ]] ; then
        HAVE_EXODUS_ALREADY="NO"
        HAVE_EXODUS_TARBALL="NO"
        if [[ -d "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH" ]] ; then
           HAVE_EXODUS_ALREADY="YES"
        fi
        if [[ -e ${EXODUS_FILE%.gz} || -e ${EXODUS_FILE} ]] ; then
           HAVE_EXODUS_TARBALL="YES"
        fi
        if [[ "$HAVE_EXODUS_ALREADY" = "NO" && \
              "$HAVE_EXODUS_TARBALL" = "NO" ]] ; then
            download_3rdparty ${EXODUS_FILE}
            if [[ $? == 0 ]] ; then
                echo "Unable to build ExodusII.  ${EXODUS_FILE} not found."
                DO_EXODUS="no"
            fi
        fi
    fi
    #
    # GDAL
    #
    if [[ "$DO_GDAL" == "yes" ]] ; then
        HAVE_GDAL_ALREADY="NO"
        HAVE_GDAL_TARBALL="NO"
        if [[ -d "$VISITDIR/gdal/$GDAL_VERSION/$VISITARCH" ]] ; then
           HAVE_GDAL_ALREADY="YES"
        fi
        if [[ -e ${GDAL_FILE%.gz} || -e ${GDAL_FILE} ]] ; then
           HAVE_GDAL_TARBALL="YES"
        fi
        if [[ "$HAVE_GDAL_ALREADY" = "NO" && \
              "$HAVE_GDAL_TARBALL" = "NO" ]] ; then
            download_3rdparty ${GDAL_FILE}
            if [[ $? == 0 ]] ; then
                echo "Unable to build GDAL.  ${GDAL_FILE} not found."
                DO_GDAL="no"
            fi
        fi
    fi
    #
    # HDF4
    #
    if [[ "$DO_HDF4" == "yes" ]] ; then
        HAVE_HDF4_ALREADY="NO"
        HAVE_HDF4_TARBALL="NO"
        if [[ -d "$VISITDIR/hdf4/$HDF4_VERSION/$VISITARCH" ]] ; then
           HAVE_HDF4_ALREADY="YES"
        fi
        if [[ -e ${HDF4_FILE%.gz} || -e ${HDF4_FILE} ]] ; then
           HAVE_HDF4_TARBALL="YES"
        fi
        if [[ "$HAVE_HDF4_ALREADY" = "NO" && \
              "$HAVE_HDF4_TARBALL" = "NO" ]] ; then
            download_3rdparty ${HDF4_FILE}
            if [[ $? == 0 ]] ; then
                echo "Unable to build HDF4.  ${HDF4_FILE} not found."
                DO_HDF4="no"
            fi
        fi
    fi
    #
    # HDF5
    #
    if [[ "$DO_HDF5" == "yes" ]] ; then
        HAVE_HDF5_ALREADY="NO"
        HAVE_HDF5_TARBALL="NO"
        if [[ -d "$VISITDIR/hdf5/$HDF5_VERSION/$VISITARCH" ]] ; then
           HAVE_HDF5_ALREADY="YES"
        fi
        if [[ -e ${HDF5_FILE%.gz} || -e ${HDF5_FILE} ]] ; then
           HAVE_HDF5_TARBALL="YES"
        fi
        if [[ "$HAVE_HDF5_ALREADY" = "NO" && \
              "$HAVE_HDF5_TARBALL" = "NO" ]] ; then
            download_3rdparty ${HDF5_FILE}
            if [[ $? == 0 ]] ; then
                echo "Unable to build HDF5.  ${HDF5_FILE} not found."
                DO_HDF5="no"
            fi
        fi
    fi
    #
    # Mili
    #
    if [[ "$DO_MILI" == "yes" ]] ; then
        HAVE_MILI_ALREADY="NO"
        HAVE_MILI_TARBALL="NO"
        if [[ -d "$VISITDIR/mili/$MILI_VERSION/$VISITARCH" ]] ; then
           HAVE_MILI_ALREADY="YES"
        fi
        if [[ -e ${MILI_FILE%.gz} || -e ${MILI_FILE} ]] ; then
           HAVE_MILI_TARBALL="YES"
        fi
        if [[ "$HAVE_MILI_ALREADY" = "NO" && \
              "$HAVE_MILI_TARBALL" = "NO" ]] ; then
            download_3rdparty ${MILI_FILE}
            if [[ $? == 0 ]] ; then
                echo "Unable to build Mili.  ${MILI_FILE} not found."
                DO_MILI="no"
            fi
        fi
    fi
    #
    # NetCDF
    #
    if [[ "$DO_NETCDF" == "yes" ]] ; then
        HAVE_NETCDF_ALREADY="NO"
        HAVE_NETCDF_TARBALL="NO"
        if [[ -d "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH" ]] ; then
           HAVE_NETCDF_ALREADY="YES"
        fi
        if [[ -e ${NETCDF_FILE%.gz} || -e ${NETCDF_FILE} ]] ; then
           HAVE_NETCDF_TARBALL="YES"
        fi
        if [[ "$HAVE_NETCDF_ALREADY" = "NO" && \
              "$HAVE_NETCDF_TARBALL" = "NO" ]] ; then
            download_3rdparty ${NETCDF_FILE}
            if [[ $? == 0 ]] ; then
                echo "Unable to build NetCDF.  ${NETCDF_FILE} not found."
                DO_NETCDF="no"
            fi
        fi
    fi
    #
    return 0
}

# *************************************************************************** #
#                         Function 2, check_parallel                          #
# --------------------------------------------------------------------------- #
# This function will check to make sure that parallel options have been setup #
# if we're going to build a parallel version of VisIt.                        #
# *************************************************************************** #

function check_parallel
{

    #
    # Parallelization
    #
    if [[ "$parallel" == "yes" ]] ; then
        #
        # Check the environment that mpicc would set up as a first stab.
        #
        MPICC_CPPFLAGS=""
        MPICC_LDFLAGS=""
        args=`mpicc -show`
        index=0
        foundL=0
        for arg in $args; do
            if [[ $index == 1 || $index > 1 ]] ; then
                pos=`echo "$arg" | awk '{ printf "%d", index($1,"-L"); }'`
                if [[ "$pos" != "0" ]] ; then
                    foundL=1
                fi

                if [[ $foundL == 1 ]] ; then
                    MPICC_LDFLAGS="$MPICC_LDFLAGS$arg "
                else
                    MPICC_CPPFLAGS="$MPICC_CPPFLAGS$arg "
                fi
            fi
            index=$(($index+1))
        done

        if [[ "$GRAPHICAL" == "yes" ]] ; then
            if [[ "$PAR_INCLUDE" == "" ]] ; then
                PAR_CPPFLAGS=$MPICC_CPPFLAGS
            else
                PAR_CPPFLAGS=$PAR_INCLUDE
            fi
            if [[ "$PAR_LIBS" == "" ]] ; then
                PAR_LDFLAGS=$MPICC_LDFLAGS
            else
                PAR_LDFLAGS=$PAR_LIBS
            fi

            if [[ "$PAR_CPPFLAGS" == "" ]] ; then
                echo \
"We have no guesses as to where MPI might reside. Look for it..."
                if [[ -e /usr/include/mpi.h ]] ; then
                    PAR_CPPFLAGS="-I/usr/include"
                    PAR_LDFLAGS="-L/usr/lib -lmpi"
                fi
            fi

            # We have suggestions from the user or mpicc as to where mpi might
            # be located. See what the user thinks of the options.
            tryagain=1
            while [[ $tryagain == 1 ]]; do
                $DLG --backtitle "$DLG_BACKTITLE" --yesno \
"The CPPFLAGS for MPI are:\n\n$PAR_CPPFLAGS\n\nDo these look right?" \
                15 $DLG_WIDTH
                if [[ $? == 1 ]] ; then
                    tryagain=1
                    PAR_CPPFLAGS=`$DLG --backtitle "$DLG_BACKTITLE" \
                    --no-cancel --inputbox \
"Enter CPPFLAGS needed for MPI:" 0 $DLG_WIDTH_WIDE "$PAR_CPPFLAGS" 2>&1`
                else
                    tryagain=0
                fi
            done

            PAR_INCLUDE=$PAR_CPPFLAGS

            # We have suggestions from the user or mpicc as to where mpi might
            # be located. See what the user thinks of the options.
            tryagain=1
            while [[ $tryagain == 1 ]]; do
                $DLG --backtitle "$DLG_BACKTITLE" --yesno \
"The LDFLAGS for MPI are:\n\n$PAR_LDFLAGS\n\nDo these look right?" 15 $DLG_WIDTH
                if [[ $? == 1 ]] ; then
                    tryagain=1
                    PAR_LDFLAGS=`$DLG --backtitle "$DLG_BACKTITLE" \
                    --no-cancel --inputbox \
"Enter LDFLAGS needed for MPI:" 0 $DLG_WIDTH_WIDE "$PAR_LDFLAGS" 2>&1`
                else
                    tryagain=0
                fi
            done

            PAR_LIBS=$PAR_LDFLAGS
        fi

        # The script pretty much assumes that you *must* have some flags 
        # and libs to do a parallel build.  If that is *not* true, 
        # i.e. mpi.h is in your include path, then, congratulations, 
        # you are working on a better configured system than I have 
        # ever encountered.
        if [[ "$PAR_INCLUDE" == "" ]] ; then
            echo \
"You must set up the PAR_INCLUDE to get VisIt to build in parallel."
            rv=1
        fi
        if [[ "$PAR_LIBS" == "" ]] ; then
            echo \
"You must set up the PAR_LIBS to get VisIt to build in parallel."
            rv=1
        fi
    fi

    if [[ $rv != 0 ]] ; then
       return 1
    fi

    return 0
}

# *************************************************************************** #
#                         Function 2.1, check_variables                       #
# --------------------------------------------------------------------------- #
# This function will display variables and optionally allow changing          #
# *************************************************************************** #

function check_variables
{

    # Override variable settings dialog
    #
    if [[ "$verify" == "yes" ]] ; then
        if [[ "$GRAPHICAL" == "yes" ]] ; then
            $DLG --backtitle "$DLG_BACKTITLE" \
            --title "Variable setting" \
            --checklist \
"These variables use these system dependent defaults, but can be overridden \"
through this interface or using environment varaibles\n\n"\
"OPSYS, is the default value returned from uname -s\n"\
"ARCH, architecure info (Darwin, linux, aix, irix64)\n"\
"C_COMPILER and CXX_COMPILER, are the C and C++ compiler respectively\n"\
"C_OPT_FLAGS and CXX_OPT_FLAGS, are the CFLAGS and CXXFLAGS to use\n"\
"THIRD_PARTY_PATH, is the location for 3rd party libraries\n"\
"VISITARCH, unique architecure info, appended to library path installation\n"\
"Select the variables you wish to modify" 30 $DLG_WIDTH 10 \
           "OPSYS"            "$OPSYS"             "no" \
           "ARCH"             "$ARCH"              "no" \
           "C_COMPILER"       "$C_COMPILER"        "no" \
           "CXX_COMPILER"     "$CXX_COMPILER"      "no" \
           "C_OPT_FLAGS"      "$C_OPT_FLAGS"       "no" \
           "CXX_OPT_FLAGS"    "$CXX_OPT_FLAGS"     "no" \
           "THIRD_PARTY_PATH" "$THIRD_PARTY_PATH"  "no" \
           "VISITARCH"        "$VISITARCH"         "no" 2> tmp$$
           retval=$?

           # Remove the extra quoting, new dialog has --single-quoted
           choice="$(cat tmp$$ | sed 's/"//g' )"
           case $retval in
             0)
               for OPTION in $choice
               do
                   case $OPTION in
                     OPSYS)
                        $DLG --backtitle "$DLG_BACKTITLE" \
                           --no-cancel --inputbox \
"Enter $OPTION value:" 0 $DLG_WIDTH_WIDE "$OPSYS" 2> tmp$$
                        OPSYS="$(cat tmp$$)"
                        ;;
                     ARCH)
                        $DLG --backtitle "$DLG_BACKTITLE" \
                           --no-cancel --inputbox \
"Enter $OPTION value:" 0 $DLG_WIDTH_WIDE "$ARCH" 2> tmp$$
                        ARCH="$(cat tmp$$)"
                        ;;
                     C_COMPILER)
                        $DLG --backtitle "$DLG_BACKTITLE" \
                           --no-cancel --inputbox \
"Enter $OPTION value:" 0 $DLG_WIDTH_WIDE "$C_COMPILER" 2> tmp$$
                        C_COMPILER="$(cat tmp$$)"
                        ;;
                     CXX_COMPILER)
                        $DLG --backtitle "$DLG_BACKTITLE" \
                           --no-cancel --inputbox \
"Enter $OPTION value:" 0 $DLG_WIDTH_WIDE "$CXX_COMPILER" 2> tmp$$
                        CXX_COMPILER="$(cat tmp$$)"
                        ;;
                     C_OPT_FLAGS)
                        $DLG --backtitle "$DLG_BACKTITLE" \
                           --no-cancel --inputbox \
"Enter $OPTION value:" 0 $DLG_WIDTH_WIDE "$C_OPT_FLAGS" 2> tmp$$
                        C_OPT_FLAGS="$(cat tmp$$)"
                        ;;
                     CXX_OPT_FLAGS)
                        $DLG --backtitle "$DLG_BACKTITLE" \
                           --no-cancel --inputbox \
"Enter $OPTION value:" 0 $DLG_WIDTH_WIDE "$CXX_OPT_FLAGS" 2> tmp$$
                        CXX_OPT_FLAGS="$(cat tmp$$)"
                        ;;
                     THIRD_PARTY_PATH)
                        $DLG --backtitle "$DLG_BACKTITLE" \
                           --no-cancel --inputbox \
"Enter $OPTION value:" 0 $DLG_WIDTH_WIDE "$THIRD_PARTY_PATH" 2> tmp$$
                        THIRD_PARTY_PATH="$(cat tmp$$)"
                        ;;
                     VISITARCH)
                        $DLG --backtitle "$DLG_BACKTITLE" \
                           --no-cancel --inputbox \
"Enter $OPTION value:" 0 $DLG_WIDTH_WIDE "$VISITARCH" 2> tmp$$
                        VISITARCH="$(cat tmp$$)"
                        ;;
                   esac
               done
               ;;
             1)
               echo "Cancel pressed."
               ;;
             255)
               echo "ESC pressed.";;
             *)
               echo "Unexpected return code: $retval";;
           esac
       fi
       if [[ -e "tmp$$" ]] ; then
           rm tmp$$
       fi
    fi

    return 0
}

# *************************************************************************** #
#                          Function 3, build_mesa                             #
# *************************************************************************** #

function build_mesa
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -e ${MESA_FILE} ]] ; then
       info_box "Unzipping/untarring ${MESA_FILE} . . ." >&3
       uncompress_untar ${MESA_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar $MESA_FILE  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -e ${MESA_FILE%.*} ]] ; then
       info_box "Untarring ${MESA_FILE%.*} . . ." >&3
       tar xf ${MESA_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${MESA_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi
    
    #
    # Patching mesa.
    #
    info_box "Patching Mesa . . ." >&3
    patch -p0 <<\EOF
diff -c Mesa-6.4.2.orig/configs/default Mesa-6.4.2/configs/default
*** Mesa-6.4.2.orig/configs/default	Wed Feb  1 09:47:36 2006
--- Mesa-6.4.2/configs/default	Wed May 23 16:43:22 2007
***************
*** 16,23 ****
  # Compiler and flags
  CC = cc
  CXX = CC
! CFLAGS = -O
! CXXFLAGS = -O
  GLU_CFLAGS = 
  
  # Misc tools and flags
--- 16,23 ----
  # Compiler and flags
  CC = cc
  CXX = CC
! CFLAGS = -O -DUSE_MGL_NAMESPACE
! CXXFLAGS = -O -DUSE_MGL_NAMESPACE
  GLU_CFLAGS = 
  
  # Misc tools and flags
***************
*** 24,30 ****
  MKLIB_OPTIONS = 
  MKDEP = makedepend
  MKDEP_OPTIONS = -fdepend
! MAKE = make
  
  # Python and flags (generally only needed by the developers)
  PYTHON2 = python
--- 24,30 ----
  MKLIB_OPTIONS = 
  MKDEP = makedepend
  MKDEP_OPTIONS = -fdepend
! #MAKE = make
  
  # Python and flags (generally only needed by the developers)
  PYTHON2 = python
***************
*** 31,37 ****
  PYTHON_FLAGS = -t -O -O
  
  # Library names (base name)
! GL_LIB = GL
  GLU_LIB = GLU
  GLUT_LIB = glut
  GLW_LIB = GLw
--- 31,37 ----
  PYTHON_FLAGS = -t -O -O
  
  # Library names (base name)
! GL_LIB = MesaGL
  GLU_LIB = GLU
  GLUT_LIB = glut
  GLW_LIB = GLw
***************
*** 57,63 ****
  # Directories
  LIB_DIR = $(TOP)/lib
  INSTALL_PREFIX = /usr/local
! SRC_DIRS = mesa glu glut/glx glw
  GLU_DIRS = sgi
  DRIVER_DIRS = x11 osmesa
  # Which subdirs under $(TOP)/progs/ to enter:
--- 57,63 ----
  # Directories
  LIB_DIR = $(TOP)/lib
  INSTALL_PREFIX = /usr/local
! SRC_DIRS = mesa glu
  GLU_DIRS = sgi
  DRIVER_DIRS = x11 osmesa
  # Which subdirs under $(TOP)/progs/ to enter:
***************
*** 65,71 ****
  
  
  # Library/program dependencies
! EXTRA_LIB_PATH ?=
  GL_LIB_DEPS = $(EXTRA_LIB_PATH) -lX11 -lXext -lm -lpthread
  OSMESA_LIB_DEPS = -L$(LIB_DIR) -l$(GL_LIB)
  GLU_LIB_DEPS = -L$(LIB_DIR) -l$(GL_LIB) -lm
--- 65,71 ----
  
  
  # Library/program dependencies
! EXTRA_LIB_PATH =
  GL_LIB_DEPS = $(EXTRA_LIB_PATH) -lX11 -lXext -lm -lpthread
  OSMESA_LIB_DEPS = -L$(LIB_DIR) -l$(GL_LIB)
  GLU_LIB_DEPS = -L$(LIB_DIR) -l$(GL_LIB) -lm
EOF
    if [[ $? != 0 ]] ; then
        echo "Unable to patch Mesa. Wrong version?"
        return 1
    fi
    if [[ "$OPSYS" == "Darwin" ]]; then
        info_box "Patching Mesa for Darwin . . ." >&3
        patch -p0 <<\EOF
diff -p -r Mesa-6.4.2.orig/configs/darwin Mesa-6.4.2/configs/darwin
*** Mesa-6.4.2.orig/configs/darwin	Wed Jun 29 19:34:07 2005
--- Mesa-6.4.2/configs/darwin	Wed May 23 11:31:16 2007
*************** CONFIG_NAME = darwin
*** 7,29 ****
  # Compiler and flags
  CC = cc
  CXX = cc
! CFLAGS = -I/usr/X11R6/include -O3 -fPIC -fno-common -ffast-math -funroll-loops -fexpensive-optimizations -no-cpp-precomp -dynamic -Ddarwin
! CXXFLAGS = -I/usr/X11R6/include -O3 -fPIC -fno-common -ffast-math -funroll-loops -fexpensive-optimizations -no-cpp-precomp -dynamic -Ddarwin
  
  # Library names (actual file names)
! GL_LIB_NAME = libGL.dylib
  GLU_LIB_NAME = libGLU.dylib
  GLUT_LIB_NAME = libglut.dylib
  GLW_LIB_NAME = libGLw.dylib
  OSMESA_LIB_NAME = libOSMesa.dylib
  
! GL_LIB_DEPS = -L/usr/X11R6/lib -lX11 -lXext -lm -lpthread
! OSMESA_LIB_DEPS = -L$(LIB_DIR) -lGL
! GLU_LIB_DEPS = -L$(LIB_DIR) -lGL
! GLUT_LIB_DEPS = -L$(LIB_DIR) -lGL -lGLU -L/usr/X11R6/lib -lX11 -lXmu -lXi -lXext
! GLW_LIB_DEPS = -L/usr/X11R6/lib -lX11 -lXt $(TOP)/lib/GL.dylib
! APP_LIB_DEPS = -L$(TOP)/lib -l$(GLUT_LIB) -l$(GLU_LIB) -l$(GL_LIB) -L/usr/X11R6/lib -lX11 -lXmu -lXt -lXi -lm
  
  # omit glw lib for now:
! SRC_DIRS = mesa glu glut/glx
  
--- 7,31 ----
  # Compiler and flags
  CC = cc
  CXX = cc
! CFLAGS = -O3 -fPIC -fno-common -ffast-math -funroll-loops \
! -fexpensive-optimizations -no-cpp-precomp -dynamic -Ddarwin -DUSE_MGL_NAMESPACE
! CXXFLAGS = -O3 -fPIC -fno-common -ffast-math -funroll-loops \
! -fexpensive-optimizations -no-cpp-precomp -dynamic -Ddarwin -DUSE_MGL_NAMESPACE
  
  # Library names (actual file names)
! GL_LIB_NAME = libMesaGL.dylib
  GLU_LIB_NAME = libGLU.dylib
  GLUT_LIB_NAME = libglut.dylib
  GLW_LIB_NAME = libGLw.dylib
  OSMESA_LIB_NAME = libOSMesa.dylib
  
! GL_LIB_DEPS = -lm -lpthread
! OSMESA_LIB_DEPS = -L$(LIB_DIR) -lMesaGL
! GLU_LIB_DEPS = -L$(LIB_DIR) -lMesaGL
! GLUT_LIB_DEPS = -L$(LIB_DIR) -lMesaGL -lGLU
! GLW_LIB_DEPS = $(TOP)/lib/MesaGL.dylib
! APP_LIB_DEPS = -L$(TOP)/lib -l$(GLUT_LIB) -l$(GLU_LIB) -l$(GL_LIB) -lm
  
  # omit glw lib for now:
! SRC_DIRS = mesa glu
  
diff -p -r Mesa-6.4.2.orig/src/mesa/sources Mesa-6.4.2/src/mesa/sources
*** Mesa-6.4.2.orig/src/mesa/sources	Tue Oct 18 18:02:59 2005
--- Mesa-6.4.2/src/mesa/sources	Wed May 23 11:52:49 2007
*************** SPARC_API =			\
*** 251,266 ****
  COMMON_DRIVER_SOURCES =			\
  	drivers/common/driverfuncs.c
  
! X11_DRIVER_SOURCES =		\
! 	drivers/x11/glxapi.c	\
! 	drivers/x11/fakeglx.c	\
! 	drivers/x11/xfonts.c	\
! 	drivers/x11/xm_api.c	\
! 	drivers/x11/xm_buffer.c	\
! 	drivers/x11/xm_dd.c	\
! 	drivers/x11/xm_line.c	\
! 	drivers/x11/xm_span.c	\
! 	drivers/x11/xm_tri.c
  
  OSMESA_DRIVER_SOURCES = \
  	drivers/osmesa/osmesa.c
--- 251,257 ----
  COMMON_DRIVER_SOURCES =			\
  	drivers/common/driverfuncs.c
  
! X11_DRIVER_SOURCES =
  
  OSMESA_DRIVER_SOURCES = \
  	drivers/osmesa/osmesa.c
EOF
    elif [[ "$OPSYS" == "Linux" ]]; then
        info_box "Patching Mesa for Linux . . ." >&3
        patch -p0 <<\EOF
diff -c Mesa-6.4.2.orig/configs/linux Mesa-6.4.2/configs/linux
*** Mesa-6.4.2.orig/configs/linux	Thu Feb  2 19:54:06 2006
--- Mesa-6.4.2/configs/linux	Wed May 23 17:43:25 2007
***************
*** 18,24 ****
  ARCH_FLAGS ?=
  
  DEFINES = -D_POSIX_SOURCE -D_POSIX_C_SOURCE=199309L -D_SVID_SOURCE \
! 	-D_BSD_SOURCE -DPTHREADS -DUSE_XSHM
  
  X11_INCLUDES = -I/usr/X11R6/include
  
--- 18,24 ----
  ARCH_FLAGS ?=
  
  DEFINES = -D_POSIX_SOURCE -D_POSIX_C_SOURCE=199309L -D_SVID_SOURCE \
! 	-D_BSD_SOURCE -DPTHREADS -DUSE_XSHM -DUSE_MGL_NAMESPACE
  
  X11_INCLUDES = -I/usr/X11R6/include
  
EOF
    elif [[ "$OPSYS" == "AIX" ]]; then
        info_box "Patching Mesa for AIX . . ." >&3
        patch -p0 <<\EOF
diff -c Mesa-6.4.2.orig/configs/aix Mesa-6.4.2/configs/aix
*** Mesa-6.4.2.orig/configs/aix	Mon Sep 13 14:04:48 2004
--- Mesa-6.4.2/configs/aix	Wed May 23 17:46:34 2007
***************
*** 5,19 ****
  CONFIG_NAME = aix
  
  # Compiler and flags
! CC = cc
  CXX = xlC
  
! CFLAGS = -O -DAIXV3
! CXXFLAGS = -O -DAIXV3
  MKLIB_OPTIONS =
  
  # Library names (actual file names)
! GL_LIB_NAME = libGL.a
  GLU_LIB_NAME = libGLU.a
  GLUT_LIB_NAME = libglut.a
  GLW_LIB_NAME = libGLw.a
--- 5,19 ----
  CONFIG_NAME = aix
  
  # Compiler and flags
! CC = xlc
  CXX = xlC
  
! CFLAGS = -O -DAIXV3 -DUSE_MGL_NAMESPACE
! CXXFLAGS = -O -DAIXV3 -DUSE_MGL_NAMESPACE
  MKLIB_OPTIONS =
  
  # Library names (actual file names)
! GL_LIB_NAME = libMesaGL.a
  GLU_LIB_NAME = libGLU.a
  GLUT_LIB_NAME = libglut.a
  GLW_LIB_NAME = libGLw.a
EOF
    elif [[ "$OPSYS" == "SunOS" ]]; then
        info_box "Patching Mesa . . ." >&3
        patch -p0 <<\EOF
diff -p -r Mesa-6.4.2.orig/configs/solaris-x86-gcc Mesa-6.4.2/configs/solaris-x86-gcc
*** Mesa-6.4.2.orig/configs/solaris-x86-gcc	Mon Sep 13 14:04:48 2004
--- Mesa-6.4.2/configs/solaris-x86-gcc	Wed May 23 11:34:25 2007
*************** CONFIG_NAME = solaris-x86-gcc
*** 7,14 ****
  # Compiler and flags
  CC = gcc
  CXX = g++
! CFLAGS = -O3 -m486 -fPIC -I/usr/openwin/include -DUSE_XSHM
! CXXFLAGS = -O3 -m486 -fPIC
  GLUT_CFLAGS = -fexceptions
  MKLIB_OPTIONS = -static
  
--- 7,14 ----
  # Compiler and flags
  CC = gcc
  CXX = g++
! CFLAGS = -O3 -m486 -fPIC -I/usr/openwin/include -DUSE_XSHM -DUSE_MGL_NAMESPACE
! CXXFLAGS = -O3 -m486 -fPIC -DUSE_MGL_NAMESPACE
  GLUT_CFLAGS = -fexceptions
  MKLIB_OPTIONS = -static
  
*************** GLU_LIB_DEPS = -L$(LIB_DIR) -l$(GL_LIB) 
*** 17,23 ****
  GLUT_LIB_DEPS = -L$(LIB_DIR) -l$(GLU_LIB) -l$(GL_LIB) -L/usr/openwin/lib -lX11 -lXmu -lXt -lXi -lm
  APP_LIB_DEPS = -L$(LIB_DIR) -L/usr/openwin/lib -R/usr/openwin/lib -l$(GLUT_LIB) -l$(GLU_LIB) -l$(GL_LIB) -lm
  
! GL_LIB_NAME = libGL.a
  GLU_LIB_NAME = libGLU.a
  GLUT_LIB_NAME = libglut.a
  GLW_LIB_NAME = libGLw.a
--- 17,23 ----
  GLUT_LIB_DEPS = -L$(LIB_DIR) -l$(GLU_LIB) -l$(GL_LIB) -L/usr/openwin/lib -lX11 -lXmu -lXt -lXi -lm
  APP_LIB_DEPS = -L$(LIB_DIR) -L/usr/openwin/lib -R/usr/openwin/lib -l$(GLUT_LIB) -l$(GLU_LIB) -l$(GL_LIB) -lm
  
! GL_LIB_NAME = libMesaGL.a
  GLU_LIB_NAME = libGLU.a
  GLUT_LIB_NAME = libglut.a
  GLW_LIB_NAME = libGLw.a
EOF
    fi
    if [[ $? != 0 ]] ; then
        echo "Unable to patch Mesa. Wrong version?"
        return 1
    fi

    #
    # Build Mesa.
    #
    info_box "Building Mesa . . . (~2 minutes)" >&3
    cd ${MESA_DIR}
    echo "Invoking command to build Mesa"
    $MAKE $MESA_TARGET
    if [[ $? != 0 ]] ; then
       echo "Mesa build failed.  Giving up"
       return 1
    fi
    
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing Mesa . . ." >&3
    echo "Installing Mesa"
    mkdir "$VISITDIR/mesa"
    mkdir "$VISITDIR/mesa/${MESA_VERSION}"
    mkdir "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH"
    mkdir "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/include"
    mkdir "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib"
    mkdir "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/include/GL"
    cp include/GL/*.h "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/include/GL"
    for file in libMesaGL libOSMesa libGLU
    do  
       if [[ -d lib64 ]] ; then
          cp lib64/${file}.$SO_EXT* \
             "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib"
       elif [[ -d lib ]] ; then
          cp lib/${file}.$SO_EXT* \
             "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib"
       else
          find . -name ${file}.$SO_EXT\* -exec cp {} \
             "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib" \;
       fi
    done
    if [[ "$OPSYS" == "Darwin" ]]; then
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        install_name_tool -id \
           "$INSTALLNAMEPATH/libMesaGL.$SO_EXT" \
           "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib/libMesaGL.$SO_EXT"
        install_name_tool -id \
           "$INSTALLNAMEPATH/libOSMesa.$SO_EXT" \
           "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib/libOSMesa.$SO_EXT"
        install_name_tool -change \
           libMesaGL.$SO_EXT \
           "$INSTALLNAMEPATH/libMesaGL.$SO_EXT" \
           "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib/libOSMesa.$SO_EXT"
        install_name_tool -id \
           "$INSTALLNAMEPATH/libGLU.$SO_EXT" \
           "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib/libGLU.$SO_EXT"
        install_name_tool -change \
           libMesaGL.$SO_EXT \
           "$INSTALLNAMEPATH/libMesaGL.$SO_EXT" \
           "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib/libGLU.$SO_EXT"
        if [[ $? != 0 ]] ; then
           echo "Mesa dynamic library install failed.  Giving up"
           return 1
        fi
    elif [[ "$OPSYS" == "AIX" ]]; then
        cd lib
        ar -x libMesaGL.a
        xlC -G -brtl -Wl,-blpdata -Wl,-bmaxdata:0x70000000 \
           -o libMesaGL.$SO_EXT *.o
        cp libMesaGL.$SO_EXT \
           "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib/libMesaGL.$SO_EXT"
        rm *.o
        ar -x libOSMesa.a
        xlC -G -brtl -Wl,-blpdata -Wl,-bmaxdata:0x70000000 \
           -o libOSMesa.$SO_EXT *.o
        cp libOSMesa.$SO_EXT \
           "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib/libOSMesa.$SO_EXT"
        rm *.o
        cd ..
    fi
    echo "Done with Mesa"

    return 0
}


# *************************************************************************** #
#                          Function 4, build_qt                               #
# *************************************************************************** #

function build_qt
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -e ${QT_FILE} ]] ; then
       info_box "Unzipping/Untarring ${QT_FILE} . . ." >&3
       uncompress_untar ${QT_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar $QT_FILE  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -e ${QT_FILE%.*} ]] ; then
       info_box "Untarring ${QT_FILE%.*} . . ." >&3
       tar xf ${QT_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${QT_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi
    echo "Done with untar"

    #
    # Set up environment variables for Qt.
    #
    QT_DIR=${QT_FILE%.tar*}
    cd ${QT_DIR}
    export QTDIR="$PWD"
    export PATH="$QTDIR"/bin:"$PATH"
    export LD_LIBRARY_PATH="$QTDIR"/lib:"$LD_LIBRARY_PATH"

    #
    # Check to see if we are going to have to issue a "-thread" flag.
   o
#
    THREAD=""
    HAS_THREAD=$(./configure -platform ${QT_PLATFORM} \
-shared -qt-libpng -help | grep thread)
    if [[ "$HAS_THREAD" != "" ]] ; then
       THREAD="-thread"
       echo "Adding threading option"
    else
       echo "Not adding threading"
    fi

    #
    # 64-bit Linux systems are often inconsistent about placing its X-libraries.
    # Qt assumes that they are in the directory /usr/X11R6/lib64.  Some machines
    # have them in /usr/X11R6/lib.  If they do, correct the qmake.conf file
    # with this information.
    #
    if [[ "$QT_PLATFORM" == "linux-g++-64" ]] ; then
       # By placing in environment variable, it removes extraneously whitespace,
       # making "cut" command easier to form.
       QT_X11DIR_TMP=$(cat mkspecs/${QT_PLATFORM}/qmake.conf | \
       grep QMAKE_LIBDIR_X11)
       QT_X11DIR=$(echo $QT_X11DIR_TMP | cut -d' ' -f3)
       if [[ ! -d $QT_X11DIR ]] ; then
          if [[ -d "/usr/X11R6/lib" ]] ; then
             echo "Replacing Qt's X11 dir ($QT_X11DIR) with /usr/X11R6/lib"
             # Convert all '/' to "\/" for later sed'ding
             SED_STR1=$(echo $QT_X11DIR | sed 's/\//\\\//g')
             cat mkspecs/${QT_PLATFORM}/qmake.conf | \
             sed 's/'${SED_STR1}'/\/usr\/X11R6\/lib/g' > tmp.conf
             mv -f mkspecs/${QT_PLATFORM}/qmake.conf \
             mkspecs/${QT_PLATFORM}/qmake.conf.orig
             mv -f tmp.conf mkspecs/${QT_PLATFORM}/qmake.conf
          fi
       fi
    fi

    if [[ "$HAS_THREAD" != "" ]] ; then
       cat mkspecs/${QT_PLATFORM}/qmake.conf | sed 's/qt-mt/qt/g' > tmp.conf
       mv -f mkspecs/${QT_PLATFORM}/qmake.conf \
       mkspecs/${QT_PLATFORM}/qmake.conf.orig2
       mv -f tmp.conf mkspecs/${QT_PLATFORM}/qmake.conf
    fi

    #
    # Call configure
    #
    info_box "Configuring Qt: ./configure -platform ${QT_PLATFORM} \
-shared -qt-libpng $THREAD" >&3
    echo "yes" | ./configure -platform ${QT_PLATFORM} -shared -qt-libpng $THREAD
    if [[ $? != 0 ]] ; then
       echo "Qt configure failed.  Giving up"
       return 1
    fi
    
    #
    # If we had to thread, then the libraries will have a "-mt" appended, which
    # screws up other makefiles.  So modify the Makefile to remove the "-mt".
    #
    if [[ "$HAS_THREAD" != "" ]] ; then
       cat src/Makefile | sed 's/qt-mt/qt/g' > Makefile.tmp
       mv -f src/Makefile src/Makefile.orig
       mv -f Makefile.tmp src/Makefile
       cat tools/designer/uilib/Makefile | sed 's/qt-mt/qt/g' > Makefile2.tmp
       mv -f tools/designer/uilib/Makefile tools/designer/uilib/Makefile.orig
       mv -f Makefile2.tmp tools/designer/uilib/Makefile
        
    fi
    
    #
    # Build Qt.  Issue only the targets that we need.
    #
    info_box "Building Qt . . . (~10 minutes)" >&3
    $MAKE symlinks src-qmake src-moc sub-src
    if [[ $? != 0 ]] ; then
       echo "Qt build failed.  Giving up"
       return 1
    fi
    cd tools/designer/uilib
    $MAKE
    if [[ $? != 0 ]] ; then
       echo "Qt build for libqui failed.  Giving up"
       return 1
    fi
    cd ../../../
    
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing Qt" >&3
    echo "Installing Qt"
    echo "Installing to directory $VISITDIR/qt"
    mkdir "$VISITDIR/qt"
    mkdir "$VISITDIR/qt/${QT_VERSION}"
    mkdir "$VISITDIR/qt/${QT_VERSION}/$VISITARCH"
    mkdir "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/bin"
    mkdir "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/include"
    mkdir "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib"
    mkdir "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/include/private"
    cp bin/designer    "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/bin"
    cp bin/findtr      "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/bin"
    cp bin/moc         "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/bin"
    cp bin/qt20fix     "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/bin"
    cp bin/qtrename140 "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/bin"
    cd include; cp *.h "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/include"
    cp private/*.h     "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/include/private"
    cd ../lib;find . -print | \
    cpio -pvmud "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib"
    if [[ "$OPSYS" == "Darwin" ]]; then
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        install_name_tool -id \
          "$INSTALLNAMEPATH/libqt.$SO_EXT" \
          "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib/libqt.$SO_EXT"
        install_name_tool -id \
          "$INSTALLNAMEPATH/libqui.$SO_EXT" \
          "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib/libqui.$SO_EXT"
        install_name_tool -change \
          libqt.3.$SO_EXT \
          "$INSTALLNAMEPATH/libqt.$SO_EXT" \
          "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib/libqui.$SO_EXT"
    elif [[ "$OPSYS" == "AIX" ]]; then
        ln -s \
        "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib/libqt.$SO_EXT.${QT_VERSION}"\
        "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib/libqt.$SO_EXT"
        ln -s "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib/libqui.$SO_EXT.1.0.0" \
          "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib/libqui.$SO_EXT"
    fi
    cd ../..
    echo "Done with Qt"
}


# *************************************************************************** #
#                          Function 5, build_cmake                            #
# *************************************************************************** #

function build_cmake
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -f ${CMAKE_FILE} ]] ; then
       info_box "Unzipping/Tarring ${CMAKE_FILE} . . ." >&3
       uncompress_untar ${CMAKE_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar $CMAKE_FILE  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${CMAKE_FILE%.*} ]] ; then
       info_box "Tarring ${CMAKE_FILE%.*} . . ." >&3
       tar xf ${CMAKE_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${CMAKE_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    #
    # Patching mesa.
    #
    if [[ "$OPSYS" == "AIX" ]]; then
        info_box "Patching Mesa . . ." >&3
        patch -p0 <<\EOF
diff -c cmake-2.4.5.orig/Utilities/cmzlib/zconf.h cmake-2.4.5/Utilities/cmzlib/zconf.h
*** cmake-2.4.5.orig/Utilities/cmzlib/zconf.h	Mon Dec  4 08:04:11 2006
--- cmake-2.4.5/Utilities/cmzlib/zconf.h	Mon May 21 15:59:54 2007
***************
*** 89,100 ****
  #  endif
  #endif
  
- #ifndef STDC
- #  ifndef const /* cannot use !defined(STDC) && !defined(const) on Mac */
- #    define const
- #  endif
- #endif
- 
  /* Some Mac compilers merge all .h files incorrectly: */
  #if defined(__MWERKS__) || defined(applec) ||defined(THINK_C) ||defined(__SC__)
  #  define NO_DUMMY_DECL
--- 89,94 ----
EOF
        if [[ $? != 0 ]] ; then
            echo "Unable to patch Mesa. Wrong version?"
            return 1
        fi
    fi

    #
    # Issue "bootstrap", which takes the place of configure for CMake.
    #
    info_box "Bootstrapping CMake . . ." >&3
    CMAKE_DIR=${CMAKE_FILE%.tar*}
    cd ${CMAKE_DIR}
    if [[ "$OPSYS" == "AIX" ]]; then
        env CXX=xlC CC=xlc CXXFLAGS="" CFLAGS="" ./bootstrap
    else
        env CXXFLAGS="" CFLAGS="" ./bootstrap
    fi
    if [[ $? != 0 ]] ; then
       echo "Bootstrap for cmake failed, giving up."
       return 1
    fi

    #
    # Build the CMake program.
    #
    info_box "Building CMake . . ." >&3
    $MAKE
    if [[ $? != 0 ]] ; then
       echo "Cannot build cmake, giving up."
       return 1
    fi

    echo "Successfully built CMake"
    cd ..
}


# *************************************************************************** #
#                            Function 6, build_vtk                            #
# *************************************************************************** #

function build_vtk
{
    #
    # CMake is the build system for VTK.  Call another script that will build
    # that program.
    #
    build_cmake
    if [[ $? != 0 ]] ; then
       echo "Unable to build cmake.  Giving up"
       return 1
    fi
    
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -f ${VTK_FILE} ]] ; then
       info_box "Unzipping/Untarring ${VTK_FILE} . . ." >&3
       uncompress_untar ${VTK_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar $VTK_FILE  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${VTK_FILE%.*} ]] ; then
       info_box "Untarring ${VTK_FILE%.*} . . ." >&3
       tar xf ${VTK_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${VTK_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    if [[ "$OPSYS" == "Darwin" ]]; then
        #
        # Apply patches
        #
        info_box "Patching VTK . . ." >&3
        patch -p0 << \EOF
diff -rp VTK.orig/CMakeLists.txt VTK/CMakeLists.txt
*** VTK.orig/CMakeLists.txt     Mon Mar 26 14:28:51 2007
--- VTK/CMakeLists.txt  Wed Apr 25 15:41:25 2007
*************** IF(VTK_USE_RENDERING)
*** 196,202 ****
    SET(VTK_KITS ${VTK_KITS} RENDERING)
    SET(VTK_KITS ${VTK_KITS} VOLUMERENDERING)
    SET(VTK_KITS ${VTK_KITS} HYBRID)
-   SET(VTK_KITS ${VTK_KITS} WIDGETS)
  ENDIF(VTK_USE_RENDERING)
  IF(VTK_USE_PARALLEL)
    SET(VTK_KITS ${VTK_KITS} PARALLEL)
--- 196,201 ----
*************** ELSE(CMAKE_COMPILER_IS_GNUCXX)
*** 302,312 ****
  ENDIF(CMAKE_COMPILER_IS_GNUCXX)
  
  IF(APPLE)
!   SET(CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS} -Wl,-flat_namespace,-U,_environ")
!   SET(CMAKE_SHARED_MODULE_CREATE_C_FLAGS "${CMAKE_SHARED_MODULE_CREATE_C_FLAGS} -Wl,-flat_namespace,-U,_environ")
    IF(CMAKE_COMPILER_IS_GNUCXX)
!     SET(VTK_REQUIRED_C_FLAGS "${VTK_REQUIRED_C_FLAGS} -no-cpp-precomp")
!     SET(VTK_REQUIRED_CXX_FLAGS "${VTK_REQUIRED_CXX_FLAGS} -no-cpp-precomp")
      IF(VTK_USE_CARBON)
        SET(VTK_REQUIRED_CXX_FLAGS "${VTK_REQUIRED_CXX_FLAGS} -fpascal-strings")
      ENDIF(VTK_USE_CARBON)
--- 301,311 ----
  ENDIF(CMAKE_COMPILER_IS_GNUCXX)
  
  IF(APPLE)
!   SET(CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS} -Wl,-twolevel_namespace,-headerpad_max_install_names")
!   SET(CMAKE_SHARED_MODULE_CREATE_C_FLAGS "${CMAKE_SHARED_MODULE_CREATE_C_FLAGS} -Wl,-twolevel_namespace,-headerpad_max_install_names")
    IF(CMAKE_COMPILER_IS_GNUCXX)
!     SET(VTK_REQUIRED_C_FLAGS "${VTK_REQUIRED_C_FLAGS} -fno-common -fexceptions")
!     SET(VTK_REQUIRED_CXX_FLAGS "${VTK_REQUIRED_CXX_FLAGS} -fno-common -fexceptions")
      IF(VTK_USE_CARBON)
        SET(VTK_REQUIRED_CXX_FLAGS "${VTK_REQUIRED_CXX_FLAGS} -fpascal-strings")
      ENDIF(VTK_USE_CARBON)
*************** IF(BUILD_TESTING)
*** 874,880 ****
      SUBDIRS(Rendering/Testing)
      SUBDIRS(VolumeRendering/Testing)
      SUBDIRS(Hybrid/Testing)
-     SUBDIRS(Widgets/Testing)
    ENDIF(VTK_USE_RENDERING)
    IF(VTK_USE_PARALLEL)
      SUBDIRS(Parallel/Testing)
--- 873,878 ----
*************** IF(NOT VTK_INSTALL_NO_DEVELOPMENT)
*** 1354,1360 ****
      INSTALL_FILES(${VTK_INSTALL_INCLUDE_DIR} .h vtkRenderingInstantiator)
      INSTALL_FILES(${VTK_INSTALL_INCLUDE_DIR} .h vtkVolumeRenderingInstantiator)
      INSTALL_FILES(${VTK_INSTALL_INCLUDE_DIR} .h vtkHybridInstantiator)
-     INSTALL_FILES(${VTK_INSTALL_INCLUDE_DIR} .h vtkWidgetsInstantiator)
    ENDIF(VTK_USE_RENDERING)
    IF(VTK_USE_PARALLEL)
      INSTALL_FILES(${VTK_INSTALL_INCLUDE_DIR} .h vtkParallelInstantiator)
--- 1352,1357 ----
diff -rp VTK.orig/Rendering/vtkImagingFactory.cxx VTK/Rendering/vtkImagingFactory.cxx
*** VTK.orig/Rendering/vtkImagingFactory.cxx    Mon Mar 26 13:25:40 2007
--- VTK/Rendering/vtkImagingFactory.cxx Wed Apr 25 15:56:01 2007
*************** vtkObject* vtkImagingFactory::CreateInst
*** 202,215 ****
--- 202,233 ----
      {
      if(strcmp(vtkclassname, "vtkTextMapper") == 0)
        {
+ #if defined(VTK_USE_MANGLED_MESA)
+       if ( vtkImagingFactory::UseMesaClasses )
+         {
+         return vtkMesaFreeTypeTextMapper::New();
+         }
+ #endif
        return vtkOpenGLFreeTypeTextMapper::New();
        }
      if(strcmp(vtkclassname, "vtkImageMapper") == 0)
        {
+ #if defined(VTK_USE_MANGLED_MESA)
+       if ( vtkImagingFactory::UseMesaClasses )
+         {
+         return vtkMesaImageMapper::New();
+         }
+ #endif
        return vtkOpenGLImageMapper::New();
        }
      if(strcmp(vtkclassname, "vtkPolyDataMapper2D") == 0)
        {
+ #if defined(VTK_USE_MANGLED_MESA)
+       if ( vtkImagingFactory::UseMesaClasses )
+         {
+         return vtkMesaPolyDataMapper2D::New();
+         }
+ #endif
        return vtkOpenGLPolyDataMapper2D::New();
        }
      }
diff -rp VTK.orig/Utilities/ftgl/CMakeLists.txt VTK/Utilities/ftgl/CMakeLists.txt
*** VTK.orig/Utilities/ftgl/CMakeLists.txt      Mon Mar 26 13:26:34 2007
--- VTK/Utilities/ftgl/CMakeLists.txt   Wed Apr 25 15:46:53 2007
*************** IF(NOT OPENGL_FOUND)
*** 134,144 ****
  ENDIF(NOT OPENGL_FOUND)
  SET (VTKFTGL_LIBS "${VTKFTGL_LIBS};${OPENGL_gl_LIBRARY}")
  
! IF(WIN32)
    IF (FTGL_SUPPORT_MANGLE_MESA)
      SET (VTKFTGL_LIBS "${VTKFTGL_LIBS};${MANGLED_MESA_LIBRARY}")
    ENDIF (FTGL_SUPPORT_MANGLE_MESA)
! ENDIF(WIN32)
  
  #
  # We obviously need FreeType
--- 134,144 ----
  ENDIF(NOT OPENGL_FOUND)
  SET (VTKFTGL_LIBS "${VTKFTGL_LIBS};${OPENGL_gl_LIBRARY}")
  
! IF(APPLE OR WIN32)
    IF (FTGL_SUPPORT_MANGLE_MESA)
      SET (VTKFTGL_LIBS "${VTKFTGL_LIBS};${MANGLED_MESA_LIBRARY}")
    ENDIF (FTGL_SUPPORT_MANGLE_MESA)
! ENDIF(APPLE OR WIN32)
  
  #
  # We obviously need FreeType
EOF
       if [[ $? != 0 ]] ; then
          echo "Unable to patch VTK. Wrong version?"
          return 1
       fi
    fi

    #
    # Execute CMake, which will set up the Makefiles for VTK.  (like configure)
    #
    info_box "Executing CMake on VTK" >&3
    cd VTK
    CMAKE_DIR=../${CMAKE_FILE%.tar*}/bin/
    if [[ "$OPSYS" == "Darwin" ]]; then
    ${CMAKE_DIR}/cmake \
        -DBUILD_SHARED_LIBS:BOOL=ON\
        -DBUILD_TESTING:BOOL=OFF\
        -DUSE_ANSI_STD_LIB:BOOL=ON\
        -DVTK_USE_MANGLED_MESA:BOOL=ON\
        -DVTK_USE_HYBRID:BOOL=ON\
        -DCMAKE_CXX_FLAGS:STRING=${CXX_OPT_FLAGS}\
        -DCMAKE_CXX_COMPILER:STRING=${CXX_COMPILER}\
        -DCMAKE_C_FLAGS:STRING=${C_OPT_FLAGS}\
        -DCMAKE_C_COMPILER:STRING=${C_COMPILER}\
        -DCMAKE_SHARED_LINKER_FLAGS:STRING=-Wl,-headerpad_max_install_names,-compatibility_version,5.0,-current_version,5.0.0\
        -DMANGLED_MESA_INCLUDE_DIR:PATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/include"\
        -DMANGLED_MESA_LIBRARY:FILEPATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/lib/libMesaGL.${SO_EXT}"\
        -DMANGLED_OSMESA_INCLUDE:PATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/include"\
        -DMANGLED_OSMESA_LIBRARY:FILEPATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/lib/libOSMesa.${SO_EXT}"\
        .
    elif [[ "$OPSYS" == "IRIX64" ]]; then
    ${CMAKE_DIR}/cmake \
        -DBUILD_SHARED_LIBS:BOOL=ON\
        -DBUILD_TESTING:BOOL=OFF\
        -DUSE_ANSI_STD_LIB:BOOL=ON\
        -DVTK_USE_MANGLED_MESA:BOOL=ON\
        -DVTK_USE_HYBRID:BOOL=ON\
        $VTKPLATFORMFLAGS\
        -DMANGLED_MESA_INCLUDE_DIR:PATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/include"\
        -DMANGLED_MESA_LIBRARY:FILEPATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/lib/libMesaGL.${SO_EXT}"\
        -DMANGLED_OSMESA_INCLUDE:PATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/include"\
        -DMANGLED_OSMESA_LIBRARY:FILEPATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/lib/libOSMesa.${SO_EXT}"\
        .
       VTKPLATFORMFLAGS="-DCMAKE_CXX_FLAGS:STRING=${CXX_OPT_FLAGS} -LANG:std -64\
        -DCMAKE_CXX_COMPILER:STRING=${CXX_COMPILER}\
        -DCMAKE_C_FLAGS:STRING=${C_OPT_FLAGS}\
        -DCMAKE_C_COMPILER:STRING=${C_COMPILER}\
        -DCMAKE_EXE_LINKER_FLAGS:STRING=-LANG:std -64\
        -DCMAKE_MODULE_LINKER_FLAGS:STRING=-LANG:std -64\
        -DCMAKE_SHARED_LINKER_FLAGS:STRING=-LANG:std -64"
    else
    ${CMAKE_DIR}/cmake \
        -DBUILD_SHARED_LIBS:BOOL=ON\
        -DBUILD_TESTING:BOOL=OFF\
        -DUSE_ANSI_STD_LIB:BOOL=ON\
        -DVTK_USE_MANGLED_MESA:BOOL=ON\
        -DVTK_USE_HYBRID:BOOL=ON\
        $VTKPLATFORMFLAGS\
        -DMANGLED_MESA_INCLUDE_DIR:PATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/include"\
        -DMANGLED_MESA_LIBRARY:FILEPATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/lib/libMesaGL.${SO_EXT}"\
        -DMANGLED_OSMESA_INCLUDE:PATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/include"\
        -DMANGLED_OSMESA_LIBRARY:FILEPATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/lib/libOSMesa.${SO_EXT}"\
        .
       VTKPLATFORMFLAGS="-DCMAKE_CXX_FLAGS:STRING=${CXX_OPT_FLAGS}\
        -DCMAKE_CXX_COMPILER:STRING=${CXX_COMPILER}\
        -DCMAKE_C_FLAGS:STRING=${C_OPT_FLAGS}\
        -DCMAKE_C_COMPILER:STRING=${C_COMPILER}"
    fi
    if [[ $? != 0 ]] ; then
       echo "Cannot get CMAKE to create the makefiles.  Giving up."
       return 1
    fi

    #
    # Now build VTK.
    #
    info_box "Building VTK . . . (~20 minutes)" >&3
    $MAKE
    if [[ $? != 0 ]] ; then
       echo "VTK did not build correctly.  Giving up."
       return 1
    fi

    if [[ "$OPSYS" == "Darwin" ]]; then
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        # fix the internal name with in the libraries
        #
        # first change the libraries name and identification by executing the
        # following bourne shell script
        cd bin
        for i in libvtkCommon libvtkDICOMParser libvtkFiltering \
        libvtkGenericFiltering libvtkGraphics libvtkHybrid libvtkIO \
        libvtkImaging libvtkMPEG2Encode libvtkRendering \
        libvtkVolumeRendering libvtkexpat \
        libvtkfreetype libvtkftgl libvtkjpeg libvtkpng libvtksys \
        libvtktiff libvtkzlib
        do 
           rm $i.$SO_EXT
           cp $i.5.0.0.$SO_EXT $i.$SO_EXT
           install_name_tool -id \
             $INSTALLNAMEPATH/$i.$SO_EXT \
             $i.$SO_EXT
        done
     
        #
        # Next change the dependent libraries names and paths
        for i in libvtkCommon libvtkDICOMParser libvtkFiltering \
        libvtkGenericFiltering libvtkGraphics libvtkHybrid libvtkIO \
        libvtkImaging libvtkMPEG2Encode libvtkRendering \
        libvtkVolumeRendering libvtkexpat \
        libvtkfreetype libvtkftgl libvtkjpeg libvtkpng libvtksys \
        libvtktiff libvtkzlib 
        do
          for j in libvtkCommon libvtkDICOMParser libvtkFiltering \
          libvtkGenericFiltering libvtkGraphics libvtkHybrid libvtkIO \
          libvtkImaging libvtkMPEG2Encode libvtkRendering \
          libvtkVolumeRendering libvtkexpat \
          libvtkfreetype libvtkftgl libvtkjpeg libvtkpng libvtksys \
          libvtktiff libvtkzlib
          do
             install_name_tool -change \
                $j.5.0.$SO_EXT \
                $INSTALLNAMEPATH/$j.$SO_EXT \
                $i.$SO_EXT
          done
        done
        cd ..
    fi

    #
    # Install into the VisIt third party location.
    #
    
    # Save off this directory for later
    cd MangleMesaInclude
    export BAD_MESA="$PWD"
    cd ..

    info_box "Installing VTK . . ." >&3
    echo "Installing VTK"
    mkdir "$VISITDIR/vtk"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Common"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Filtering"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/GenericFiltering"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Graphics"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Hybrid"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/IO"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Imaging"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/MangleMesaInclude"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Rendering"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/VolumeRendering"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/lib"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/vtkstd"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities/vtktiff"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities/vtkexpat"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities/vtkzlib"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities/vtkjpeg"
    cp vtkConfigure.h         "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH"
    cp vtkToolkits.h          "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH"
    cp vtk*Instantiator.h     "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH"
    cp Common/*.h             "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Common"
    cp Common/*.txx           "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Common"
    cp Filtering/*.h          \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Filtering"
    cp Filtering/*.txx        \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Filtering"
    cp GenericFiltering/*.h   \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/GenericFiltering"
    cp Graphics/*.h           \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Graphics"
    cp Hybrid/*.h             "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Hybrid"
    cp IO/*.h                 "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/IO"
    cp Imaging/*.h            "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Imaging"
    cp Rendering/*.h          \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Rendering"
    cp Utilities/*.h          \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities"
    cp Utilities/vtktiff/*.h  \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities/vtktiff"
    cp Utilities/vtkexpat/*.h \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities/vtkexpat"
    cp Utilities/vtkzlib/*.h  \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities/vtkzlib"
    cp Utilities/vtkjpeg/*.h  \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities/vtkjpeg"
    cp VolumeRendering/*.h    \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/VolumeRendering"
    cp MangleMesaInclude/*.h  \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/MangleMesaInclude"
    cp vtkstd/*               "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/vtkstd"
    if [[ "$OPSYS" == "Darwin" ]]; then
        cd bin
        cp *.${SO_EXT}       "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/lib"
        ln -s "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/lib/libvtkjpeg.$SO_EXT" \
        "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/lib/libjpeg.$SO_EXT"
        cd ..
    else
        cp -R bin/*.$SO_EXT*  "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/lib"
    fi
    
    #
    # The MangleMesa headers have absolute paths.  Correct these headers now for
    # the new location they have been copied into.
    #
    cd "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/MangleMesaInclude"
    SED_STR1=$(echo "$BAD_MESA" | sed 's/\//\\\//g')  
    # Converts all '/' to "\/" for later sed'ding 
    SED_STR2=$(echo "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/MangleMesaInclude" |\
    sed 's/\//\\\//g')
    for i in *.h ; do
       cat $i | sed 's/'${SED_STR1}'/'${SED_STR2}'/g' > tmp.h
       mv -f tmp.h $i
    done
    echo "Done with VTK"
}


# *************************************************************************** #
#                         Function 7, build_python                            #
# *************************************************************************** #

function build_python
{
    #
    # Untar the file.
    #
    info_box "Extracting Python source . . ." >&3
    uncompress_untar ${PYTHON_FILE}
    if [[ $? != 0 ]] ; then
       echo \
"Unable to untar $PYTHON_FILE.  Corrupted file or out of space on device?"
       return 1
    fi

    #
    # Call configure
    #
    info_box "Configuring Python . . ." >&3
    PYTHON_DIR=${PYTHON_FILE%.$PYTHON_FILE_SUFFIX}
    cd ${PYTHON_DIR}
    PYTHON_OPT="$C_OPT_FLAGS"
    echo \
"Invoking command to build Python: ./configure OPT=\"$PTHON_OPT\" \
CXX=\"$CXX_COMPILER\" CC=\"$C_COMPILER\" \
--prefix=\"$VISITDIR/python/$VISITARCH\""
    ./configure OPT="$PYTHON_OPT" CXX="$CXX_COMPILER" CC="$C_COMPILER" \
    --prefix="$VISITDIR/python/$VISITARCH" --disable-ipv6
    if [[ $? != 0 ]] ; then
       echo "Python configure failed.  Giving up"
       return 1
    fi

    #
    # Build Python.
    #
    info_box "Building Python . . . (~3 minutes)" >&3
    $MAKE
    if [[ $? != 0 ]] ; then
       echo "Python build failed.  Giving up"
       return 1
    fi
    info_box "Installing Python . . ." >&3
    $MAKE install
    if [[ $? != 0 ]] ; then
       echo "Python build (make install) failed.  Giving up"
       return 1
    fi

    #
    # Create a shared library and copy that to the third party install location
    #
    info_box "Creating Python shared library" >&3
    echo "Creating shared library"
    if [[ "$OPSYS" == "Darwin" ]]; then
        # Check for version >= 8.0.0 (MacOS 10.4, Tiger) for SystemStubs
        VER=$(uname -r)
        if (( ${VER%%.*} > 7 )) ; then
           USESTUBS="-lSystemStubs"
        else
           USESTUBS=""
        fi
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH=\
"$VISITDIR/python/$VISITARCH/lib/python$PYTHON_VERSION/config"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        echo "char **environ=0;" > environhack.c
        gcc -c environhack.c -fno-common
        mkdir tmpdir
        cd tmpdir
        ar x ../libpython${PYTHON_VERSION}.a
        $C_COMPILER -o ../libpython${PYTHON_VERSION}.$SO_EXT -dynamiclib \
          ../environhack.o *.o -lSystem $USESTUBS \
          -framework Carbon -Wl,-twolevel_namespace \
          -Wl,-undefined,dynamic_lookup,-headerpad_max_install_names \
          -Wl,-install_name,$INSTALLNAMEPATH/libpython$PYTHON_VERSION.$SO_EXT \
          -Wl,-compatibility_version,${PYTHON_COMPATIBILITY_VERSION} \
          -Wl,-current_version,${PYTHON_VERSION}
        if [[ $? != 0 ]] ; then
          echo "Python dynamic library build failed.  Giving up"
          return 1
        fi
        cd ..
        rm -rf tmpdir
        cp libpython$PYTHON_VERSION.$SO_EXT \
        "$VISITDIR/python/$VISITARCH/lib/python$PYTHON_VERSION/config/"
    elif [[ "$OPSYS" == "AIX" ]]; then
        $C_COMPILER -qmkshrobj \
          -o libpython$PYTHON_VERSION.$SO_EXT libpython$PYTHON_VERSION.a -lm
        cp libpython$PYTHON_VERSION.$SO_EXT \
          "$VISITDIR/python/$VISITARCH/lib/python$PYTHON_VERSION/config/"
    else
        mkdir tmpdir
        cd tmpdir
        ar -x ../libpython$PYTHON_VERSION.a
        $C_COMPILER $C_OPT_FLAGS -shared \
          -o ../libpython$PYTHON_VERSION.$SO_EXT *.o
        cd ..
        rm -rf tmpdir
        cp libpython$PYTHON_VERSION.$SO_EXT \
          "$VISITDIR/python/$VISITARCH/lib/python$PYTHON_VERSION/config/"
    fi
    cd ..
    echo "Done with Python"
}


# *************************************************************************** #
#                            Function 8, build_silo                           #
# *************************************************************************** #

function build_silo
{
    #
    # Run the shell script that effectively "untars" Silo.
    #
    info_box "Extracting Silo sources" >&3
    sh ${SILO_FILE}
    if [[ $? != 0 ]] ; then
       echo \
"Unable to run Silo script.  Corrupted file or out of space on device?"
       return 1
    fi

    #
    # Call configure
    #
    info_box "Configuring Silo . . ." >&3
    SILO_DIR=${SILO_FILE%.sh}
    cd ${SILO_DIR}
    echo "Invoking command to configure Silo"
    if [[ "$DO_HDF5" == "yes" ]] ; then
       export HDF5INCLUDE="$VISITDIR/hdf5/$HDF5_VERSION/$VISITARCH/include"
       export HDF5LIB="$VISITDIR/hdf5/$HDF5_VERSION/$VISITARCH/lib"
       WITHHDF5ARG="--with-hdf5=$HDF5INCLUDE,$HDF5LIB"
    else
       WITHHDF5ARG="--without-hdf5"
    fi
    ./configure CXX="$CXX_COMPILER" CC="$C_COMPILER" \
        CFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS" \
        --without-readline "$WITHHDF5ARG" --without-exodus \
        --disable-sdx --without-python --disable-browser
    if [[ $? != 0 ]] ; then
       echo "Silo configure failed.  Giving up"
       return 1
    fi

    #
    # Build Silo
    #
    info_box "Building Silo . . . (~2 minutes)" >&3
    echo "Building Silo"
    $MAKE
    if [[ $? != 0 ]] ; then
       echo "Silo build failed.  Giving up"
       return 1
    fi

    if [[ "$OPSYS" == "Darwin" ]]; then
        #
        # Make dynamic executable
        #
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/silo/${SILO_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        $C_COMPILER -dynamiclib -o libsilo.${SO_EXT} silo/*/*.o \
           -Wl,-headerpad_max_install_names,-undefined,dynamic_lookup \
           -Wl,-install_name,$INSTALLNAMEPATH/libsilo.${SO_EXT} \
           -Wl,-compatibility_version,${SILO_COMPATIBILITY_VERSION} \
           -Wl,-current_version,${SILO_VERSION}
        if [[ $? != 0 ]] ; then
           echo "Silo dynamic library build failed.  Giving up"
           return 1
        fi
    fi

    #
    # Install into the VisIt third party location.
    #
    info_box "Installing Silo . . ." >&3
    echo "Installing Silo"
    mkdir "$VISITDIR/silo"
    mkdir "$VISITDIR/silo/${SILO_VERSION}"
    mkdir "$VISITDIR/silo/${SILO_VERSION}/$VISITARCH"
    mkdir "$VISITDIR/silo/${SILO_VERSION}/$VISITARCH/include"
    mkdir "$VISITDIR/silo/${SILO_VERSION}/$VISITARCH/lib"
    cp silo/silo/silo.h   "$VISITDIR/silo/${SILO_VERSION}/$VISITARCH/include"
    cp silo/silo/silo.inc "$VISITDIR/silo/${SILO_VERSION}/$VISITARCH/include"
    cp silo/sdx/sdx.h     "$VISITDIR/silo/${SILO_VERSION}/$VISITARCH/include"
    cp silo/sdx/sdx.inc   "$VISITDIR/silo/${SILO_VERSION}/$VISITARCH/include"
    if [[ "$OPSYS" == "Darwin" ]]; then
        cp libsilo.${SO_EXT}  "$VISITDIR/silo/${SILO_VERSION}/$VISITARCH/lib"
    else
        cp lib/libsilo.a  "$VISITDIR/silo/${SILO_VERSION}/$VISITARCH/lib"
    fi
    cd "$START_DIR"
    echo "Done with Silo"
}


# *************************************************************************** #
#                          Function 8.1, build_hdf5                            #
# *************************************************************************** #

function build_hdf5
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -f ${HDF5_FILE} ]] ; then
       info_box "Unzipping/Tarring ${HDF5_FILE} . . ." >&3
       uncompress_untar ${HDF5_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar $HDF5_FILE  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${HDF5_FILE%.*} ]] ; then
       info_box "Tarring ${HDF5_FILE%.*} . . ." >&3
       tar xf ${HDF5_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${HDF5_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    #
    info_box "Configuring HDF5 . . ." >&3
    HDF5_DIR=${HDF5_FILE%.tar*}
    cd ${HDF5_DIR}
    echo "Invoking command to configure HDF5"
    ./configure CXX="$CXX_COMPILER" CC="$C_COMPILER" \
        CFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS" \
        --prefix="$VISITDIR/hdf5/$HDF5_VERSION/$VISITARCH"
    if [[ $? != 0 ]] ; then
       echo "HDF5 configure failed.  Giving up"
       return 1
    fi

    #
    # Build HDF5
    #
    info_box "Building HDF5 . . . (~2 minutes)" >&3
    echo "Building HDF5"
    $MAKE
    if [[ $? != 0 ]] ; then
       echo "HDF5 build failed.  Giving up"
       return 1
    fi
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing HDF5 . . ." >&3
    echo "Installing HDF5"
    $MAKE install
    if [[ $? != 0 ]] ; then
       echo "HDF5 install failed.  Giving up"
       return 1
    fi

    if [[ "$OPSYS" == "Darwin" ]]; then
        #
        # Make dynamic executable, need to patch up the install path and
        # version information.
        #
        info_box "Creating dynamic libraries for HDF5 . . ." >&3
        echo "Creating dynamic libraries for HDF5"
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/hdf5/${HDF5_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
## go back to gcc bacause if "external relocation entries" restFP saveFP
##      libtool -o libhdf5.${SO_EXT} -dynamic src/.libs/libhdf5.a -lSystem -lz \
##      -twolevel_namespace -undefined dynamic_lookup \
##      -headerpad_max_install_names \
##      -install_name $INSTALLNAMEPATH/libhdf5.${SO_EXT} \
##      -compatibility_version $HDF5_COMPATIBILITY_VERSION \
##      -current_version $HDF5_VERSION
        $C_COMPILER -dynamiclib -o libhdf5.${SO_EXT} src/*.o \
           -Wl,-twolevel_namespace,-headerpad_max_install_names \
           -Wl,-undefined,dynamic_lookup \
           -Wl,-install_name,$INSTALLNAMEPATH/libhdf5.${SO_EXT} \
           -Wl,-compatibility_version,$HDF5_COMPATIBILITY_VERSION \
           -Wl,-current_version,$HDF5_VERSION -lSystem -lz
        if [[ $? != 0 ]] ; then
           echo "HDF5 dynamic library build failed.  Giving up"
           return 1
        fi
        rm -f "$VISITDIR/hdf5/$HDF5_VERSION/$VISITARCH/lib/libhdf5.${SO_EXT}"
        cp libhdf5.${SO_EXT} "$VISITDIR/hdf5/$HDF5_VERSION/$VISITARCH/lib"

    fi

    cd "$START_DIR"
    echo "Done with HDF5"
}


# *************************************************************************** #
#                          Function 8.2, build_mili                            #
# *************************************************************************** #

function build_mili
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -f ${MILI_FILE} ]] ; then
       info_box "Unzipping/Tarring ${MILI_FILE} . . ." >&3
       uncompress_untar ${MILI_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${MILI_FILE}.  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${MILI_FILE%.*} ]] ; then
       info_box "Tarring ${MILI_FILE%.*} . . ." >&3
       tar xf ${MILI_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${MILI_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    #
    if [[ "$OPSYS" == "Darwin" ]]; then
        #
        # Apply patches
        #
        info_box "Patching Mili . . ." >&3
        patch -p0 << \EOF
diff -rp mili.orig/src/mili_internal.h mili/src/mili_internal.h
*** mili.orig/src/mili_internal.h       Thu Oct 12 14:31:40 2006
--- mili/src/mili_internal.h    Thu Mar 22 16:39:39 2007
***************
*** 54,59 ****
--- 54,60 ----
  #include <stdio.h>
  #include <stdlib.h>
  #include <dirent.h>
+ #include <sys/types.h>
  #include "list.h"
  #include "misc.h"
  #include "mili.h"
EOF
       if [[ $? != 0 ]] ; then
          echo "Unable to patch Mili. Wrong version?"
          return 1
       fi
    fi

    info_box "Configuring Mili . . ." >&3
    MILI_DIR=${MILI_FILE%.tar*}
    cd ${MILI_DIR}

    echo "Invoking command to configure Mili"
    ./configure CXX="$CXX_COMPILER" CC="$C_COMPILER" \
        CFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS" \
        --prefix="$VISITDIR/mili/$MILI_VERSION/$VISITARCH"
    if [[ $? != 0 ]] ; then
       echo "Mili configure failed.  Giving up"
       return 1
    fi

    #
    # Build Mili
    #
    info_box "Building Mili . . . (~2 minutes)" >&3
    echo "Building Mili"
    cd MILI-$OPSYS-*
    cd src
    $C_COMPILER $C_OPT_FLAGS -D_LARGEFILE64_SOURCE -c \
        mili.c direc.c param.c io.c util.c dep.c svar.c \
        srec.c mesh_u.c wrap_c.c io_mem.c eprtf.c \
        sarray.c gahl.c util.c partition.c ti.c tidirc.c
    if [[ $? != 0 ]] ; then
        echo "Mili build failed.  Giving up"
        return 1
    fi
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing Mili . . ." >&3
    echo "Installing Mili"
    mkdir "$VISITDIR/mili"
    mkdir "$VISITDIR/mili/$MILI_VERSION"
    mkdir "$VISITDIR/mili/$MILI_VERSION/$VISITARCH"
    cp mili.h "$VISITDIR/mili/$MILI_VERSION/$VISITARCH"
    cp mili_enum.h "$VISITDIR/mili/$MILI_VERSION/$VISITARCH"
    if [[ "$OPSYS" == "Darwin" ]]; then
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/mili/${MILI_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        $C_COMPILER -dynamiclib -o libmili.$SO_EXT *.o \
          -Wl,-headerpad_max_install_names \
          -Wl,-install_name,$INSTALLNAMEPATH/libmili.${SO_EXT} \
          -Wl,-compatibility_version,$MILI_COMPATIBILITY_VERSION \
          -Wl,-current_version,$MILI_VERSION
        if [[ $? != 0 ]] ; then
          echo "Mili dynamic library build failed.  Giving up"
          return 1
        fi
        cp libmili.$SO_EXT "$VISITDIR/mili/$MILI_VERSION/$VISITARCH"
    else
        ar -rc libmili.a *.o 
        if [[ $? != 0 ]] ; then
          echo "Mili install failed.  Giving up"
          return 1
        fi
        cp libmili.a "$VISITDIR/mili/$MILI_VERSION/$VISITARCH"
    fi

    cd "$START_DIR"
    echo "Done with Mili"
}


# *************************************************************************** #
#                          Function 8.3, build_hdf4                            #
# *************************************************************************** #

function build_hdf4
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -f ${HDF4_FILE} ]] ; then
       info_box "Unzipping/Tarring ${HDF4_FILE} . . ." >&3
       uncompress_untar ${HDF4_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${HDF4_FILE}.  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${HDF4_FILE%.*} ]] ; then
       info_box "Tarring ${HDF4_FILE%.*} . . ." >&3
       tar xf ${HDF4_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${HDF4_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    if [[ "$OPSYS" == "Darwin" ]]; then
        #
        # Apply patches
        #
        info_box "Patching HDF4 . . ." >&3
        patch -p0 << \EOF
*** HDF4.2r1.orig/configure	Tue Feb  8 10:29:27 2005
--- HDF4.2r1/configure	Thu Apr 26 13:30:56 2007
*************** done
*** 5656,5711 ****
  
  echo "$as_me:$LINENO: checking for jpeg_start_decompress in -ljpeg" >&5
  echo $ECHO_N "checking for jpeg_start_decompress in -ljpeg... $ECHO_C" >&6
! if test "${ac_cv_lib_jpeg_jpeg_start_decompress+set}" = set; then
!   echo $ECHO_N "(cached) $ECHO_C" >&6
! else
!   ac_check_lib_save_LIBS=$LIBS
! LIBS="-ljpeg  $LIBS"
! cat >conftest.$ac_ext <<_ACEOF
! #line $LINENO "configure"
! /* confdefs.h.  */
! _ACEOF
! cat confdefs.h >>conftest.$ac_ext
! cat >>conftest.$ac_ext <<_ACEOF
! /* end confdefs.h.  */
! 
! /* Override any gcc2 internal prototype to avoid an error.  */
! #ifdef __cplusplus
! extern "C"
! #endif
! /* We use char because int might match the return type of a gcc2
!    builtin and then its argument prototype would still apply.  */
! char jpeg_start_decompress ();
! int
! main ()
! {
! jpeg_start_decompress ();
!   ;
!   return 0;
! }
! _ACEOF
! rm -f conftest.$ac_objext conftest$ac_exeext
! if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
!   (eval $ac_link) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); } &&
!          { ac_try='test -s conftest$ac_exeext'
!   { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
!   (eval $ac_try) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); }; }; then
!   ac_cv_lib_jpeg_jpeg_start_decompress=yes
! else
!   echo "$as_me: failed program was:" >&5
! sed 's/^/| /' conftest.$ac_ext >&5
! 
! ac_cv_lib_jpeg_jpeg_start_decompress=no
! fi
! rm -f conftest.$ac_objext conftest$ac_exeext conftest.$ac_ext
! LIBS=$ac_check_lib_save_LIBS
! fi
  echo "$as_me:$LINENO: result: $ac_cv_lib_jpeg_jpeg_start_decompress" >&5
  echo "${ECHO_T}$ac_cv_lib_jpeg_jpeg_start_decompress" >&6
  if test $ac_cv_lib_jpeg_jpeg_start_decompress = yes; then
--- 5656,5712 ----
  
  echo "$as_me:$LINENO: checking for jpeg_start_decompress in -ljpeg" >&5
  echo $ECHO_N "checking for jpeg_start_decompress in -ljpeg... $ECHO_C" >&6
! #if test "${ac_cv_lib_jpeg_jpeg_start_decompress+set}" = set; then
! #  echo $ECHO_N "(cached) $ECHO_C" >&6
! #else
! #  ac_check_lib_save_LIBS=$LIBS
! #LIBS="-ljpeg  $LIBS"
! #cat >conftest.$ac_ext <<_ACEOF
! ##line $LINENO "configure"
! #/* confdefs.h.  */
! #_ACEOF
! #cat confdefs.h >>conftest.$ac_ext
! #cat >>conftest.$ac_ext <<_ACEOF
! #/* end confdefs.h.  */
! #
! #/* Override any gcc2 internal prototype to avoid an error.  */
! ##ifdef __cplusplus
! #extern "C"
! ##endif
! #/* We use char because int might match the return type of a gcc2
! #   builtin and then its argument prototype would still apply.  */
! #char jpeg_start_decompress ();
! #int
! #main ()
! #{
! #jpeg_start_decompress ();
! #  ;
! #  return 0;
! #}
! #_ACEOF
! #rm -f conftest.$ac_objext conftest$ac_exeext
! #if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
! #  (eval $ac_link) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); } &&
! #         { ac_try='test -s conftest$ac_exeext'
! #  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
! #  (eval $ac_try) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); }; }; then
! #  ac_cv_lib_jpeg_jpeg_start_decompress=yes
! #else
! #  echo "$as_me: failed program was:" >&5
! #sed 's/^/| /' conftest.$ac_ext >&5
! #
! #ac_cv_lib_jpeg_jpeg_start_decompress=no
! #fi
! #rm -f conftest.$ac_objext conftest$ac_exeext conftest.$ac_ext
! #LIBS=$ac_check_lib_save_LIBS
! #fi
! ac_cv_lib_jpeg_jpeg_start_decompress=yes
  echo "$as_me:$LINENO: result: $ac_cv_lib_jpeg_jpeg_start_decompress" >&5
  echo "${ECHO_T}$ac_cv_lib_jpeg_jpeg_start_decompress" >&6
  if test $ac_cv_lib_jpeg_jpeg_start_decompress = yes; then
*************** echo "${ECHO_T}$ac_cv_type_intp" >&6
*** 6874,7183 ****
  
  echo "$as_me:$LINENO: checking size of int*" >&5
  echo $ECHO_N "checking size of int*... $ECHO_C" >&6
! if test "${ac_cv_sizeof_intp+set}" = set; then
!   echo $ECHO_N "(cached) $ECHO_C" >&6
! else
!   if test "$ac_cv_type_intp" = yes; then
!   # The cast to unsigned long works around a bug in the HP C Compiler
!   # version HP92453-01 B.11.11.23709.GP, which incorrectly rejects
!   # declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.
!   # This bug is HP SR number 8606223364.
!   if test "$cross_compiling" = yes; then
!   # Depending upon the size, compute the lo and hi bounds.
! cat >conftest.$ac_ext <<_ACEOF
! #line $LINENO "configure"
! /* confdefs.h.  */
! _ACEOF
! cat confdefs.h >>conftest.$ac_ext
! cat >>conftest.$ac_ext <<_ACEOF
! /* end confdefs.h.  */
! $ac_includes_default
! int
! main ()
! {
! static int test_array [1 - 2 * !(((long) (sizeof (int*))) >= 0)];
! test_array [0] = 0
! 
!   ;
!   return 0;
! }
! _ACEOF
! rm -f conftest.$ac_objext
! if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
!   (eval $ac_compile) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); } &&
!          { ac_try='test -s conftest.$ac_objext'
!   { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
!   (eval $ac_try) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); }; }; then
!   ac_lo=0 ac_mid=0
!   while :; do
!     cat >conftest.$ac_ext <<_ACEOF
! #line $LINENO "configure"
! /* confdefs.h.  */
! _ACEOF
! cat confdefs.h >>conftest.$ac_ext
! cat >>conftest.$ac_ext <<_ACEOF
! /* end confdefs.h.  */
! $ac_includes_default
! int
! main ()
! {
! static int test_array [1 - 2 * !(((long) (sizeof (int*))) <= $ac_mid)];
! test_array [0] = 0
! 
!   ;
!   return 0;
! }
! _ACEOF
! rm -f conftest.$ac_objext
! if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
!   (eval $ac_compile) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); } &&
!          { ac_try='test -s conftest.$ac_objext'
!   { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
!   (eval $ac_try) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); }; }; then
!   ac_hi=$ac_mid; break
! else
!   echo "$as_me: failed program was:" >&5
! sed 's/^/| /' conftest.$ac_ext >&5
! 
! ac_lo=`expr $ac_mid + 1`
!                     if test $ac_lo -le $ac_mid; then
!                       ac_lo= ac_hi=
!                       break
!                     fi
!                     ac_mid=`expr 2 '*' $ac_mid + 1`
! fi
! rm -f conftest.$ac_objext conftest.$ac_ext
!   done
! else
!   echo "$as_me: failed program was:" >&5
! sed 's/^/| /' conftest.$ac_ext >&5
! 
! cat >conftest.$ac_ext <<_ACEOF
! #line $LINENO "configure"
! /* confdefs.h.  */
! _ACEOF
! cat confdefs.h >>conftest.$ac_ext
! cat >>conftest.$ac_ext <<_ACEOF
! /* end confdefs.h.  */
! $ac_includes_default
! int
! main ()
! {
! static int test_array [1 - 2 * !(((long) (sizeof (int*))) < 0)];
! test_array [0] = 0
! 
!   ;
!   return 0;
! }
! _ACEOF
! rm -f conftest.$ac_objext
! if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
!   (eval $ac_compile) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); } &&
!          { ac_try='test -s conftest.$ac_objext'
!   { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
!   (eval $ac_try) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); }; }; then
!   ac_hi=-1 ac_mid=-1
!   while :; do
!     cat >conftest.$ac_ext <<_ACEOF
! #line $LINENO "configure"
! /* confdefs.h.  */
! _ACEOF
! cat confdefs.h >>conftest.$ac_ext
! cat >>conftest.$ac_ext <<_ACEOF
! /* end confdefs.h.  */
! $ac_includes_default
! int
! main ()
! {
! static int test_array [1 - 2 * !(((long) (sizeof (int*))) >= $ac_mid)];
! test_array [0] = 0
! 
!   ;
!   return 0;
! }
! _ACEOF
! rm -f conftest.$ac_objext
! if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
!   (eval $ac_compile) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); } &&
!          { ac_try='test -s conftest.$ac_objext'
!   { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
!   (eval $ac_try) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); }; }; then
!   ac_lo=$ac_mid; break
! else
!   echo "$as_me: failed program was:" >&5
! sed 's/^/| /' conftest.$ac_ext >&5
! 
! ac_hi=`expr '(' $ac_mid ')' - 1`
!                        if test $ac_mid -le $ac_hi; then
!                          ac_lo= ac_hi=
!                          break
!                        fi
!                        ac_mid=`expr 2 '*' $ac_mid`
! fi
! rm -f conftest.$ac_objext conftest.$ac_ext
!   done
! else
!   echo "$as_me: failed program was:" >&5
! sed 's/^/| /' conftest.$ac_ext >&5
! 
! ac_lo= ac_hi=
! fi
! rm -f conftest.$ac_objext conftest.$ac_ext
! fi
! rm -f conftest.$ac_objext conftest.$ac_ext
! # Binary search between lo and hi bounds.
! while test "x$ac_lo" != "x$ac_hi"; do
!   ac_mid=`expr '(' $ac_hi - $ac_lo ')' / 2 + $ac_lo`
!   cat >conftest.$ac_ext <<_ACEOF
! #line $LINENO "configure"
! /* confdefs.h.  */
! _ACEOF
! cat confdefs.h >>conftest.$ac_ext
! cat >>conftest.$ac_ext <<_ACEOF
! /* end confdefs.h.  */
! $ac_includes_default
! int
! main ()
! {
! static int test_array [1 - 2 * !(((long) (sizeof (int*))) <= $ac_mid)];
! test_array [0] = 0
! 
!   ;
!   return 0;
! }
! _ACEOF
! rm -f conftest.$ac_objext
! if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
!   (eval $ac_compile) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); } &&
!          { ac_try='test -s conftest.$ac_objext'
!   { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
!   (eval $ac_try) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); }; }; then
!   ac_hi=$ac_mid
! else
!   echo "$as_me: failed program was:" >&5
! sed 's/^/| /' conftest.$ac_ext >&5
! 
! ac_lo=`expr '(' $ac_mid ')' + 1`
! fi
! rm -f conftest.$ac_objext conftest.$ac_ext
! done
! case $ac_lo in
! ?*) ac_cv_sizeof_intp=$ac_lo;;
! '') { { echo "$as_me:$LINENO: error: cannot compute sizeof (int*), 77
! See \`config.log' for more details." >&5
! echo "$as_me: error: cannot compute sizeof (int*), 77
! See \`config.log' for more details." >&2;}
!    { (exit 1); exit 1; }; } ;;
! esac
! else
!   if test "$cross_compiling" = yes; then
!   { { echo "$as_me:$LINENO: error: cannot run test program while cross compiling
! See \`config.log' for more details." >&5
! echo "$as_me: error: cannot run test program while cross compiling
! See \`config.log' for more details." >&2;}
!    { (exit 1); exit 1; }; }
! else
!   cat >conftest.$ac_ext <<_ACEOF
! #line $LINENO "configure"
! /* confdefs.h.  */
! _ACEOF
! cat confdefs.h >>conftest.$ac_ext
! cat >>conftest.$ac_ext <<_ACEOF
! /* end confdefs.h.  */
! $ac_includes_default
! long longval () { return (long) (sizeof (int*)); }
! unsigned long ulongval () { return (long) (sizeof (int*)); }
! #include <stdio.h>
! #include <stdlib.h>
! int
! main ()
! {
! 
!   FILE *f = fopen ("conftest.val", "w");
!   if (! f)
!     exit (1);
!   if (((long) (sizeof (int*))) < 0)
!     {
!       long i = longval ();
!       if (i != ((long) (sizeof (int*))))
! 	exit (1);
!       fprintf (f, "%ld\n", i);
!     }
!   else
!     {
!       unsigned long i = ulongval ();
!       if (i != ((long) (sizeof (int*))))
! 	exit (1);
!       fprintf (f, "%lu\n", i);
!     }
!   exit (ferror (f) || fclose (f) != 0);
! 
!   ;
!   return 0;
! }
! _ACEOF
! rm -f conftest$ac_exeext
! if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
!   (eval $ac_link) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); } && { ac_try='./conftest$ac_exeext'
!   { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
!   (eval $ac_try) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); }; }; then
!   ac_cv_sizeof_intp=`cat conftest.val`
! else
!   echo "$as_me: program exited with status $ac_status" >&5
! echo "$as_me: failed program was:" >&5
! sed 's/^/| /' conftest.$ac_ext >&5
! 
! ( exit $ac_status )
! { { echo "$as_me:$LINENO: error: cannot compute sizeof (int*), 77
! See \`config.log' for more details." >&5
! echo "$as_me: error: cannot compute sizeof (int*), 77
! See \`config.log' for more details." >&2;}
!    { (exit 1); exit 1; }; }
! fi
! rm -f core core.* *.core gmon.out bb.out conftest$ac_exeext conftest.$ac_objext conftest.$ac_ext
! fi
! fi
! rm -f conftest.val
! else
!   ac_cv_sizeof_intp=0
! fi
! fi
  echo "$as_me:$LINENO: result: $ac_cv_sizeof_intp" >&5
  echo "${ECHO_T}$ac_cv_sizeof_intp" >&6
  cat >>confdefs.h <<_ACEOF
--- 6875,7185 ----
  
  echo "$as_me:$LINENO: checking size of int*" >&5
  echo $ECHO_N "checking size of int*... $ECHO_C" >&6
! #if test "${ac_cv_sizeof_intp+set}" = set; then
! #  echo $ECHO_N "(cached) $ECHO_C" >&6
! #else
! #  if test "$ac_cv_type_intp" = yes; then
! #  # The cast to unsigned long works around a bug in the HP C Compiler
! #  # version HP92453-01 B.11.11.23709.GP, which incorrectly rejects
! #  # declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.
! #  # This bug is HP SR number 8606223364.
! #  if test "$cross_compiling" = yes; then
! #  # Depending upon the size, compute the lo and hi bounds.
! #cat >conftest.$ac_ext <<_ACEOF
! ##line $LINENO "configure"
! #/* confdefs.h.  */
! #_ACEOF
! #cat confdefs.h >>conftest.$ac_ext
! #cat >>conftest.$ac_ext <<_ACEOF
! #/* end confdefs.h.  */
! #$ac_includes_default
! #int
! #main ()
! #{
! #static int test_array [1 - 2 * !(((long) (sizeof (int*))) >= 0)];
! #test_array [0] = 0
! #
! #  ;
! #  return 0;
! #}
! #_ACEOF
! #rm -f conftest.$ac_objext
! #if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
! #  (eval $ac_compile) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); } &&
! #         { ac_try='test -s conftest.$ac_objext'
! #  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
! #  (eval $ac_try) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); }; }; then
! #  ac_lo=0 ac_mid=0
! #  while :; do
! #    cat >conftest.$ac_ext <<_ACEOF
! ##line $LINENO "configure"
! #/* confdefs.h.  */
! #_ACEOF
! #cat confdefs.h >>conftest.$ac_ext
! #cat >>conftest.$ac_ext <<_ACEOF
! #/* end confdefs.h.  */
! #$ac_includes_default
! #int
! #main ()
! #{
! #static int test_array [1 - 2 * !(((long) (sizeof (int*))) <= $ac_mid)];
! #test_array [0] = 0
! #
! #  ;
! #  return 0;
! #}
! #_ACEOF
! #rm -f conftest.$ac_objext
! #if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
! #  (eval $ac_compile) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); } &&
! #         { ac_try='test -s conftest.$ac_objext'
! #  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
! #  (eval $ac_try) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); }; }; then
! #  ac_hi=$ac_mid; break
! #else
! #  echo "$as_me: failed program was:" >&5
! #sed 's/^/| /' conftest.$ac_ext >&5
! #
! #ac_lo=`expr $ac_mid + 1`
! #                    if test $ac_lo -le $ac_mid; then
! #                      ac_lo= ac_hi=
! #                      break
! #                    fi
! #                    ac_mid=`expr 2 '*' $ac_mid + 1`
! #fi
! #rm -f conftest.$ac_objext conftest.$ac_ext
! #  done
! #else
! #  echo "$as_me: failed program was:" >&5
! #sed 's/^/| /' conftest.$ac_ext >&5
! #
! #cat >conftest.$ac_ext <<_ACEOF
! ##line $LINENO "configure"
! #/* confdefs.h.  */
! #_ACEOF
! #cat confdefs.h >>conftest.$ac_ext
! #cat >>conftest.$ac_ext <<_ACEOF
! #/* end confdefs.h.  */
! #$ac_includes_default
! #int
! #main ()
! #{
! #static int test_array [1 - 2 * !(((long) (sizeof (int*))) < 0)];
! #test_array [0] = 0
! #
! #  ;
! #  return 0;
! #}
! #_ACEOF
! #rm -f conftest.$ac_objext
! #if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
! #  (eval $ac_compile) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); } &&
! #         { ac_try='test -s conftest.$ac_objext'
! #  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
! #  (eval $ac_try) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); }; }; then
! #  ac_hi=-1 ac_mid=-1
! #  while :; do
! #    cat >conftest.$ac_ext <<_ACEOF
! ##line $LINENO "configure"
! #/* confdefs.h.  */
! #_ACEOF
! #cat confdefs.h >>conftest.$ac_ext
! #cat >>conftest.$ac_ext <<_ACEOF
! #/* end confdefs.h.  */
! #$ac_includes_default
! #int
! #main ()
! #{
! #static int test_array [1 - 2 * !(((long) (sizeof (int*))) >= $ac_mid)];
! #test_array [0] = 0
! #
! #  ;
! #  return 0;
! #}
! #_ACEOF
! #rm -f conftest.$ac_objext
! #if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
! #  (eval $ac_compile) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); } &&
! #         { ac_try='test -s conftest.$ac_objext'
! #  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
! #  (eval $ac_try) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); }; }; then
! #  ac_lo=$ac_mid; break
! #else
! #  echo "$as_me: failed program was:" >&5
! #sed 's/^/| /' conftest.$ac_ext >&5
! #
! #ac_hi=`expr '(' $ac_mid ')' - 1`
! #                       if test $ac_mid -le $ac_hi; then
! #                         ac_lo= ac_hi=
! #                         break
! #                       fi
! #                       ac_mid=`expr 2 '*' $ac_mid`
! #fi
! #rm -f conftest.$ac_objext conftest.$ac_ext
! #  done
! #else
! #  echo "$as_me: failed program was:" >&5
! #sed 's/^/| /' conftest.$ac_ext >&5
! #
! #ac_lo= ac_hi=
! #fi
! #rm -f conftest.$ac_objext conftest.$ac_ext
! #fi
! #rm -f conftest.$ac_objext conftest.$ac_ext
! ## Binary search between lo and hi bounds.
! #while test "x$ac_lo" != "x$ac_hi"; do
! #  ac_mid=`expr '(' $ac_hi - $ac_lo ')' / 2 + $ac_lo`
! #  cat >conftest.$ac_ext <<_ACEOF
! ##line $LINENO "configure"
! #/* confdefs.h.  */
! #_ACEOF
! #cat confdefs.h >>conftest.$ac_ext
! #cat >>conftest.$ac_ext <<_ACEOF
! #/* end confdefs.h.  */
! #$ac_includes_default
! #int
! #main ()
! #{
! #static int test_array [1 - 2 * !(((long) (sizeof (int*))) <= $ac_mid)];
! #test_array [0] = 0
! #
! #  ;
! #  return 0;
! #}
! #_ACEOF
! #rm -f conftest.$ac_objext
! #if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
! #  (eval $ac_compile) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); } &&
! #         { ac_try='test -s conftest.$ac_objext'
! #  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
! #  (eval $ac_try) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); }; }; then
! #  ac_hi=$ac_mid
! #else
! #  echo "$as_me: failed program was:" >&5
! #sed 's/^/| /' conftest.$ac_ext >&5
! #
! #ac_lo=`expr '(' $ac_mid ')' + 1`
! #fi
! #rm -f conftest.$ac_objext conftest.$ac_ext
! #done
! #case $ac_lo in
! #?*) ac_cv_sizeof_intp=$ac_lo;;
! #'') { { echo "$as_me:$LINENO: error: cannot compute sizeof (int*), 77
! #See \`config.log' for more details." >&5
! #echo "$as_me: error: cannot compute sizeof (int*), 77
! #See \`config.log' for more details." >&2;}
! #   { (exit 1); exit 1; }; } ;;
! #esac
! #else
! #  if test "$cross_compiling" = yes; then
! #  { { echo "$as_me:$LINENO: error: cannot run test program while cross compiling
! #See \`config.log' for more details." >&5
! #echo "$as_me: error: cannot run test program while cross compiling
! #See \`config.log' for more details." >&2;}
! #   { (exit 1); exit 1; }; }
! #else
! #  cat >conftest.$ac_ext <<_ACEOF
! ##line $LINENO "configure"
! #/* confdefs.h.  */
! #_ACEOF
! #cat confdefs.h >>conftest.$ac_ext
! #cat >>conftest.$ac_ext <<_ACEOF
! #/* end confdefs.h.  */
! #$ac_includes_default
! #long longval () { return (long) (sizeof (int*)); }
! #unsigned long ulongval () { return (long) (sizeof (int*)); }
! ##include <stdio.h>
! ##include <stdlib.h>
! #int
! #main ()
! #{
! #
! #  FILE *f = fopen ("conftest.val", "w");
! #  if (! f)
! #    exit (1);
! #  if (((long) (sizeof (int*))) < 0)
! #    {
! #      long i = longval ();
! #      if (i != ((long) (sizeof (int*))))
! #	exit (1);
! #      fprintf (f, "%ld\n", i);
! #    }
! #  else
! #    {
! #      unsigned long i = ulongval ();
! #      if (i != ((long) (sizeof (int*))))
! #	exit (1);
! #      fprintf (f, "%lu\n", i);
! #    }
! #  exit (ferror (f) || fclose (f) != 0);
! #
! #  ;
! #  return 0;
! #}
! #_ACEOF
! #rm -f conftest$ac_exeext
! #if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
! #  (eval $ac_link) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); } && { ac_try='./conftest$ac_exeext'
! #  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
! #  (eval $ac_try) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); }; }; then
! #  ac_cv_sizeof_intp=`cat conftest.val`
! #else
! #  echo "$as_me: program exited with status $ac_status" >&5
! #echo "$as_me: failed program was:" >&5
! #sed 's/^/| /' conftest.$ac_ext >&5
! #
! #( exit $ac_status )
! #{ { echo "$as_me:$LINENO: error: cannot compute sizeof (int*), 77
! #See \`config.log' for more details." >&5
! #echo "$as_me: error: cannot compute sizeof (int*), 77
! #See \`config.log' for more details." >&2;}
! #   { (exit 1); exit 1; }; }
! #fi
! #rm -f core core.* *.core gmon.out bb.out conftest$ac_exeext conftest.$ac_objext conftest.$ac_ext
! #fi
! #fi
! #rm -f conftest.val
! #else
! #  ac_cv_sizeof_intp=0
! #fi
! #fi
! ac_cv_sizeof_intp=4
  echo "$as_me:$LINENO: result: $ac_cv_sizeof_intp" >&5
  echo "${ECHO_T}$ac_cv_sizeof_intp" >&6
  cat >>confdefs.h <<_ACEOF
*** HDF4.2r1.orig/hdf/src/hdfi.h	Mon Jan 24 19:36:44 2005
--- HDF4.2r1/hdf/src/hdfi.h	Thu Apr 26 13:39:53 2007
***************
*** 10,16 ****
   *                                                                          *
   ****************************************************************************/
  
! /* $Id: hdfi.h,v 1.156 2005/01/25 03:36:44 epourmal Exp $ */
  
  #ifndef HDFI_H
  #define HDFI_H
--- 10,16 ----
   *                                                                          *
   ****************************************************************************/
  
! /* $Id: hdfi.h 4798 2006-12-06 20:51:13Z epourmal $ */
  
  #ifndef HDFI_H
  #define HDFI_H
***************
*** 62,67 ****
--- 62,68 ----
  #define     DFMT_MIPSEL         0x4441
  #define     DFMT_PC             0x4441
  #define     DFMT_APPLE          0x1111
+ #define     DFMT_APPLE_INTEL    0x4441
  #define     DFMT_MAC            0x1111
  #define     DFMT_SUN386         0x4441
  #define     DFMT_NEXT           0x1111
*************** typedef int               hdf_pint_t;   
*** 607,612 ****
--- 608,626 ----
  
  #endif /* CRAYMPP */
  
+ /* CRAY XT3
+  * Note from RedStorm helpdesk,
+  * When I compile a C code with the '-v' option, it indicates that the compile
+  * is done with the macros __QK_USER__ and __LIBCATAMOUNT__ defined.  In
+  * addition, there are other macros like __x86_64__ defined as well, to
+  * indicate processor type.  __QK_USER__ might be a good check for Catamount,
+  * and __x86_64__ might be good for Opteron node.  You might try something
+  * like the following in a header file:
+  */
+ #if ((defined(__QK_USER__)) && (defined(__x86_64__)))
+ #define __CRAY_XT3__
+ #endif
+ 
  #if defined(VMS) || defined(vms)
  
  #ifdef GOT_MACHINE
*************** Please check your Makefile.
*** 736,742 ****
  #include <sys/types.h>
  #include <sys/file.h>               /* for unbuffered i/o stuff */
  #include <sys/stat.h>
! #define DF_MT   DFMT_APPLE 
  typedef void            VOID;
  typedef void            *VOIDP;
  typedef char            *_fcd;
--- 750,764 ----
  #include <sys/types.h>
  #include <sys/file.h>               /* for unbuffered i/o stuff */
  #include <sys/stat.h>
! #ifdef __i386
! #ifndef INTEL86
! #define INTEL86   /* we need this Intel define or bad things happen later */
! #endif /* INTEL86 */
! #define DF_MT   DFMT_APPLE_INTEL
! #else
! #define DF_MT   DFMT_APPLE
! #endif /* __i386 */
! 
  typedef void            VOID;
  typedef void            *VOIDP;
  typedef char            *_fcd;
*************** void exit(int status);
*** 886,892 ****
  #endif /*MAC*/
  
  /* Metrowerks Mac compiler defines some PC stuff so need to exclude this on the Mac */
! #if !(defined(macintosh) || defined(MAC))
  
  #if defined _M_ALPHA || defined _M_IX86 || defined INTEL86 || defined M_I86 || defined M_I386 || defined DOS386 || defined __i386 || defined UNIX386 || defined i386
  #ifndef INTEL86
--- 908,914 ----
  #endif /*MAC*/
  
  /* Metrowerks Mac compiler defines some PC stuff so need to exclude this on the Mac */
! #if !(defined(macintosh) || defined(MAC) || defined (__APPLE__))
  
  #if defined _M_ALPHA || defined _M_IX86 || defined INTEL86 || defined M_I86 || defined M_I386 || defined DOS386 || defined __i386 || defined UNIX386 || defined i386
  #ifndef INTEL86
EOF
       if [[ $? != 0 ]] ; then
          echo "Unable to patch HDF4. Wrong version?"
          return 1
       fi
    fi

    #
    info_box "Configuring HDF4 . . ." >&3
    HDF4_DIR=${HDF4_FILE%.tar*}
    cd ${HDF4_DIR}
    echo "Invoking command to configure HDF4"
    MAKEOPS=""
    if [[ "$OPSYS" == "Darwin" || "$OPSYS" == "AIX" ]]; then
        ./configure CXX="$CXX_COMPILER" CC="$C_COMPILER" \
        CFLAGS="$C_OPT_FLAGS" \
        CPPFLAGS="-I$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities \
        -I$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities/vtkjpeg" \
        --prefix="$VISITDIR/hdf4/$HDF4_VERSION/$VISITARCH" \
        --with-jpeg="$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH" \
        --with-szlib=no --disable-fortran --disable-dependency-tracking
        if [[ $? != 0 ]] ; then
           echo "HDF4 configure failed.  Giving up"
           return 1
        fi
        MAKEOPS="-i"
    else
        ./configure CXX="$CXX_COMPILER" CC="$C_COMPILER" \
        CFLAGS="$C_OPT_FLAGS" LIBS="-lm" --disable-fortran \
        --prefix="$VISITDIR/hdf4/$HDF4_VERSION/$VISITARCH"
        if [[ $? != 0 ]] ; then
           echo "HDF4 configure failed.  Giving up"
           return 1
        fi
    fi

    #
    # Build HDF4
    #
    info_box "Building HDF4 . . . (~2 minutes)" >&3
    echo "Building HDF4"
    $MAKE $MAKEOPS
    if [[ $? != 0 ]] ; then
       echo "HDF4 build failed.  Giving up"
       return 1
    fi
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing HDF4 . . ." >&3
    echo "Installing HDF4"
    $MAKE $MAKEOPS install 
    if [[ $? != 0 ]] ; then
       echo "HDF4 install failed.  Giving up"
       return 1
    fi

    if [[ "$OPSYS" == "Darwin" ]]; then
        #
        # Make dynamic executable
        #
        info_box "Creating dynamic libraries for HDF4 . . ." >&3
        echo "Creating dynamic libraries for HDF4"
        # Relink libdf.
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/hdf4/${HDF4_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        ${C_COMPILER} -dynamiclib -o libdf.${SO_EXT} hdf/src/*.o \
           -Wl,-headerpad_max_install_names,-undefined,dynamic_lookup \
           -Wl,-install_name,$INSTALLNAMEPATH/libdf.${SO_EXT} \
           -Wl,-compatibility_version,$HDF4_COMPATIBILITY_VERSION \
           -Wl,-current_version,$HDF4_VERSION \
           -L"$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/lib" -lvtkjpeg -lz
        if [[ $? != 0 ]] ; then
           echo \
"HDF4 dynamic library build failed for libdf.${SO_EXT}.  Giving up"
           return 1
        fi
        cp libdf.${SO_EXT} "$VISITDIR/hdf4/$HDF4_VERSION/$VISITARCH/lib"

        # Relink libmfhdf.
        ${C_COMPILER} -dynamiclib -o libmfhdf.${SO_EXT} mfhdf/libsrc/*.o \
           -Wl,-headerpad_max_install_names,-undefined,dynamic_lookup \
           -Wl,-install_name,$INSTALLNAMEPATH/libmfhdf.${SO_EXT} \
           -Wl,-compatibility_version,$HDF4_COMPATIBILITY_VERSION \
           -Wl,-current_version,$HDF4_VERSION \
           -L"$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/lib" \
           -L"$VISITDIR/hdf4/$HDF4_VERSION/$VISITARCH/lib" \
           -lvtkjpeg -ldf -lz
        if [[ $? != 0 ]] ; then
           echo \
"HDF4 dynamic library build failed for libmfhdf.${SO_EXT}.  Giving up"
           return 1
        fi
        cp libmfhdf.${SO_EXT} "$VISITDIR/hdf4/$HDF4_VERSION/$VISITARCH/lib"
    fi

    cd "$START_DIR"
    echo "Done with HDF4"
}


# *************************************************************************** #
#                         Function 8.4, build_netcdf                          #
# *************************************************************************** #

function build_netcdf
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -f ${NETCDF_FILE} ]] ; then
       info_box "Unzipping/Tarring ${NETCDF_FILE} . . ." >&3
       uncompress_untar ${NETCDF_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${NETCDF_FILE}.  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${NETCDF_FILE%.*} ]] ; then
       info_box "Tarring ${NETCDF_FILE%.*} . . ." >&3
       tar xf ${NETCDF_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${NETCDF_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    #
    # Apply patches
    #
    info_box "Patching NetCDF . . ." >&3
    patch -p0 << \EOF
*** netcdf-3.6.0-p1.orig/src/libsrc/netcdf.h	Tue Sep 14 06:41:22 2004
--- netcdf-3.6.0-p1/src/libsrc/netcdf.h	Thu Apr 26 14:14:41 2007
*************** typedef enum {
*** 130,140 ****
   * applications and utilities.  However, nothing is statically allocated to
   * these sizes internally.
   */
! #define NC_MAX_DIMS	512	 /* max dimensions per file */
  #define NC_MAX_ATTRS	4096	 /* max global or per variable attributes */
! #define NC_MAX_VARS	4096	 /* max variables per file */
  #define NC_MAX_NAME	128	 /* max length of a name */
! #define NC_MAX_VAR_DIMS	NC_MAX_DIMS /* max per variable dimensions */
  
  
  /*
--- 130,140 ----
   * applications and utilities.  However, nothing is statically allocated to
   * these sizes internally.
   */
! #define NC_MAX_DIMS	65536	 /* max dimensions per file */
  #define NC_MAX_ATTRS	4096	 /* max global or per variable attributes */
! #define NC_MAX_VARS	524288	 /* max variables per file */
  #define NC_MAX_NAME	128	 /* max length of a name */
! #define NC_MAX_VAR_DIMS	8 	 /* max per variable dimensions */
  
  
  /*
EOF
    if [[ $? != 0 ]] ; then
        echo "Unable to patch NetCDF. Wrong version?"
        return 1
    fi

    #
    info_box "Configuring NetCDF . . ." >&3
    cd netcdf-3.6.0-p1/src
    echo "Invoking command to configure NetCDF"
    if [[ "$OPSYS" == "Darwin" ]]; then
        EXTRA_FLAGS="--enable-largefile"
    else
        EXTRA_FLAGS=""
    fi
    ./configure CXX="$CXX_COMPILER" CC="$C_COMPILER" \
        CFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS" \
        FC="" $EXTRA_FLAGS \
        --prefix="$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH"
    if [[ $? != 0 ]] ; then
        echo "NetCDF configure failed.  Giving up"
        return 1
    fi

    #
    # Build NetCDF
    #
    info_box "Building NetCDF . . . (~2 minutes)" >&3
    echo "Building NetCDF"
    if [[ "$OPSYS" == "Darwin" ]]; then
        cd libsrc
        $C_COMPILER -c $C_OPT_FLAGS -DVERSION=`cat ../VERSION` libvers.c
        $C_COMPILER -c $C_OPT_FLAGS attr.c dim.c error.c nc.c ncio.c \
           ncx.c putget.c string.c v1hpg.c v2i.c var.c
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/netcdf/${NETCDF_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        $C_COMPILER -dynamiclib -o ../libnetcdf.${SO_EXT} *.o \
           -Wl,-headerpad_max_install_names \
           -Wl,-install_name,$INSTALLNAMEPATH/libnetcdf.${SO_EXT} \
           -Wl,-compatibility_version,$NETCDF_COMPATIBILITY_VERSION \
           -Wl,-current_version,$NETCDF_VERSION
        if [[ $? != 0 ]] ; then
           echo "NetCDF dynamic library build failed.  Giving up"
           return 1
        fi
        cd ../cxx
        $CXX_COMPILER -c $CXX_OPT_FLAGS -I../libsrc -I. netcdf.cpp
        $CXX_COMPILER -c $CXX_OPT_FLAGS -I../libsrc -I. ncvalues.cpp
        $CXX_COMPILER -dynamiclib -o ../libnetcdf_c++.${SO_EXT} \
           netcdf.o ncvalues.o -L.. -lnetcdf \
           -Wl,-headerpad_max_install_names \
           -Wl,-install_name,$INSTALLNAMEPATH/libnetcdf_c++.${SO_EXT} \
           -Wl,-compatibility_version,$NETCDF_COMPATIBILITY_VERSION \
           -Wl,-current_version,$NETCDF_VERSION
        if [[ $? != 0 ]] ; then
           echo "NetCDF dynamic library build failed.  Giving up"
           return 1
        fi
        cd ..
    else
        $MAKE
        if [[ $? != 0 ]] ; then
           echo "NetCDF build failed.  Giving up"
           return 1
        fi
    fi
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing NetCDF . . ." >&3
    echo "Installing NetCDF"
    mkdir "$VISITDIR/netcdf"
    mkdir "$VISITDIR/netcdf/$NETCDF_VERSION"
    mkdir "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH"
    mkdir "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/include"
    mkdir "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/lib"
    if [[ "$OPSYS" == "Darwin" ]]; then
        cp cxx/ncvalues.h  "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/include"
        cp cxx/netcdf.hh   "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/include"
        cp cxx/netcdfcpp.h "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/include"
        cp libsrc/netcdf.h "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/include"

        cp libnetcdf.${SO_EXT} "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/lib"
        cp libnetcdf_c++.${SO_EXT} \
           "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/lib"
    else
        $MAKE install
        if [[ $? != 0 ]] ; then
           echo "NetCDF install failed.  Giving up"
           return 1
        fi
    fi

    cd "$START_DIR"
    echo "Done with NetCDF"
}


# *************************************************************************** #
#                         Function 8.5, build_cgns                            #
# *************************************************************************** #

function build_cgns
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -f ${CGNS_FILE} ]] ; then
       info_box "Unzipping/Tarring ${CGNS_FILE} . . ." >&3
       uncompress_untar ${CGNS_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${CGNS_FILE}.  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${CGNS_FILE%.*} ]] ; then
       info_box "Tarring ${CGNS_FILE%.*} . . ." >&3
       tar xf ${CGNS_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${CGNS_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    #
    info_box "Configuring CGNS . . ." >&3
    CGNS_DIR=${CGNS_FILE%-3.tar*}
    cd ${CGNS_DIR}
    echo "Invoking command to configure CGNS"
    env CXX="$CXX_COMPILER" CC="$C_COMPILER" \
       CFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS" \
       ./configure --prefix="$VISITDIR/cgns/$CGNS_VERSION/$VISITARCH"
    if [[ $? != 0 ]] ; then
       echo "CGNS configure failed.  Giving up"
       return 1
    fi

    #
    # Build CGNS
    #
    info_box "Building CGNS . . . (~2 minutes)" >&3
    echo "Building CGNS"
    $MAKE
    if [[ $? != 0 ]] ; then
       echo "CGNS build failed.  Giving up"
       return 1
    fi
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing CGNS . . ." >&3
    echo "Installing CGNS"
    mkdir "$VISITDIR/cgns"
    mkdir "$VISITDIR/cgns/$CGNS_VERSION"
    mkdir "$VISITDIR/cgns/$CGNS_VERSION/$VISITARCH"
    mkdir "$VISITDIR/cgns/$CGNS_VERSION/$VISITARCH/include"
    mkdir "$VISITDIR/cgns/$CGNS_VERSION/$VISITARCH/lib"
    $MAKE install
    if [[ $? != 0 ]] ; then
       echo "CGNS install failed.  Giving up"
       return 1
    fi

    if [[ "$OPSYS" == "Darwin" ]]; then
        #
        # Make dynamic executable
        #
        info_box "Creating dynamic libraries for CGNS . . ." >&3
        echo "Creating dynamic libraries for CGNS"
        # Check for version >= 8.0.0 (MacOS 10.4, Tiger) for SystemStubs
        VER=$(uname -r)
        if (( ${VER%%.*} > 7 )) ; then
           USESTUBS="-lSystemStubs"
        else
           USESTUBS=""
        fi
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/cgns/${CGNS_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        libtool -o libcgns.${SO_EXT} -dynamic DARWIN/libcgns.a -lSystem \
           $USESTUBS -headerpad_max_install_names \
           -twolevel_namespace -undefined dynamic_lookup \
           -install_name $INSTALLNAMEPATH/libcgns.${SO_EXT} \
           -compatibility_version $CGNS_COMPATIBILITY_VERSION \
           -current_version $CGNS_VERSION
        if [[ $? != 0 ]] ; then
           echo "CGNS dynamic library creation failed.  Giving up"
           return 1
        fi
        cp libcgns.${SO_EXT} "$VISITDIR/cgns/$CGNS_VERSION/$VISITARCH/lib"
    fi

    cd "$START_DIR"
    echo "Done with CGNS"
}


# *************************************************************************** #
#                         Function 8.6, build_gdal                            #
# *************************************************************************** #

function build_gdal
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -f ${GDAL_FILE} ]] ; then
       info_box "Unzipping/Tarring ${GDAL_FILE} . . ." >&3
       uncompress_untar ${GDAL_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${GDAL_FILE}.  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${GDAL_FILE%.*} ]] ; then
       info_box "Tarring ${GDAL_FILE%.*} . . ." >&3
       tar xf ${GDAL_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${GDAL_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    #
    info_box "Configuring GDAL . . ." >&3
    GDAL_DIR=${GDAL_FILE%.tar*}
    cd ${GDAL_DIR}
    echo "Invoking command to configure GDAL"
    if [[ "$OPSYS" == "Darwin" ]]; then
       EXTRA_FLAGS="F77=\"\""
    else
       EXTRA_FLAGS=""
    fi
    ./configure CXX="$CXX_COMPILER" CC="$C_COMPILER" $EXTRA_FLAGS \
       CFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS" \
       --prefix="$VISITDIR/gdal/$GDAL_VERSION/$VISITARCH" \
       --with-libtiff=internal --with-gif=internal \
       --with-png=internal --with-jpeg=internal \
       --with-libz=internal --with-netcdf=no \
       --without-jasper --without-python
    if [[ $? != 0 ]] ; then
       echo "GDAL configure failed.  Giving up"
       return 1
    fi

    #
    # Build GDAL
    #
    info_box "Building GDAL . . . (~4 minutes)" >&3
    echo "Building GDAL"
    $MAKE
    if [[ $? != 0 ]] ; then
       echo "GDAL build failed.  Giving up"
       return 1
    fi
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing GDAL . . ." >&3
    echo "Installing GDAL"
    $MAKE install
    if [[ $? != 0 ]] ; then
       echo "GDAL install failed.  Giving up"
       return 1
    fi

    if [[ "$OPSYS" == "Darwin" ]]; then
        #
        # Make dynamic executable
        #
        info_box "Fixing install_name of dynamic libraries for GDAL . . ." >&3
        echo "Fixing install_name of dynamic libraries for GDAL"
        cp .libs/libgdal.1.10.0.${SO_EXT} libgdal.${SO_EXT}
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/gdal/${GDAL_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        install_name_tool -id \
           $INSTALLNAMEPATH/libgdal.${SO_EXT} \
           libgdal.${SO_EXT}
        rm "$VISITDIR/gdal/$GDAL_VERSION/$VISITARCH/lib/libgdal.${SO_EXT}"
        cp libgdal.${SO_EXT} \
        "$VISITDIR/gdal/$GDAL_VERSION/$VISITARCH/lib/libgdal.${SO_EXT}"
    fi

    cd "$START_DIR"
    echo "Done with GDAL"
}


# *************************************************************************** #
#                         Function 8.7, build_exodus                          #
# *************************************************************************** #

function build_exodus
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -f ${EXODUS_FILE} ]] ; then
       info_box "Unzipping/Tarring ${EXODUS_FILE} . . ." >&3
       uncompress_untar ${EXODUS_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${EXODUS_FILE}.  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${EXODUS_FILE%.*} ]] ; then
       info_box "Tarring ${EXODUS_FILE%.*} . . ." >&3
       tar xf ${EXODUS_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${EXODUS_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    EXODUS_DIR=${EXODUS_FILE%.tar*}
    cd ${EXODUS_DIR}
    #
    # Build Exodus
    #
    info_box "Building Exodus . . . (~2 minutes)" >&3
    echo "Building Exodus"
    cd cbind/src
    export NETCDFLIB="$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/lib"
    export NETCDFINC="$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/include"
    ${C_COMPILER} $C_OPT_FLAGS -I../include -I"$NETCDFINC" -c *.c
    if [[ $? != 0 ]] ; then
        echo "Exodus build failed.  Giving up"
        return 1
    fi
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing Exodus . . ." >&3
    echo "Installing Exodus"
    mkdir "$VISITDIR/exodus"
    mkdir "$VISITDIR/exodus/$EXODUS_VERSION"
    mkdir "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH"
    mkdir "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/inc"
    mkdir "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/lib"

    if [[ "$OPSYS" == "Darwin" ]]; then
        #
        # Make dynamic executable
        #
        info_box "Creating dynamic libraries for Exodus . . ." >&3
        echo "Creating dynamic libraries for Exodus"
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/exodus/${EXODUS_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        ${C_COMPILER} -dynamiclib -o libexoIIv2c.${SO_EXT} *.o \
           -Wl,-headerpad_max_install_names \
           -Wl,-install_name,$INSTALLNAMEPATH/libexoIIv2c.${SO_EXT} \
           -Wl,-compatibility_version,4.0,-current_version,4.46 \
           -L$NETCDFLIB -lnetcdf
        if [[ $? != 0 ]] ; then
           echo "Creation of dynamic library failed.  Giving up"
           return 1
        fi
        cp libexoIIv2c.${SO_EXT} \
           "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/lib"
        cp ../include/*.h "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/inc"
        ln -s  "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/include/netcdf.h" \
           "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/inc/netcdf.h"
        ln -s  \
        "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/lib/libnetcdf.${SO_EXT}" \
        "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/lib/libnetcdf.${SO_EXT}"
    else
        ar -cr libexoIIv2c.a *.o
        if [[ $? != 0 ]] ; then
           echo "Exodus install failed.  Giving up"
           return 1
        fi
        cp libexoIIv2c.a "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/lib"
        cp ../include/exodusII.h \
        "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/inc"
        cp ../include/exodusII_ext.h \
        "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/inc"
        ln -s  "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/include/netcdf.h" \
        "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/inc/netcdf.h"
        ln -s  \
        "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/lib/libnetcdf.a" \
        "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/lib/libnetcdf.a"
    fi

    cd "$START_DIR"
    echo "Done with Exodus"
}


# *************************************************************************** #
#                         Function 8.8, build_boxlib                          #
# *************************************************************************** #

function build_boxlib
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -f ${BOXLIB_FILE} ]] ; then
       info_box "Unzipping/Tarring ${BOXLIB_FILE} . . ." >&3
       uncompress_untar ${BOXLIB_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${BOXLIB_FILE}.  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${BOXLIB_FILE%.*} ]] ; then
       info_box "Tarring ${BOXLIB_FILE%.*} . . ." >&3
       tar xf ${BOXLIB_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${BOXLIB_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    #
    # Apply patches
    #
    info_box "Patching Boxlib 3D . . ." >&3
    if [[ "$OPSYS" == "AIX" ]]; then
       patch -p0 << \EOF
diff -rp CCSEApps.orig/BoxLib/GNUmakefile CCSEApps/BoxLib/GNUmakefile
*** CCSEApps.orig/BoxLib/GNUmakefile	Sun Jul 22 21:32:20 2001
--- CCSEApps/BoxLib/GNUmakefile	Fri May 18 15:54:14 2007
*************** PBOXLIB_HOME = ..
*** 7,16 ****
  TOP = $(PBOXLIB_HOME)
  
  PRECISION = DOUBLE
! DEBUG     = TRUE
  DIM       = 3
! COMP      = KCC
! USE_MPI   = TRUE
  #NAMESPACE = TRUE
  NAMESPACE = FALSE
  
--- 7,16 ----
  TOP = $(PBOXLIB_HOME)
  
  PRECISION = DOUBLE
! DEBUG     = FALSE
  DIM       = 3
! COMP      = xlC
! USE_MPI   = FALSE
  #NAMESPACE = TRUE
  NAMESPACE = FALSE
  
EOF
    else
       patch -p0 << \EOF
diff -rp CCSEApps.orig/BoxLib/GNUmakefile CCSEApps/BoxLib/GNUmakefile
*** CCSEApps.orig/BoxLib/GNUmakefile	Sun Jul 22 21:32:20 2001
--- CCSEApps/BoxLib/GNUmakefile	Fri May 18 15:54:14 2007
*************** PBOXLIB_HOME = ..
*** 7,16 ****
  TOP = $(PBOXLIB_HOME)
  
  PRECISION = DOUBLE
! DEBUG     = TRUE
  DIM       = 3
! COMP      = KCC
! USE_MPI   = TRUE
  #NAMESPACE = TRUE
  NAMESPACE = FALSE
  
--- 7,16 ----
  TOP = $(PBOXLIB_HOME)
  
  PRECISION = DOUBLE
! DEBUG     = FALSE
  DIM       = 3
! COMP      = 
! USE_MPI   = FALSE
  #NAMESPACE = TRUE
  NAMESPACE = FALSE
  
EOF
    fi
    if [[ $? != 0 ]] ; then
        echo "Unable to patch Boxlib 3D. Wrong version?"
        return 1
    fi
    if [[ "$OPSYS" == "Darwin" ]]; then
        #
        # Apply patches
        #
        info_box "Patching Boxlib 3D . . ." >&3
        patch -p0 << \EOF
diff -rp CCSEApps.orig/BoxLib/BaseFab.cpp CCSEApps/BoxLib/BaseFab.cpp
*** CCSEApps.orig/BoxLib/BaseFab.cpp	Wed Mar 19 10:11:09 2003
--- CCSEApps/BoxLib/BaseFab.cpp	Fri Apr 27 15:09:29 2007
***************
*** 28,34 ****
  #include <BArena.H>
  #include <CArena.H>
  #include <Thread.H>
! #include <SPECIALIZE_F.H>
  
  int BoxLib::BF_init::m_cnt = 0;
  
--- 28,34 ----
  #include <BArena.H>
  #include <CArena.H>
  #include <Thread.H>
! //#include <SPECIALIZE_F.H>
  
  int BoxLib::BF_init::m_cnt = 0;
  
*************** BaseFab<Real>::performCopy (const BaseFa
*** 98,105 ****
  
      BL_PROFILE("template<> BaseFab<Real>::performCopy()");
  
!     if (destbox == domain && srcbox == src.box())
!     {
          Real*       data_dst = dataPtr(destcomp);
          const Real* data_src = src.dataPtr(srccomp);
  
--- 98,105 ----
  
      BL_PROFILE("template<> BaseFab<Real>::performCopy()");
  
! //    if (destbox == domain && srcbox == src.box())
! //    {
          Real*       data_dst = dataPtr(destcomp);
          const Real* data_src = src.dataPtr(srccomp);
  
*************** BaseFab<Real>::performCopy (const BaseFa
*** 107,138 ****
          {
              *data_dst++ = *data_src++;
          }
!     }
!     else
!     {
!         const int* destboxlo  = destbox.loVect();
!         const int* destboxhi  = destbox.hiVect();
!         const int* _th_plo    = loVect();
!         const int* _th_phi    = hiVect();
!         const int* _x_lo      = srcbox.loVect();
!         const int* _x_hi      = srcbox.hiVect(); 
!         const int* _x_plo     = src.loVect();
!         const int* _x_phi     = src.hiVect();
!         Real*       _th_p     = dataPtr(destcomp);
!         const Real* _x_p      = src.dataPtr(srccomp);
! 
!         FORT_FASTCOPY(_th_p,
!                       ARLIM(_th_plo),
!                       ARLIM(_th_phi),
!                       D_DECL(destboxlo[0],destboxlo[1],destboxlo[2]),
!                       D_DECL(destboxhi[0],destboxhi[1],destboxhi[2]),
!                       _x_p,
!                       ARLIM(_x_plo),
!                       ARLIM(_x_phi),
!                       D_DECL(_x_lo[0],_x_lo[1],_x_lo[2]),
!                       D_DECL(_x_hi[0],_x_hi[1],_x_hi[2]),
!                       numcomp);
!     }
  }
  
  template<>
--- 107,138 ----
          {
              *data_dst++ = *data_src++;
          }
! //    }
! //    else
! //    {
! //        const int* destboxlo  = destbox.loVect();
! //        const int* destboxhi  = destbox.hiVect();
! //        const int* _th_plo    = loVect();
! //        const int* _th_phi    = hiVect();
! //        const int* _x_lo      = srcbox.loVect();
! //        const int* _x_hi      = srcbox.hiVect(); 
! //        const int* _x_plo     = src.loVect();
! //        const int* _x_phi     = src.hiVect();
! //        Real*       _th_p     = dataPtr(destcomp);
! //        const Real* _x_p      = src.dataPtr(srccomp);
! //
! //        FORT_FASTCOPY(_th_p,
! //                      ARLIM(_th_plo),
! //                      ARLIM(_th_phi),
! //                      D_DECL(destboxlo[0],destboxlo[1],destboxlo[2]),
! //                      D_DECL(destboxhi[0],destboxhi[1],destboxhi[2]),
! //                      _x_p,
! //                      ARLIM(_x_plo),
! //                      ARLIM(_x_phi),
! //                      D_DECL(_x_lo[0],_x_lo[1],_x_lo[2]),
! //                      D_DECL(_x_hi[0],_x_hi[1],_x_hi[2]),
! //                      numcomp);
! //    }
  }
  
  template<>
*************** BaseFab<Real>::performSetVal (Real      
*** 145,175 ****
      BL_ASSERT(domain.contains(bx));
      BL_ASSERT(ns >= 0 && ns + num <= nvar);
  
!     if (bx == domain)
!     {
          Real* data = &dptr[ns*numpts];
  
          for (long i = 0, N = num*numpts; i < N; i++)
          {
              *data++ = val;
          }
!     }
!     else
!     {
!         const int* _box_lo = bx.loVect();            
!         const int* _box_hi = bx.hiVect();            
!         const int* _th_plo = loVect();                           
!         const int* _th_phi = hiVect();
! 
!         Real* _th_p = dataPtr(ns);
! 
!         FORT_FASTSETVAL(&val,
!                         _box_lo,
!                         _box_hi,
!                         _th_p,
!                         ARLIM(_th_plo),
!                         ARLIM(_th_phi),
!                         num);
!     }
  }
  #endif
--- 145,175 ----
      BL_ASSERT(domain.contains(bx));
      BL_ASSERT(ns >= 0 && ns + num <= nvar);
  
! //    if (bx == domain)
! //    {
          Real* data = &dptr[ns*numpts];
  
          for (long i = 0, N = num*numpts; i < N; i++)
          {
              *data++ = val;
          }
! //    }
! //    else
! //    {
! //        const int* _box_lo = bx.loVect();            
! //        const int* _box_hi = bx.hiVect();            
! //        const int* _th_plo = loVect();                           
! //        const int* _th_phi = hiVect();
! 
! //        Real* _th_p = dataPtr(ns);
! 
! //        FORT_FASTSETVAL(&val,
! //                        _box_lo,
! //                        _box_hi,
! //                        _th_p,
! //                        ARLIM(_th_plo),
! //                        ARLIM(_th_phi),
! //                        num);
! //    }
  }
  #endif
diff -rp CCSEApps.orig/BoxLib/FPC.cpp CCSEApps/BoxLib/FPC.cpp
*** CCSEApps.orig/BoxLib/FPC.cpp	Wed Jan 11 11:13:06 2006
--- CCSEApps/BoxLib/FPC.cpp	Fri Apr 27 15:06:49 2007
*************** FPC::NativeLongDescriptor ()
*** 64,70 ****
  #endif
  
  #if defined(__sgi) || \
!     defined(__sun) || \
      defined(_AIX)  || \
      defined(_CRAYT3E)  || \
      defined(__hpux)
--- 64,70 ----
  #endif
  
  #if defined(__sgi) || \
!     defined(__sun) || defined(__ppc__) || defined(__ppc64__) || \
      defined(_AIX)  || \
      defined(_CRAYT3E)  || \
      defined(__hpux)
*************** FPC::NativeRealDescriptor ()
*** 91,97 ****
  #endif
  
  #if defined(__sgi) || \
!     defined(__sun) || \
      defined(_AIX)  || \
      defined(_CRAYT3E)  || \
      defined(__hpux)
--- 91,97 ----
  #endif
  
  #if defined(__sgi) || \
!     defined(__sun) || defined(__ppc__) || defined(__ppc64__) || \
      defined(_AIX)  || \
      defined(_CRAYT3E)  || \
      defined(__hpux)
*************** FPC::Ieee64NormalRealDescriptor ()
*** 137,143 ****
        defined(_CRAY1)     || \
        defined(_CRAYT3E)   || \
        defined(__sgi)      || \
!       defined(__sun)      || \
        defined(__i486__)   || \
        defined(i386)       || \
        defined(__i386__)   || \
--- 137,143 ----
        defined(_CRAY1)     || \
        defined(_CRAYT3E)   || \
        defined(__sgi)      || \
!       defined(__sun)      || defined(__ppc__) || defined(__ppc64__) || \
        defined(__i486__)   || \
        defined(i386)       || \
        defined(__i386__)   || \
diff -rp CCSEApps.orig/BoxLib/Make.package CCSEApps/BoxLib/Make.package
*** CCSEApps.orig/BoxLib/Make.package	Thu Nov 14 10:43:29 2002
--- CCSEApps/BoxLib/Make.package	Fri Apr 27 15:11:01 2007
*************** T_headers += ccse-mpi.H
*** 91,99 ****
  # Fortran interface routines.
  #
  
! f$(BOXLIB_BASE)_sources += BLutil_F.f
! f$(BOXLIB_BASE)_sources += BLParmParse_F.f
! f$(BOXLIB_BASE)_sources += BLBoxLib_F.f
  
! F$(BOXLIB_BASE)_sources += SPECIALIZE_$(DIM)D.F
! F$(BOXLIB_BASE)_headers += SPECIALIZE_F.H
--- 91,99 ----
  # Fortran interface routines.
  #
  
! #f$(BOXLIB_BASE)_sources += BLutil_F.f
! #f$(BOXLIB_BASE)_sources += BLParmParse_F.f
! #f$(BOXLIB_BASE)_sources += BLBoxLib_F.f
  
! #F$(BOXLIB_BASE)_sources += SPECIALIZE_$(DIM)D.F
! #F$(BOXLIB_BASE)_headers += SPECIALIZE_F.H
EOF
       if [[ $? != 0 ]] ; then
          echo "Unable to patch Boxlib 3D. Wrong version?"
          return 1
       fi
    fi

    #
    cd CCSEApps/BoxLib
    #
    # Build Boxlib 3D
    #
    info_box "Building Boxlib 3D. . . (~2 minutes)" >&3
    echo "Building Boxlib 3D"
    if [[ "$OPSYS" == "Darwin" ]]; then
       cp ../mk/Make.FreeBSD ../mk/Make.Darwin
    fi
    $MAKE -f GNUmakefile CXX="$CXX_COMPILER" CC="$C_COMPILER" \
       CCFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS"
    if [[ $? != 0 ]] ; then
       echo "Boxlib build failed.  Giving up"
       return 1
    fi
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing Boxlib 3D. . ." >&3
    echo "Installing Boxlib 3D"
    mkdir "$VISITDIR/boxlib"
    mkdir "$VISITDIR/boxlib/$VISITARCH"
    mkdir "$VISITDIR/boxlib/$VISITARCH/include"
    mkdir "$VISITDIR/boxlib/$VISITARCH/lib"
    mkdir "$VISITDIR/boxlib/$VISITARCH/include/2D"
    mkdir "$VISITDIR/boxlib/$VISITARCH/include/3D"
    if [[ "$OPSYS" == "Darwin" ]]; then
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/boxlib/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        mkdir tmp
        cd tmp
        ar x ../libbox3d.Darwin.CC.f77.a
        $CXX_COMPILER -dynamiclib -o libbox3D.$SO_EXT *.o \
          -lSystem -Wl,-twolevel_namespace,-undefined,dynamic_lookup \
          -Wl,-headerpad_max_install_names \
          -Wl,-install_name,$INSTALLNAMEPATH/libbox3D.$SO_EXT \
          -Wl,-compatibility_version,$BOXLIB_COMPATIBILITY_VERSION \
          -Wl,-current_version,$BOXLIB_VERSION
        if [[ $? != 0 ]] ; then
          echo "Creation of dynamic 3D Boxlib library failed.  Giving up"
          return 1
        fi
        cp libbox3D.$SO_EXT "$VISITDIR/boxlib/$VISITARCH/lib/"
        rm *.o
        cd ..
        tar cf Boxlib3D.h.tar *.H
    else
       cp libbox3d*.a \
       "$VISITDIR/boxlib/$VISITARCH/lib/libbox3D.a"
       tar cf Boxlib3D.h.tar *.H
       if [[ $? != 0 ]] ; then
          echo "Boxlib install failed.  Giving up"
          return 1
       fi
    fi
    $MAKE clean
    #
    # Apply patches
    #
    info_box "Patching Boxlib 2D . . ." >&3
    cd $START_DIR
    if [[ "$OPSYS" == "AIX" ]]; then
       patch -p0 << \EOF
diff -rp CCSEApps.orig/BoxLib/GNUmakefile CCSEApps/BoxLib/GNUmakefile
*** CCSEApps.orig/BoxLib/GNUmakefile	Fri Apr 27 15:18:35 2007
--- CCSEApps/BoxLib/GNUmakefile	Fri Apr 27 15:18:54 2007
*************** TOP = $(PBOXLIB_HOME)
*** 8,14 ****
  
  PRECISION = DOUBLE
  DEBUG     = FALSE
! DIM       = 3
  COMP      = xlC
  USE_MPI   = FALSE
  #NAMESPACE = TRUE
--- 8,14 ----
  
  PRECISION = DOUBLE
  DEBUG     = FALSE
! DIM       = 2
  COMP      = xlC
  USE_MPI   = FALSE
  #NAMESPACE = TRUE
EOF
    else
       patch -p0 << \EOF
diff -rp CCSEApps.orig/BoxLib/GNUmakefile CCSEApps/BoxLib/GNUmakefile
*** CCSEApps.orig/BoxLib/GNUmakefile	Fri Apr 27 15:18:35 2007
--- CCSEApps/BoxLib/GNUmakefile	Fri Apr 27 15:18:54 2007
*************** TOP = $(PBOXLIB_HOME)
*** 8,14 ****
  
  PRECISION = DOUBLE
  DEBUG     = FALSE
! DIM       = 3
  COMP      = 
  USE_MPI   = FALSE
  #NAMESPACE = TRUE
--- 8,14 ----
  
  PRECISION = DOUBLE
  DEBUG     = FALSE
! DIM       = 2
  COMP      = 
  USE_MPI   = FALSE
  #NAMESPACE = TRUE
EOF
    fi
    if [[ $? != 0 ]] ; then
        echo "Unable to patch Boxlib 2D. Wrong version?"
        return 1
    fi
    cd CCSEApps/BoxLib
    #
    # Build Boxlib 2D
    #
    info_box "Building Boxlib 2D. . . (~2 minutes)" >&3
    echo "Building Boxlib 2D"
    if [[ "$OPSYS" == "Darwin" ]]; then
       cp ../mk/Make.FreeBSD ../mk/Make.Darwin
    fi
    $MAKE -f GNUmakefile CXX="$CXX_COMPILER" CC="$C_COMPILER" \
       CCFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS" 
    if [[ $? != 0 ]] ; then
       echo "Boxlib build failed.  Giving up"
       return 1
    fi
    info_box "Installing Boxlib 2D. . ." >&3
    echo "Installing Boxlib 2D"
    if [[ "$OPSYS" == "Darwin" ]]; then
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/boxlib/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        cd tmp
        ar x ../libbox2d.Darwin.CC.f77.a
        $CXX_COMPILER -dynamiclib -o libbox2D.$SO_EXT *.o \
          -lSystem -Wl,-twolevel_namespace,-undefined,dynamic_lookup \
          -Wl,-headerpad_max_install_names \
          -Wl,-install_name,$INSTALLNAMEPATH/libbox2D.$SO_EXT \
          -Wl,-compatibility_version,$BOXLIB_COMPATIBILITY_VERSION \
          -Wl,-current_version,$BOXLIB_VERSION
        if [[ $? != 0 ]] ; then
          echo "Creation of dynamic 2D Boxlib library failed.  Giving up"
          return 1
        fi
        cp libbox2D.$SO_EXT "$VISITDIR/boxlib/$VISITARCH/lib/"
        rm *.o
        cd ..
        rmdir tmp
        tar cf Boxlib2D.h.tar *.H
    else
        cp libbox2d*.a \
        "$VISITDIR/boxlib/$VISITARCH/lib/libbox2D.a"
        tar cf Boxlib2D.h.tar *.H
        if [[ $? != 0 ]] ; then
          echo "Boxlib install failed.  Giving up"
          return 1
        fi
    fi

    info_box "Installing Boxlib includes. . ." >&3
    echo "Installing Boxlib includes"
    cp Boxlib2D.h.tar "$VISITDIR/boxlib/$VISITARCH/include/2D"
    cp Boxlib3D.h.tar "$VISITDIR/boxlib/$VISITARCH/include/3D"
    cd "$VISITDIR/boxlib/$VISITARCH/include/2D"
    tar xf Boxlib2D.h.tar
    cd "$VISITDIR/boxlib/$VISITARCH/include/3D"
    tar xf Boxlib3D.h.tar

    cd "$START_DIR"
    echo "Done with Boxlib"
}


# *************************************************************************** #
#                         Function 8.9, build_cfitsio                         #
# *************************************************************************** #

function build_cfitsio
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -f ${CFITSIO_FILE} ]] ; then
       info_box "Unzipping/Tarring ${CFITSIO_FILE} . . ." >&3
       uncompress_untar ${CFITSIO_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${CFITSIO_FILE}.  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${CFITSIO_FILE%.*} ]] ; then
       info_box "Tarring ${CFITSIO_FILE%.*} . . ." >&3
       tar xf ${CFITSIO_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${CFITSIO_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    #
    info_box "Configuring CFITSIO . . ." >&3
    cd cfitsio
    echo "Invoking command to configure CFITSIO"
    env CXX="$CXX_COMPILER" CC="$C_COMPILER" \
       CFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS" \
       ./configure \
       --prefix="$VISITDIR/cfitsio/$CFITSIO_VERSION/$VISITARCH"
    if [[ $? != 0 ]] ; then
       echo "CFITSIO configure failed.  Giving up"
       return 1
    fi

    #
    # Build CFITSIO
    #
    info_box "Building CFITSIO . . . (~2 minutes)" >&3
    echo "Building CFITSIO"
    $MAKE
    if [[ $? != 0 ]] ; then
       echo "CFITSIO build failed.  Giving up"
       return 1
    fi

    if [[ "$OPSYS" == "Darwin" ]]; then
        #
        # Make dynamic executable
        #
        info_box "Creating dynamic libraries for CFITSIO . . ." >&3
        echo "Creating dynamic libraries for CFITSIO"
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/cfitsio/${CFITSIO_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
## switch back to gcc "external relocation entries" restFP saveFP
##      libtool -o libcfitsio.$SO_EXT -dynamic libcfitsio.a -lSystem \
##      -twolevel_namespace -undefined dynamic_lookup \
##      -headerpad_max_install_names \
##      -install_name $INSTALLNAMEPATH/libcfitsio.$SO_EXT \
##      -compatibility_version $CFITSIO_COMPATIBILITY_VERSION \
##      -current_version $CFITSIO_VERSION
        gcc -o libcfitsio.$SO_EXT -dynamiclib *.o -lSystem \
           -Wl,-twolevel_namespace,-undefined,dynamic_lookup \
           -Wl,-headerpad_max_install_names \
           -Wl,-install_name,$INSTALLNAMEPATH/libcfitsio.$SO_EXT \
           -Wl,-compatibility_version,$CFITSIO_COMPATIBILITY_VERSION \
           -Wl,-current_version,$CFITSIO_VERSION
        if [[ $? != 0 ]] ; then
           echo "Creating dynamic CFITSIO library failed.  Giving up"
           return 1
        fi
#       cp libcfitsio.$SO_EXT "$VISITDIR/cfitsio/$CFITSIO_VERSION/$VISITARCH/lib"
    fi
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing CFITSIO . . ." >&3
    echo "Installing CFITSIO"
    mkdir "$VISITDIR/cfitsio"
    mkdir "$VISITDIR/cfitsio/$CFITSIO_VERSION"
    mkdir "$VISITDIR/cfitsio/$CFITSIO_VERSION/$VISITARCH"
    $MAKE install
    if [[ $? != 0 ]] ; then
       echo "CFITSIO install failed.  Giving up"
       return 1
    fi

    cd "$START_DIR"
    echo "Done with CFITSIO"
}


# *************************************************************************** #
#                          Function 9, build_hostconf                         #
# *************************************************************************** #

function build_hostconf
{
    #
    # Set up environment variables for the configure step.
    #
    PARFLAGS=""
    CXXFLAGS="$CXX_OPT_FLAGS"
    if [[ "$parallel" == "yes" ]] ; then
       PARFLAGS="--enable-parallel"
       CXXFLAGS="$CXX_OPT_FLAGS $PAR_INCLUDE"
    fi
    
    #
    # Set up the config-site file, which gives configure the information it
    # needs about the third party libraries.
    #
    info_box "Creating `hostname`.conf" >&3
    HOSTCONF="$(hostname).conf"
    touch $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "## build_vist generated host.conf" >> $HOSTCONF
    echo "## created: $(date)" >> $HOSTCONF
    echo "## by: $(whoami)" >> $HOSTCONF
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "## Set the VISITHOME environment variable." >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "VISITHOME=$VISITDIR" >> $HOSTCONF
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo \
"## Specify the location of the mesa include files and libraries." >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "MESA=\$VISITHOME/mesa/$MESA_VERSION/$VISITARCH" >> $HOSTCONF
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo \
"## Specify the location of the vtk include files and libraries." >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "VTK=\$VISITHOME/vtk/$VTK_VERSION/$VISITARCH" >> $HOSTCONF
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo \
"## Specify the location of the qt include files and libraries." >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "QT_BIN=\$VISITHOME/qt/$QT_VERSION/$VISITARCH/bin" >> $HOSTCONF
    echo "QT_INCLUDE=\$VISITHOME/qt/$QT_VERSION/$VISITARCH/include" >> $HOSTCONF
    echo "QT_LIB=\$VISITHOME/qt/$QT_VERSION/$VISITARCH/lib" >> $HOSTCONF
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo \
"## Specify the location of the python include and libraries." >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "PYDIR=\$VISITHOME/python/$VISITARCH" >> $HOSTCONF
    echo "PYVERSION=python$PYTHON_VERSION" >> $HOSTCONF
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "## Silo" >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo \
"DEFAULT_SILO_INCLUDES=\$VISITHOME/silo/$SILO_VERSION/$VISITARCH/include" \
    >> $HOSTCONF
    echo \
"DEFAULT_SILO_LIBRARY=\$VISITHOME/silo/$SILO_VERSION/$VISITARCH/lib" \
    >> $HOSTCONF
    echo >> $HOSTCONF
    echo "## Compiler flage." >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "CC=\"$C_COMPILER\"" >> $HOSTCONF
    echo "CXX=\"$CXX_COMPILER\"" >> $HOSTCONF
    echo "CFLAGS=\"$C_OPT_FLAGS\"" >> $HOSTCONF
    echo "CXXFLAGS=\"$CXXFLAGS\"" >> $HOSTCONF
    if [[ "$parallel" == "yes" ]] ; then
        echo "MPI_LIBS=\"$PAR_LIBS\"" >> $HOSTCONF
    fi
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "## Database reader plugin support libraries" >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo \
"##############################################################" >> $HOSTCONF
    if [[ "$DO_BOXLIB" == "yes" ]] ; then
        echo >> $HOSTCONF
        echo "##" >> $HOSTCONF
        echo "## Boxlib" >> $HOSTCONF
        echo "##" >> $HOSTCONF
        echo \
"DEFAULT_BOXLIB2D_INCLUDE=\$VISITHOME/boxlib/$VISITARCH/include/2D" \
        >> $HOSTCONF
        echo \
"DEFAULT_BOXLIB2D_LIBS=\$VISITHOME/boxlib/$VISITARCH/lib" \
        >> $HOSTCONF
        echo \
"DEFAULT_BOXLIB3D_INCLUDE=\$VISITHOME/boxlib/$VISITARCH/include/3D" \
        >> $HOSTCONF
        echo \
"DEFAULT_BOXLIB3D_LIBS=\$VISITHOME/boxlib/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    if [[ "$DO_CFITSIO" == "yes" ]] ; then
        echo >> $HOSTCONF
        echo "##" >> $HOSTCONF
        echo "## CFITSIO" >> $HOSTCONF
        echo "##" >> $HOSTCONF
        echo \
"DEFAULT_CFITSIO_INCLUDE=\$VISITHOME/cfitsio/$CFITSIO_VERSION/$VISITARCH/include" \
        >> $HOSTCONF
        echo \
"DEFAULT_CFITSIO_LIB=\$VISITHOME/cfitsio/$CFITSIO_VERSION/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    if [[ "$DO_CGNS" == "yes" ]] ; then
        echo >> $HOSTCONF
        echo "##" >> $HOSTCONF
        echo "## CGNS" >> $HOSTCONF
        echo "##" >> $HOSTCONF
        echo \
"DEFAULT_CGNS_INCLUDE=\$VISITHOME/cgns/$CGNS_VERSION/$VISITARCH/include" \
        >> $HOSTCONF
        echo \
"DEFAULT_CGNS_LIB=\$VISITHOME/cgns/$CGNS_VERSION/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    if [[ "$DO_EXODUS" == "yes" ]] ; then
        echo >> $HOSTCONF
        echo "##" >> $HOSTCONF
        echo "## Exodus" >> $HOSTCONF
        echo "##" >> $HOSTCONF
        echo \
"DEFAULT_EXODUS_INCLUDES=\$VISITHOME/exodus/$EXODUS_VERSION/$VISITARCH/inc" \
        >> $HOSTCONF
        echo \
"DEFAULT_EXODUS_LIBRARY=\$VISITHOME/exodus/$EXODUS_VERSION/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    if [[ "$DO_GDAL" == "yes" ]] ; then
        echo >> $HOSTCONF
        echo "##" >> $HOSTCONF
        echo "## GDAL" >> $HOSTCONF
        echo "##" >> $HOSTCONF
        echo \
"DEFAULT_GDAL_INCLUDE=\$VISITHOME/gdal/$GDAL_VERSION/$VISITARCH/include" \
        >> $HOSTCONF
        echo \
"DEFAULT_GDAL_LIB=\$VISITHOME/gdal/$GDAL_VERSION/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    if [[ "$DO_HDF4" == "yes" ]] ; then
        echo >> $HOSTCONF
        echo "##" >> $HOSTCONF
        echo "## HDF4" >> $HOSTCONF
        echo "##" >> $HOSTCONF
        echo \
"DEFAULT_HDF4_FLAGS=\$VISITHOME/hdf4/$HDF4_VERSION/$VISITARCH/include" \
        >> $HOSTCONF
        echo \
"DEFAULT_HDF4_LIBS=\$VISITHOME/hdf4/$HDF4_VERSION/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    if [[ "$DO_HDF5" == "yes" ]] ; then
        echo >> $HOSTCONF
        echo "##" >> $HOSTCONF
        echo "## HDF5" >> $HOSTCONF
        echo "##" >> $HOSTCONF
        echo \
"DEFAULT_HDF5_INCLUDE=\$VISITHOME/hdf5/$HDF5_VERSION/$VISITARCH/include" \
        >> $HOSTCONF
        echo \
"DEFAULT_HDF5_LIB=\$VISITHOME/hdf5/$HDF5_VERSION/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    if [[ "$DO_MILI" == "yes" ]] ; then
        echo >> $HOSTCONF
        echo "##" >> $HOSTCONF
        echo "## Mili" >> $HOSTCONF
        echo "##" >> $HOSTCONF
        echo \
"MILI_DIR=\$VISITHOME/mili/$MILI_VERSION/$VISITARCH" \
        >> $HOSTCONF
    fi
    if [[ "$DO_NETCDF" == "yes" ]] ; then
        echo >> $HOSTCONF
        echo "##" >> $HOSTCONF
        echo "## NetCDF" >> $HOSTCONF
        echo "##" >> $HOSTCONF
        echo \
"DEFAULT_NETCDF_INCLUDE=\$VISITHOME/netcdf/$NETCDF_VERSION/$VISITARCH/include" \
        >> $HOSTCONF
        echo \
"DEFAULT_NETCDF_LIB=\$VISITHOME/netcdf/$NETCDF_VERSION/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    echo "##" >> $HOSTCONF
}

# *************************************************************************** #
#                          Function 9.1, build_visit                          #
# *************************************************************************** #

function build_visit
{
    if [[ "$DO_SVN" != "yes" ]] ; then
        #
        # Unzip the file, provided a gzipped file exists.
        #
        if [[ -f ${VISIT_FILE} ]] ; then
           info_box "Unzipping/untarring ${VISIT_FILE} . . ." >&3
           uncompress_untar ${VISIT_FILE}
           if [[ $? != 0 ]] ; then
              echo \
"Unable to untar ${VISIT_FILE}.  Corrupted file or out of space on device?"
              return 1
           fi
        elif [[ -f ${VISIT_FILE%.*} ]] ; then
           info_box "Unzipping ${VISIT_FILE%.*} . . ." >&3
           tar xf ${VISIT_FILE%.*}
           if [[ $? != 0 ]] ; then
              echo \
"Unable to untar ${VISIT_FILE%.*}.  Corrupted file or out of space on device?"
              return 1
           fi
        fi
    fi

    #
    # Set up environment variables for the configure step.
    #
    PARFLAGS=""
    CXXFLAGS="$CXX_OPT_FLAGS"
    if [[ "$parallel" == "yes" ]] ; then
       PARFLAGS="--enable-parallel"
       CXXFLAGS="$CXX_OPT_FLAGS $PAR_INCLUDE"
    fi
    
    QTDIR=""

    #
    # Set up the config-site file, which gives configure the information it
    # needs about the third party libraries.
    #
    info_box "Creating `hostname`.conf" >&3
    if [[ "$DO_SVN" == "yes" ]] ; then
        cd src
    else
        VISIT_DIR=${VISIT_FILE%.tar*}
        cd "${VISIT_DIR}"
    fi
    cp ../$(hostname).conf config-site

    #
    # Call configure
    # 
    info_box "Configuring VisIt . . ." >&3
    ./configure ${PARFLAGS}
    if [[ $? != 0 ]] ; then
       echo "VisIt configure failed.  Giving up"
       return 1
    fi

    if [[ "$OPSYS" == "Darwin" ]]; then
        # Check for version < 8.0.0 (MacOS 10.4, Tiger) for gcc < 4.x
        VER=$(uname -r)
        if (( ${VER%%.*} < 8 )) ; then
           info_box "Patching VisIt . . ." >&3
           cat databases/Fluent/Makefile | sed '/CXXFLAGS/s/$/ -O0/g' > Make.tmp
           mv -f databases/Fluent/Makefile databases/Fluent/Makefile.orig
           mv -f Make.tmp databases/Fluent/Makefile
        fi
    fi
    #
    # Build VisIt
    #
    info_box "Building VisIt . . . (~50 minutes)" >&3
    $MAKE
    if [[ $? != 0 ]] ; then
       echo "VisIt build failed.  Giving up"
       return 1
    fi
    echo "All indications are that VisIt successfully built."
}

usage () {
  printf "Usage: %s [-45bcdefghijmnpsx] [-a opt] [-t opt]\n" $0
  printf "       [-u opt] [-v opt]\n"
  printf "\n"
  printf "%s %s %s\n" "-4     Build HDF4 from [" $HDF4_FILE "]"
  printf "%s %s %s\n" "-5     Build HDF5 from [" $HDF5_FILE "]"
  printf "%s\n" "-a opt The architecture variable name (VISITARCH). This"
  printf "%s\n" "       variable is used in contructing the 3rd parthy" 
  printf "%s\n" "       library path usually set to something like"
  printf "%s\n" "       linux_gcc-3.4.6 or Darwin_gcc-4.0.1"
  printf "%s %s %s\n" "-b     Build Boxlib from [" $BOXLIB_FILE "]"
  printf "%s %s %s\n" "-c     Build CGNS from [" $CGNS_FILE "]"
  printf "%s\n" "-d     Turn on -g, debugging flag in CFLAGS/CXXFLAGS"
  printf "%s %s %s\n" "-e     Build Exodus from [" $EXODUS_FILE "]"
  printf "%s %s %s\n" "-f     Build CFITSIO from [" $CFITSIO_FILE "]"
  printf "%s %s %s\n" "-g     Build GDAL from [" $GDAL_FILE "]"
  printf "%s\n" "-h     display this message"
  printf "%s\n" "-i     Change the behavior of the install name path for"
  printf "%s\n" "       the Darwin dynamic libraries. Enabling this flag"
  printf "%s\n" "       will used the THIRD_PARTY_PATH path for creating"
  printf "%s\n" "       an absolute path to the dynamic libraries and not"
  printf "%s\n" "       use the default relative path [@executable_path/../lib]"
  printf "%s\n" "-j     Do not build VisIt, build 3rd party libraries only"
  printf "%s %s %s\n" "-m     Build Mili from:[" $MILI_FILE "]"
  printf "%s %s %s\n" "-n     Build NetCDF from [" $NETCDF_FILE "]"
  printf "%s\n" "-p     Enable parallel build, display MPI prompt"
  printf "%s\n" "-s     Use the SVN server for the VisIt distribution"
  printf "%s %s %s\n" "       [ svn co svn+ssh://"$(whoami)"@svn.nersc.gov/svn/visit/trunk/src ]"
  printf "%s\n" "-t opt The name of the distribution tarball, the VISIT_FILE"
  printf "%s %s %s\n" "       variable [" $VISIT_FILE "]"
  printf "%s\n" "-u opt The THIRD_PARTY_PATH path contains the root"
  printf "%s\n" "       directory name underwhich the 3rd party libraries"
  printf "%s\n" "       have been installed. If defined, it would typically"
  printf "%s\n" "       mean the 3rd party libraries are pre-built and are"
  printf "%s\n" "       installed some where like /usr/gapps/visit. The"
  printf "%s\n" "       default assumes 3rd party libraries are to be built"
  printf "%s\n" "       and installed in [./visit]"
  printf "%s %s %s\n" "-v opt The VISIT_VERSION value [" $VISIT_VERSION "]"
  printf "%s\n" "-x     Turn on SHELL debugging"
}

# *************************************************************************** #
#                       Section 2, building VisIt                             #
# --------------------------------------------------------------------------- #
# This section does some set up for building VisIt, and then calls the        #
# functions to build the third party libraries and VisIt itself.              #
# *************************************************************************** #
while getopts :45a:bcdefghijmnpst:u:v:xA:BCDEFGHIJMNPST:U:V:X ARG
do
    argcur=$ARG
    case $ARG in
      4) DO_HDF4="yes";;
      5) DO_HDF5="yes";;
      a|A) VISITARCH="$OPTARG";;
      b|B) DO_BOXLIB="yes";;
      c|C) DO_CGNS="yes";;
      d|D) C_OPT_FLAGS="$C_OPT_FLAGS -g"
           CXX_OPT_FLAGS="$CXX_OPT_FLAGS -g";;
      e|E) DO_EXODUS="yes";;
      f|F) DO_CFITSIO="yes";;
      g|G) DO_GDAL="yes";;
      h|H) usage; exit 2;;
      i|I) ABS_PATH="yes";;
      j|J) DO_VISIT="no";;
      m|M) DO_MILI="yes";;
      n|N) DO_NETCDF="yes";;
      p|P) parallel="yes";;
      s|S) DO_SVN="yes";;
      t|T) VISIT_FILE="$OPTARG";;
      u|U) THIRD_PARTY_PATH="$OPTARG";;
      v|V) VISIT_VERSION=$OPTARG;;
      x|X) set -vx;;
      :) echo "$0: \"$argcur\" requires a value"; exit 2;;
      \?) echo "$0: INVALID option \"$argcur\" at $OPTIND"; exit 2;;
    esac
done
# Show a splashscreen. This routine also determines if we have "dialog"
# or "whiptail", which we use to show dialogs. If we do not have either
# then proceed in non-graphical mode.
#

if [[ "$GRAPHICAL" == "yes" ]] ; then
    GRAPHICAL="no" # This will be set back to "yes" if we find dialog
    for DLG in dialog whiptail; do
    $DLG --backtitle "$DLG_BACKTITLE" \
    --title "Build options and 3rd party libraries" \
    --checklist \
"Welcome to the VisIt $VISIT_VERSION build process.\n\n"\
"This program will build VisIt and its required "\
"3rd party sources, downloading any missing source packages "\
"before building. The required and optional 3rd party libraries "\
"are built and installed before VisIt is built so please be patient. "\
"Note that you can build a parallel version of VisIt by "\
"specifying the location of your MPI installation when prompted.\n"\
"Select the build options and optional 3rd party libraries "\
"to be built and installed" 30 $DLG_WIDTH 12 \
           "Boxlib"   "2.5    $BOXLIB_FILE"    $DO_BOXLIB \
           "CFITSIO"  "3006   $CFITSIO_FILE"   $DO_CFITSIO \
           "CGNS"     "2.4.3  $CGNS_FILE"      $DO_CGNS \
           "ExodusII" "4.46   $EXODUS_FILE"    $DO_EXODUS \
           "GDAL"     "1.3.2  $GDAL_FILE"      $DO_GDAL \
           "HDF4"     "2.4.1  $HDF4_FILE"      $DO_HDF4 \
           "HDF5"     "1.6.5  $HDF5_FILE"      $DO_HDF5 \
           "Mili"     "1.09   $MILI_FILE"      $DO_MILI \
           "NetCDF"   "3.6.0  $NETCDF_FILE"    $DO_NETCDF \
           "parallel" "enable parallel"        $parallel \
           "verify"   "check/change arguments" $verify  2> tmp$$
    retval=$?

    # Remove the extra quoting, new dialog has --single-quoted
    choice="$(cat tmp$$ | sed 's/"//g' )"
    case $retval in
      0)
        DO_BOXLIB="no"
        DO_CFITSIO="no"
        DO_CGNS="no"
        DO_EXODUS="no"
        DO_GDAL="no"
        DO_HDF4="no"
        DO_HDF5="no"
        DO_MILI="no"
        DO_NETCDF="no"
        parallel="no"
        verify="no"
        for OPTION in $choice
        do
            case $OPTION in
              Boxlib)
                 DO_BOXLIB="yes";;
              CFITSIO)
                 DO_CFITSIO="yes";;
              CGNS)
                 DO_CGNS="yes";;
              ExodusII)
                 DO_EXODUS="yes";;
              GDAL)
                 DO_GDAL="yes";;
              HDF4)
                 DO_HDF4="yes";;
              HDF5)
                 DO_HDF5="yes";;
              Mili)
                 DO_MILI="yes";;
              NetCDF)
                 DO_NETCDF="yes";;
              parallel)
                 parallel="yes";;
              verify)
                 verify="yes";;
            esac
        done
        GRAPHICAL="yes"
        break
        ;;
      1)
        echo "Cancel pressed."
        GRAPHICAL="yes"
        break;;
      255)
        echo "ESC pressed.";;
      *)
        echo "Unexpected return code: $retval";;
    esac
  done
fi
if [[ -e "tmp$$" ]] ; then
    rm tmp$$
fi

if [[ $VISITARCH == "" ]] ; then
    export VISITARCH=${ARCH}_${C_COMPILER}
    if [[ "$CXX_COMPILER" == "g++" ]] ; then
       VERSION=$(g++ -v 2>&1 | grep version | cut -d' ' -f3)
       if [[ ${#VERSION} == 5 ]] ; then
          VISITARCH=${VISITARCH}-${VERSION}
       fi
    fi
fi

if [[ ! -d "$THIRD_PARTY_PATH" ]] ; then
   if [[ "$THIRD_PARTY_PATH" == "./visit" ]] ; then
      mkdir "$THIRD_PARTY_PATH"
      if [[ $? != 0 ]] ; then
          echo "Unable to write files to the third party library location."
          echo "Bailing out."
          exit 1
      fi
   else
      echo "The location to install the third party libraries does not exit."
      echo "Bailing out"
      exit 1
   fi
fi

START_DIR="$PWD"
cd "$THIRD_PARTY_PATH"
if [[ $? != 0 ]] ; then
   echo "Unable to access the third party location"
   echo "Bailing out."
   exit 1
fi
export VISITDIR="$PWD"
cd "$START_DIR"

#
# Now make sure that we have everything we need to build VisIt, so we can bail
# out early if we are headed for failure.
#
check_files
if [[ $? != 0 ]] ; then
   echo "Stopping build because necessary files aren't available."
   exit 1
fi

#
# See if the user wants to build a parallel version.
#
check_parallel
if [[ $? != 0 ]] ; then
   echo "Stopping build because necessary parallel options are not set."
   exit 1
fi

#
# See if the user wants to modify variables
#
check_variables
if [[ $? != 0 ]] ; then
   echo "Stopping build because of bad variable option setting error."
   exit 1
fi

#
# Later we will build Qt.  We are going to bypass their licensing agreement,
# so echo it here.
#
if [[ "$GRAPHICAL" == "yes" ]] ; then
    $DLG --backtitle "$DLG_BACKTITLE" --yesno \
    "During the build process, this script will build Qt.  When Qt is "\
"built, this script confirms that you accept their license. "\
"So please choose \"Yes\" to accept (in advance) their license "\
"offer for the Qt/X11 Free Edition, licensed under the Q Public License"\
"(QPL) or the GNU General Public License (GPL)" 12 $DLG_WIDTH
    if [[ $? == 1 ]] ; then
        choice=`$DLG --backtitle "$DLG_BACKTITLE" --radiolist \
"You chose not to accept Qt\'s license. VisIt requires Qt. "\
"What would you like to do?" \
    12 60 5 1 "Accept Qt's license" on 2 "Quit VisIt\'s build process" off 2>&1`
        if [[ $? == 1 || "$choice" == "2" ]] ; then
            echo "You declined the Qt license and stopped building VisIt."
            exit 1
        fi
    fi
else
    echo "During this build process, this script will build Qt.  When Qt is "
    echo "built, this script confirms that you accept their license."
    echo "So please type \"yes\" to accept (in advance) their license "
    echo "offer for the Qt/X11 Free Edition, licensed under the Q Public "
    echo "License (QPL) or the GNU General Public License (GPL)"
    read RESPONSE
    while [[ "$RESPONSE" != "yes" ]] ; do
       echo "Please type \"yes\" to accept their license offer for the "
       echo "Qt/X11 Free Edition, licensed under the Q Public License (QPL) "
       echo "or the GNU General Public License (GPL)"
       read RESPONSE
    done
fi


#
# Log the start time.  Especially helpful if there are multiple starts
# dumped into the same log.
#
LINES="------------------------------------------------------------" 
echo $LINES >> build_visit_log
echo -n "Starting build_visit at " >> build_visit_log
date >> build_visit_log
echo $LINES >> build_visit_log


#
# We are now ready to build.  Start with Mesa.
#
cd "$START_DIR"
if [[ -d "$VISITDIR/mesa/$MESA_VERSION/$VISITARCH" ]] ; then
   echo "Skipping Mesa build.  Mesa is already installed."
else
   echo "Building Mesa (~2 minutes)"
   build_mesa 3>&1 >> build_visit_log 2>&1
   if [[ $? != 0 ]] ; then
      echo "Unable to build or install Mesa.  Bailing out."
      echo \
"More information about the failed build can be found in \"build_visit_log\""
      exit 1
   fi
   echo "Done building Mesa"
fi


#
# Build Qt
#
cd "$START_DIR"
if [[ -d "$VISITDIR/qt/$QT_VERSION/$VISITARCH" ]] ; then
   echo "Skipping Qt build.  Qt is already installed."
else
   echo "Building Qt (~10 minutes)"
   build_qt 3>&1 >> build_visit_log 2>&1
   if [[ $? != 0 ]] ; then
      echo "Unable to build or install Qt.  Bailing out."
      echo \
"More information about the failed build can be found in \"build_visit_log\""
      exit 1
   fi
   echo "Done building Qt"
fi


#
# Build VTK
#
cd "$START_DIR"
if [[ -d "$VISITDIR/vtk/$VTK_VERSION/$VISITARCH" ]] ; then
   echo "Skipping VTK build.  VTK is already installed."
else
   echo "Building VTK (~20 minutes)"
   build_vtk 3>&1 >> build_visit_log 2>&1
   if [[ $? != 0 ]] ; then
      echo "Unable to build or install VTK.  Bailing out."
      echo \
"More information about the failed build can be found in \"build_visit_log\""
      exit 1
   fi
   echo "Done building VTK"
fi


#
# Build Python
#
cd "$START_DIR"
if [[ -d "$VISITDIR/python/$VISITARCH" ]] ; then
   echo "Skipping Python build.  Python is already installed."
else
   echo "Building Python (~3 minutes)"
   build_python 3>&1 >> build_visit_log 2>&1
   if [[ $? != 0 ]] ; then
      echo "Unable to build or install Python.  Bailing out."
      echo \
"More information about the failed build can be found in \"build_visit_log\""
      exit 1
   fi
   echo "Done building Python"
fi

if [[ "$DO_HDF5" == "yes" ]] ; then
   cd "$START_DIR"
   if [[ -d "$VISITDIR/hdf5/${HDF5_VERSION}/$VISITARCH" ]] ; then
      echo "Skipping HDF5 build.  HDF5 is already installed."
   else
      echo "Building HDF5 (~2 minutes)"
      build_hdf5 3>&1 >> build_visit_log 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install HDF5.  Bailing out."
         echo \
"More information about the failed build can be found in \"build_visit_log\""
         exit 1
      fi
      echo "Done building HDF5"
   fi
fi
if [[ "$DO_MILI" == "yes" ]] ; then
   cd "$START_DIR"
   if [[ -d "$VISITDIR/mili" ]] ; then
      echo "Skipping Mili build.  Mili is already installed."
   else
      echo "Building Mili (~2 minutes)"
      build_mili 3>&1 >> build_visit_log 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install Mili.  Bailing out."
         echo \
"More information about the failed build can be found in \"build_visit_log\""
         exit 1
      fi
      echo "Done building Mili"
   fi
fi
if [[ "$DO_HDF4" == "yes" ]] ; then
   cd "$START_DIR"
   if [[ -d "$VISITDIR/hdf4/${HDF4_VERSION}/$VISITARCH" ]] ; then
      echo "Skipping HDF4 build.  HDF4 is already installed."
   else
      echo "Building HDF4 (~2 minutes)"
      build_hdf4 3>&1 >> build_visit_log 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install HDF4.  Bailing out."
         echo \
"More information about the failed build can be found in \"build_visit_log\""
         exit 1
      fi
      echo "Done building HDF4"
   fi
fi
if [[ "$DO_NETCDF" == "yes" ]] ; then
   cd "$START_DIR"
   if [[ -d "$VISITDIR/netcdf/${NETCDF_VERSION}/$VISITARCH" ]] ; then
      echo "Skipping NetCDF build.  NetCDF is already installed."
   else
      echo "Building NetCDF (~2 minutes)"
      build_netcdf 3>&1 >> build_visit_log 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install NetCDF.  Bailing out."
         echo \
"More information about the failed build can be found in \"build_visit_log\""
         exit 1
      fi
      echo "Done building NetCDF"
   fi
fi
if [[ "$DO_CGNS" == "yes" ]] ; then
   cd "$START_DIR"
   if [[ -d "$VISITDIR/cgns/${CGNS_VERSION}/$VISITARCH" ]] ; then
      echo "Skipping CGNS build.  CGNS is already installed."
   else
      echo "Building CGNS (~2 minutes)"
      build_cgns 3>&1 >> build_visit_log 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install CGNS.  Bailing out."
         echo \
"More information about the failed build can be found in \"build_visit_log\""
         exit 1
      fi
      echo "Done building CGNS"
   fi
fi
if [[ "$DO_GDAL" == "yes" ]] ; then
   cd "$START_DIR"
   if [[ "$OPSYS" == "AIX" ]]; then
      echo "Skipping GDAL build.  AIX build is not supported."
      DO_GDAL="no"
   else
      if [[ -d "$VISITDIR/gdal/${GDAL_VERSION}/$VISITARCH" ]] ; then
         echo "Skipping GDAL build.  GDAL is already installed."
      else
         echo "Building GDAL (~2 minutes)"
         build_gdal 3>&1 >> build_visit_log 2>&1
         if [[ $? != 0 ]] ; then
            echo "Unable to build or install GDAL.  Bailing out."
            echo \
"More information about the failed build can be found in \"build_visit_log\""
            exit 1
         fi
         echo "Done building GDAL"
      fi
   fi
fi
if [[ "$DO_EXODUS" == "yes" ]] ; then
   cd "$START_DIR"
   if [[ -d "$VISITDIR/exodus/${EXODUS_VERSION}/$VISITARCH" ]] ; then
      echo "Skipping EXODUS build.  EXODUS is already installed."
   else
      echo "Building EXODUS (~2 minutes)"
      build_exodus 3>&1 >> build_visit_log 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install EXODUS.  Bailing out."
         echo \
"More information about the failed build can be found in \"build_visit_log\""
         exit 1
      fi
      echo "Done building EXODUS"
   fi
fi
if [[ "$DO_BOXLIB" == "yes" ]] ; then
   cd "$START_DIR"
   if [[ -d "$VISITDIR/boxlib/$VISITARCH" ]] ; then
      echo "Skipping Boxlib build.  Boxlib is already installed."
   else
      echo "Building Boxlib (~2 minutes)"
      build_boxlib 3>&1 >> build_visit_log 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install Boxlib.  Bailing out."
         echo \
"More information about the failed build can be found in \"build_visit_log\""
         exit 1
      fi
      echo "Done building Boxlib"
   fi
fi
if [[ "$DO_CFITSIO" == "yes" ]] ; then
   cd "$START_DIR"
   if [[ -d "$VISITDIR/cfitsio/${CFITSIO_VERSION}/$VISITARCH" ]] ; then
      echo "Skipping CFITSIO build.  CFITSIO is already installed."
   else
      echo "Building CFITSIO (~2 minutes)"
      build_cfitsio 3>&1 >> build_visit_log 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install CFITSIO.  Bailing out."
         echo \
"More information about the failed build can be found in \"build_visit_log\""
         exit 1
      fi
      echo "Done building CFITSIO"
   fi
fi

#
# Build Silo
#
cd "$START_DIR"
if [[ -d "$VISITDIR/silo/${SILO_VERSION}/$VISITARCH" ]] ; then
   echo "Skipping Silo build.  Silo is already installed."
else
   echo "Building Silo (~2 minutes)"
   build_silo 3>&1 >> build_visit_log 2>&1
   if [[ $? != 0 ]] ; then
      echo "Unable to build or install Silo.  Bailing out."
      echo \
"More information about the failed build can be found in \"build_visit_log\""
      exit 1
   fi
   echo "Done building Silo"
fi

#
# Create the host.conf file
#
build_hostconf

#
# Build the actual VisIt code
#
if [[ "$DO_VISIT" == "yes" ]] ; then
   cd "$START_DIR"
   echo "Building VisIt (~50 minutes)"
   build_visit 3>&1 >> build_visit_log 2>&1
   if [[ $? != 0 ]] ; then
      echo "Unable to build or install VisIt.  Bailing out."
      echo \
"More information about the failed build can be found in \"build_visit_log\""
      exit 1
   fi
   echo "Done building VisIt"
if [[ "$DO_SVN" == "yes" ]] ; then
   echo \
"You may now try to run VisIt by cd'ing into the src/bin"
    else
   echo \
"You may now try to run VisIt by cd'ing into the ${VISIT_FILE%.tar*}/bin"
    fi
   echo "directory and invoking \"visit\"."
   echo "If you run into problems, contact visit-help@llnl.gov"
else
   echo "Done"
fi

exit 0


