#!/bin/env perl

# This script locks the RC branch to the current user so that no one else
# can modify the RC branch.  This is useful for doing merges.

$user = shift;

if ($user eq "")
{
    print STDERR "I don't know who you are!\n";
    exit(1);
}

# Print out some help
sub help
{
    print <<"EOF";
USAGE: lockrc [-silo] [-ls] [-nospin] [-nc] [-c comment] [-help]
    -silo       Lock the Silo rc
    -ls         Lists any lock on the rc branch.
    -help       Prints this help message.
    -nospin     Doesn't attempt to poll for the lock.
    -nc         Does not request a comment.
    -c comment  Specifies a comment on the command line
EOF
}

# Process the options including error checking on the options.
require "newgetopt.pl";
&NGetOpt("ls","help","nospin","nc","c:s");

if ($opt_help)
{
    &help();
    exit(0);
}

if ($opt_nc && $opt_c)
{
    print "Illegal to specify -nc and -c options at the same time.\n";
    &help();
    exit(0);
}

if ($opt_ls)
{
    $opt_list = 1;
}

$projnm = "visit";
$vobnm = "VisIt";
$silo_opt = "";
if ($opt_silo)
{
    $projnm = "silo";
    $vobnm = "Silo";
    $silo_opt = "-silo";
}

# The options are alright.  Now check to see who we are.
# We have to be visit.
$cleartool = "/usr/atria/bin/cleartool";
$who = `whoami`;
chop($who);

# We must be visit to have this stuff work.
if ($who ne "visit")
{
    # We're not visit, so either we're not setuid or we didn't use ssh.
    print STDERR <<"EOF";
This script is not set up correctly.  Contact the VOB administrator.
EOF
    exit(-1);
}

# Make sure that we have a path into the VOB.
print STDERR "Checking lock status...\n";
$view = `$cleartool lsview '${projnm}_VOBowner_rc'`;
if ($view !~ /^\*/)
{
    system("$cleartool endview ${projnm}_VOBowner_rc");
    $status = system("$cleartool startview ${projnm}_VOBowner_rc");
    $status /= 256;
    die "Unable to start the ${projnm}_VOBowner_rc view.\n" if ($status != 0);
}
$status = chdir("/view/${projnm}_VOBowner_rc/data_vobs/$vobnm");
die "Unable to chdir to the $vobnm VOB ($status).\n" if ($status != 1);

# Get the branch name of the release candidate
chomp($branchline = `$cleartool catcs | grep 'branch:'`);
($branchname = $branchline) =~ s/^.*branch:\s*(.*)$/$1/;

# Get the status of any lock that exists.
$lock_owner = "";
$users = "";
$users = `$cleartool lslock -fmt "%c" brtype:$branchname@/data_vobs/$vobnm`;
chop($users);
if ($users eq "Locked for all users.")
{
    print STDERR "Branch \"$branchname\" is locked for all users.\n";
    exit(1);
}
($lock_owner) = ($users =~ /^Locked except for users: (\w*)/);
$MULTILINE_MATCHING = 1;
$comment = $users;
$comment =~ s/^Locked except for users:.*//;
$comment =~ s/^\s*//;

# If we're just listing, output appropriate information.
if ($opt_list)
{
    if ($lock_owner =~ /^\s*$/)
    {
        print STDERR "The \"$branchname\" branch is not locked.\n";
        exit(0);
    } else
    {
        print STDERR "The \"$branchname\" branch is locked by $lock_owner.\n";
        print STDERR "Comment for lock:\n$comment\n";
        exit(1);
    }
}

# Attempt to lock the RC branch.

# If the lock owner is non-null, then it's already locked.
if ($lock_owner !~ /^\s*$/)
{
    if ($lock_owner eq $user)
    {
        print STDERR <<"EOF";
You already have the \"$branchname\" branch locked.  Your comment:
$comment.
EOF
        exit(2);
    } else
    {
        print STDERR <<"EOF";

The "$branchname" branch is already locked by $lock_owner.  You
may not modify the "$branchname" branch until $lock_owner unlocks
it.  If you know for sure that $lock_owner is done with the
"$branchname" branch, you may try to remove the lock by calling
"unlockrc -notme" and then locking it yourself.

The comment for ${lock_owner}'s lock is:
$comment

EOF
        if ($opt_nospin)
        {
            exit(1);
        } else {
            print STDERR "Would you like to poll for the lock? [y/(n)]: ";
            $query = <STDIN>;
            if ($query =~ /^y/i)
            {
                exec("/view/visit_VOBowner_main/data_vobs/VisIt/clearcase_bin/spinlock $branchname $user $silo_opt");
            } else {
                exit(1);
            }
        }
    }
}

# Everything's fine, let's try and lock the branch.
$date = `date`;
$comment = "";

if ($opt_c)
{
    $comment .= "$opt_c" . "\n";
}

if (!$opt_nc && !$opt_c)
{
    print STDERR "Comment for the lock on the $branchname branch: (\".\" or ^D ends comment)\n";
    while(<STDIN>)
    {
        last if (/^\.$/);
        $comment .= $_;
    }
}

$comment = $date . $comment;

# Save the comment in a temp file since it might be long and/or contain
# shell meta characters.
open (TMP, "> /tmp/lock_rc.$$") || die "cannot save comment to a temp file";
print TMP $comment;
close (TMP);

$status = system("$cleartool lock -cfile /tmp/lock_rc.$$ -nusers $user,visit brtype:$branchname@/data_vobs/$vobnm");
system "/bin/rm","-f","/tmp/lock_rc.$$";
$status /= 256;
if ($status != 0)
{
    print STDERR "An error occurred while locking branch type \"$branchname\": $!\n";
    exit($status);
} else
{
    # Store off the name of the user in the "public_html/modifiers"
    # file for use by the testing scripts.
    print STDERR "Branch \"$branchname\" locked successfully\n";
    if (!$opt_silo)
    {
        open(CH,">>/home/visit/public_html/modifiers") || die "Can't append to the \"modifiers\" file.";
        print CH "$user\n";
        close(CH);
    }
}

exit(4);
