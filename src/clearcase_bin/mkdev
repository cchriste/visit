#!/bin/env perl

#     Mark C. Miller, Mon Jun 19 19:25:02 PDT 2006
#     Added support for working with silo vob

use Env;

chomp($prog = `basename $0`);
$projnm = "visit";
$vobnm = "VisIt";
if ($prog =~ /silo/)
{
    $projnm = "silo";
    $vobnm = "Silo";
}

$usage = <<"EOF";
USAGE: $prog tag
       $prog branch tag
       $prog coll branch tag

Arguments:
   tag     The base name the view tag to create.  It will have "${projnm}_" and
           your name prepended.  If you do not wish to use your login name, set
           the environment variable VIEW_NAME.
   branch
           The name of the branch type to create.
   coll    The name of the collaboration branch to work on.
EOF

$who = $USER;

$tag = "";
$brtype = undef;
$coll = undef;

sub CheckArguments
{
    $nargs = scalar(@ARGV);
    if ($nargs == 0)
    {
        print STDERR "$usage\n";
        exit(0);
    }
    if ($nargs == 1)
    {
        $tag = shift(@ARGV);
    } elsif ($nargs == 2)
    {
        $brtype = shift(@ARGV);
        $tag = shift(@ARGV);
    } elsif ($nargs == 3)
    {
        $coll = shift(@ARGV);
        $brtype = shift(@ARGV);
        $tag = shift(@ARGV);
    } else {
        print STDERR "ERROR: Invalid number of arguments.\n";
        print STDERR "\n$usage\n";
        exit(-1);
    }

    if (defined($brtype) && ($brtype =~ /\s/))
    {
        print STDERR <<"EOF";
ERROR: The branch type "$brtype" contains whitespace.
ERROR: This is not allowed.
EOF
        exit(-1);
    }

    if ($tag =~ /\s/)
    {
        print STDERR <<"EOF";
ERROR: The view tag "$tag" contains whitespace.
ERROR: This is not allowed.
EOF
        exit(-1);
    }
}

sub CreateVariables()
{
    $viewdir = "/viewstorage_datagroup";

    chomp($date = `date +"%B_%d_%Y"`);

    # Check if the brtype already exists.
    $result = <<`EOF`;
    cd /data_vobs/$vobnm ; cleartool lstype -short brtype:$brtype 2> /dev/null
EOF
    chomp($result);
    $found = ($result ne "");

    $append_date = 1;
    if ($found == 0)
    {
        # Check if the brtype has two digits at the end.  If it does, assume
        # that it's the date the user wants.
        if ($brtype =~ /\d\d$/)
        {
            $append_date = 0; # Don't append the date
        }
    } else {
        # Found.  Don't append the date.
        $append_date = 0;
    }

    # Put the date on the brtype
    $brtype = "${brtype}_$date" if defined($brtype) && ($append_date == 1);

    $shorttag = $tag;

    # Create the view storage directory name.
    if ($who ne "visit")
    {
        if (-d "$viewdir/$who/$projnm")
        {
            $dir = "$viewdir/$who/$projnm/$shorttag.vws";
        } else {
            $dir = "$viewdir/$who/$shorttag.vws";
        }
    } else {
        #$dir = "/home/$projnm/views/$shorttag.vws";
        $dir = "$viewdir/$who/$shorttag.vws";
    }

    # Set up the view tag name.
    if (defined($ENV{"VIEW_NAME"}))
    {
        $tag = "${projnm}_$ENV{VIEW_NAME}_$shorttag";
    } else {
        $tag = "${projnm}_${who}_$shorttag";
    }
}

sub CheckCollBranch()
{
    # Check if the brtype already exists.
    $result = <<`EOF`;
cd /data_vobs/$vobnm ; cleartool lstype -short brtype:$coll 2> /dev/null
EOF
    chomp($result);
    $found = ($result ne "");

    if ($found == 0)
    {
        print STDERR <<"EOF";
ERROR: The collaborative branch type "$coll" was not found.  This branch type
ERROR: must exist for this command to complete.
EOF
        exit(1);
    }
}

sub MakeBranchType()
{
    # Search for the given branch type.  Create it if it doesn't already exist.
    if (defined($brtype))
    {
        $result = <<`EOF`;
cd /data_vobs/$vobnm ; cleartool lstype -short brtype:$brtype 2> /dev/null
EOF
        chomp($result);
        $found = ($result ne "");

        if ($found == 0)
        {
            print STDERR "Creating branch type \"$brtype\".\n";
            $status = system("cleartool mkbrtype $brtype@/data_vobs/$vobnm");
            $status /= 256;
            if ($status != 0)
            {
                print STDERR <<"EOF";
ERROR: An error occurred while creating branch type "$brtype".
ERROR:
ERROR: Neither branch type "$brtype"
ERROR: nor view with tag "$tag" were created.
ERROR:
ERROR: Aborting.
EOF
                exit(-1);
            }
        } else
        {
            print STDERR 
                "Branch type \"$brtype\" already exists, so I'll use that.\n";
        }
    } else {
        print STDERR
            "Creating default mainline view.\n";
    }
}

sub CreateDefaultView
{
    # Search for the given view.
    $exists = `cleartool lsview $tag 2> /dev/null`;
    if ($exists ne "")
    {
        print STDERR <<"EOF";

ERROR: The view tag "$tag" already exists.
ERROR: Please specify a different view tag.
EOF
        if (defined($brtype))
        {
            print STDERR <<"EOF";
ERROR:
ERROR: Note that the branch type "$brtype" was created.
EOF
        }

        exit(-1);
    }

    print STDERR "\nAttempting to create view \"$tag\".\n";
    $status = system("cleartool mkview -ncaexported -tag $tag $dir > /dev/null");
    $status /= 256;
    if ($status != 0)
    {
        if (defined($brtype))
        {
            print STDERR <<"EOF";

ERROR: An error occurred while creating view "$tag".
ERROR: The view was not created.  However, branch type
ERROR: "$brtype" still exists.
EOF
        } else {
            print STDERR <<"EOF";

ERROR: An error occurred while creating view
ERROR: "$tag".  The view was not created.
EOF
        }
        exit(-1);
    }

    print STDERR "\nView \"$tag\" created.\n";
}

sub SetupConfigSpec
{
    # If no branch type was defined, leave the config spec as is.
    #
    # If a branch type was defined, but not the collaboration branch, then set
    # up the view spec as:
    #
    #   The first line says to see any files that are currently checked out.
    #   Then look at the latest version on my development branch.
    #   Then look at the latest version on the mainline.
    #
    # If a branch type was defined, as well as a collaboration branch, then set
    # up the view spec as:
    #
    #   The first line says to see any files that are currently checked out.
    #   Then look at the latest version on my development branch.
    #   Then look at the latest version on my collaboration branch.
    #   Then look at the latest version on the mainline.

    @config_spec = ();

    if (defined($coll))
    {
        # Collaboration work
        @config_spec = (
            "# View configured for collaboration work.",
            "#     Collaboration branch: $coll",
            "#     Development branch:   $brtype",
            "element * CHECKEDOUT",
            "element * .../$brtype/LATEST",
            "element * .../$coll/LATEST -mkbranch $brtype",
            "element * /main/LATEST -mkbranch $coll"
        );
    } elsif (defined($brtype))
    {
        # Normal work
        @config_spec = (
            "# View configured for individual work.",
            "#     Development branch:   $brtype",
            "element * CHECKEDOUT",
            "element * .../$brtype/LATEST",
            "element * /main/LATEST -mkbranch $brtype"
        );
    } else {
        # Mainline.  Just add a nice comment.
        @config_spec = (
            "# View configured to see the mainline.",
            "element * CHECKEDOUT",
            "element * /main/LATEST"
        );
    }
}

sub SpecError
{
    print STDERR << "EOF";
ERROR: This is not appropriate for doing work on.
ERROR:
ERROR: You must set the config spec yourself (by using 'ct edcs') to be:
ERROR:
EOF
    foreach $line (@config_spec)
    {
        print "ERROR:    $line\n";
    }
    print STDERR <<"EOF" if defined($brtype);
ERROR:
ERROR: Note: branch type "$brtype" still exists.
EOF

    exit(-1);
}

sub WriteSpecToTemp
{
    $config_spec_file = "/tmp/config_spec$$";
    if (open(CONFIG_SPEC,">$config_spec_file") == 0)
    {
        print STDERR <<"EOF";

ERROR: Unable to create a temporary config spec file.
ERROR:
ERROR: However, the view "$tag" has been created with a default
ERROR: config spec.
EOF
        &SpecError();
    }

    # Output the config spec to the temporary file.
    foreach $line (@config_spec)
    {
        print CONFIG_SPEC "$line\n";
    }
    close(CONFIG_SPEC);
}

sub SetSpecInView
{
    $system = system("cleartool setcs -tag $tag $config_spec_file");
    $system /= 256;
    unlink($config_spec_file);
    if ($system != 0)
    {
        print STDERR <<"EOF";

ERROR: An error occurred while setting the config spec for the view
ERROR: "$tag".  The view thus has a default mainline config spec.
EOF
        &SpecError();
        exit(-1);
    }
}

sub FinalMessages
{
    print STDERR "\n";
    if (defined($coll))
    {
        print STDERR <<"EOF";
View "$tag" has now been set up to do development work
on branch "$brtype", collaborating with others on collaboration
branch "$coll".
EOF
    } elsif (defined($brtype))
    {
        print STDERR <<"EOF";
View "$tag" has now been set up to do development work on
branch "$brtype".
EOF
    } else {
        print STDERR <<"EOF";
View "$tag" has now been set up to see the mainline.
EOF
    }

    print STDERR <<"EOF"

Do a "cleartool setview -login $tag" to use the
new view.
EOF
}

sub CreateView
{
    &CreateDefaultView();
    &SetupConfigSpec();
    &WriteSpecToTemp();
    &SetSpecInView();
}

&CheckArguments();
&CreateVariables();
&CheckCollBranch() if defined($coll);
&MakeBranchType();
&CreateView();
&FinalMessages();
