#!/bin/env perl
#!/bin/env perl

# Author: Jeremy Meredith
# Date    June 9, 2004
#
# Note: Blatant rip-off of Sean's unlockmain.script
#
# Modifications:


# This script unlocks the RC branch

$user = shift;

# Print out some help
sub help
{
    print STDERR <<"EOF";
USAGE: unlockrc [-silo] [-help] | [-notme] [-ignore]
    -silo       Unlocks the Silo RC branch
    -help       Prints this help message.
    -notme      Unlocks the RC branch even if you aren't the
                one who locked it.  This will fail if there are
                CHECKEDOUT files on the RC branch.
    -ignore     Ignores CHECKEDOUT files.  You really should never
                use this.
EOF
}

# Process the options including error checking on the options.
require "newgetopt.pl";
&NGetOpt("silo","notme","ignore","help");

if ($opt_help)
{
    &help();
    exit(0);
}

$projnm = "visit";
$vobnm = "VisIt";
if ($opt_silo)
{
    $projnm = "silo";
    $vobnm = "Silo";
}

# The options are all right.  Now check to see who we are.
# We have to be visit.
$cleartool = "/usr/atria/bin/cleartool";
$who = `whoami`;
chomp($who);

# We must be visit to have this stuff work.
if ($who ne "visit")
{
    # We're not visit, so either we're not setuid or we didn't use ssh.
    print STDERR <<"EOF";
We're not the user "visit".  We are "$who".  That's bogus!
These scripts are not set up correctly.  Contact the VOB administrator.
EOF
    exit(-1);
}

# Make sure that we have a path into the VOB.
$status = system("$cleartool startview ${projnm}_VOBowner_rc");
$status /= 256;
die "Unable to start the ${projnm}_VOBowner_rc view.\n" if ($status != 0);
$status = chdir("/view/${projnm}_VOBowner_rc/data_vobs/$vobnm");
die "Unable to chdir to the $vobnm VOB ($status).\n" if ($status != 1);

# Get the branch name of the release candidate
chomp($branchline = `$cleartool catcs | grep 'branch:'`);
($branchname = $branchline) =~ s/^.*branch:\s*(.*)$/$1/;

# Get the status of any lock that exists.
$lock_owner = "";
$users = "";
$users = `$cleartool lslock -fmt \"%c\" brtype:$branchname@/data_vobs/$vobnm`;
chop($users);
if ($users eq "Locked for all users.")
{
    print STDERR "Branch \"$branchname\" is locked for all users.\n";
    exit(1);
}
($lock_owner) = ($users =~ /^Locked except for users: (\w*)/);
$* = 1;
$comment = $users;
$comment =~ s/^Locked except for users:.*$//;
$comment =~ s/^\s*//;

# Attempt to unlock the RC branch.

# If the lock owner is empty, then there isn't a lock in effect right
# now.
if ($lock_owner =~ /^\s*$/)
{
    print STDERR "The \"$branchname\" branch is not currently locked.\n";
    exit(0);
}

# If the lock owner isn't the user, and we aren't doing a "notme", then
# we can't do anything.
if ($lock_owner !~ /$user/ && !$opt_notme)
{
    print STDERR <<"EOF";
You do not have permission to unlock the "$branchname" branch.
Only $lock_owner may unlock the "$branchname" branch.  If you know
that $lock_owner mistakenly left the "$branchname" locked, and you
wish to try to unlock it, add a "-notme" option to this
command.

To list the lock on "$branchname", do a "lockrc -ls".
EOF
    exit(-1);
}

# If we're not doing an "ignore", check to see if there are any files
# checked out on the RC branch right now.  If there are, then we
# can't proceed.
if (!$opt_ignore)
{
    print STDERR "Looking for CHECKEDOUT files...\n";
    $checkedout = `$cleartool lsco -all -brtype $branchname@/data_vobs/$vobnm -fmt \"%Xn\n\"`;
    $checkedout =~ s|^.*/data_vobs/$vobnm/(.*)@@.*$|$1|g;
    @checkoutlist = split /\s+/, $checkedout;
    if (@checkoutlist != 0)
    {
        print STDERR <<"EOF";

There are files still checked out on the "$branchname" branch.
These files must be checked in before anyone else can see
them.  Remember that CHECKEDOUT files only appear in their
owner's view, not other people's views.  The lock cannot be
removed until either all of the files are checked in, or
you specify a -ignore option.

I believe the files that are checked out on the "$branchname"
branch (under /data_vobs/$vobnm/) are:
EOF
        print $checkedout;
        exit(-1);
    } else
    {
        print STDERR "No CHECKEDOUT files found.  Good.\n";
    }
}

$status = system("$cleartool unlock brtype:$branchname@/data_vobs/$vobnm");
$status /= 256;
if ($status != 0)
{
    print STDERR "An error occurred while unlocking \"$branchname\".\n";
    exit($status);
} else
{
    print STDERR "Branch \"$branchname\" unlocked successfully.\n";
}
