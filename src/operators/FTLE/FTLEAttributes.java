// ***************************************************************************
//
// Copyright (c) 2000 - 2012, Lawrence Livermore National Security, LLC
// Produced at the Lawrence Livermore National Laboratory
// LLNL-CODE-442911
// All rights reserved.
//
// This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
// full copyright notice is contained in the file COPYRIGHT located at the root
// of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
//
//  - Redistributions of  source code must  retain the above  copyright notice,
//    this list of conditions and the disclaimer below.
//  - Redistributions in binary form must reproduce the above copyright notice,
//    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
//    documentation and/or other materials provided with the distribution.
//  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
// ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
// LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
// DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
// SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
// CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
// LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
// OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ***************************************************************************

package llnl.visit.operators;

import llnl.visit.AttributeSubject;
import llnl.visit.CommunicationBuffer;
import llnl.visit.Plugin;

// ****************************************************************************
// Class: FTLEAttributes
//
// Purpose:
//    Attributes for FTLE
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   omitted
//
// Modifications:
//   
// ****************************************************************************

public class FTLEAttributes extends AttributeSubject implements Plugin
{
    private static int FTLEAttributes_numAdditionalAtts = 9;

    // Enum values
    public final static int REGION_NATIVERESOLUTIONOFMESH = 0;
    public final static int REGION_REGULARGRID = 1;

    public final static int DIRECTION_FORWARD = 0;
    public final static int DIRECTION_BACKWARD = 1;

    public final static int FLOWTYPE_UNSTEADY = 0;
    public final static int FLOWTYPE_STEADY = 1;


    public FTLEAttributes()
    {
        super(FTLEAttributes_numAdditionalAtts);

        integrationTime = 1;
        regionType = REGION_REGULARGRID;
        Resolution = new int[3];
        Resolution[0] = 10;
        Resolution[1] = 10;
        Resolution[2] = 10;
        UseDataSetStart = true;
        StartPosition = new double[3];
        StartPosition[0] = 0;
        StartPosition[1] = 0;
        StartPosition[2] = 0;
        UseDataSetEnd = true;
        EndPosition = new double[3];
        EndPosition[0] = 1;
        EndPosition[1] = 1;
        EndPosition[2] = 1;
        direction = DIRECTION_FORWARD;
        flowType = FLOWTYPE_UNSTEADY;
    }

    public FTLEAttributes(int nMoreFields)
    {
        super(FTLEAttributes_numAdditionalAtts + nMoreFields);

        integrationTime = 1;
        regionType = REGION_REGULARGRID;
        Resolution = new int[3];
        Resolution[0] = 10;
        Resolution[1] = 10;
        Resolution[2] = 10;
        UseDataSetStart = true;
        StartPosition = new double[3];
        StartPosition[0] = 0;
        StartPosition[1] = 0;
        StartPosition[2] = 0;
        UseDataSetEnd = true;
        EndPosition = new double[3];
        EndPosition[0] = 1;
        EndPosition[1] = 1;
        EndPosition[2] = 1;
        direction = DIRECTION_FORWARD;
        flowType = FLOWTYPE_UNSTEADY;
    }

    public FTLEAttributes(FTLEAttributes obj)
    {
        super(FTLEAttributes_numAdditionalAtts);

        int i;

        integrationTime = obj.integrationTime;
        regionType = obj.regionType;
        Resolution = new int[3];
        Resolution[0] = obj.Resolution[0];
        Resolution[1] = obj.Resolution[1];
        Resolution[2] = obj.Resolution[2];

        UseDataSetStart = obj.UseDataSetStart;
        StartPosition = new double[3];
        StartPosition[0] = obj.StartPosition[0];
        StartPosition[1] = obj.StartPosition[1];
        StartPosition[2] = obj.StartPosition[2];

        UseDataSetEnd = obj.UseDataSetEnd;
        EndPosition = new double[3];
        EndPosition[0] = obj.EndPosition[0];
        EndPosition[1] = obj.EndPosition[1];
        EndPosition[2] = obj.EndPosition[2];

        direction = obj.direction;
        flowType = obj.flowType;

        SelectAll();
    }

    public int Offset()
    {
        return super.Offset() + super.GetNumAdditionalAttributes();
    }

    public int GetNumAdditionalAttributes()
    {
        return FTLEAttributes_numAdditionalAtts;
    }

    public boolean equals(FTLEAttributes obj)
    {
        int i;

        // Compare the Resolution arrays.
        boolean Resolution_equal = true;
        for(i = 0; i < 3 && Resolution_equal; ++i)
            Resolution_equal = (Resolution[i] == obj.Resolution[i]);

        // Compare the StartPosition arrays.
        boolean StartPosition_equal = true;
        for(i = 0; i < 3 && StartPosition_equal; ++i)
            StartPosition_equal = (StartPosition[i] == obj.StartPosition[i]);

        // Compare the EndPosition arrays.
        boolean EndPosition_equal = true;
        for(i = 0; i < 3 && EndPosition_equal; ++i)
            EndPosition_equal = (EndPosition[i] == obj.EndPosition[i]);

        // Create the return value
        return ((integrationTime == obj.integrationTime) &&
                (regionType == obj.regionType) &&
                Resolution_equal &&
                (UseDataSetStart == obj.UseDataSetStart) &&
                StartPosition_equal &&
                (UseDataSetEnd == obj.UseDataSetEnd) &&
                EndPosition_equal &&
                (direction == obj.direction) &&
                (flowType == obj.flowType));
    }

    public String GetName() { return "FTLE"; }
    public String GetVersion() { return "1.0"; }

    // Property setting methods
    public void SetIntegrationTime(double integrationTime_)
    {
        integrationTime = integrationTime_;
        Select(0);
    }

    public void SetRegionType(int regionType_)
    {
        regionType = regionType_;
        Select(1);
    }

    public void SetResolution(int[] Resolution_)
    {
        Resolution[0] = Resolution_[0];
        Resolution[1] = Resolution_[1];
        Resolution[2] = Resolution_[2];
        Select(2);
    }

    public void SetResolution(int e0, int e1, int e2)
    {
        Resolution[0] = e0;
        Resolution[1] = e1;
        Resolution[2] = e2;
        Select(2);
    }

    public void SetUseDataSetStart(boolean UseDataSetStart_)
    {
        UseDataSetStart = UseDataSetStart_;
        Select(3);
    }

    public void SetStartPosition(double[] StartPosition_)
    {
        StartPosition[0] = StartPosition_[0];
        StartPosition[1] = StartPosition_[1];
        StartPosition[2] = StartPosition_[2];
        Select(4);
    }

    public void SetStartPosition(double e0, double e1, double e2)
    {
        StartPosition[0] = e0;
        StartPosition[1] = e1;
        StartPosition[2] = e2;
        Select(4);
    }

    public void SetUseDataSetEnd(boolean UseDataSetEnd_)
    {
        UseDataSetEnd = UseDataSetEnd_;
        Select(5);
    }

    public void SetEndPosition(double[] EndPosition_)
    {
        EndPosition[0] = EndPosition_[0];
        EndPosition[1] = EndPosition_[1];
        EndPosition[2] = EndPosition_[2];
        Select(6);
    }

    public void SetEndPosition(double e0, double e1, double e2)
    {
        EndPosition[0] = e0;
        EndPosition[1] = e1;
        EndPosition[2] = e2;
        Select(6);
    }

    public void SetDirection(int direction_)
    {
        direction = direction_;
        Select(7);
    }

    public void SetFlowType(int flowType_)
    {
        flowType = flowType_;
        Select(8);
    }

    // Property getting methods
    public double   GetIntegrationTime() { return integrationTime; }
    public int      GetRegionType() { return regionType; }
    public int[]    GetResolution() { return Resolution; }
    public boolean  GetUseDataSetStart() { return UseDataSetStart; }
    public double[] GetStartPosition() { return StartPosition; }
    public boolean  GetUseDataSetEnd() { return UseDataSetEnd; }
    public double[] GetEndPosition() { return EndPosition; }
    public int      GetDirection() { return direction; }
    public int      GetFlowType() { return flowType; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteDouble(integrationTime);
        if(WriteSelect(1, buf))
            buf.WriteInt(regionType);
        if(WriteSelect(2, buf))
            buf.WriteIntArray(Resolution);
        if(WriteSelect(3, buf))
            buf.WriteBool(UseDataSetStart);
        if(WriteSelect(4, buf))
            buf.WriteDoubleArray(StartPosition);
        if(WriteSelect(5, buf))
            buf.WriteBool(UseDataSetEnd);
        if(WriteSelect(6, buf))
            buf.WriteDoubleArray(EndPosition);
        if(WriteSelect(7, buf))
            buf.WriteInt(direction);
        if(WriteSelect(8, buf))
            buf.WriteInt(flowType);
    }

    public void ReadAtts(int index, CommunicationBuffer buf)
    {
        switch(index)
        {
        case 0:
            SetIntegrationTime(buf.ReadDouble());
            break;
        case 1:
            SetRegionType(buf.ReadInt());
            break;
        case 2:
            SetResolution(buf.ReadIntArray());
            break;
        case 3:
            SetUseDataSetStart(buf.ReadBool());
            break;
        case 4:
            SetStartPosition(buf.ReadDoubleArray());
            break;
        case 5:
            SetUseDataSetEnd(buf.ReadBool());
            break;
        case 6:
            SetEndPosition(buf.ReadDoubleArray());
            break;
        case 7:
            SetDirection(buf.ReadInt());
            break;
        case 8:
            SetFlowType(buf.ReadInt());
            break;
        }
    }

    public String toString(String indent)
    {
        String str = new String();
        str = str + doubleToString("integrationTime", integrationTime, indent) + "\n";
        str = str + indent + "regionType = ";
        if(regionType == REGION_NATIVERESOLUTIONOFMESH)
            str = str + "REGION_NATIVERESOLUTIONOFMESH";
        if(regionType == REGION_REGULARGRID)
            str = str + "REGION_REGULARGRID";
        str = str + "\n";
        str = str + intArrayToString("Resolution", Resolution, indent) + "\n";
        str = str + boolToString("UseDataSetStart", UseDataSetStart, indent) + "\n";
        str = str + doubleArrayToString("StartPosition", StartPosition, indent) + "\n";
        str = str + boolToString("UseDataSetEnd", UseDataSetEnd, indent) + "\n";
        str = str + doubleArrayToString("EndPosition", EndPosition, indent) + "\n";
        str = str + indent + "direction = ";
        if(direction == DIRECTION_FORWARD)
            str = str + "DIRECTION_FORWARD";
        if(direction == DIRECTION_BACKWARD)
            str = str + "DIRECTION_BACKWARD";
        str = str + "\n";
        str = str + indent + "flowType = ";
        if(flowType == FLOWTYPE_UNSTEADY)
            str = str + "FLOWTYPE_UNSTEADY";
        if(flowType == FLOWTYPE_STEADY)
            str = str + "FLOWTYPE_STEADY";
        str = str + "\n";
        return str;
    }


    // Attributes
    private double   integrationTime;
    private int      regionType;
    private int[]    Resolution;
    private boolean  UseDataSetStart;
    private double[] StartPosition;
    private boolean  UseDataSetEnd;
    private double[] EndPosition;
    private int      direction;
    private int      flowType;
}

