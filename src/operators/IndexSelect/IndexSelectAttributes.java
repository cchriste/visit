// ***************************************************************************
//
// Copyright (c) 2000 - 2008, Lawrence Livermore National Security, LLC
// Produced at the Lawrence Livermore National Laboratory
// LLNL-CODE-400142
// All rights reserved.
//
// This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
// full copyright notice is contained in the file COPYRIGHT located at the root
// of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
//
//  - Redistributions of  source code must  retain the above  copyright notice,
//    this list of conditions and the disclaimer below.
//  - Redistributions in binary form must reproduce the above copyright notice,
//    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
//    documentation and/or other materials provided with the distribution.
//  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
// ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
// LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
// DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
// SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
// CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
// LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
// OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ***************************************************************************

package llnl.visit.operators;

import llnl.visit.AttributeSubject;
import llnl.visit.CommunicationBuffer;
import llnl.visit.Plugin;

// ****************************************************************************
// Class: IndexSelectAttributes
//
// Purpose:
//    This class contains attributes for the index select operator.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   Thu Jun 7 14:03:57 PST 2007
//
// Modifications:
//   
// ****************************************************************************

public class IndexSelectAttributes extends AttributeSubject implements Plugin
{
    // Enum values
    public final static int DIMENSION_ONED = 0;
    public final static int DIMENSION_TWOD = 1;
    public final static int DIMENSION_THREED = 2;


    public IndexSelectAttributes()
    {
        super(13);

        dim = DIMENSION_TWOD;
        xMin = 0;
        xMax = -1;
        xIncr = 1;
        yMin = 0;
        yMax = -1;
        yIncr = 1;
        zMin = 0;
        zMax = -1;
        zIncr = 1;
        useWholeCollection = true;
        categoryName = new String("Whole");
        subsetName = new String("Whole");
    }

    public IndexSelectAttributes(IndexSelectAttributes obj)
    {
        super(13);

        dim = obj.dim;
        xMin = obj.xMin;
        xMax = obj.xMax;
        xIncr = obj.xIncr;
        yMin = obj.yMin;
        yMax = obj.yMax;
        yIncr = obj.yIncr;
        zMin = obj.zMin;
        zMax = obj.zMax;
        zIncr = obj.zIncr;
        useWholeCollection = obj.useWholeCollection;
        categoryName = new String(obj.categoryName);
        subsetName = new String(obj.subsetName);

        SelectAll();
    }

    public boolean equals(IndexSelectAttributes obj)
    {
        // Create the return value
        return ((dim == obj.dim) &&
                (xMin == obj.xMin) &&
                (xMax == obj.xMax) &&
                (xIncr == obj.xIncr) &&
                (yMin == obj.yMin) &&
                (yMax == obj.yMax) &&
                (yIncr == obj.yIncr) &&
                (zMin == obj.zMin) &&
                (zMax == obj.zMax) &&
                (zIncr == obj.zIncr) &&
                (useWholeCollection == obj.useWholeCollection) &&
                (categoryName == obj.categoryName) &&
                (subsetName == obj.subsetName));
    }

    public String GetName() { return "IndexSelect"; }
    public String GetVersion() { return "1.0"; }

    // Property setting methods
    public void SetDim(int dim_)
    {
        dim = dim_;
        Select(0);
    }

    public void SetXMin(int xMin_)
    {
        xMin = xMin_;
        Select(1);
    }

    public void SetXMax(int xMax_)
    {
        xMax = xMax_;
        Select(2);
    }

    public void SetXIncr(int xIncr_)
    {
        xIncr = xIncr_;
        Select(3);
    }

    public void SetYMin(int yMin_)
    {
        yMin = yMin_;
        Select(4);
    }

    public void SetYMax(int yMax_)
    {
        yMax = yMax_;
        Select(5);
    }

    public void SetYIncr(int yIncr_)
    {
        yIncr = yIncr_;
        Select(6);
    }

    public void SetZMin(int zMin_)
    {
        zMin = zMin_;
        Select(7);
    }

    public void SetZMax(int zMax_)
    {
        zMax = zMax_;
        Select(8);
    }

    public void SetZIncr(int zIncr_)
    {
        zIncr = zIncr_;
        Select(9);
    }

    public void SetUseWholeCollection(boolean useWholeCollection_)
    {
        useWholeCollection = useWholeCollection_;
        Select(10);
    }

    public void SetCategoryName(String categoryName_)
    {
        categoryName = categoryName_;
        Select(11);
    }

    public void SetSubsetName(String subsetName_)
    {
        subsetName = subsetName_;
        Select(12);
    }

    // Property getting methods
    public int     GetDim() { return dim; }
    public int     GetXMin() { return xMin; }
    public int     GetXMax() { return xMax; }
    public int     GetXIncr() { return xIncr; }
    public int     GetYMin() { return yMin; }
    public int     GetYMax() { return yMax; }
    public int     GetYIncr() { return yIncr; }
    public int     GetZMin() { return zMin; }
    public int     GetZMax() { return zMax; }
    public int     GetZIncr() { return zIncr; }
    public boolean GetUseWholeCollection() { return useWholeCollection; }
    public String  GetCategoryName() { return categoryName; }
    public String  GetSubsetName() { return subsetName; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteInt(dim);
        if(WriteSelect(1, buf))
            buf.WriteInt(xMin);
        if(WriteSelect(2, buf))
            buf.WriteInt(xMax);
        if(WriteSelect(3, buf))
            buf.WriteInt(xIncr);
        if(WriteSelect(4, buf))
            buf.WriteInt(yMin);
        if(WriteSelect(5, buf))
            buf.WriteInt(yMax);
        if(WriteSelect(6, buf))
            buf.WriteInt(yIncr);
        if(WriteSelect(7, buf))
            buf.WriteInt(zMin);
        if(WriteSelect(8, buf))
            buf.WriteInt(zMax);
        if(WriteSelect(9, buf))
            buf.WriteInt(zIncr);
        if(WriteSelect(10, buf))
            buf.WriteBool(useWholeCollection);
        if(WriteSelect(11, buf))
            buf.WriteString(categoryName);
        if(WriteSelect(12, buf))
            buf.WriteString(subsetName);
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        for(int i = 0; i < n; ++i)
        {
            int index = (int)buf.ReadByte();
            switch(index)
            {
            case 0:
                SetDim(buf.ReadInt());
                break;
            case 1:
                SetXMin(buf.ReadInt());
                break;
            case 2:
                SetXMax(buf.ReadInt());
                break;
            case 3:
                SetXIncr(buf.ReadInt());
                break;
            case 4:
                SetYMin(buf.ReadInt());
                break;
            case 5:
                SetYMax(buf.ReadInt());
                break;
            case 6:
                SetYIncr(buf.ReadInt());
                break;
            case 7:
                SetZMin(buf.ReadInt());
                break;
            case 8:
                SetZMax(buf.ReadInt());
                break;
            case 9:
                SetZIncr(buf.ReadInt());
                break;
            case 10:
                SetUseWholeCollection(buf.ReadBool());
                break;
            case 11:
                SetCategoryName(buf.ReadString());
                break;
            case 12:
                SetSubsetName(buf.ReadString());
                break;
            }
        }
    }


    // Attributes
    private int     dim;
    private int     xMin;
    private int     xMax;
    private int     xIncr;
    private int     yMin;
    private int     yMax;
    private int     yIncr;
    private int     zMin;
    private int     zMax;
    private int     zIncr;
    private boolean useWholeCollection;
    private String  categoryName;
    private String  subsetName;
}

