// ***************************************************************************
//
// Copyright (c) 2000 - 2010, Lawrence Livermore National Security, LLC
// Produced at the Lawrence Livermore National Laboratory
// LLNL-CODE-442911
// All rights reserved.
//
// This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
// full copyright notice is contained in the file COPYRIGHT located at the root
// of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
//
//  - Redistributions of  source code must  retain the above  copyright notice,
//    this list of conditions and the disclaimer below.
//  - Redistributions in binary form must reproduce the above copyright notice,
//    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
//    documentation and/or other materials provided with the distribution.
//  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
// ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
// LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
// DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
// SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
// CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
// LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
// OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ***************************************************************************

package llnl.visit.operators;

import llnl.visit.AttributeSubject;
import llnl.visit.CommunicationBuffer;
import llnl.visit.Plugin;

// ****************************************************************************
// Class: LineSamplerAttributes
//
// Purpose:
//    This class contains attributes for the line sampler operator.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   omitted
//
// Modifications:
//   
// ****************************************************************************

public class LineSamplerAttributes extends AttributeSubject implements Plugin
{
    private static int LineSamplerAttributes_numAdditionalAtts = 15;

    // Enum values
    public final static int BEAMTYPE_PARALLEL = 0;
    public final static int BEAMTYPE_FAN = 1;

    public final static int BEAMAXIS_R = 0;
    public final static int BEAMAXIS_Z = 1;

    public final static int BEAMSHAPE_LINE = 0;
    public final static int BEAMSHAPE_CYLINDER = 1;
    public final static int BEAMSHAPE_CONE = 2;

    public final static int VIEWDIMENSION_ONE = 0;
    public final static int VIEWDIMENSION_TWO = 1;
    public final static int VIEWDIMENSION_THREE = 2;


    public LineSamplerAttributes()
    {
        super(LineSamplerAttributes_numAdditionalAtts);

        beamType = BEAMTYPE_PARALLEL;
        beamShape = BEAMSHAPE_LINE;
        radius = 0.1;
        divergence = 1;
        nBeams = 5;
        sampleDistance = 0.1;
        sampleArc = 10;
        spacing = 5;
        angle = 45;
        origin = new double[3];
        origin[0] = 0;
        origin[1] = 0;
        origin[2] = 0;
        beamAxis = BEAMAXIS_Z;
        poloialAngle = 0;
        poloialTilt = 0;
        toroialAngle = 0;
        viewDimension = VIEWDIMENSION_THREE;
    }

    public LineSamplerAttributes(int nMoreFields)
    {
        super(LineSamplerAttributes_numAdditionalAtts + nMoreFields);

        beamType = BEAMTYPE_PARALLEL;
        beamShape = BEAMSHAPE_LINE;
        radius = 0.1;
        divergence = 1;
        nBeams = 5;
        sampleDistance = 0.1;
        sampleArc = 10;
        spacing = 5;
        angle = 45;
        origin = new double[3];
        origin[0] = 0;
        origin[1] = 0;
        origin[2] = 0;
        beamAxis = BEAMAXIS_Z;
        poloialAngle = 0;
        poloialTilt = 0;
        toroialAngle = 0;
        viewDimension = VIEWDIMENSION_THREE;
    }

    public LineSamplerAttributes(LineSamplerAttributes obj)
    {
        super(LineSamplerAttributes_numAdditionalAtts);

        int i;

        beamType = obj.beamType;
        beamShape = obj.beamShape;
        radius = obj.radius;
        divergence = obj.divergence;
        nBeams = obj.nBeams;
        sampleDistance = obj.sampleDistance;
        sampleArc = obj.sampleArc;
        spacing = obj.spacing;
        angle = obj.angle;
        origin = new double[3];
        origin[0] = obj.origin[0];
        origin[1] = obj.origin[1];
        origin[2] = obj.origin[2];

        beamAxis = obj.beamAxis;
        poloialAngle = obj.poloialAngle;
        poloialTilt = obj.poloialTilt;
        toroialAngle = obj.toroialAngle;
        viewDimension = obj.viewDimension;

        SelectAll();
    }

    public int Offset()
    {
        return super.Offset() + super.GetNumAdditionalAttributes();
    }

    public int GetNumAdditionalAttributes()
    {
        return LineSamplerAttributes_numAdditionalAtts;
    }

    public boolean equals(LineSamplerAttributes obj)
    {
        int i;

        // Compare the origin arrays.
        boolean origin_equal = true;
        for(i = 0; i < 3 && origin_equal; ++i)
            origin_equal = (origin[i] == obj.origin[i]);

        // Create the return value
        return ((beamType == obj.beamType) &&
                (beamShape == obj.beamShape) &&
                (radius == obj.radius) &&
                (divergence == obj.divergence) &&
                (nBeams == obj.nBeams) &&
                (sampleDistance == obj.sampleDistance) &&
                (sampleArc == obj.sampleArc) &&
                (spacing == obj.spacing) &&
                (angle == obj.angle) &&
                origin_equal &&
                (beamAxis == obj.beamAxis) &&
                (poloialAngle == obj.poloialAngle) &&
                (poloialTilt == obj.poloialTilt) &&
                (toroialAngle == obj.toroialAngle) &&
                (viewDimension == obj.viewDimension));
    }

    public String GetName() { return "LineSampler"; }
    public String GetVersion() { return "1.0"; }

    // Property setting methods
    public void SetBeamType(int beamType_)
    {
        beamType = beamType_;
        Select(0);
    }

    public void SetBeamShape(int beamShape_)
    {
        beamShape = beamShape_;
        Select(1);
    }

    public void SetRadius(double radius_)
    {
        radius = radius_;
        Select(2);
    }

    public void SetDivergence(double divergence_)
    {
        divergence = divergence_;
        Select(3);
    }

    public void SetNBeams(int nBeams_)
    {
        nBeams = nBeams_;
        Select(4);
    }

    public void SetSampleDistance(double sampleDistance_)
    {
        sampleDistance = sampleDistance_;
        Select(5);
    }

    public void SetSampleArc(double sampleArc_)
    {
        sampleArc = sampleArc_;
        Select(6);
    }

    public void SetSpacing(double spacing_)
    {
        spacing = spacing_;
        Select(7);
    }

    public void SetAngle(double angle_)
    {
        angle = angle_;
        Select(8);
    }

    public void SetOrigin(double[] origin_)
    {
        origin[0] = origin_[0];
        origin[1] = origin_[1];
        origin[2] = origin_[2];
        Select(9);
    }

    public void SetOrigin(double e0, double e1, double e2)
    {
        origin[0] = e0;
        origin[1] = e1;
        origin[2] = e2;
        Select(9);
    }

    public void SetBeamAxis(int beamAxis_)
    {
        beamAxis = beamAxis_;
        Select(10);
    }

    public void SetPoloialAngle(double poloialAngle_)
    {
        poloialAngle = poloialAngle_;
        Select(11);
    }

    public void SetPoloialTilt(double poloialTilt_)
    {
        poloialTilt = poloialTilt_;
        Select(12);
    }

    public void SetToroialAngle(double toroialAngle_)
    {
        toroialAngle = toroialAngle_;
        Select(13);
    }

    public void SetViewDimension(int viewDimension_)
    {
        viewDimension = viewDimension_;
        Select(14);
    }

    // Property getting methods
    public int      GetBeamType() { return beamType; }
    public int      GetBeamShape() { return beamShape; }
    public double   GetRadius() { return radius; }
    public double   GetDivergence() { return divergence; }
    public int      GetNBeams() { return nBeams; }
    public double   GetSampleDistance() { return sampleDistance; }
    public double   GetSampleArc() { return sampleArc; }
    public double   GetSpacing() { return spacing; }
    public double   GetAngle() { return angle; }
    public double[] GetOrigin() { return origin; }
    public int      GetBeamAxis() { return beamAxis; }
    public double   GetPoloialAngle() { return poloialAngle; }
    public double   GetPoloialTilt() { return poloialTilt; }
    public double   GetToroialAngle() { return toroialAngle; }
    public int      GetViewDimension() { return viewDimension; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteInt(beamType);
        if(WriteSelect(1, buf))
            buf.WriteInt(beamShape);
        if(WriteSelect(2, buf))
            buf.WriteDouble(radius);
        if(WriteSelect(3, buf))
            buf.WriteDouble(divergence);
        if(WriteSelect(4, buf))
            buf.WriteInt(nBeams);
        if(WriteSelect(5, buf))
            buf.WriteDouble(sampleDistance);
        if(WriteSelect(6, buf))
            buf.WriteDouble(sampleArc);
        if(WriteSelect(7, buf))
            buf.WriteDouble(spacing);
        if(WriteSelect(8, buf))
            buf.WriteDouble(angle);
        if(WriteSelect(9, buf))
            buf.WriteDoubleArray(origin);
        if(WriteSelect(10, buf))
            buf.WriteInt(beamAxis);
        if(WriteSelect(11, buf))
            buf.WriteDouble(poloialAngle);
        if(WriteSelect(12, buf))
            buf.WriteDouble(poloialTilt);
        if(WriteSelect(13, buf))
            buf.WriteDouble(toroialAngle);
        if(WriteSelect(14, buf))
            buf.WriteInt(viewDimension);
    }

    public void ReadAtts(int index, CommunicationBuffer buf)
    {
        switch(index)
        {
        case 0:
            SetBeamType(buf.ReadInt());
            break;
        case 1:
            SetBeamShape(buf.ReadInt());
            break;
        case 2:
            SetRadius(buf.ReadDouble());
            break;
        case 3:
            SetDivergence(buf.ReadDouble());
            break;
        case 4:
            SetNBeams(buf.ReadInt());
            break;
        case 5:
            SetSampleDistance(buf.ReadDouble());
            break;
        case 6:
            SetSampleArc(buf.ReadDouble());
            break;
        case 7:
            SetSpacing(buf.ReadDouble());
            break;
        case 8:
            SetAngle(buf.ReadDouble());
            break;
        case 9:
            SetOrigin(buf.ReadDoubleArray());
            break;
        case 10:
            SetBeamAxis(buf.ReadInt());
            break;
        case 11:
            SetPoloialAngle(buf.ReadDouble());
            break;
        case 12:
            SetPoloialTilt(buf.ReadDouble());
            break;
        case 13:
            SetToroialAngle(buf.ReadDouble());
            break;
        case 14:
            SetViewDimension(buf.ReadInt());
            break;
        }
    }

    public String toString(String indent)
    {
        String str = new String();
        str = str + indent + "beamType = ";
        if(beamType == BEAMTYPE_PARALLEL)
            str = str + "BEAMTYPE_PARALLEL";
        if(beamType == BEAMTYPE_FAN)
            str = str + "BEAMTYPE_FAN";
        str = str + "\n";
        str = str + indent + "beamShape = ";
        if(beamShape == BEAMSHAPE_LINE)
            str = str + "BEAMSHAPE_LINE";
        if(beamShape == BEAMSHAPE_CYLINDER)
            str = str + "BEAMSHAPE_CYLINDER";
        if(beamShape == BEAMSHAPE_CONE)
            str = str + "BEAMSHAPE_CONE";
        str = str + "\n";
        str = str + doubleToString("radius", radius, indent) + "\n";
        str = str + doubleToString("divergence", divergence, indent) + "\n";
        str = str + intToString("nBeams", nBeams, indent) + "\n";
        str = str + doubleToString("sampleDistance", sampleDistance, indent) + "\n";
        str = str + doubleToString("sampleArc", sampleArc, indent) + "\n";
        str = str + doubleToString("spacing", spacing, indent) + "\n";
        str = str + doubleToString("angle", angle, indent) + "\n";
        str = str + doubleArrayToString("origin", origin, indent) + "\n";
        str = str + indent + "beamAxis = ";
        if(beamAxis == BEAMAXIS_R)
            str = str + "BEAMAXIS_R";
        if(beamAxis == BEAMAXIS_Z)
            str = str + "BEAMAXIS_Z";
        str = str + "\n";
        str = str + doubleToString("poloialAngle", poloialAngle, indent) + "\n";
        str = str + doubleToString("poloialTilt", poloialTilt, indent) + "\n";
        str = str + doubleToString("toroialAngle", toroialAngle, indent) + "\n";
        str = str + indent + "viewDimension = ";
        if(viewDimension == VIEWDIMENSION_ONE)
            str = str + "VIEWDIMENSION_ONE";
        if(viewDimension == VIEWDIMENSION_TWO)
            str = str + "VIEWDIMENSION_TWO";
        if(viewDimension == VIEWDIMENSION_THREE)
            str = str + "VIEWDIMENSION_THREE";
        str = str + "\n";
        return str;
    }


    // Attributes
    private int      beamType;
    private int      beamShape;
    private double   radius;
    private double   divergence;
    private int      nBeams;
    private double   sampleDistance;
    private double   sampleArc;
    private double   spacing;
    private double   angle;
    private double[] origin;
    private int      beamAxis;
    private double   poloialAngle;
    private double   poloialTilt;
    private double   toroialAngle;
    private int      viewDimension;
}

