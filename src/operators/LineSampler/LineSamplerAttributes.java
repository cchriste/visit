// ***************************************************************************
//
// Copyright (c) 2000 - 2011, Lawrence Livermore National Security, LLC
// Produced at the Lawrence Livermore National Laboratory
// LLNL-CODE-442911
// All rights reserved.
//
// This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
// full copyright notice is contained in the file COPYRIGHT located at the root
// of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
//
//  - Redistributions of  source code must  retain the above  copyright notice,
//    this list of conditions and the disclaimer below.
//  - Redistributions in binary form must reproduce the above copyright notice,
//    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
//    documentation and/or other materials provided with the distribution.
//  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
// ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
// LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
// DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
// SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
// CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
// LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
// OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ***************************************************************************

package llnl.visit.operators;

import llnl.visit.AttributeSubject;
import llnl.visit.CommunicationBuffer;
import llnl.visit.Plugin;

// ****************************************************************************
// Class: LineSamplerAttributes
//
// Purpose:
//    This class contains attributes for the line sampler operator.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   omitted
//
// Modifications:
//   
// ****************************************************************************

public class LineSamplerAttributes extends AttributeSubject implements Plugin
{
    private static int LineSamplerAttributes_numAdditionalAtts = 34;

    // Enum values
    public final static int COORDINATESYSTEM_CARTESIAN = 0;
    public final static int COORDINATESYSTEM_CYLINDRICAL = 1;

    public final static int ARRAYPROJECTION_PARALLEL = 0;
    public final static int ARRAYPROJECTION_DIVERGENT = 1;
    public final static int ARRAYPROJECTION_GRID = 2;

    public final static int ARRAYAXIS_R = 0;
    public final static int ARRAYAXIS_Z = 1;

    public final static int BEAMSHAPE_POINT = 0;
    public final static int BEAMSHAPE_LINE = 1;
    public final static int BEAMSHAPE_CYLINDER = 2;
    public final static int BEAMSHAPE_CONE = 3;

    public final static int VIEWDIMENSION_ONE = 0;
    public final static int VIEWDIMENSION_TWO = 1;
    public final static int VIEWDIMENSION_THREE = 2;

    public final static int BEAMTYPE_TOPHAT = 0;
    public final static int BEAMTYPE_GAUSSIAN = 1;

    public final static int CHANNELSAMPLING_SINGLECHANNELSAMPLING = 0;
    public final static int CHANNELSAMPLING_SUMMATIONCHANNELSAMPLING = 1;

    public final static int TOROIDALSAMPLING_SINGLETOROIDALSAMPLING = 0;
    public final static int TOROIDALSAMPLING_SUMMATIONTOROIDALSAMPLING = 1;

    public final static int TIMESAMPLING_CURRENTTIMESTEP = 0;
    public final static int TIMESAMPLING_MULTIPLETIMESTEPS = 1;


    public LineSamplerAttributes()
    {
        super(LineSamplerAttributes_numAdditionalAtts);

        coordinateSystem = COORDINATESYSTEM_CYLINDRICAL;
        nArrays = 1;
        nChannels = 5;
        toroialArrayAngle = 5;
        arrayProjection = ARRAYPROJECTION_PARALLEL;
        channelOffset = 0.1;
        channelAngle = 5;
        nRows = 1;
        rowOffset = 0.1;
        arrayOrigin = new double[3];
        arrayOrigin[0] = 0;
        arrayOrigin[1] = 0;
        arrayOrigin[2] = 0;
        arrayAxis = ARRAYAXIS_Z;
        poloialAngle = 0;
        poloialRTilt = 0;
        poloialZTilt = 0;
        toroialAngle = 0;
        viewDimension = VIEWDIMENSION_THREE;
        heightPlotScale = 1;
        channelPlotOffset = 1;
        arrayPlotOffset = 1;
        timePlotScale = 1;
        beamShape = BEAMSHAPE_LINE;
        radius = 0.1;
        divergence = 1;
        beamType = BEAMTYPE_TOPHAT;
        standardDeviation = 1;
        sampleDistance = 0.1;
        sampleArc = 10;
        channelSampling = CHANNELSAMPLING_SINGLECHANNELSAMPLING;
        toroidalSampling = TOROIDALSAMPLING_SINGLETOROIDALSAMPLING;
        toroidalSamplingAngle = 1;
        timeSampling = TIMESAMPLING_CURRENTTIMESTEP;
        timeStepStart = 0;
        timeStepStop = 0;
        timeStepStride = 1;
    }

    public LineSamplerAttributes(int nMoreFields)
    {
        super(LineSamplerAttributes_numAdditionalAtts + nMoreFields);

        coordinateSystem = COORDINATESYSTEM_CYLINDRICAL;
        nArrays = 1;
        nChannels = 5;
        toroialArrayAngle = 5;
        arrayProjection = ARRAYPROJECTION_PARALLEL;
        channelOffset = 0.1;
        channelAngle = 5;
        nRows = 1;
        rowOffset = 0.1;
        arrayOrigin = new double[3];
        arrayOrigin[0] = 0;
        arrayOrigin[1] = 0;
        arrayOrigin[2] = 0;
        arrayAxis = ARRAYAXIS_Z;
        poloialAngle = 0;
        poloialRTilt = 0;
        poloialZTilt = 0;
        toroialAngle = 0;
        viewDimension = VIEWDIMENSION_THREE;
        heightPlotScale = 1;
        channelPlotOffset = 1;
        arrayPlotOffset = 1;
        timePlotScale = 1;
        beamShape = BEAMSHAPE_LINE;
        radius = 0.1;
        divergence = 1;
        beamType = BEAMTYPE_TOPHAT;
        standardDeviation = 1;
        sampleDistance = 0.1;
        sampleArc = 10;
        channelSampling = CHANNELSAMPLING_SINGLECHANNELSAMPLING;
        toroidalSampling = TOROIDALSAMPLING_SINGLETOROIDALSAMPLING;
        toroidalSamplingAngle = 1;
        timeSampling = TIMESAMPLING_CURRENTTIMESTEP;
        timeStepStart = 0;
        timeStepStop = 0;
        timeStepStride = 1;
    }

    public LineSamplerAttributes(LineSamplerAttributes obj)
    {
        super(LineSamplerAttributes_numAdditionalAtts);

        int i;

        coordinateSystem = obj.coordinateSystem;
        nArrays = obj.nArrays;
        nChannels = obj.nChannels;
        toroialArrayAngle = obj.toroialArrayAngle;
        arrayProjection = obj.arrayProjection;
        channelOffset = obj.channelOffset;
        channelAngle = obj.channelAngle;
        nRows = obj.nRows;
        rowOffset = obj.rowOffset;
        arrayOrigin = new double[3];
        arrayOrigin[0] = obj.arrayOrigin[0];
        arrayOrigin[1] = obj.arrayOrigin[1];
        arrayOrigin[2] = obj.arrayOrigin[2];

        arrayAxis = obj.arrayAxis;
        poloialAngle = obj.poloialAngle;
        poloialRTilt = obj.poloialRTilt;
        poloialZTilt = obj.poloialZTilt;
        toroialAngle = obj.toroialAngle;
        viewDimension = obj.viewDimension;
        heightPlotScale = obj.heightPlotScale;
        channelPlotOffset = obj.channelPlotOffset;
        arrayPlotOffset = obj.arrayPlotOffset;
        timePlotScale = obj.timePlotScale;
        beamShape = obj.beamShape;
        radius = obj.radius;
        divergence = obj.divergence;
        beamType = obj.beamType;
        standardDeviation = obj.standardDeviation;
        sampleDistance = obj.sampleDistance;
        sampleArc = obj.sampleArc;
        channelSampling = obj.channelSampling;
        toroidalSampling = obj.toroidalSampling;
        toroidalSamplingAngle = obj.toroidalSamplingAngle;
        timeSampling = obj.timeSampling;
        timeStepStart = obj.timeStepStart;
        timeStepStop = obj.timeStepStop;
        timeStepStride = obj.timeStepStride;

        SelectAll();
    }

    public int Offset()
    {
        return super.Offset() + super.GetNumAdditionalAttributes();
    }

    public int GetNumAdditionalAttributes()
    {
        return LineSamplerAttributes_numAdditionalAtts;
    }

    public boolean equals(LineSamplerAttributes obj)
    {
        int i;

        // Compare the arrayOrigin arrays.
        boolean arrayOrigin_equal = true;
        for(i = 0; i < 3 && arrayOrigin_equal; ++i)
            arrayOrigin_equal = (arrayOrigin[i] == obj.arrayOrigin[i]);

        // Create the return value
        return ((coordinateSystem == obj.coordinateSystem) &&
                (nArrays == obj.nArrays) &&
                (nChannels == obj.nChannels) &&
                (toroialArrayAngle == obj.toroialArrayAngle) &&
                (arrayProjection == obj.arrayProjection) &&
                (channelOffset == obj.channelOffset) &&
                (channelAngle == obj.channelAngle) &&
                (nRows == obj.nRows) &&
                (rowOffset == obj.rowOffset) &&
                arrayOrigin_equal &&
                (arrayAxis == obj.arrayAxis) &&
                (poloialAngle == obj.poloialAngle) &&
                (poloialRTilt == obj.poloialRTilt) &&
                (poloialZTilt == obj.poloialZTilt) &&
                (toroialAngle == obj.toroialAngle) &&
                (viewDimension == obj.viewDimension) &&
                (heightPlotScale == obj.heightPlotScale) &&
                (channelPlotOffset == obj.channelPlotOffset) &&
                (arrayPlotOffset == obj.arrayPlotOffset) &&
                (timePlotScale == obj.timePlotScale) &&
                (beamShape == obj.beamShape) &&
                (radius == obj.radius) &&
                (divergence == obj.divergence) &&
                (beamType == obj.beamType) &&
                (standardDeviation == obj.standardDeviation) &&
                (sampleDistance == obj.sampleDistance) &&
                (sampleArc == obj.sampleArc) &&
                (channelSampling == obj.channelSampling) &&
                (toroidalSampling == obj.toroidalSampling) &&
                (toroidalSamplingAngle == obj.toroidalSamplingAngle) &&
                (timeSampling == obj.timeSampling) &&
                (timeStepStart == obj.timeStepStart) &&
                (timeStepStop == obj.timeStepStop) &&
                (timeStepStride == obj.timeStepStride));
    }

    public String GetName() { return "LineSampler"; }
    public String GetVersion() { return "1.0"; }

    // Property setting methods
    public void SetCoordinateSystem(int coordinateSystem_)
    {
        coordinateSystem = coordinateSystem_;
        Select(0);
    }

    public void SetNArrays(int nArrays_)
    {
        nArrays = nArrays_;
        Select(1);
    }

    public void SetNChannels(int nChannels_)
    {
        nChannels = nChannels_;
        Select(2);
    }

    public void SetToroialArrayAngle(double toroialArrayAngle_)
    {
        toroialArrayAngle = toroialArrayAngle_;
        Select(3);
    }

    public void SetArrayProjection(int arrayProjection_)
    {
        arrayProjection = arrayProjection_;
        Select(4);
    }

    public void SetChannelOffset(double channelOffset_)
    {
        channelOffset = channelOffset_;
        Select(5);
    }

    public void SetChannelAngle(double channelAngle_)
    {
        channelAngle = channelAngle_;
        Select(6);
    }

    public void SetNRows(int nRows_)
    {
        nRows = nRows_;
        Select(7);
    }

    public void SetRowOffset(double rowOffset_)
    {
        rowOffset = rowOffset_;
        Select(8);
    }

    public void SetArrayOrigin(double[] arrayOrigin_)
    {
        arrayOrigin[0] = arrayOrigin_[0];
        arrayOrigin[1] = arrayOrigin_[1];
        arrayOrigin[2] = arrayOrigin_[2];
        Select(9);
    }

    public void SetArrayOrigin(double e0, double e1, double e2)
    {
        arrayOrigin[0] = e0;
        arrayOrigin[1] = e1;
        arrayOrigin[2] = e2;
        Select(9);
    }

    public void SetArrayAxis(int arrayAxis_)
    {
        arrayAxis = arrayAxis_;
        Select(10);
    }

    public void SetPoloialAngle(double poloialAngle_)
    {
        poloialAngle = poloialAngle_;
        Select(11);
    }

    public void SetPoloialRTilt(double poloialRTilt_)
    {
        poloialRTilt = poloialRTilt_;
        Select(12);
    }

    public void SetPoloialZTilt(double poloialZTilt_)
    {
        poloialZTilt = poloialZTilt_;
        Select(13);
    }

    public void SetToroialAngle(double toroialAngle_)
    {
        toroialAngle = toroialAngle_;
        Select(14);
    }

    public void SetViewDimension(int viewDimension_)
    {
        viewDimension = viewDimension_;
        Select(15);
    }

    public void SetHeightPlotScale(double heightPlotScale_)
    {
        heightPlotScale = heightPlotScale_;
        Select(16);
    }

    public void SetChannelPlotOffset(double channelPlotOffset_)
    {
        channelPlotOffset = channelPlotOffset_;
        Select(17);
    }

    public void SetArrayPlotOffset(double arrayPlotOffset_)
    {
        arrayPlotOffset = arrayPlotOffset_;
        Select(18);
    }

    public void SetTimePlotScale(double timePlotScale_)
    {
        timePlotScale = timePlotScale_;
        Select(19);
    }

    public void SetBeamShape(int beamShape_)
    {
        beamShape = beamShape_;
        Select(20);
    }

    public void SetRadius(double radius_)
    {
        radius = radius_;
        Select(21);
    }

    public void SetDivergence(double divergence_)
    {
        divergence = divergence_;
        Select(22);
    }

    public void SetBeamType(int beamType_)
    {
        beamType = beamType_;
        Select(23);
    }

    public void SetStandardDeviation(double standardDeviation_)
    {
        standardDeviation = standardDeviation_;
        Select(24);
    }

    public void SetSampleDistance(double sampleDistance_)
    {
        sampleDistance = sampleDistance_;
        Select(25);
    }

    public void SetSampleArc(double sampleArc_)
    {
        sampleArc = sampleArc_;
        Select(26);
    }

    public void SetChannelSampling(int channelSampling_)
    {
        channelSampling = channelSampling_;
        Select(27);
    }

    public void SetToroidalSampling(int toroidalSampling_)
    {
        toroidalSampling = toroidalSampling_;
        Select(28);
    }

    public void SetToroidalSamplingAngle(double toroidalSamplingAngle_)
    {
        toroidalSamplingAngle = toroidalSamplingAngle_;
        Select(29);
    }

    public void SetTimeSampling(int timeSampling_)
    {
        timeSampling = timeSampling_;
        Select(30);
    }

    public void SetTimeStepStart(int timeStepStart_)
    {
        timeStepStart = timeStepStart_;
        Select(31);
    }

    public void SetTimeStepStop(int timeStepStop_)
    {
        timeStepStop = timeStepStop_;
        Select(32);
    }

    public void SetTimeStepStride(int timeStepStride_)
    {
        timeStepStride = timeStepStride_;
        Select(33);
    }

    // Property getting methods
    public int      GetCoordinateSystem() { return coordinateSystem; }
    public int      GetNArrays() { return nArrays; }
    public int      GetNChannels() { return nChannels; }
    public double   GetToroialArrayAngle() { return toroialArrayAngle; }
    public int      GetArrayProjection() { return arrayProjection; }
    public double   GetChannelOffset() { return channelOffset; }
    public double   GetChannelAngle() { return channelAngle; }
    public int      GetNRows() { return nRows; }
    public double   GetRowOffset() { return rowOffset; }
    public double[] GetArrayOrigin() { return arrayOrigin; }
    public int      GetArrayAxis() { return arrayAxis; }
    public double   GetPoloialAngle() { return poloialAngle; }
    public double   GetPoloialRTilt() { return poloialRTilt; }
    public double   GetPoloialZTilt() { return poloialZTilt; }
    public double   GetToroialAngle() { return toroialAngle; }
    public int      GetViewDimension() { return viewDimension; }
    public double   GetHeightPlotScale() { return heightPlotScale; }
    public double   GetChannelPlotOffset() { return channelPlotOffset; }
    public double   GetArrayPlotOffset() { return arrayPlotOffset; }
    public double   GetTimePlotScale() { return timePlotScale; }
    public int      GetBeamShape() { return beamShape; }
    public double   GetRadius() { return radius; }
    public double   GetDivergence() { return divergence; }
    public int      GetBeamType() { return beamType; }
    public double   GetStandardDeviation() { return standardDeviation; }
    public double   GetSampleDistance() { return sampleDistance; }
    public double   GetSampleArc() { return sampleArc; }
    public int      GetChannelSampling() { return channelSampling; }
    public int      GetToroidalSampling() { return toroidalSampling; }
    public double   GetToroidalSamplingAngle() { return toroidalSamplingAngle; }
    public int      GetTimeSampling() { return timeSampling; }
    public int      GetTimeStepStart() { return timeStepStart; }
    public int      GetTimeStepStop() { return timeStepStop; }
    public int      GetTimeStepStride() { return timeStepStride; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteInt(coordinateSystem);
        if(WriteSelect(1, buf))
            buf.WriteInt(nArrays);
        if(WriteSelect(2, buf))
            buf.WriteInt(nChannels);
        if(WriteSelect(3, buf))
            buf.WriteDouble(toroialArrayAngle);
        if(WriteSelect(4, buf))
            buf.WriteInt(arrayProjection);
        if(WriteSelect(5, buf))
            buf.WriteDouble(channelOffset);
        if(WriteSelect(6, buf))
            buf.WriteDouble(channelAngle);
        if(WriteSelect(7, buf))
            buf.WriteInt(nRows);
        if(WriteSelect(8, buf))
            buf.WriteDouble(rowOffset);
        if(WriteSelect(9, buf))
            buf.WriteDoubleArray(arrayOrigin);
        if(WriteSelect(10, buf))
            buf.WriteInt(arrayAxis);
        if(WriteSelect(11, buf))
            buf.WriteDouble(poloialAngle);
        if(WriteSelect(12, buf))
            buf.WriteDouble(poloialRTilt);
        if(WriteSelect(13, buf))
            buf.WriteDouble(poloialZTilt);
        if(WriteSelect(14, buf))
            buf.WriteDouble(toroialAngle);
        if(WriteSelect(15, buf))
            buf.WriteInt(viewDimension);
        if(WriteSelect(16, buf))
            buf.WriteDouble(heightPlotScale);
        if(WriteSelect(17, buf))
            buf.WriteDouble(channelPlotOffset);
        if(WriteSelect(18, buf))
            buf.WriteDouble(arrayPlotOffset);
        if(WriteSelect(19, buf))
            buf.WriteDouble(timePlotScale);
        if(WriteSelect(20, buf))
            buf.WriteInt(beamShape);
        if(WriteSelect(21, buf))
            buf.WriteDouble(radius);
        if(WriteSelect(22, buf))
            buf.WriteDouble(divergence);
        if(WriteSelect(23, buf))
            buf.WriteInt(beamType);
        if(WriteSelect(24, buf))
            buf.WriteDouble(standardDeviation);
        if(WriteSelect(25, buf))
            buf.WriteDouble(sampleDistance);
        if(WriteSelect(26, buf))
            buf.WriteDouble(sampleArc);
        if(WriteSelect(27, buf))
            buf.WriteInt(channelSampling);
        if(WriteSelect(28, buf))
            buf.WriteInt(toroidalSampling);
        if(WriteSelect(29, buf))
            buf.WriteDouble(toroidalSamplingAngle);
        if(WriteSelect(30, buf))
            buf.WriteInt(timeSampling);
        if(WriteSelect(31, buf))
            buf.WriteInt(timeStepStart);
        if(WriteSelect(32, buf))
            buf.WriteInt(timeStepStop);
        if(WriteSelect(33, buf))
            buf.WriteInt(timeStepStride);
    }

    public void ReadAtts(int index, CommunicationBuffer buf)
    {
        switch(index)
        {
        case 0:
            SetCoordinateSystem(buf.ReadInt());
            break;
        case 1:
            SetNArrays(buf.ReadInt());
            break;
        case 2:
            SetNChannels(buf.ReadInt());
            break;
        case 3:
            SetToroialArrayAngle(buf.ReadDouble());
            break;
        case 4:
            SetArrayProjection(buf.ReadInt());
            break;
        case 5:
            SetChannelOffset(buf.ReadDouble());
            break;
        case 6:
            SetChannelAngle(buf.ReadDouble());
            break;
        case 7:
            SetNRows(buf.ReadInt());
            break;
        case 8:
            SetRowOffset(buf.ReadDouble());
            break;
        case 9:
            SetArrayOrigin(buf.ReadDoubleArray());
            break;
        case 10:
            SetArrayAxis(buf.ReadInt());
            break;
        case 11:
            SetPoloialAngle(buf.ReadDouble());
            break;
        case 12:
            SetPoloialRTilt(buf.ReadDouble());
            break;
        case 13:
            SetPoloialZTilt(buf.ReadDouble());
            break;
        case 14:
            SetToroialAngle(buf.ReadDouble());
            break;
        case 15:
            SetViewDimension(buf.ReadInt());
            break;
        case 16:
            SetHeightPlotScale(buf.ReadDouble());
            break;
        case 17:
            SetChannelPlotOffset(buf.ReadDouble());
            break;
        case 18:
            SetArrayPlotOffset(buf.ReadDouble());
            break;
        case 19:
            SetTimePlotScale(buf.ReadDouble());
            break;
        case 20:
            SetBeamShape(buf.ReadInt());
            break;
        case 21:
            SetRadius(buf.ReadDouble());
            break;
        case 22:
            SetDivergence(buf.ReadDouble());
            break;
        case 23:
            SetBeamType(buf.ReadInt());
            break;
        case 24:
            SetStandardDeviation(buf.ReadDouble());
            break;
        case 25:
            SetSampleDistance(buf.ReadDouble());
            break;
        case 26:
            SetSampleArc(buf.ReadDouble());
            break;
        case 27:
            SetChannelSampling(buf.ReadInt());
            break;
        case 28:
            SetToroidalSampling(buf.ReadInt());
            break;
        case 29:
            SetToroidalSamplingAngle(buf.ReadDouble());
            break;
        case 30:
            SetTimeSampling(buf.ReadInt());
            break;
        case 31:
            SetTimeStepStart(buf.ReadInt());
            break;
        case 32:
            SetTimeStepStop(buf.ReadInt());
            break;
        case 33:
            SetTimeStepStride(buf.ReadInt());
            break;
        }
    }

    public String toString(String indent)
    {
        String str = new String();
        str = str + indent + "coordinateSystem = ";
        if(coordinateSystem == COORDINATESYSTEM_CARTESIAN)
            str = str + "COORDINATESYSTEM_CARTESIAN";
        if(coordinateSystem == COORDINATESYSTEM_CYLINDRICAL)
            str = str + "COORDINATESYSTEM_CYLINDRICAL";
        str = str + "\n";
        str = str + intToString("nArrays", nArrays, indent) + "\n";
        str = str + intToString("nChannels", nChannels, indent) + "\n";
        str = str + doubleToString("toroialArrayAngle", toroialArrayAngle, indent) + "\n";
        str = str + indent + "arrayProjection = ";
        if(arrayProjection == ARRAYPROJECTION_PARALLEL)
            str = str + "ARRAYPROJECTION_PARALLEL";
        if(arrayProjection == ARRAYPROJECTION_DIVERGENT)
            str = str + "ARRAYPROJECTION_DIVERGENT";
        if(arrayProjection == ARRAYPROJECTION_GRID)
            str = str + "ARRAYPROJECTION_GRID";
        str = str + "\n";
        str = str + doubleToString("channelOffset", channelOffset, indent) + "\n";
        str = str + doubleToString("channelAngle", channelAngle, indent) + "\n";
        str = str + intToString("nRows", nRows, indent) + "\n";
        str = str + doubleToString("rowOffset", rowOffset, indent) + "\n";
        str = str + doubleArrayToString("arrayOrigin", arrayOrigin, indent) + "\n";
        str = str + indent + "arrayAxis = ";
        if(arrayAxis == ARRAYAXIS_R)
            str = str + "ARRAYAXIS_R";
        if(arrayAxis == ARRAYAXIS_Z)
            str = str + "ARRAYAXIS_Z";
        str = str + "\n";
        str = str + doubleToString("poloialAngle", poloialAngle, indent) + "\n";
        str = str + doubleToString("poloialRTilt", poloialRTilt, indent) + "\n";
        str = str + doubleToString("poloialZTilt", poloialZTilt, indent) + "\n";
        str = str + doubleToString("toroialAngle", toroialAngle, indent) + "\n";
        str = str + indent + "viewDimension = ";
        if(viewDimension == VIEWDIMENSION_ONE)
            str = str + "VIEWDIMENSION_ONE";
        if(viewDimension == VIEWDIMENSION_TWO)
            str = str + "VIEWDIMENSION_TWO";
        if(viewDimension == VIEWDIMENSION_THREE)
            str = str + "VIEWDIMENSION_THREE";
        str = str + "\n";
        str = str + doubleToString("heightPlotScale", heightPlotScale, indent) + "\n";
        str = str + doubleToString("channelPlotOffset", channelPlotOffset, indent) + "\n";
        str = str + doubleToString("arrayPlotOffset", arrayPlotOffset, indent) + "\n";
        str = str + doubleToString("timePlotScale", timePlotScale, indent) + "\n";
        str = str + indent + "beamShape = ";
        if(beamShape == BEAMSHAPE_POINT)
            str = str + "BEAMSHAPE_POINT";
        if(beamShape == BEAMSHAPE_LINE)
            str = str + "BEAMSHAPE_LINE";
        if(beamShape == BEAMSHAPE_CYLINDER)
            str = str + "BEAMSHAPE_CYLINDER";
        if(beamShape == BEAMSHAPE_CONE)
            str = str + "BEAMSHAPE_CONE";
        str = str + "\n";
        str = str + doubleToString("radius", radius, indent) + "\n";
        str = str + doubleToString("divergence", divergence, indent) + "\n";
        str = str + indent + "beamType = ";
        if(beamType == BEAMTYPE_TOPHAT)
            str = str + "BEAMTYPE_TOPHAT";
        if(beamType == BEAMTYPE_GAUSSIAN)
            str = str + "BEAMTYPE_GAUSSIAN";
        str = str + "\n";
        str = str + doubleToString("standardDeviation", standardDeviation, indent) + "\n";
        str = str + doubleToString("sampleDistance", sampleDistance, indent) + "\n";
        str = str + doubleToString("sampleArc", sampleArc, indent) + "\n";
        str = str + indent + "channelSampling = ";
        if(channelSampling == CHANNELSAMPLING_SINGLECHANNELSAMPLING)
            str = str + "CHANNELSAMPLING_SINGLECHANNELSAMPLING";
        if(channelSampling == CHANNELSAMPLING_SUMMATIONCHANNELSAMPLING)
            str = str + "CHANNELSAMPLING_SUMMATIONCHANNELSAMPLING";
        str = str + "\n";
        str = str + indent + "toroidalSampling = ";
        if(toroidalSampling == TOROIDALSAMPLING_SINGLETOROIDALSAMPLING)
            str = str + "TOROIDALSAMPLING_SINGLETOROIDALSAMPLING";
        if(toroidalSampling == TOROIDALSAMPLING_SUMMATIONTOROIDALSAMPLING)
            str = str + "TOROIDALSAMPLING_SUMMATIONTOROIDALSAMPLING";
        str = str + "\n";
        str = str + doubleToString("toroidalSamplingAngle", toroidalSamplingAngle, indent) + "\n";
        str = str + indent + "timeSampling = ";
        if(timeSampling == TIMESAMPLING_CURRENTTIMESTEP)
            str = str + "TIMESAMPLING_CURRENTTIMESTEP";
        if(timeSampling == TIMESAMPLING_MULTIPLETIMESTEPS)
            str = str + "TIMESAMPLING_MULTIPLETIMESTEPS";
        str = str + "\n";
        str = str + intToString("timeStepStart", timeStepStart, indent) + "\n";
        str = str + intToString("timeStepStop", timeStepStop, indent) + "\n";
        str = str + intToString("timeStepStride", timeStepStride, indent) + "\n";
        return str;
    }


    // Attributes
    private int      coordinateSystem;
    private int      nArrays;
    private int      nChannels;
    private double   toroialArrayAngle;
    private int      arrayProjection;
    private double   channelOffset;
    private double   channelAngle;
    private int      nRows;
    private double   rowOffset;
    private double[] arrayOrigin;
    private int      arrayAxis;
    private double   poloialAngle;
    private double   poloialRTilt;
    private double   poloialZTilt;
    private double   toroialAngle;
    private int      viewDimension;
    private double   heightPlotScale;
    private double   channelPlotOffset;
    private double   arrayPlotOffset;
    private double   timePlotScale;
    private int      beamShape;
    private double   radius;
    private double   divergence;
    private int      beamType;
    private double   standardDeviation;
    private double   sampleDistance;
    private double   sampleArc;
    private int      channelSampling;
    private int      toroidalSampling;
    private double   toroidalSamplingAngle;
    private int      timeSampling;
    private int      timeStepStart;
    private int      timeStepStop;
    private int      timeStepStride;
}

