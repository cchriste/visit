Target: xml2info
Function: LineSamplerViewerPluginInfo::GetClientAtts1
Declaration: virtual void GetClientAtts(AttributeSubject *atts);
Definition:
// ****************************************************************************
//  Method: LineSamplerViewerPluginInfo::GetClientAtts
//
//  Purpose:
//    Get the viewer client attributes.
//
//  Arguments:
//    atts      A pointer to return the client default attributes in.
//
//  Programmer: generated by xml2info
//  Creation:   omitted
//
// ****************************************************************************

void
LineSamplerViewerPluginInfo::GetClientAtts(AttributeSubject *atts)
{
  std::cerr << __FILE__ << "  " << __LINE__ << "  " << "SHOULD NOT BE CALLED" << std::endl;

//    *(LineSamplerAttributes *)atts = *clientAtts;
}

Function: LineSamplerViewerPluginInfo::GetClientAtts3
Declaration: virtual void GetClientAtts(AttributeSubject *atts, const bool activeOperator, const bool applyToAll);
Definition:
#include <ViewerBase.h>

// ****************************************************************************
//  Method: LineSamplerViewerPluginInfo::GetClientAtts
//
//  Purpose:
//    Get the viewer client attributes.
//
//  Arguments:
//    atts      A pointer to return the client default attributes in.
//
//  Programmer: generated by xml2info
//  Creation:   omitted
//
// ****************************************************************************

void
LineSamplerViewerPluginInfo::GetClientAtts(AttributeSubject *atts,
                                           const bool activeOperator,
                                           const bool applyToAll)
{
  LineSamplerAttributes aTmp = *clientAtts;

  if( applyToAll )
  {
    // Allow the user to set the instance (up to 5 are allowed). Only
    // apply to all if the instances match otherwise skip it.
    if( (*(LineSamplerAttributes *)atts).GetInstanceId() !=
        (*clientAtts).GetInstanceId() )
      return;

    // If needed save off the old values so they are not changed.
    if( (*(LineSamplerAttributes *)atts).GetDonotApplyToAll() )
    {
      LineSamplerAttributes::ViewDimension oldViewDim =
        (*(LineSamplerAttributes *)atts).GetViewDimension();

      LineSamplerAttributes::ViewDimension newViewDim =
        (*clientAtts).GetViewDimension();

      LineSamplerAttributes::ViewGeometry oldViewGeom =
        (*(LineSamplerAttributes *)atts).GetViewGeometry();

      LineSamplerAttributes::ViewGeometry newViewGeom =
        (*clientAtts).GetViewGeometry();

      if( activeOperator && 
          (newViewDim != oldViewDim ||
           newViewGeom != oldViewGeom) )
      {
        ViewerBase vb;

        QString msg("You are attemping to change the 'View dimension' "
                    "or the 'View geometry' while the 'Apply to all windows' "
                    "and/or the 'Apply operators to all plots' and the "
                    "'Do not apply to all' are all checked. This setting "
                    "is a conflict. The 'View dimension' and  'View geometry' "
                    "will not be changed.");

        vb.Warning(msg);
      }

      *(LineSamplerAttributes *)atts = *clientAtts;

      (*(LineSamplerAttributes *)atts).SetViewDimension( oldViewDim );
      (*(LineSamplerAttributes *)atts).SetViewGeometry( oldViewGeom );
    }
    else // No restriction on the apply operation.
    {
      *(LineSamplerAttributes *)atts = *clientAtts;
    }
  }
  else // Not applying to all
  {
    *(LineSamplerAttributes *)atts = *clientAtts;
  }
}
