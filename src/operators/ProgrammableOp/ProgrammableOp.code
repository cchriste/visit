Target: xml2cmake
Code: LIBR
Prefix:
IF(HAVE_LIB_R)
    ADD_DEFINITIONS(-DHAVE_R)
ENDIF(HAVE_LIB_R)
Postfix:

Target: xml2atts
Constant: index
Declaration: int index;
Definition: 


Constant: script
Declaration: JSONNode script;
Definition: 


Target: xml2python
Function: PyVisItErrorFunc
Declaration: VisItErrorFuncX
Definition:
PyObject* ScriptVisItError = PyErr_NewException((char*)"visit.ScriptException", NULL, NULL);

void
VisItErrorFunc(const char *errString)
{
    PyErr_SetString(ScriptVisItError, errString);
}

/*static*/ PyObject *
VisItErrorFuncX(PyObject *self, PyObject *args)
{
    Py_INCREF(Py_None);
    return Py_None;
}

Function: GetJSONVectorFromPyObject
Declaration: GetJSONVectorFromPyObjectX
Definition:
bool
GetJSONVectorFromPyObject(PyObject *obj, JSONNode &vec)
{
    bool retval = true;

    if(obj == 0)
    {
        retval = false;
    }
    else if(PyBool_Check(obj))
    {
        vec = obj == Py_True ? true : false;
    }
    else if(PyTuple_Check(obj))
    {
        // Extract arguments from the tuple.
        vec = JSONNode::JSONArray();

        for(int i = 0; i < PyTuple_Size(obj); ++i)
        {
            PyObject *item = PyTuple_GET_ITEM(obj, i);
            JSONNode node;
            if(!GetJSONVectorFromPyObject(item,node))
                return false;
            vec.Append(node);
        }
    }
    else if(PyList_Check(obj))
    {
        vec = JSONNode::JSONArray();

        // Extract arguments from the list.
        for(int i = 0; i < PyList_Size(obj); ++i)
        {
            PyObject *item = PyList_GET_ITEM(obj, i);
            JSONNode node;
            if(!GetJSONVectorFromPyObject(item,node))
                return false;
            vec.Append(node);
        }
    }
    else if(PyString_Check(obj))
    {
        vec = PyString_AS_STRING(obj);
    }
    else if(PyInt_Check(obj))
    {
        vec = PyInt_AsLong(obj);
    }
    else if(PyFloat_Check(obj))
    {
        vec = PyFloat_AsDouble(obj);
    }
    else if(PyDict_Check(obj))
    {
        vec = JSONNode::JSONObject();

        PyObject* keys = PyDict_Keys(obj);
        for(int i = 0; i < PyList_Size(keys); ++i)
        {
            PyObject *item = PyList_GET_ITEM(keys, i);
            if(!PyString_Check(item))
            {
                std::cerr << "unknown element type, skipping " << std::endl;
                continue;
            }

            JSONNode node;

            std::string key = PyString_AsString(item);

            PyObject *value = PyDict_GetItem(obj,item);
            if(!GetJSONVectorFromPyObject(value,node))
                return false;
            vec[key] = node;
        }
    }
    else
    {
        retval = false;
        VisItErrorFunc("The object could not be converted to a "
                       "vector of strings.");
    }

    return retval;
}

/*static*/ PyObject *
GetJSONVectorFromPyObjectX(PyObject *self, PyObject *args)
{
    Py_INCREF(Py_None);
    return Py_None;
}

Function: GetStringVectorFromPyObject
Declaration: GetStringVectorFromPyObjectX
Definition:
bool
GetStringVectorFromPyObject(PyObject *obj, stringVector &vec)
{
    bool retval = true;

    if(obj == 0)
    {
        retval = false;
    }
    else if(PyTuple_Check(obj))
    {
        // Extract arguments from the tuple.
        for(int i = 0; i < PyTuple_Size(obj); ++i)
        {
            PyObject *item = PyTuple_GET_ITEM(obj, i);
            if(PyString_Check(item))
                vec.push_back(PyString_AS_STRING(item));
            else
            {
                VisItErrorFunc("The tuple must contain all strings.");
                retval = false;
                break;
            }
        }
    }
    else if(PyList_Check(obj))
    {
        // Extract arguments from the list.
        for(int i = 0; i < PyList_Size(obj); ++i)
        {
            PyObject *item = PyList_GET_ITEM(obj, i);
            if(PyString_Check(item))
                vec.push_back(PyString_AS_STRING(item));
            else
            {
                VisItErrorFunc("The list must contain all strings.");
                retval = false;
                break;
            }
        }
    }
    else if(PyString_Check(obj))
    {
        vec.push_back(PyString_AS_STRING(obj));
    }
    else
    {
        retval = false;
        VisItErrorFunc("The object could not be converted to a "
                       "vector of strings.");
    }

    return retval;
}

/*static*/ PyObject *
GetStringVectorFromPyObjectX(PyObject *self, PyObject *args)
{
    Py_INCREF(Py_None);
    return Py_None;
}

Target: xml2atts
Function: AddConstant
Declaration: void AddConstant(const std::string& name, const std::string& constant);
Definition:
void
ProgrammableOpAttributes::AddConstant(const std::string& name, const std::string& constant)
{
    JSONNode node;
    
    JSONNode vars = JSONNode::JSONArray();
    node["vars"] = vars;

    char buf[1024];
    sprintf(buf,"setout(%s)",constant.c_str());
    node["source"] = buf;

    /// register constant also as a node..
    JSONNode cnode;
    cnode["type"] = name;

    script["nodes"][name] = cnode;
    script["scripts"][name] = node;

    //update scriptmap
    scriptMap = script.ToString();
    Select(ID_scriptMap, (void *)&scriptMap);
}

Target: xml2python
Function: PyAddConstant
Declaration: AddConstant
Definition:
/*static*/ PyObject *
AddConstant(PyObject *self, PyObject *args)
{
    ProgrammableOpAttributesObject *obj = (ProgrammableOpAttributesObject *)self;

    const char *name = 0;
    const char *constant = 0;


    if(!PyArg_ParseTuple(args, "ss", &name,&constant))
    {
        VisItErrorFunc("Arguments are ('name', 'constant')");
        return NULL;
    }

    obj->data->AddConstant(name,constant);

    Py_INCREF(Py_None);
    return Py_None;
}

Target: xml2atts
Function: AddFunction
Declaration: void AddFunction(const std::string& name, const stringVector& atts);
Definition:
void
ProgrammableOpAttributes::AddFunction(const std::string& name, const stringVector& atts)
{
    JSONNode vars = JSONNode::JSONArray();
    for(int i = 0; i < atts.size(); ++i)
        vars.Append(atts[i]);

    JSONNode node;
    node["vars"] = vars;

    std::string argstring = "";
    for(size_t i = 0; i < atts.size(); ++i)
        argstring += atts[i] + (i == atts.size()-1 ? "" : ",");

   // char buf[1024];
   // sprintf(buf,"import visit_internal_funcs\nsetout(visit_internal_funcs.%s(%s))",name.c_str(),argstring.c_str());

    std::ostringstream ostr;

    ostr << "import visit_internal_funcs\n"
         << "setout(visit_internal_funcs." << name << "(" << argstring << "))" << std::endl;

    std::string escapedCode = ostr.str();
    //std::cout << escapedCode << std::endl;
    replace(escapedCode, "\n", "\\n");

    node["source"] = escapedCode;

    script["scripts"][name] = node;

    //update scriptmap
    scriptMap = script.ToString();
    Select(ID_scriptMap, (void *)&scriptMap);
}

Target: xml2python
Function: PyAddFunction
Declaration: AddFunction
Definition:

/*static*/ PyObject *
AddFunction(PyObject *self, PyObject *args)
{
    ProgrammableOpAttributesObject *obj = (ProgrammableOpAttributesObject *)self;

    const char *name = 0;
    PyObject* arglist = 0;
    stringVector vec;

    if(!PyArg_ParseTuple(args, "sO", &name,&arglist))
    {
        VisItErrorFunc("Arguments are ('name',('arg1','arg2',...))");
        return NULL;
    }

    if(!GetStringVectorFromPyObject(arglist,vec))
    {
        VisItErrorFunc("Arguments are ('name',('arg1','arg2',...))");
        return NULL;
    }

    obj->data->AddFunction(name,vec);

    Py_INCREF(Py_None);
    return Py_None;
}

Target: xml2atts
Function: AddRScript
Declaration: void AddRScript(const std::string& name, const stringVector& atts, const std::string& code);
Definition:
void
ProgrammableOpAttributes::AddRScript(const std::string& name, const stringVector& atts, const std::string& code)
{
    JSONNode vars = JSONNode::JSONArray();
    for(int i = 0; i < atts.size(); ++i)
        vars.Append(atts[i]);

    JSONNode node;
    node["vars"] = vars;

    std::string argstring = "";
    for(size_t i = 0; i < atts.size(); ++i)
        argstring += atts[i] + (i == atts.size()-1 ? "" : ",");

    std::ostringstream rwrapper;

    rwrapper << "import rpy2,numpy\n"
             << "import rpy2.robjects as robjects\n"
             << "import rpy2.robjects.numpy2ri\n"
             << "rpy2.robjects.numpy2ri.activate()\n"
             << "_r_output = None\n"
             << "def _r_setout(out):\n"
             << "  global _r_output\n"
             << "  _r_output = out\n"
             << "r_setout = rpy2.rinterface.rternalize(_r_setout)\n"
             << "rpy2.robjects.globalenv['setout'] = r_setout\n"
             << "r_f = robjects.r('''\n"
             << "(function(" + argstring + ") { \n"
             << code
             << "})\n"
             << "''')\n"
             << "r=r_f("+ argstring + ")\n"
             << "setout(numpy.asarray(_r_output))\n";

    std::string escapedCode = rwrapper.str();
    replace(escapedCode, "\n", "\\n");

    node["source"] = escapedCode;

    script["scripts"][name] = node;

    //update scriptmap
    scriptMap = script.ToString();
    Select(ID_scriptMap, (void *)&scriptMap);
}

Target: xml2python
Function: PyAddRScript
Declaration: AddRScript
Definition:
/*static*/ PyObject *
AddRScript(PyObject *self, PyObject *args)
{
    ProgrammableOpAttributesObject *obj = (ProgrammableOpAttributesObject *)self;

    const char *name = 0;
    const char *code = 0;
    PyObject* arglist = 0;
    stringVector vec;

    if(!PyArg_ParseTuple(args, "sOs", &name,&arglist,&code))
    {
        VisItErrorFunc("Arguments are ('name',('arg1','arg2',...), 'code')");
        return NULL;
    }

    if(!GetStringVectorFromPyObject(arglist,vec))
    {
        VisItErrorFunc("Arguments are ('name',('arg1','arg2',...), 'code')");
        return NULL;
    }

    obj->data->AddRScript(name,vec,code);
    Py_INCREF(Py_None);
    return Py_None;
}

Target: xml2atts
Function: AddPythonScript
Declaration: void AddPythonScript(const std::string& name, const stringVector& atts, const std::string& code);
Definition:
void 
ProgrammableOpAttributes::AddPythonScript(const std::string& name, const stringVector& atts, const std::string& code)
{
    JSONNode vars = JSONNode::JSONArray();
    for(int i = 0; i < atts.size(); ++i)
        vars.Append(atts[i]);

    JSONNode node;
    node["vars"] = vars;

    std::ostringstream pwrapper;

    pwrapper << "from visit_internal_funcs import *\n"
             << code
             << "\n";
    std::string escapedCode = pwrapper.str();
    replace(escapedCode, "\n", "\\n");

    node["source"] = escapedCode;

    script["scripts"][name] = node;

    //update scriptmap
    scriptMap = script.ToString();
    Select(ID_scriptMap, (void *)&scriptMap);
}

Target: xml2python
Function: PyAddPythonScript
Declaration: AddPythonScript
Definition:
/*static*/ PyObject *
AddPythonScript(PyObject *self, PyObject *args)
{
    ProgrammableOpAttributesObject *obj = (ProgrammableOpAttributesObject *)self;

    const char *name = 0;
    const char *code = 0;
    PyObject* arglist = 0;
    stringVector vec;

    if(!PyArg_ParseTuple(args, "sOs", &name,&arglist,&code))
    {
        VisItErrorFunc("Arguments are ('name',('arg1','arg2',...), 'code')");
        return NULL;
    }

    if(!GetStringVectorFromPyObject(arglist,vec))
    {
        VisItErrorFunc("Arguments are ('name',('arg1','arg2',...), 'code')");
        return NULL;
    }

    obj->data->AddPythonScript(name,vec,code);

    Py_INCREF(Py_None);
    return Py_None;
}

Target: xml2atts
Function: AddNode
Declaration: void AddNode(const std::string& name, const std::string& type);
Definition:
void
ProgrammableOpAttributes::AddNode(const std::string& name, const std::string& type)
{
    JSONNode node;
    node["type"] = type;
    script["nodes"][name] = node;

    scriptMap = script.ToString();
    Select(ID_scriptMap, (void *)&scriptMap);
}

Target: xml2python
Function: PyAddNode
Declaration: AddNode
Definition:
/*static*/ PyObject *
AddNode(PyObject *self, PyObject *args)
{
    ProgrammableOpAttributesObject *obj = (ProgrammableOpAttributesObject *)self;
    const char* name = 0;
    const char* type = 0;
    //wrap this in a function..
    if(!PyArg_ParseTuple(args, "ss", &name,&type))
    {
        VisItErrorFunc("Arguments are ('name', '[script_name|as_ndarray|as_vtkarray|as_rarray]')");
        return NULL;
    }

    obj->data->AddNode(name,type);

    /*
    std::string node_type = type;
    if(!obj->node["scripts"].HasKey(node_type) &&
             node_type != "as_ndarray" &&
             node_type != "as_vtkarray" &&
             node_type != "as_rarray")
    {
        VisItErrorFunc("Type must be [script_name|as_ndarray|as_vtkarray|as_rarray]')");
        return NULL;
    }

    JSONNode node;
    node["type"] = node_type;
    obj->node["nodes"][name] = node;

    MapNode mapnode;
    mapnode["filter"] = obj->node.ToString();
    obj->data->SetScriptMap(mapnode);
    */
    Py_INCREF(Py_None);
    return Py_None;
}

Target: xml2atts
Function: AddConnection
Declaration: void AddConnection(const std::string& from, const std::string& to, const std::string& portName);
Definition:
void
ProgrammableOpAttributes::AddConnection(const std::string& from, const std::string& to, const std::string& portName)
{
    JSONNode conn;
    conn["from"] = from;
    conn["to"] = to;
    conn["port"] = portName;

    if(!script.HasKey("connections"))
        script["connections"] = JSONNode::JSONArray();

    script["connections"].Append(conn);

    scriptMap = script.ToString();
    Select(ID_scriptMap, (void *)&scriptMap);
}

Target: xml2python
Function: PyAddConnection
Declaration: AddConnection
Definition:
/*static*/ PyObject *
AddConnection(PyObject *self, PyObject *args)
{
    ProgrammableOpAttributesObject *obj = (ProgrammableOpAttributesObject *)self;

    const char* from = 0;
    const char* to = 0;
    const char* port = 0;

    if(!PyArg_ParseTuple(args, "sss", &from,&to,&port))
    {
        VisItErrorFunc("Arguments are ('from_node', 'to_node', 'connection_name')");
        return NULL;
    }

    obj->data->AddConnection(from,to,port);
    /// TODO: error check input & output ports..

    Py_INCREF(Py_None);
    return Py_None;
}

Target: xml2atts
Function: AddFinalOutputConnection
Declaration: void AddFinalOutputConnection(const std::string &from);
Definition:
void
ProgrammableOpAttributes::AddFinalOutputConnection(const std::string &from)
{
    JSONNode node;
    node["type"] = "<sink>";
    script["nodes"]["sink"] = node;

    JSONNode conn;
    conn["from"] = from;
    conn["to"] = "sink";
    conn["port"] = "in";

    if(!script.HasKey("connections"))
        script["connections"] = JSONNode::JSONArray();

    script["connections"].Append(conn);

    scriptMap = script.ToString();
    Select(ID_scriptMap, (void *)&scriptMap);
}

Function: SetupPipeline
Declaration: bool SetupPipeline(const JSONNode& atts, stringVector& args, const std::string &parent);
Definition:
bool
ProgrammableOpAttributes::SetupPipeline(const JSONNode& atts, stringVector& args, const std::string& parent)
{
    if(atts.GetType() != JSONNode::JSONARRAY)
        return false;

    const JSONNode::JSONArray& array = atts.GetArray();

    for(int i = 0; i < array.size(); ++i)
    {
        /// need key, value pair
        /// this can be in the form of a dictionary, "a = b", pair tuple (a,b), or a pair array [a,b]
        JSONNode node = array[i];
        JSONNode key,value;
        if(node.GetType() == JSONNode::JSONARRAY)
        {
            if(node.GetArray().size() != 2) continue;

            key = node.GetArray()[0];
            value = node.GetArray()[1];
        }
        else if(node.GetType() == JSONNode::JSONOBJECT)
        {
            /// parse through dictionary and compute arguments from names..
            const JSONNode::JSONObject& obj = node.GetJsonObject();
            if(obj.size() != 1) continue;

            const JSONNode::JSONObject::const_iterator itr = obj.begin();
            key = itr->first;
            value = itr->second;
        }
        else if(node.GetType() == JSONNode::JSONSTRING)
        {
            std::string pair = node.GetString();
            int index = pair.find("=");
            if(index == std::string::npos) continue;
            key = pair.substr(0,index);

            value = trim(pair.substr(index+1));
         }

        if(key.GetType() != JSONNode::JSONSTRING) continue;

        std::string keystr = trim(key.GetString());

        std::ostringstream str;
        str << "import json\n";
        if(value.GetType() == JSONNode::JSONSTRING)
        {
            std::string v = trim(value.GetString());

            ///character at 0 and has :
            if(v.find(":") != std::string::npos && v.find(":") == 0)
            {
                /// optionally handle whether it can be as_vtkarray, as_ndarray, or as_rarray

                size_t index = v.find(":as_ndarray");

                if(index == std::string::npos)
                    index = v.find(":as_rarray");

                if(index != std::string::npos)
                {
                    std::string newName = getNextName();
                    v = v.substr(0,index);
                    AddNode(newName, "as_ndarray");
                    AddConnection(v, newName, "in");
                    AddConnection(newName,parent,keystr);
                }
                else
                {
                    index = v.find(":as_vtkarray");
                    if(index != std::string::npos)
                        v = v.substr(0,index);
                    AddConnection(v,parent,keystr);
                }
            }
            else
            {
                std::string escapedCode = trim(value.GetString());
                replace(escapedCode,"\n","\\\n");
                replace(escapedCode,"'","\"");
                escapedCode = "'" + escapedCode + "'";

                str << "try:\n"
                    << " a = json.loads(" << escapedCode << ")\n"
                    << "except:\n"
                    << " a = " << escapedCode << "\n"
                    << "setout(a)\n";

                AddPythonScript(keystr,stringVector(),str.str());
                AddNode(keystr,keystr);
                AddConnection(keystr,parent,keystr);
            }
        }
        else
        {
            str << "setout(json.loads('" << trim(value.ToString()) << "'))\n";

            AddPythonScript(keystr,stringVector(),str.str());
            AddNode(keystr,keystr);
            AddConnection(keystr,parent,keystr);
        }
        args.push_back(keystr);
    }
    return true;
}

Function: LoadRKernel
Declaration: void LoadRKernel(const std::string& name, const JSONNode& atts, const std::string& code);
Definition:
void
ProgrammableOpAttributes::LoadRKernel(const std::string& name, const JSONNode &atts, const std::string& code)
{
    script = JSONNode();
    scriptMap = "";

    stringVector args;
    SetupPipeline(atts,args,name);

    JSONNode vars = JSONNode::JSONArray();
    for(int i = 0; i < args.size(); ++i)
        vars.Append(args[i]);

    JSONNode node;
    node["vars"] = vars;

    std::string argstring = "";
    for(size_t i = 0; i < args.size(); ++i)
        argstring += args[i] + (i == args.size()-1 ? "" : ",");

    std::ostringstream rwrapper;

    rwrapper << "import rpy2,numpy\n"
             << "import rpy2.robjects as robjects\n"
             << "import rpy2.robjects.numpy2ri\n"
             << "rpy2.robjects.numpy2ri.activate()\n"
             << name << " = robjects.r('''\n"
             << code << "\n"
             << "''')\n"
             << "setout(numpy.asarray(" << name << "(" << argstring << ")))\n";

    std::string escapedCode = rwrapper.str();
    //std::cout << escapedCode << std::endl;
    replace(escapedCode, "\n", "\\n");

    node["source"] = escapedCode;

    script["scripts"][name] = node;

    //update scriptmap
    scriptMap = script.ToString();

    AddNode(name,name);
    AddFinalOutputConnection(name);

}

Target: xml2python
Function: PyLoadRKernel
Declaration: LoadRKernel
Definition:
/*static*/ PyObject *
LoadRKernel(PyObject *self, PyObject *args)
{
    ProgrammableOpAttributesObject *obj = (ProgrammableOpAttributesObject *)self;

    const char *name = 0;
    const char *code = 0;
    PyObject* arglist = 0;

    if(!PyArg_ParseTuple(args, "sOs", &name,&arglist,&code))
    {
        VisItErrorFunc("Arguments are ('name',('arg1','arg2',...), 'code')");
        return NULL;
    }

    JSONNode node;
    if(!GetJSONVectorFromPyObject(arglist,node))
    {
        VisItErrorFunc("Arguments are ('name',('arg1','arg2',...), 'code')");
        return NULL;
    }

    obj->data->LoadRKernel(name,node,code);

    Py_INCREF(Py_None);
    return Py_None;
}

Target: xml2atts
Function: LoadPythonKernel
Declaration: void LoadPythonKernel(const std::string& name, const JSONNode& atts, const std::string& code);
Definition:
void
ProgrammableOpAttributes::LoadPythonKernel(const std::string& name, const JSONNode& atts, const std::string& code)
{
    script = JSONNode();
    scriptMap = "";

    stringVector args;
    SetupPipeline(atts,args,name);

    std::string arglist = "";

    JSONNode vars = JSONNode::JSONArray();

    for(int i = 0; i < args.size(); ++i)
    {
        vars.Append(args[i]);
        arglist += args[i] + (i == args.size()-1 ? "" : ",");
    }

    JSONNode node;
    node["vars"] = vars;

    std::ostringstream pwrapper;

    pwrapper << "from visit_internal_funcs import *\n"
             //<< "exec('''" << "\n"
             //<< code << "''',globals())\n"
             << code << "\n"
             << "setout(" << name << "(" << arglist << "))\n";

    std::string escapedCode = pwrapper.str();
    //std::cout << escapedCode << std::endl;
    //replace(escapedCode, "'", "\"");
    //replace(escapedCode, "\"", "\\\"");
    //replace(escapedCode, "\n", "\\n");

    node["source"] = escapedCode;

    script["scripts"][name] = node;
    scriptMap = script.ToString();

    AddNode(name,name);
    AddFinalOutputConnection(name);
}

Target: xml2python
Function: PyLoadPythonKernel
Declaration: LoadPythonKernel
Definition:
/*static*/ PyObject *
LoadPythonKernel(PyObject *self, PyObject *args)
{
    ProgrammableOpAttributesObject *obj = (ProgrammableOpAttributesObject *)self;

    const char *name = 0;
    const char *code = 0;
    PyObject* arglist = 0;

    if(!PyArg_ParseTuple(args, "sOs", &name,&arglist,&code))
    {
        VisItErrorFunc("Arguments are ('name',('arg1','arg2',...), 'code')");
        return NULL;
    }

    JSONNode node;
    if(!GetJSONVectorFromPyObject(arglist,node))
    {
        VisItErrorFunc("Arguments are ('name',('arg1','arg2',...), 'code')");
        return NULL;
    }

    //std::cout << node.ToString() << std::endl;

//    obj->data->AddPythonScript(name,vec,code);
    obj->data->LoadPythonKernel(name,node,code);

    Py_INCREF(Py_None);
    return Py_None;
}

Target: xml2atts
Function: trim
Declaration: std::string trim(const std::string &s);
Definition:
std::string 
ProgrammableOpAttributes::trim(const std::string &s) 
{
        return ltrim(rtrim(s));
}

Function: rtrim
Declaration: std::string rtrim(const std::string &ts);
Definition:
std::string 
ProgrammableOpAttributes::rtrim(const std::string &ts) 
{
        std::string s = ts;
        s.erase(std::find_if(s.rbegin(), s.rend(), std::not1(std::ptr_fun<int, int>(std::isspace))).base(), s.end());
        return s;
}

Function: ltrim
Declaration: std::string ltrim(const std::string &ts);
Definition:
std::string 
ProgrammableOpAttributes::ltrim(const std::string &ts) 
{
        std::string s = ts;
        s.erase(s.begin(), std::find_if(s.begin(), s.end(), std::not1(std::ptr_fun<int, int>(std::isspace))));
        return s;
}

Function: getNextName
Declaration: std::string getNextName();
Definition:
std::string 
ProgrammableOpAttributes::getNextName()
{
    static int index = 0;
    char buf[1024];
    sprintf(buf,"auto_name_%d",index);
    index += 1;
    return buf;
}

Function: replace
Declaration: void replace(std::string& str, const std::string& oldStr, const std::string& newStr);
Definition:
void 
ProgrammableOpAttributes::replace(std::string& str, const std::string& oldStr, const std::string& newStr)
{
  size_t pos = 0;
  while((pos = str.find(oldStr, pos)) != std::string::npos)
  {
     str.replace(pos, oldStr.length(), newStr);
     pos += newStr.length();
  }
}

Target: xml2python
Function: ToString
Declaration: PyProgrammableAttributes_ToString
Definition:
std::string
PyProgrammableOpAttributes_ToString(const ProgrammableOpAttributes *atts, const char *prefix)
{
    if(atts->GetScriptMap().HasEntry("filter"))
        return atts->GetScriptMap().GetEntry("filter")->AsString();
    else
        return atts->GetScriptMap().ToXML();
}

Function: PyAddFinalOutputConnection
Declaration: AddFinalOutputConnection
Definition:
/*static*/ PyObject *
AddFinalOutputConnection(PyObject *self, PyObject *args)
{
    ProgrammableOpAttributesObject *obj = (ProgrammableOpAttributesObject *)self;

    const char* from = 0;
    if(!PyArg_ParseTuple(args, "s", &from))
    {
        VisItErrorFunc("Arguments are ('from_node')");
        return NULL;
    }

    obj->data->AddFinalOutputConnection(from);

    Py_INCREF(Py_None);
    return Py_None;
}

