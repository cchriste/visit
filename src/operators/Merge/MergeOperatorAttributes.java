package llnl.visit.operators;

import llnl.visit.AttributeSubject;
import llnl.visit.CommunicationBuffer;
import llnl.visit.Plugin;

// ****************************************************************************
// Class: MergeOperatorAttributes
//
// Purpose:
//    Attributes for Merge operaetor
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   Thu Sep 22 16:56:22 PST 2005
//
// Modifications:
//   
// ****************************************************************************

public class MergeOperatorAttributes extends AttributeSubject implements Plugin
{
    public MergeOperatorAttributes()
    {
        super(2);

        parallelMerge = false;
        tolerance = 0;
    }

    public MergeOperatorAttributes(MergeOperatorAttributes obj)
    {
        super(2);

        parallelMerge = obj.parallelMerge;
        tolerance = obj.tolerance;

        SelectAll();
    }

    public boolean equals(MergeOperatorAttributes obj)
    {
        // Create the return value
        return ((parallelMerge == obj.parallelMerge) &&
                (tolerance == obj.tolerance));
    }

    public String GetName() { return "Merge"; }
    public String GetVersion() { return "1.0"; }

    // Property setting methods
    public void SetParallelMerge(boolean parallelMerge_)
    {
        parallelMerge = parallelMerge_;
        Select(0);
    }

    public void SetTolerance(double tolerance_)
    {
        tolerance = tolerance_;
        Select(1);
    }

    // Property getting methods
    public boolean GetParallelMerge() { return parallelMerge; }
    public double  GetTolerance() { return tolerance; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteBool(parallelMerge);
        if(WriteSelect(1, buf))
            buf.WriteDouble(tolerance);
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        for(int i = 0; i < n; ++i)
        {
            int index = (int)buf.ReadByte();
            switch(index)
            {
            case 0:
                SetParallelMerge(buf.ReadBool());
                break;
            case 1:
                SetTolerance(buf.ReadDouble());
                break;
            }
        }
    }


    // Attributes
    private boolean parallelMerge;
    private double  tolerance;
}

