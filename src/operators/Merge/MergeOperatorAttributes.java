// ***************************************************************************
//
// Copyright (c) 2000 - 2014, Lawrence Livermore National Security, LLC
// Produced at the Lawrence Livermore National Laboratory
// LLNL-CODE-442911
// All rights reserved.
//
// This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
// full copyright notice is contained in the file COPYRIGHT located at the root
// of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
//
//  - Redistributions of  source code must  retain the above  copyright notice,
//    this list of conditions and the disclaimer below.
//  - Redistributions in binary form must reproduce the above copyright notice,
//    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
//    documentation and/or other materials provided with the distribution.
//  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
// ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
// LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
// DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
// SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
// CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
// LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
// OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ***************************************************************************

package llnl.visit.operators;

import llnl.visit.AttributeSubject;
import llnl.visit.CommunicationBuffer;
import llnl.visit.Plugin;

// ****************************************************************************
// Class: MergeOperatorAttributes
//
// Purpose:
//    Attributes for Merge operaetor
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   omitted
//
// Modifications:
//   
// ****************************************************************************

public class MergeOperatorAttributes extends AttributeSubject implements Plugin
{
    private static int MergeOperatorAttributes_numAdditionalAtts = 2;

    public MergeOperatorAttributes()
    {
        super(MergeOperatorAttributes_numAdditionalAtts);

        parallelMerge = false;
        tolerance = 0;
    }

    public MergeOperatorAttributes(int nMoreFields)
    {
        super(MergeOperatorAttributes_numAdditionalAtts + nMoreFields);

        parallelMerge = false;
        tolerance = 0;
    }

    public MergeOperatorAttributes(MergeOperatorAttributes obj)
    {
        super(MergeOperatorAttributes_numAdditionalAtts);

        parallelMerge = obj.parallelMerge;
        tolerance = obj.tolerance;

        SelectAll();
    }

    public int Offset()
    {
        return super.Offset() + super.GetNumAdditionalAttributes();
    }

    public int GetNumAdditionalAttributes()
    {
        return MergeOperatorAttributes_numAdditionalAtts;
    }

    public boolean equals(MergeOperatorAttributes obj)
    {
        // Create the return value
        return ((parallelMerge == obj.parallelMerge) &&
                (tolerance == obj.tolerance));
    }

    public String GetName() { return "Merge"; }
    public String GetVersion() { return "1.0"; }

    // Property setting methods
    public void SetParallelMerge(boolean parallelMerge_)
    {
        parallelMerge = parallelMerge_;
        Select(0);
    }

    public void SetTolerance(double tolerance_)
    {
        tolerance = tolerance_;
        Select(1);
    }

    // Property getting methods
    public boolean GetParallelMerge() { return parallelMerge; }
    public double  GetTolerance() { return tolerance; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteBool(parallelMerge);
        if(WriteSelect(1, buf))
            buf.WriteDouble(tolerance);
    }

    public void ReadAtts(int index, CommunicationBuffer buf)
    {
        switch(index)
        {
        case 0:
            SetParallelMerge(buf.ReadBool());
            break;
        case 1:
            SetTolerance(buf.ReadDouble());
            break;
        }
    }

    public String toString(String indent)
    {
        String str = new String();
        str = str + boolToString("parallelMerge", parallelMerge, indent) + "\n";
        str = str + doubleToString("tolerance", tolerance, indent) + "\n";
        return str;
    }


    // Attributes
    private boolean parallelMerge;
    private double  tolerance;
}

