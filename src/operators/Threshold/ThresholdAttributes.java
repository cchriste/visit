package llnl.visit.operators;

import llnl.visit.AttributeSubject;
import llnl.visit.CommunicationBuffer;
import llnl.visit.Plugin;
import java.util.Vector;
import java.lang.Integer;
import java.lang.Double;

// ****************************************************************************
// Class: ThresholdAttributes
//
// Purpose:
//    This class contains attributes for the threshold operator.
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   Wed May 24 15:54:35 PST 2006
//
// Modifications:
//   
// ****************************************************************************

public class ThresholdAttributes extends AttributeSubject implements Plugin
{
    // Enum values
    public final static int OUTPUTMESHTYPE_INPUTZONES = 0;
    public final static int OUTPUTMESHTYPE_POINTMESH = 1;

    public final static int ZONEPORTION_ENTIREZONE = 0;
    public final static int ZONEPORTION_PARTOFZONE = 1;


    public ThresholdAttributes()
    {
        super(6);

        outputMeshType = 0;
        listedVarNames = new Vector();
        listedVarNames.addElement(new String("__default__"));
        shownVarPosition = 0;
        zonePortions = new Vector();
        zonePortions.addElement(new Integer(0));
        lowerBounds = new Vector();
        lowerBounds.addElement(new Double(-1e+37));
        upperBounds = new Vector();
        upperBounds.addElement(new Double(1e+37));
    }

    public ThresholdAttributes(ThresholdAttributes obj)
    {
        super(6);

        int i;

        outputMeshType = obj.outputMeshType;
        listedVarNames = new Vector(obj.listedVarNames.size());
        for(i = 0; i < obj.listedVarNames.size(); ++i)
            listedVarNames.addElement(new String((String)obj.listedVarNames.elementAt(i)));

        shownVarPosition = obj.shownVarPosition;
        zonePortions = new Vector();
        for(i = 0; i < obj.zonePortions.size(); ++i)
        {
            Integer iv = (Integer)obj.zonePortions.elementAt(i);
            zonePortions.addElement(new Integer(iv.intValue()));
        }
        lowerBounds = new Vector(obj.lowerBounds.size());
        for(i = 0; i < obj.lowerBounds.size(); ++i)
        {
            Double dv = (Double)obj.lowerBounds.elementAt(i);
            lowerBounds.addElement(new Double(dv.doubleValue()));
        }

        upperBounds = new Vector(obj.upperBounds.size());
        for(i = 0; i < obj.upperBounds.size(); ++i)
        {
            Double dv = (Double)obj.upperBounds.elementAt(i);
            upperBounds.addElement(new Double(dv.doubleValue()));
        }


        SelectAll();
    }

    public boolean equals(ThresholdAttributes obj)
    {
        int i;

        // Create the return value
        return ((outputMeshType == obj.outputMeshType) &&
                (listedVarNames == obj.listedVarNames) &&
                (shownVarPosition == obj.shownVarPosition) &&
                (zonePortions == obj.zonePortions) &&
                (lowerBounds == obj.lowerBounds) &&
                (upperBounds == obj.upperBounds));
    }

    public String GetName() { return "Threshold"; }
    public String GetVersion() { return "1.0"; }

    // Property setting methods
    public void SetOutputMeshType(int outputMeshType_)
    {
        outputMeshType = outputMeshType_;
        Select(0);
    }

    public void SetListedVarNames(Vector listedVarNames_)
    {
        listedVarNames = listedVarNames_;
        Select(1);
    }

    public void SetShownVarPosition(int shownVarPosition_)
    {
        shownVarPosition = shownVarPosition_;
        Select(2);
    }

    public void SetZonePortions(Vector zonePortions_)
    {
        zonePortions = zonePortions_;
        Select(3);
    }

    public void SetLowerBounds(Vector lowerBounds_)
    {
        lowerBounds = lowerBounds_;
        Select(4);
    }

    public void SetUpperBounds(Vector upperBounds_)
    {
        upperBounds = upperBounds_;
        Select(5);
    }

    // Property getting methods
    public int    GetOutputMeshType() { return outputMeshType; }
    public Vector GetListedVarNames() { return listedVarNames; }
    public int    GetShownVarPosition() { return shownVarPosition; }
    public Vector GetZonePortions() { return zonePortions; }
    public Vector GetLowerBounds() { return lowerBounds; }
    public Vector GetUpperBounds() { return upperBounds; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteInt(outputMeshType);
        if(WriteSelect(1, buf))
            buf.WriteStringVector(listedVarNames);
        if(WriteSelect(2, buf))
            buf.WriteInt(shownVarPosition);
        if(WriteSelect(3, buf))
            buf.WriteIntVector(zonePortions);
        if(WriteSelect(4, buf))
            buf.WriteDoubleVector(lowerBounds);
        if(WriteSelect(5, buf))
            buf.WriteDoubleVector(upperBounds);
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        for(int i = 0; i < n; ++i)
        {
            int index = (int)buf.ReadByte();
            switch(index)
            {
            case 0:
                SetOutputMeshType(buf.ReadInt());
                break;
            case 1:
                SetListedVarNames(buf.ReadStringVector());
                break;
            case 2:
                SetShownVarPosition(buf.ReadInt());
                break;
            case 3:
                SetZonePortions(buf.ReadIntVector());
                break;
            case 4:
                SetLowerBounds(buf.ReadDoubleVector());
                break;
            case 5:
                SetUpperBounds(buf.ReadDoubleVector());
                break;
            }
        }
    }


    // Attributes
    private int    outputMeshType;
    private Vector listedVarNames; // vector of String objects
    private int    shownVarPosition;
    private Vector zonePortions; // vector of Integer objects
    private Vector lowerBounds; // vector of Double objects
    private Vector upperBounds; // vector of Double objects
}

