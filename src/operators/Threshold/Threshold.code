Function: CopyAttributes
Declaration: bool CopyAttributes(const AttributeGroup *atts);
Definition:
// ****************************************************************************
// Method: ThresholdAttributes::CopyAttributes
//
// Purpose: 
//   CopyAttributes method for the ThresholdAttributes class.
//
// Note:       Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Tue Sep 13 08:54:28 PDT 2005
//
// Modifications:
//   
//   Mark Blair, Tue Mar  7 13:25:00 PST 2006
//   Upgraded to support multiple threshold variables.
//
//   Mark Blair, Wed Sep 20 10:59:41 PDT 2006
//   Uses time ordinals from the Extents tool to avoid conflict with changes
//   hand-typed by the user in the Threshold operator's GUI window.
//   
//   Mark Blair, Tue Oct  3 13:19:11 PDT 2006
//   Verifies that default plot variable is scalar if in threshold variable list.
//
// ****************************************************************************

bool
ThresholdAttributes::CopyAttributes(const AttributeGroup *atts)
{
    bool retval = false;
    
    if (TypeName() == atts->TypeName())
    {
        // Call assignment operator.
        const ThresholdAttributes *tmp = (const ThresholdAttributes *)atts;
        *this = *tmp;
        retval = true;
    }
    else if (atts->TypeName() == "ExtentsAttributes")
    {
        const ExtentsAttributes *extAtts = (const ExtentsAttributes *)atts;

        stringVector toolVarNames     = extAtts->GetScalarNames();
        doubleVector toolAxisMinima   = extAtts->GetScalarMinima();
        doubleVector toolAxisMaxima   = extAtts->GetScalarMaxima();
        doubleVector toolSliderMinima = extAtts->GetMinima();
        doubleVector toolSliderMaxima = extAtts->GetMaxima();
        
        int toolVarCount = toolVarNames.size();
        int listVarCount = listedVarNames.size();
        int listVarNum, toolVarNum;
        double toolAxisMin, toolAxisRange;
        std::string listedVarName, toolVarName;

        for (listVarNum = 0; listVarNum < listVarCount; listVarNum++)
        {
            listedVarName = listedVarNames[listVarNum];

            for (toolVarNum = 0; toolVarNum < toolVarCount; toolVarNum++)
            {
                if ((toolVarName = toolVarNames[toolVarNum]) == listedVarName)
                    break;
                    
                if (listedVarName == std::string("default"))
                {
                    if ((toolVarName == defaultVarName) && defaultVarIsScalar)
                        break;
                }
            }

            if (toolVarNum < toolVarCount)
            {
                toolAxisMin = toolAxisMinima[toolVarNum];
                toolAxisRange = toolAxisMaxima[toolVarNum] - toolAxisMin;
                    
                lowerBounds[listVarNum] =
                    toolAxisMin + toolSliderMinima[toolVarNum]*toolAxisRange;
                upperBounds[listVarNum] =
                    toolAxisMin + toolSliderMaxima[toolVarNum]*toolAxisRange;
            }
        }

        retval = true;
    }

    return retval;
}


Function: SetListedVariables
Declaration: void SetListedVariables(const stringVector &listedVarNames_);
Definition:
void
ThresholdAttributes::SetListedVariables(const stringVector &listedVarNames_)
{
    listedVarNames = listedVarNames_;
    Select(1, (void *)&listedVarNames);
}


Function: SetShownVariablePosition
Declaration: void SetShownVariablePosition(int shownVarPosition_);
Definition:
void
ThresholdAttributes::SetShownVariablePosition(int shownVarPosition_)
{
    shownVarPosition = shownVarPosition_;
    Select(2, (void *)&shownVarPosition);
}


Function: SupplyMissingDefaultsIfAppropriate
Declaration: void SupplyMissingDefaultsIfAppropriate();
Definition:
// ****************************************************************************
// Method: ThresholdAttributes::SupplyMissingDefaultsIfAppropriate
//
// Purpose: If attributes are set up for a single threshold variable, supply
//          default values for any attribute values that are missing.
//
// Programmer: Mark Blair
// Creation:   Thu Sep 28 12:07:05 PDT 2006
//
// Modifications:
//   
// ****************************************************************************

void
ThresholdAttributes::SupplyMissingDefaultsIfAppropriate()
{
    int totalEntryCount = 0;
    
    if (listedVarNames.size() > 1) return;
    totalEntryCount += listedVarNames.size();
        
    if (zonePortions.size() > 1) return;
    totalEntryCount += zonePortions.size();
        
    if (lowerBounds.size() > 1) return;
    totalEntryCount += lowerBounds.size();
        
    if (upperBounds.size() > 1) return;
    totalEntryCount += upperBounds.size();
    
    if ((totalEntryCount & 3) == 0) return;
    
    stringVector singleVarName;
    intVector    singleZonePortion;
    doubleVector singleLowerBound;
    doubleVector singleUpperBound;
    
    if (listedVarNames.size() == 0)
    {
        singleVarName.push_back(std::string("default"));
        SetListedVarNames(singleVarName);
    }
        
    if (zonePortions.size() == 0)
    {
        singleZonePortion.push_back((int)PartOfZone);
        SetZonePortions(singleZonePortion);
    }
        
    if (lowerBounds.size() == 0)
    {
        singleLowerBound.push_back(-1e+37);
        SetLowerBounds(singleLowerBound);
    }
        
    if (upperBounds.size() == 0)
    {
        singleUpperBound.push_back(+1e+37);
        SetUpperBounds(singleUpperBound);
    }
}


Function: AttributesAreConsistent
Declaration: bool AttributesAreConsistent() const;
Definition:
// ****************************************************************************
// Method: ThresholdAttributes::AttributesAreConsistent
//
// Purpose: Returns true only if (1) all vector attributes are the same length
//          and (2) the index of the currently displayable variable information
//          in the Threshold GUI window is in range.
//
//
// Programmer: Mark Blair
// Creation:   Tue Mar  7 13:25:00 PST 2006
//
// Modifications:
//   
//   Mark Blair, Tue Aug  8 17:47:00 PDT 2006
//   Now accommodates an empty list of threshold variables.
//
// ****************************************************************************

bool
ThresholdAttributes::AttributesAreConsistent() const
{
    int varListSize = listedVarNames.size();
    
    if ((zonePortions.size() != varListSize) ||
        (lowerBounds.size()  != varListSize) ||
        (upperBounds.size()  != varListSize))
    {
        return false;
    }
    
    if ((shownVarPosition >= varListSize) && (varListSize > 0))
        return false;
        
    return true;
}


Function: ForceAttributeConsistency
Declaration: void ForceAttributeConsistency();
Definition:
// ****************************************************************************
// Method: ThresholdAttributes::ForceAttributeConsistency
//
// Purpose: Forces Threshold attributes to be consistent.  Attributes can be
//          inconsistent, for instance, if the user has specified an invalid
//          combination of them in the CLI.  If current attributes are in fact
//          inconsistent, this is recorded in the debug log.
//
// Programmer: Mark Blair
// Creation:   Tue Mar 13 19:51:29 PDT 2007
//
// Modifications:
//   
// ****************************************************************************

void
ThresholdAttributes::ForceAttributeConsistency()
{
    int varListSize = listedVarNames.size();
    int varNum;
    double boundValue;
    bool consistent = ((zonePortions.size() == varListSize) &&
                       ( lowerBounds.size() == varListSize) &&
                       ( upperBounds.size() == varListSize));
                       
    if (!consistent)
    {
        if (zonePortions.size() > varListSize) zonePortions.resize(varListSize);
        if ( lowerBounds.size() > varListSize)  lowerBounds.resize(varListSize);
        if ( upperBounds.size() > varListSize)  upperBounds.resize(varListSize);

        for (varNum = 0; varNum < varListSize; varNum++ )
        {
            if (zonePortions.size() < varListSize)
                zonePortions.push_back((int)ThresholdAttributes::PartOfZone);
            if (lowerBounds.size() < varListSize)
                lowerBounds.push_back(-1e+37);
            if (upperBounds.size() < varListSize)
                upperBounds.push_back(+1e+37);
        }
    }

    for (varNum = 0; varNum < varListSize; varNum++ )
    {
        if (lowerBounds[varNum] > upperBounds[varNum])
        {
            consistent = false;
                
            boundValue          = lowerBounds[varNum];
            lowerBounds[varNum] = upperBounds[varNum];
            upperBounds[varNum] = boundValue;
        }
    }
    
    if (!consistent && (varListSize > 0))
    {
        if (defaultVarName == std::string("default"))
            defaultVarName = listedVarNames[0];
    }

    if (!consistent)
    {
        debug3 << "Threshold operator attributes are inconsistent; "
               << "corrections will be applied." << endl;
        SelectAll();
    }
}


Function: SwitchDefaultToTrueVariableNameIfScalar
Declaration: void SwitchDefaultToTrueVariableNameIfScalar();
Definition:
// ****************************************************************************
// Method: ThresholdAttributes::SwitchDefaultToTrueVariableNameIfScalar
//
// Purpose: Replaces the anonymous "default" variable name with its true name
//          if the default variable is scalar.
//
// Programmer: Mark Blair
// Creation:   Tue Mar  7 13:25:00 PST 2006
//
// Modifications:
//   
//   Mark Blair, Tue Oct  3 13:19:11 PDT 2006
//   Deletes default variable from threshold variable list if not scalar.
//
// ****************************************************************************

void
ThresholdAttributes::SwitchDefaultToTrueVariableNameIfScalar()
{
    int varPosition;
    bool changedTheList;
    std::string listedVarName;

    do
    {
        for (varPosition = 0; varPosition < listedVarNames.size(); varPosition++)
        {
            listedVarName = listedVarNames[varPosition];

            if (listedVarName == std::string("default")) break;
            if (listedVarName == defaultVarName) break;
        }
        
        changedTheList = false;
    
        if (varPosition < listedVarNames.size())
        {
            if (defaultVarIsScalar)
            {
                if (listedVarName == std::string("default"))
                {
                    listedVarNames[varPosition] = defaultVarName;
                    Select(1, (void *)&listedVarNames);
                    
                    changedTheList = true;
                }
            }
            else
            {
                DeleteVariable(defaultVarName);
                changedTheList = true;
            }
        }
    }
    while (changedTheList);
}

Function: ChangeZonePortion
Declaration: void ChangeZonePortion(ZonePortion newZonePortion_);
Definition:
void
ThresholdAttributes::ChangeZonePortion(ZonePortion newZonePortion_)
{
    if (shownVarPosition < zonePortions.size())
    {
        zonePortions[shownVarPosition] = (int)newZonePortion_;
        Select(3, (void *)&zonePortions);
    }
}


Function: ChangeZonePortion
Declaration: void ChangeZonePortion(int newZonePortion_);
Definition:
void
ThresholdAttributes::ChangeZonePortion(int newZonePortion_)
{
    if (shownVarPosition < zonePortions.size())
    {
        zonePortions[shownVarPosition] = newZonePortion_;
        Select(3, (void *)&zonePortions);
    }
}


Function: ChangeLowerBound
Declaration: void ChangeLowerBound(double newLowerBound_);
Definition:
void
ThresholdAttributes::ChangeLowerBound(double newLowerBound_)
{
    if (shownVarPosition < lowerBounds.size())
    {
        lowerBounds[shownVarPosition] = newLowerBound_;
        Select(4, (void *)&lowerBounds);
    }
}


Function: ChangeUpperBound
Declaration: void ChangeUpperBound(double newUpperBound_);
Definition:
void
ThresholdAttributes::ChangeUpperBound(double newUpperBound_)
{
    if (shownVarPosition < upperBounds.size())
    {
        upperBounds[shownVarPosition] = newUpperBound_;
        Select(5, (void *)&upperBounds);
    }
}


Function: InsertVariable
Declaration: void InsertVariable(const std::string &variable_);
Definition:
// ****************************************************************************
// Method: ThresholdAttributes::InsertVariable
//
// Purpose: Insert a newly selected variable in the list of active threshold
//          variable names.  All other attributes of the new variable are
//          initialized to default values.
//
// Programmer: Mark Blair
// Creation:   Tue Mar  7 13:25:00 PST 2006
//
// Modifications:
//   
//   Mark Blair, Tue Aug  8 17:47:00 PDT 2006
//   Now accommodates an empty list of threshold variables.
//
//   Mark Blair, Tue Oct  3 13:19:11 PDT 2006
//   If variable to be inserted is default variable, uses true variable name.
//
// ****************************************************************************

void
ThresholdAttributes::InsertVariable(const std::string &variable_)
{
    int varPosition;
    std::string listedVarName;

    for (varPosition = 0; varPosition < listedVarNames.size(); varPosition++)
    {
        if ((listedVarName = listedVarNames[varPosition]) == variable_) return;

        if (listedVarName == std::string("default"))
        {
            if (variable_ == defaultVarName)
            {
                if (defaultVarIsScalar)
                {
                    listedVarNames[varPosition] = defaultVarName;
                    Select(1, (void *)&listedVarNames);
                }
                else    // Should never happen, but . . .
                {
                    DeleteVariable(std::string("default"));
                }
                
                return;
            }
        }
    }

    shownVarPosition = listedVarNames.size(); // Will be correct new position.

    listedVarNames.push_back(variable_);
    zonePortions.push_back((int)PartOfZone);
    lowerBounds.push_back(-1e+37);
    upperBounds.push_back(+1e+37);

    Select(1, (void *)&listedVarNames);
    Select(2, (void *)&shownVarPosition);
    Select(3, (void *)&zonePortions);
    Select(4, (void *)&lowerBounds);
    Select(5, (void *)&upperBounds);
}


Function: DeleteVariable
Declaration: void DeleteVariable(const std::string &variable_);
Definition:
// ****************************************************************************
// Method: ThresholdAttributes::DeleteVariable
//
// Purpose: Delete a variable from the list of active threshold variable names.
//          Corresponding entries in the other lists of variable attributes
//          are also deleted.
//
// Programmer: Mark Blair
// Creation:   Tue Mar  7 13:25:00 PST 2006
//
// Modifications:
//   
//   Mark Blair, Tue Aug  8 17:47:00 PDT 2006
//   Now accommodates an empty list of threshold variables.
//
// ****************************************************************************

void
ThresholdAttributes::DeleteVariable(const std::string &variable_)
{
    if (listedVarNames.size() == 0) return;

    int varPosition, newListSize;
    std::string listedVarName;

    for (varPosition = 0; varPosition < listedVarNames.size(); varPosition++)
    {
        if ((listedVarName = listedVarNames[varPosition]) == variable_) break;

        if (listedVarName == std::string("default"))
        {
            if (variable_ == defaultVarName) break;
        }
    }

    if (varPosition < listedVarNames.size())
    {
        listedVarNames.erase(listedVarNames.begin() + varPosition);
        zonePortions.erase(zonePortions.begin() + varPosition);
        lowerBounds.erase(lowerBounds.begin() + varPosition);
        upperBounds.erase(upperBounds.begin() + varPosition);
        
        if ((newListSize = listedVarNames.size()) == 0)
            shownVarPosition = 0;
        else if (varPosition <= shownVarPosition)
            shownVarPosition = (shownVarPosition + newListSize - 1) % newListSize;

        Select(1, (void *)&listedVarNames);
        Select(2, (void *)&shownVarPosition);
        Select(3, (void *)&zonePortions);
        Select(4, (void *)&lowerBounds);
        Select(5, (void *)&upperBounds);
    }
}


Function: SwapVariable
Declaration: void SwapVariable(const std::string &variable_);
Definition:
// ****************************************************************************
// Method: ThresholdAttributes::SwapVariable
//
// Purpose: Swap one variable for another in the list of active threshold
//          variable names.  All other attributes of the variable swapped in are
//          initialized to default values.
//
// Programmer: Mark Blair
// Creation:   Tue Mar  7 13:25:00 PST 2006
//
// Modifications:
//   
//   Mark Blair, Tue Aug  8 17:47:00 PDT 2006
//   Now accommodates an empty list of threshold variables.
//
// ****************************************************************************

void
ThresholdAttributes::SwapVariable(const std::string &variable_)
{
    if (listedVarNames.size() == 0)
    {
        InsertVariable(variable_);
        return;
    }
    
    int varPosition;
    std::string listedVarName;

    for (varPosition = 0; varPosition < listedVarNames.size(); varPosition++)
    {
        if ((listedVarName = listedVarNames[varPosition]) == variable_) return;

        if (listedVarName == std::string("default"))
        {
            if (variable_ == defaultVarName)
            {
                InsertVariable(variable_);
                return;
            }
        }
    }

    std::string shownVarName = listedVarNames[shownVarPosition];

    InsertVariable(variable_);
    DeleteVariable(shownVarName);
}


Function: ShowPreviousVariable
Declaration: void ShowPreviousVariable();
Definition:
// ****************************************************************************
// Method: ThresholdAttributes::ShowPreviousVariable
//
// Purpose: Sets list index of the active threshold variable to be shown (or
//          whatever other purpose the caller may have in mind) to point to
//          the preceding (circularly) variable in the list.
//
// Programmer: Mark Blair
// Creation:   Tue Mar  7 13:25:00 PST 2006
//
// Modifications:
//   
//   Mark Blair, Tue Aug  8 17:47:00 PDT 2006
//   Now accommodates an empty list of threshold variables.
//
// ****************************************************************************

void
ThresholdAttributes::ShowPreviousVariable()
{
    if (listedVarNames.size() < 2) return;

    shownVarPosition =
        (shownVarPosition + listedVarNames.size() - 1) % listedVarNames.size();
    Select(2, (void *)&shownVarPosition);
}


Function: ShowNextVariable
Declaration: void ShowNextVariable();
Definition:
// ****************************************************************************
// Method: ThresholdAttributes::ShowNextVariable
//
// Purpose: Sets list index of the active threshold variable to be shown (or
//          whatever other purpose the caller may have in mind) to point to
//          the next (circularly) variable in the list.
//
// Programmer: Mark Blair
// Creation:   Tue Mar  7 13:25:00 PST 2006
//
// Modifications:
//   
//   Mark Blair, Tue Aug  8 17:47:00 PDT 2006
//   Now accommodates an empty list of threshold variables.
//
// ****************************************************************************

void
ThresholdAttributes::ShowNextVariable()
{
    if (listedVarNames.size() < 2) return;

    shownVarPosition = (shownVarPosition + 1) % listedVarNames.size();
    Select(2, (void *)&shownVarPosition);
}


Function: GetShownVariable
Declaration: const std::string &GetShownVariable() const;
Definition:
const std::string &
ThresholdAttributes::GetShownVariable() const
{
    static std::string noVarsInList = std::string("(no variables in list)");

    if (listedVarNames.size() == 0) return noVarsInList;

    return listedVarNames[shownVarPosition];
}


Function: GetShownVariable
Declaration: std::string &GetShownVariable();
Definition:
std::string &
ThresholdAttributes::GetShownVariable()
{
    static std::string noVarsInList = std::string("(no variables in list)");

    if (listedVarNames.size() == 0) return noVarsInList;

    return listedVarNames[shownVarPosition];
}


Function: GetZonePortion
Declaration: ThresholdAttributes::ZonePortion ThresholdAttributes::GetZonePortion() const;
Definition:
ThresholdAttributes::ZonePortion
ThresholdAttributes::GetZonePortion() const
{
    if (zonePortions.size() == 0)
        return ThresholdAttributes::PartOfZone;

    return (ZonePortion)zonePortions[shownVarPosition];
}


Function: GetLowerBound
Declaration: double GetLowerBound() const;
Definition:
double
ThresholdAttributes::GetLowerBound() const
{
    if (lowerBounds.size() == 0)
        return -1e+37;

    return lowerBounds[shownVarPosition];
}


Function: GetUpperBound
Declaration: double GetUpperBound() const;
Definition:
double
ThresholdAttributes::GetUpperBound() const
{
    if (upperBounds.size() == 0)
        return +1e+37;

    return upperBounds[shownVarPosition];
}


Function: GetListedVariables
Declaration: const stringVector &GetListedVariables() const;
Definition:
const stringVector &
ThresholdAttributes::GetListedVariables() const
{
    return listedVarNames;
}
