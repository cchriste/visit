Function: CopyAttributes
Declaration: bool CopyAttributes(const AttributeGroup *atts);
Definition:
// ****************************************************************************
// Method: ThresholdAttributes::CopyAttributes
//
// Purpose: 
//   CopyAttributes method for the ThresholdAttributes class.
//
// Note:       Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Tue Sep 13 08:54:28 PDT 2005
//
// Modifications:
//   
//   Mark Blair, Tue Mar  7 13:25:00 PST 2006
//   Upgraded to support multiple threshold variables.
//
//   Mark Blair, Wed Sep 20 10:59:41 PDT 2006
//   Uses time ordinals from the Extents tool to avoid conflict with changes
//   hand-typed by the user in the Threshold operator's GUI window.
//   
//   Mark Blair, Tue Oct  3 13:19:11 PDT 2006
//   Verifies that default plot variable is scalar if in threshold variable list.
//
//    Jeremy Meredith, Fri Feb 15 13:14:22 EST 2008
//    Added support for AxisRestrictionAttributes.
//
//   Jeremy Meredith, Tue Apr 22 14:31:20 EDT 2008
//   Removed Extents tool.  (Functionality subsumed by axis restriction tool.)
//
// ****************************************************************************

bool
ThresholdAttributes::CopyAttributes(const AttributeGroup *atts)
{
    bool retval = false;
    
    if (TypeName() == atts->TypeName())
    {
        // Call assignment operator.
        const ThresholdAttributes *tmp = (const ThresholdAttributes *)atts;
        *this = *tmp;
        retval = true;
    }
    else if (atts->TypeName() == "AxisRestrictionAttributes")
    {
        const AxisRestrictionAttributes *arAtts =
            (const AxisRestrictionAttributes*)atts;

        stringVector toolVarNames = arAtts->GetNames();
        doubleVector toolMinima   = arAtts->GetMinima();
        doubleVector toolMaxima   = arAtts->GetMaxima();

        for (size_t lv=0; lv < listedVarNames.size(); lv++)
        {
            for (size_t tv=0; tv < toolVarNames.size(); tv++)
            {
                if (toolVarNames[tv] == listedVarNames[lv])
                {
                    lowerBounds[lv] = toolMinima[tv];
                    upperBounds[lv] = toolMaxima[tv];
                }
                else if (toolVarNames[tv] == defaultVarName &&
                         listedVarNames[lv] == "default" &&
                         defaultVarIsScalar)
                {
                    lowerBounds[lv] = toolMinima[tv];
                    upperBounds[lv] = toolMaxima[tv];
                }
            }
        }

        retval = true;
    }

    return retval;
}


Function: SupplyMissingDefaultsIfAppropriate
Declaration: void SupplyMissingDefaultsIfAppropriate();
Definition:
// ****************************************************************************
// Method: ThresholdAttributes::SupplyMissingDefaultsIfAppropriate
//
// Purpose: If attributes are set up for a single threshold variable, supply
//          default values for any attribute values that are missing.
//
// Programmer: Mark Blair
// Creation:   Thu Sep 28 12:07:05 PDT 2006
//
// Modifications:
//   
// ****************************************************************************

void
ThresholdAttributes::SupplyMissingDefaultsIfAppropriate()
{
    int totalEntryCount = 0;
    
    if (listedVarNames.size() > 1) return;
    totalEntryCount += listedVarNames.size();
        
    if (zonePortions.size() > 1) return;
    totalEntryCount += zonePortions.size();
        
    if (lowerBounds.size() > 1) return;
    totalEntryCount += lowerBounds.size();
        
    if (upperBounds.size() > 1) return;
    totalEntryCount += upperBounds.size();
    
    if ((totalEntryCount & 3) == 0) return;
    
    stringVector singleVarName;
    intVector    singleZonePortion;
    doubleVector singleLowerBound;
    doubleVector singleUpperBound;
    
    if (listedVarNames.size() == 0)
    {
        singleVarName.push_back(std::string("default"));
        SetListedVarNames(singleVarName);
    }
        
    if (zonePortions.size() == 0)
    {
        singleZonePortion.push_back((int)PartOfZone);
        SetZonePortions(singleZonePortion);
    }
        
    if (lowerBounds.size() == 0)
    {
        singleLowerBound.push_back(-1e+37);
        SetLowerBounds(singleLowerBound);
    }
        
    if (upperBounds.size() == 0)
    {
        singleUpperBound.push_back(+1e+37);
        SetUpperBounds(singleUpperBound);
    }
}


Function: AttributesAreConsistent
Declaration: bool AttributesAreConsistent() const;
Definition:
// ****************************************************************************
// Method: ThresholdAttributes::AttributesAreConsistent
//
// Purpose: Returns true only if (1) all vector attributes are the same length
//          and (2) the index of the currently displayable variable information
//          in the Threshold GUI window is in range.
//
//
// Programmer: Mark Blair
// Creation:   Tue Mar  7 13:25:00 PST 2006
//
// Modifications:
//   
//   Mark Blair, Tue Aug  8 17:47:00 PDT 2006
//   Now accommodates an empty list of threshold variables.
//
//   Mark Blair, Tue Apr 17 16:24:42 PDT 2007
//   Rewritten to support new Threshold GUI; no more shown variable.
//
// ****************************************************************************

bool
ThresholdAttributes::AttributesAreConsistent() const
{
    size_t varListSize = listedVarNames.size();
    
    if ((zonePortions.size() != varListSize) ||
        (lowerBounds.size()  != varListSize) ||
        (upperBounds.size()  != varListSize))
    {
        return false;
    }
    
    return true;
}


Function: ForceAttributeConsistency
Declaration: void ForceAttributeConsistency();
Definition:
// ****************************************************************************
// Method: ThresholdAttributes::ForceAttributeConsistency
//
// Purpose: Forces Threshold attributes to be consistent.  Attributes can be
//          inconsistent, for instance, if the user has specified an invalid
//          combination of them in the CLI.  If current attributes are in fact
//          inconsistent, this is recorded in the debug log.
//
// Programmer: Mark Blair
// Creation:   Tue Mar 13 19:51:29 PDT 2007
//
// Modifications:
//   
// ****************************************************************************

void
ThresholdAttributes::ForceAttributeConsistency()
{
    size_t varListSize = listedVarNames.size();
    size_t varNum;
    double boundValue;
    bool consistent = ((zonePortions.size() == varListSize) &&
                       ( lowerBounds.size() == varListSize) &&
                       ( upperBounds.size() == varListSize));
                       
    if (!consistent)
    {
        if (zonePortions.size() > varListSize) zonePortions.resize(varListSize);
        if ( lowerBounds.size() > varListSize)  lowerBounds.resize(varListSize);
        if ( upperBounds.size() > varListSize)  upperBounds.resize(varListSize);

        for (varNum = 0; varNum < varListSize; varNum++ )
        {
            if (zonePortions.size() < varListSize)
                zonePortions.push_back((int)ThresholdAttributes::PartOfZone);
            if (lowerBounds.size() < varListSize)
                lowerBounds.push_back(-1e+37);
            if (upperBounds.size() < varListSize)
                upperBounds.push_back(+1e+37);
        }
    }

    for (varNum = 0; varNum < varListSize; varNum++ )
    {
        if (lowerBounds[varNum] > upperBounds[varNum])
        {
            consistent = false;
                
            boundValue          = lowerBounds[varNum];
            lowerBounds[varNum] = upperBounds[varNum];
            upperBounds[varNum] = boundValue;
        }
    }
    
    if (!consistent && (varListSize > 0))
    {
        if (defaultVarName == std::string("default"))
            defaultVarName = listedVarNames[0];
    }

    if (!consistent)
    {
        debug3 << "Threshold operator attributes are inconsistent; "
               << "corrections will be applied." << endl;
        SelectAll();
    }
}


Function: SwitchDefaultVariableNameToTrueName
Declaration: void SwitchDefaultVariableNameToTrueName();
Definition:
// ****************************************************************************
// Method: ThresholdAttributes::SwitchDefaultVariableNameToTrueName
//
// Purpose: Replaces the anonymous "default" variable name with its true name
//          if the default variable is scalar.
//
// Programmer: Mark Blair
// Creation:   Tue Mar  7 13:25:00 PST 2006
//
// Modifications:
//   
//   Mark Blair, Tue Oct  3 13:19:11 PDT 2006
//   Deletes default variable from threshold variable list if not scalar.
//
//   Mark Blair, Tue Apr 17 16:24:42 PDT 2007
//   Rewritten to support new Threshold GUI; no more "shown variable".
//
//   Mark Blair, Tue Sep 18 17:06:28 PDT 2007
//   No longer deletes variable from threshold variable list if not scalar.
//   Also changed method name to reflect this.
//
// ****************************************************************************

void
ThresholdAttributes::SwitchDefaultVariableNameToTrueName()
{
    size_t varPosition;
    bool changedTheList;
    std::string listedVarName;

    do
    {
        for (varPosition = 0; varPosition < listedVarNames.size(); varPosition++)
        {
            listedVarName = listedVarNames[varPosition];

            if (listedVarName == std::string("default")) break;
            if (listedVarName == defaultVarName) break;
        }
        
        changedTheList = false;
    
        if (varPosition < listedVarNames.size())
        {
            if (listedVarName == std::string("default"))
            {
                listedVarNames[varPosition] = defaultVarName;
                Select(1, (void *)&listedVarNames);

                changedTheList = true;
            }
        }
    }
    while (changedTheList);
}

Target: xml2info
Function: ThresholdViewerPluginInfo::InitializeOperatorAtts
Declaration: virtual void ThresholdViewerPluginInfo::InitializeOperatorAtts(...);
Definition:
// ****************************************************************************
//  Method: ThresholdViewerPluginInfo::InitializeOperatorAtts
//
//  Purpose:
//    Initialize the operator attributes to the default attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//    md        The metadata used to initialize.
//    atts      The variable name used to initialize.
//
//  Programmer: mblair -- generated by xml2info
//  Creation:   Thu Mar 9 16:03:07 PST 2006
//
//   Modifications:
//   
//     Mark Blair, Thu Mar  9 18:25:00 PST 2006
//     Upgraded to support multiple threshold variables.
//
//     Mark Blair, Tue Aug  8 17:47:00 PDT 2006
//     Now accommodates an empty list of threshold variables; does pass-through.
//     Also checks for attribute consistency.
//
//     Mark Blair, Wed Sep  6 19:13:00 PDT 2006
//     Corrected bad policy: Was sometimes changing user's defaults explicitly.
//
//     Mark Blair, Thu Sep 28 12:07:05 PDT 2006
//     Accommodate old Threshold mode in CLI by supplying any missing default
//     attribute values if attributes are set up for a single threshold variable.
//
//     Mark Blair, Tue Oct  3 13:19:11 PDT 2006
//     Set attribute flag that indicates whether plot variable is a scalar.
//
// ****************************************************************************
#include <ViewerPlot.h>
#include <DebugStream.h>
void
ThresholdViewerPluginInfo::InitializeOperatorAtts(AttributeSubject *atts,
                                                  const ViewerPlot *plot,
                                                  const bool fromDefault)
{
    if (fromDefault)
        *(ThresholdAttributes *)atts = *defaultAtts;
    else
        *(ThresholdAttributes *)atts = *clientAtts;
        
    ThresholdAttributes *initAtts = (ThresholdAttributes *)atts;
        
    initAtts->SupplyMissingDefaultsIfAppropriate();
    
    initAtts->SetDefaultVarName(plot->GetVariableName());
    initAtts->SetDefaultVarIsScalar(plot->GetVarType() == AVT_SCALAR_VAR);
}
