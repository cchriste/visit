#ifndef SMOOTHOPERATORATTRIBUTES_H
#define SMOOTHOPERATORATTRIBUTES_H
#include <AttributeSubject.h>

// ****************************************************************************
// Class: SmoothOperatorAttributes
//
// Purpose:
//    Attributes for the Smooth Operator
//
// Notes:      Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Sun Aug 14 11:59:57 PDT 2005
//
// Modifications:
//   
// ****************************************************************************

class SmoothOperatorAttributes : public AttributeSubject
{
public:
    SmoothOperatorAttributes();
    SmoothOperatorAttributes(const SmoothOperatorAttributes &obj);
    virtual ~SmoothOperatorAttributes();

    virtual SmoothOperatorAttributes& operator = (const SmoothOperatorAttributes &obj);
    virtual bool operator == (const SmoothOperatorAttributes &obj) const;
    virtual bool operator != (const SmoothOperatorAttributes &obj) const;

    virtual const std::string TypeName() const;
    virtual bool CopyAttributes(const AttributeGroup *);
    virtual AttributeSubject *CreateCompatible(const std::string &) const;
    virtual AttributeSubject *NewInstance(bool) const;

    // Property selection methods
    virtual void SelectAll();

    // Property setting methods
    void SetNumIterations(int numIterations_);
    void SetRelaxationFactor(double relaxationFactor_);
    void SetConvergence(double convergence_);
    void SetMaintainFeatures(bool maintainFeatures_);
    void SetFeatureAngle(double featureAngle_);
    void SetEdgeAngle(double edgeAngle_);
    void SetSmoothBoundaries(bool smoothBoundaries_);

    // Property getting methods
    int    GetNumIterations() const;
    double GetRelaxationFactor() const;
    double GetConvergence() const;
    bool   GetMaintainFeatures() const;
    double GetFeatureAngle() const;
    double GetEdgeAngle() const;
    bool   GetSmoothBoundaries() const;

    // Persistence methods
    virtual bool CreateNode(DataNode *node, bool completeSave, bool forceAdd);
    virtual void SetFromNode(DataNode *node);


    // Keyframing methods
    virtual std::string               GetFieldName(int index) const;
    virtual AttributeGroup::FieldType GetFieldType(int index) const;
    virtual std::string               GetFieldTypeName(int index) const;
    virtual bool                      FieldsEqual(int index, const AttributeGroup *rhs) const;

private:
    int    numIterations;
    double relaxationFactor;
    double convergence;
    bool   maintainFeatures;
    double featureAngle;
    double edgeAngle;
    bool   smoothBoundaries;
};

#endif
