#ifndef CRACKSCLIPPERATTRIBUTES_H
#define CRACKSCLIPPERATTRIBUTES_H
#include <string>
#include <AttributeSubject.h>

// ****************************************************************************
// Class: CracksClipperAttributes
//
// Purpose:
//    Attributes for the cracks clipper operator
//
// Notes:      Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Thu Oct 13 11:14:38 PDT 2005
//
// Modifications:
//   
// ****************************************************************************

class CracksClipperAttributes : public AttributeSubject
{
public:
    CracksClipperAttributes();
    CracksClipperAttributes(const CracksClipperAttributes &obj);
    virtual ~CracksClipperAttributes();

    virtual CracksClipperAttributes& operator = (const CracksClipperAttributes &obj);
    virtual bool operator == (const CracksClipperAttributes &obj) const;
    virtual bool operator != (const CracksClipperAttributes &obj) const;

    virtual const std::string TypeName() const;
    virtual bool CopyAttributes(const AttributeGroup *);
    virtual AttributeSubject *CreateCompatible(const std::string &) const;
    virtual AttributeSubject *NewInstance(bool) const;

    // Property selection methods
    virtual void SelectAll();
    void SelectCrack1Var();
    void SelectCrack2Var();
    void SelectCrack3Var();
    void SelectStrainVar();

    // Property setting methods
    void SetCrack1Var(const std::string &crack1Var_);
    void SetCrack2Var(const std::string &crack2Var_);
    void SetCrack3Var(const std::string &crack3Var_);
    void SetStrainVar(const std::string &strainVar_);
    void SetUseCrack1(bool useCrack1_);
    void SetUseCrack2(bool useCrack2_);
    void SetUseCrack3(bool useCrack3_);

    // Property getting methods
    const std::string &GetCrack1Var() const;
          std::string &GetCrack1Var();
    const std::string &GetCrack2Var() const;
          std::string &GetCrack2Var();
    const std::string &GetCrack3Var() const;
          std::string &GetCrack3Var();
    const std::string &GetStrainVar() const;
          std::string &GetStrainVar();
    bool              GetUseCrack1() const;
    bool              GetUseCrack2() const;
    bool              GetUseCrack3() const;

    // Persistence methods
    virtual bool CreateNode(DataNode *node, bool completeSave, bool forceAdd);
    virtual void SetFromNode(DataNode *node);


    // Keyframing methods
    virtual std::string               GetFieldName(int index) const;
    virtual AttributeGroup::FieldType GetFieldType(int index) const;
    virtual std::string               GetFieldTypeName(int index) const;
    virtual bool                      FieldsEqual(int index, const AttributeGroup *rhs) const;

    // User-defined methods
    bool ChangesRequireRecalculation(const CracksClipperAttributes &) const;
private:
    std::string crack1Var;
    std::string crack2Var;
    std::string crack3Var;
    std::string strainVar;
    bool        useCrack1;
    bool        useCrack2;
    bool        useCrack3;
};

#endif
