// ***************************************************************************
//
// Copyright (c) 2000 - 2012, Lawrence Livermore National Security, LLC
// Produced at the Lawrence Livermore National Laboratory
// LLNL-CODE-442911
// All rights reserved.
//
// This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
// full copyright notice is contained in the file COPYRIGHT located at the root
// of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
//
//  - Redistributions of  source code must  retain the above  copyright notice,
//    this list of conditions and the disclaimer below.
//  - Redistributions in binary form must reproduce the above copyright notice,
//    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
//    documentation and/or other materials provided with the distribution.
//  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
// ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
// LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
// DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
// SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
// CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
// LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
// OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ***************************************************************************

package llnl.visit.operators;

import llnl.visit.AttributeSubject;
import llnl.visit.CommunicationBuffer;
import llnl.visit.Plugin;

// ****************************************************************************
// Class: ExtremeValueAnalysisAttributes
//
// Purpose:
//    Attributes for ExtremeValueAnalysis operator
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   omitted
//
// Modifications:
//   
// ****************************************************************************

public class ExtremeValueAnalysisAttributes extends AttributeSubject implements Plugin
{
    private static int ExtremeValueAnalysisAttributes_numAdditionalAtts = 4;

    // Enum values
    public final static int COMPUTEMAXES_MONTHLY = 0;
    public final static int COMPUTEMAXES_YEARLY = 1;
    public final static int COMPUTEMAXES_SEASONAL = 2;

    public final static int MONTH_JANUARY = 0;
    public final static int MONTH_FEBRUARY = 1;
    public final static int MONTH_MARCH = 2;
    public final static int MONTH_APRIL = 3;
    public final static int MONTH_MAY = 4;
    public final static int MONTH_JUNE = 5;
    public final static int MONTH_JULY = 6;
    public final static int MONTH_AUGUST = 7;
    public final static int MONTH_SEPTEMBER = 8;
    public final static int MONTH_OCTOBER = 9;
    public final static int MONTH_NOVEMBER = 10;
    public final static int MONTH_DECEMBER = 11;


    public ExtremeValueAnalysisAttributes()
    {
        super(ExtremeValueAnalysisAttributes_numAdditionalAtts);

        computeMaxes = COMPUTEMAXES_YEARLY;
        DisplayMonth = MONTH_JANUARY;
        dumpData = false;
        dataScaling = 1;
    }

    public ExtremeValueAnalysisAttributes(int nMoreFields)
    {
        super(ExtremeValueAnalysisAttributes_numAdditionalAtts + nMoreFields);

        computeMaxes = COMPUTEMAXES_YEARLY;
        DisplayMonth = MONTH_JANUARY;
        dumpData = false;
        dataScaling = 1;
    }

    public ExtremeValueAnalysisAttributes(ExtremeValueAnalysisAttributes obj)
    {
        super(ExtremeValueAnalysisAttributes_numAdditionalAtts);

        computeMaxes = obj.computeMaxes;
        DisplayMonth = obj.DisplayMonth;
        dumpData = obj.dumpData;
        dataScaling = obj.dataScaling;

        SelectAll();
    }

    public int Offset()
    {
        return super.Offset() + super.GetNumAdditionalAttributes();
    }

    public int GetNumAdditionalAttributes()
    {
        return ExtremeValueAnalysisAttributes_numAdditionalAtts;
    }

    public boolean equals(ExtremeValueAnalysisAttributes obj)
    {
        // Create the return value
        return ((computeMaxes == obj.computeMaxes) &&
                (DisplayMonth == obj.DisplayMonth) &&
                (dumpData == obj.dumpData) &&
                (dataScaling == obj.dataScaling));
    }

    public String GetName() { return "ExtremeValueAnalysis"; }
    public String GetVersion() { return "1.0"; }

    // Property setting methods
    public void SetComputeMaxes(int computeMaxes_)
    {
        computeMaxes = computeMaxes_;
        Select(0);
    }

    public void SetDisplayMonth(int DisplayMonth_)
    {
        DisplayMonth = DisplayMonth_;
        Select(1);
    }

    public void SetDumpData(boolean dumpData_)
    {
        dumpData = dumpData_;
        Select(2);
    }

    public void SetDataScaling(double dataScaling_)
    {
        dataScaling = dataScaling_;
        Select(3);
    }

    // Property getting methods
    public int     GetComputeMaxes() { return computeMaxes; }
    public int     GetDisplayMonth() { return DisplayMonth; }
    public boolean GetDumpData() { return dumpData; }
    public double  GetDataScaling() { return dataScaling; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteInt(computeMaxes);
        if(WriteSelect(1, buf))
            buf.WriteInt(DisplayMonth);
        if(WriteSelect(2, buf))
            buf.WriteBool(dumpData);
        if(WriteSelect(3, buf))
            buf.WriteDouble(dataScaling);
    }

    public void ReadAtts(int index, CommunicationBuffer buf)
    {
        switch(index)
        {
        case 0:
            SetComputeMaxes(buf.ReadInt());
            break;
        case 1:
            SetDisplayMonth(buf.ReadInt());
            break;
        case 2:
            SetDumpData(buf.ReadBool());
            break;
        case 3:
            SetDataScaling(buf.ReadDouble());
            break;
        }
    }

    public String toString(String indent)
    {
        String str = new String();
        str = str + indent + "computeMaxes = ";
        if(computeMaxes == COMPUTEMAXES_MONTHLY)
            str = str + "COMPUTEMAXES_MONTHLY";
        if(computeMaxes == COMPUTEMAXES_YEARLY)
            str = str + "COMPUTEMAXES_YEARLY";
        if(computeMaxes == COMPUTEMAXES_SEASONAL)
            str = str + "COMPUTEMAXES_SEASONAL";
        str = str + "\n";
        str = str + indent + "DisplayMonth = ";
        if(DisplayMonth == MONTH_JANUARY)
            str = str + "MONTH_JANUARY";
        if(DisplayMonth == MONTH_FEBRUARY)
            str = str + "MONTH_FEBRUARY";
        if(DisplayMonth == MONTH_MARCH)
            str = str + "MONTH_MARCH";
        if(DisplayMonth == MONTH_APRIL)
            str = str + "MONTH_APRIL";
        if(DisplayMonth == MONTH_MAY)
            str = str + "MONTH_MAY";
        if(DisplayMonth == MONTH_JUNE)
            str = str + "MONTH_JUNE";
        if(DisplayMonth == MONTH_JULY)
            str = str + "MONTH_JULY";
        if(DisplayMonth == MONTH_AUGUST)
            str = str + "MONTH_AUGUST";
        if(DisplayMonth == MONTH_SEPTEMBER)
            str = str + "MONTH_SEPTEMBER";
        if(DisplayMonth == MONTH_OCTOBER)
            str = str + "MONTH_OCTOBER";
        if(DisplayMonth == MONTH_NOVEMBER)
            str = str + "MONTH_NOVEMBER";
        if(DisplayMonth == MONTH_DECEMBER)
            str = str + "MONTH_DECEMBER";
        str = str + "\n";
        str = str + boolToString("dumpData", dumpData, indent) + "\n";
        str = str + doubleToString("dataScaling", dataScaling, indent) + "\n";
        return str;
    }


    // Attributes
    private int     computeMaxes;
    private int     DisplayMonth;
    private boolean dumpData;
    private double  dataScaling;
}

