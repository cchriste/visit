Target: xml2info
Function: ExtremeValueAnalysisCommonPluginInfo::GetCreatedExpressions
Declaration: virtual ExpressionList *GetCreatedExpressions(const avtDatabaseMetaData *);
Definition:

// ****************************************************************************
//  Method: ExtremeValueAnalysisCommonPluginInfo::GetCreatedExpressions
//
//  Purpose:
//      Gets the expressions created by this operator.
//
//  Programmer: generated by xml2info
//  Creation:   omitted
//
// ****************************************************************************

ExpressionList * 
ExtremeValueAnalysisCommonPluginInfo::GetCreatedExpressions(const avtDatabaseMetaData *md)
{
    int i;
    char name[1024], defn[1024];
    ExpressionList *el = new ExpressionList;
    int numScalars = md->GetNumScalars();
    for (i = 0 ; i < numScalars ; i++)
    {
        const avtScalarMetaData *mmd = md->GetScalar(i);
        {
            Expression e2;
            sprintf(name, "operators/ExtremeValueAnalysis/%s", mmd->name.c_str());
            e2.SetName(name);
            e2.SetType(Expression::ScalarMeshVar);
            e2.SetFromOperator(true);
            e2.SetOperatorName("ExtremeValueAnalysis");
            sprintf(defn, "cell_constant(<%s>, 0.)", mmd->name.c_str());
            e2.SetDefinition(defn);
            el->AddExpressions(e2);
        }
    }
    const ExpressionList &oldEL = md->GetExprList();
    for (i = 0 ; i < oldEL.GetNumExpressions() ; i++)
    {
        const Expression &e = oldEL.GetExpressions(i);
        if (e.GetType() == Expression::ScalarMeshVar)
        {
            {
                if (e.GetFromOperator())
                    continue; // weird ordering behavior otherwise
                Expression e2;
                sprintf(name, "operators/ExtremeValueAnalysis/%s", e.GetName().c_str());
                e2.SetName(name);
                e2.SetType(Expression::ScalarMeshVar);
                e2.SetFromOperator(true);
                e2.SetOperatorName("ExtremeValueAnalysis");
                sprintf(defn, "cell_constant(<%s>, 0.)", e.GetName().c_str());
                e2.SetDefinition(defn);
                el->AddExpressions(e2);
            }
        }
    }
    return el;
}

Target: xml2cmake
Condition: HAVE_LIBNETCDF
Includes: ${NETCDF_INCLUDE_DIR}
Definitions: -DHAVE_NETCDF
LinkDirectories: ${NETCDF_LIBRARY_DIR}
ELinkLibraries: ${NETCDF_LIB}

Code: AddSubDir
Prefix:
Postfix:
ADD_SUBDIRECTORY(r_src)

