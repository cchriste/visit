#ifndef SILODUMPATTRIBUTES_H
#define SILODUMPATTRIBUTES_H
#include <string>
#include <AttributeSubject.h>

// ****************************************************************************
// Class: SiloDumpAttributes
//
// Purpose:
//    This class contains attributes for the silo dump operator.
//
// Notes:      Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Thu Dec 18 11:50:08 PDT 2003
//
// Modifications:
//   
// ****************************************************************************

class SiloDumpAttributes : public AttributeSubject
{
public:
    SiloDumpAttributes();
    SiloDumpAttributes(const SiloDumpAttributes &obj);
    virtual ~SiloDumpAttributes();

    virtual void operator = (const SiloDumpAttributes &obj);
    virtual bool operator == (const SiloDumpAttributes &obj) const;
    virtual bool operator != (const SiloDumpAttributes &obj) const;

    virtual const std::string TypeName() const;
    virtual bool CopyAttributes(const AttributeGroup *);
    virtual AttributeSubject *CreateCompatible(const std::string &) const;
    virtual AttributeSubject *NewInstance(bool) const;

    // Property selection methods
    virtual void SelectAll();
    void SelectFilename();

    // Property setting methods
    void SetFilename(const std::string &filename_);
    void SetDisplay(bool display_);

    // Property getting methods
    const std::string &GetFilename() const;
          std::string &GetFilename();
    bool              GetDisplay() const;

    // Persistence methods
    virtual bool CreateNode(DataNode *node, bool completeSave, bool forceAdd);
    virtual void SetFromNode(DataNode *node);


    // Keyframing methods
    virtual std::string               GetFieldName(int index) const;
    virtual AttributeGroup::FieldType GetFieldType(int index) const;
    virtual std::string               GetFieldTypeName(int index) const;
    virtual bool                      FieldsEqual(int index, const AttributeGroup *rhs) const;

private:
    std::string filename;
    bool        display;
};

#endif
