#ifndef PROJECTATTRIBUTES_H
#define PROJECTATTRIBUTES_H
#include <string>
#include <AttributeSubject.h>

// ****************************************************************************
// Class: ProjectAttributes
//
// Purpose:
//    Project data from three to two dimensions
//
// Notes:      Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Tue Apr 26 11:32:23 PDT 2005
//
// Modifications:
//   
// ****************************************************************************

class ProjectAttributes : public AttributeSubject
{
public:
    enum ProjectionType
    {
        XYCartesian,
        ZRCylindrical
    };

    ProjectAttributes();
    ProjectAttributes(const ProjectAttributes &obj);
    virtual ~ProjectAttributes();

    virtual ProjectAttributes& operator = (const ProjectAttributes &obj);
    virtual bool operator == (const ProjectAttributes &obj) const;
    virtual bool operator != (const ProjectAttributes &obj) const;

    virtual const std::string TypeName() const;
    virtual bool CopyAttributes(const AttributeGroup *);
    virtual AttributeSubject *CreateCompatible(const std::string &) const;
    virtual AttributeSubject *NewInstance(bool) const;

    // Property selection methods
    virtual void SelectAll();

    // Property setting methods
    void SetProjectionType(ProjectionType projectionType_);

    // Property getting methods
    ProjectionType GetProjectionType() const;

    // Persistence methods
    virtual bool CreateNode(DataNode *node, bool completeSave, bool forceAdd);
    virtual void SetFromNode(DataNode *node);

    // Enum conversion functions
    static std::string ProjectionType_ToString(ProjectionType);
    static bool ProjectionType_FromString(const std::string &, ProjectionType &);
protected:
    static std::string ProjectionType_ToString(int);
public:

    // Keyframing methods
    virtual std::string               GetFieldName(int index) const;
    virtual AttributeGroup::FieldType GetFieldType(int index) const;
    virtual std::string               GetFieldTypeName(int index) const;
    virtual bool                      FieldsEqual(int index, const AttributeGroup *rhs) const;

private:
    int projectionType;
};

#endif
