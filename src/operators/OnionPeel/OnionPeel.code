Target: xml2info
Function: OnionPeelViewerPluginInfo::InitializeOperatorAtts
Declaration: virtual void OnionPeelViewerPluginInfo::InitializeOperatorAtts(...);
Definition:
// ****************************************************************************
//  Method: OnionPeelViewerPluginInfo::InitializeOperatorAtts
//
//  Purpose:
//    Initialize the operator attributes to the default attributes.
//
//  Arguments:
//    atts      The attribute subject to initialize.
//
//  Programmer: kbonnell -- generated by xml2info
//  Creation:   Tue Sep 9 16:04:02 PST 2003
//
//  Modifications:
//    Added code to set the category name and subset name from the plot's
//    SILRestriction. 
//
//    Kathleen Bonnell, Thu Jan 26 07:33:29 PST 2006 
//    Add silTopSet to argslist for GetCollectionIndex. 
//
//    Brad Whitlock, Fri Feb 15 15:32:57 PST 2008
//    Delete silAtts.
//
// ****************************************************************************
#include <avtSIL.h>
#include <avtSILRestriction.h>
#include <CompactSILRestrictionAttributes.h>
#include <ViewerPlot.h>
void
OnionPeelViewerPluginInfo::InitializeOperatorAtts(AttributeSubject *atts,
                                              const ViewerPlot *plot,
                                              const bool fromDefault)
{
    if (fromDefault)
        *(OnionPeelAttributes*)atts = *defaultAtts;
    else
        *(OnionPeelAttributes*)atts = *clientAtts;

    OnionPeelAttributes *opAtts = (OnionPeelAttributes*)atts;


    string categoryName = opAtts->GetCategoryName();
    string subsetName = opAtts->GetSubsetName();
    string defaultName = "Whole";
    string firstCategoryName = defaultName;
    string firstSubsetName = defaultName;

    bool categoryNameValid = false;
    bool subsetNameValid = false;
    avtSILRestriction_p restriction = plot->GetSILRestriction();
    int silTopSet = restriction->GetTopSet();

    // 
    // Determine the first valid category name, and determine if
    // currently set category name is valid. 
    // 
    avtSILSet_p current = restriction->GetSILSet(silTopSet);
    const std::vector<int> &mapsOut = current->GetMapsOut();
    for (size_t j = 0; j < mapsOut.size() && !categoryNameValid; ++j)
    {
        int cIndex = mapsOut[j];
        avtSILCollection_p collection =restriction->GetSILCollection(cIndex);
        if ((collection->GetRole() == SIL_DOMAIN) ||
            (collection->GetRole() == SIL_BLOCK)) 
        {
            if (collection->GetCategory() == categoryName)
            {
                categoryNameValid = true;
            }
            else if (firstCategoryName == defaultName)
            {
                firstCategoryName = collection->GetCategory();
            }
            CompactSILRestrictionAttributes *silAtts = 
                restriction->MakeCompactAttributes();
            const unsignedCharVector &useSet =  silAtts->GetUseSet();
            //
            // Find the first valid subset name, and also determine if
            // the currently set subset name is valid.
            //
            int colIndex = restriction->GetCollectionIndex(
                           collection->GetCategory(), silTopSet);
            avtSILCollection_p collection =
                           restriction->GetSILCollection(colIndex); 
            if (*collection != NULL)
            {
                std::vector<int> sets = collection->GetSubsetList();
                for (size_t i = 0; i < sets.size() && !subsetNameValid; ++i)
                {
                    if (useSet[sets[i]] != 0)
                    {
                        avtSILSet_p set = restriction->GetSILSet(sets[i]);
                        if (set->GetName() == subsetName)
                        {
                            subsetNameValid = true;
                        }
                        else if (firstSubsetName == defaultName)
                        {
                            firstSubsetName = set->GetName();
                        }
                    }
                }
            }

            delete silAtts;
        } 
    }

    // 
    // Use the currently set category and subsets name only if they
    // have they are valid.
    // 
    if (subsetNameValid)
    {
        opAtts->SetSubsetName(subsetName);
        defaultAtts->SetSubsetName(subsetName);
    }
    else 
    {
        opAtts->SetSubsetName(firstSubsetName);
        defaultAtts->SetSubsetName(firstSubsetName);
    }
    if (categoryNameValid)
    {
       opAtts->SetCategoryName(categoryName);
       defaultAtts->SetCategoryName(categoryName);
    }
    else 
    {
        opAtts->SetCategoryName(firstCategoryName);
        defaultAtts->SetCategoryName(firstCategoryName);
    }
}
