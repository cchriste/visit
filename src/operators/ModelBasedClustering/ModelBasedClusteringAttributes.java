// ***************************************************************************
//
// Copyright (c) 2000 - 2014, Lawrence Livermore National Security, LLC
// Produced at the Lawrence Livermore National Laboratory
// LLNL-CODE-442911
// All rights reserved.
//
// This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
// full copyright notice is contained in the file COPYRIGHT located at the root
// of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
//
//  - Redistributions of  source code must  retain the above  copyright notice,
//    this list of conditions and the disclaimer below.
//  - Redistributions in binary form must reproduce the above copyright notice,
//    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
//    documentation and/or other materials provided with the distribution.
//  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
// ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
// LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
// DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
// SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
// CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
// LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
// OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ***************************************************************************

package llnl.visit.operators;

import llnl.visit.AttributeSubject;
import llnl.visit.CommunicationBuffer;
import llnl.visit.Plugin;

// ****************************************************************************
// Class: ModelBasedClusteringAttributes
//
// Purpose:
//    ModelBasedClustering Attributes
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   omitted
//
// Modifications:
//   
// ****************************************************************************

public class ModelBasedClusteringAttributes extends AttributeSubject implements Plugin
{
    private static int ModelBasedClusteringAttributes_numAdditionalAtts = 6;

    // Enum values
    public final static int CLUSTERALGORITHMTYPE_EM = 0;
    public final static int CLUSTERALGORITHMTYPE_ACEM = 1;
    public final static int CLUSTERALGORITHMTYPE_APECM = 2;
    public final static int CLUSTERALGORITHMTYPE_APECMA = 3;
    public final static int CLUSTERALGORITHMTYPE_K_MEANS = 4;


    public ModelBasedClusteringAttributes()
    {
        super(ModelBasedClusteringAttributes_numAdditionalAtts);

        numClusters = 4;
        clusterMethod = CLUSTERALGORITHMTYPE_EM;
        threshold = 1;
        percentile = 0.95;
        var2 = new String("");
        var3 = new String("");
    }

    public ModelBasedClusteringAttributes(int nMoreFields)
    {
        super(ModelBasedClusteringAttributes_numAdditionalAtts + nMoreFields);

        numClusters = 4;
        clusterMethod = CLUSTERALGORITHMTYPE_EM;
        threshold = 1;
        percentile = 0.95;
        var2 = new String("");
        var3 = new String("");
    }

    public ModelBasedClusteringAttributes(ModelBasedClusteringAttributes obj)
    {
        super(ModelBasedClusteringAttributes_numAdditionalAtts);

        numClusters = obj.numClusters;
        clusterMethod = obj.clusterMethod;
        threshold = obj.threshold;
        percentile = obj.percentile;
        var2 = new String(obj.var2);
        var3 = new String(obj.var3);

        SelectAll();
    }

    public int Offset()
    {
        return super.Offset() + super.GetNumAdditionalAttributes();
    }

    public int GetNumAdditionalAttributes()
    {
        return ModelBasedClusteringAttributes_numAdditionalAtts;
    }

    public boolean equals(ModelBasedClusteringAttributes obj)
    {
        // Create the return value
        return ((numClusters == obj.numClusters) &&
                (clusterMethod == obj.clusterMethod) &&
                (threshold == obj.threshold) &&
                (percentile == obj.percentile) &&
                (var2.equals(obj.var2)) &&
                (var3.equals(obj.var3)));
    }

    public String GetName() { return "ModelBasedClustering"; }
    public String GetVersion() { return "1.0"; }

    // Property setting methods
    public void SetNumClusters(int numClusters_)
    {
        numClusters = numClusters_;
        Select(0);
    }

    public void SetClusterMethod(int clusterMethod_)
    {
        clusterMethod = clusterMethod_;
        Select(1);
    }

    public void SetThreshold(double threshold_)
    {
        threshold = threshold_;
        Select(2);
    }

    public void SetPercentile(double percentile_)
    {
        percentile = percentile_;
        Select(3);
    }

    public void SetVar2(String var2_)
    {
        var2 = var2_;
        Select(4);
    }

    public void SetVar3(String var3_)
    {
        var3 = var3_;
        Select(5);
    }

    // Property getting methods
    public int    GetNumClusters() { return numClusters; }
    public int    GetClusterMethod() { return clusterMethod; }
    public double GetThreshold() { return threshold; }
    public double GetPercentile() { return percentile; }
    public String GetVar2() { return var2; }
    public String GetVar3() { return var3; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteInt(numClusters);
        if(WriteSelect(1, buf))
            buf.WriteInt(clusterMethod);
        if(WriteSelect(2, buf))
            buf.WriteDouble(threshold);
        if(WriteSelect(3, buf))
            buf.WriteDouble(percentile);
        if(WriteSelect(4, buf))
            buf.WriteString(var2);
        if(WriteSelect(5, buf))
            buf.WriteString(var3);
    }

    public void ReadAtts(int index, CommunicationBuffer buf)
    {
        switch(index)
        {
        case 0:
            SetNumClusters(buf.ReadInt());
            break;
        case 1:
            SetClusterMethod(buf.ReadInt());
            break;
        case 2:
            SetThreshold(buf.ReadDouble());
            break;
        case 3:
            SetPercentile(buf.ReadDouble());
            break;
        case 4:
            SetVar2(buf.ReadString());
            break;
        case 5:
            SetVar3(buf.ReadString());
            break;
        }
    }

    public String toString(String indent)
    {
        String str = new String();
        str = str + intToString("numClusters", numClusters, indent) + "\n";
        str = str + indent + "clusterMethod = ";
        if(clusterMethod == CLUSTERALGORITHMTYPE_EM)
            str = str + "CLUSTERALGORITHMTYPE_EM";
        if(clusterMethod == CLUSTERALGORITHMTYPE_ACEM)
            str = str + "CLUSTERALGORITHMTYPE_ACEM";
        if(clusterMethod == CLUSTERALGORITHMTYPE_APECM)
            str = str + "CLUSTERALGORITHMTYPE_APECM";
        if(clusterMethod == CLUSTERALGORITHMTYPE_APECMA)
            str = str + "CLUSTERALGORITHMTYPE_APECMA";
        if(clusterMethod == CLUSTERALGORITHMTYPE_K_MEANS)
            str = str + "CLUSTERALGORITHMTYPE_K_MEANS";
        str = str + "\n";
        str = str + doubleToString("threshold", threshold, indent) + "\n";
        str = str + doubleToString("percentile", percentile, indent) + "\n";
        str = str + stringToString("var2", var2, indent) + "\n";
        str = str + stringToString("var3", var3, indent) + "\n";
        return str;
    }


    // Attributes
    private int    numClusters;
    private int    clusterMethod;
    private double threshold;
    private double percentile;
    private String var2;
    private String var3;
}

