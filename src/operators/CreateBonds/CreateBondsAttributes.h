/*****************************************************************************
*
* Copyright (c) 2000 - 2006, The Regents of the University of California
* Produced at the Lawrence Livermore National Laboratory
* All rights reserved.
*
* This file is part of VisIt. For details, see http://www.llnl.gov/visit/. The
* full copyright notice is contained in the file COPYRIGHT located at the root
* of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
*
* Redistribution  and  use  in  source  and  binary  forms,  with  or  without
* modification, are permitted provided that the following conditions are met:
*
*  - Redistributions of  source code must  retain the above  copyright notice,
*    this list of conditions and the disclaimer below.
*  - Redistributions in binary form must reproduce the above copyright notice,
*    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
*    documentation and/or materials provided with the distribution.
*  - Neither the name of the UC/LLNL nor  the names of its contributors may be
*    used to  endorse or  promote products derived from  this software without
*    specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
* ARE  DISCLAIMED.  IN  NO  EVENT  SHALL  THE  REGENTS  OF  THE  UNIVERSITY OF
* CALIFORNIA, THE U.S.  DEPARTMENT  OF  ENERGY OR CONTRIBUTORS BE  LIABLE  FOR
* ANY  DIRECT,  INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
* SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
* CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
* LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
* OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
* DAMAGE.
*
*****************************************************************************/

#ifndef CREATEBONDSATTRIBUTES_H
#define CREATEBONDSATTRIBUTES_H
#include <string>
#include <AttributeSubject.h>

// ****************************************************************************
// Class: CreateBondsAttributes
//
// Purpose:
//    Attributes for the CreateBondsOperator
//
// Notes:      Autogenerated by xml2atts.
//
// Programmer: xml2atts
// Creation:   Tue Aug 29 11:09:26 PDT 2006
//
// Modifications:
//   
// ****************************************************************************

class CreateBondsAttributes : public AttributeSubject
{
public:
    CreateBondsAttributes();
    CreateBondsAttributes(const CreateBondsAttributes &obj);
    virtual ~CreateBondsAttributes();

    virtual CreateBondsAttributes& operator = (const CreateBondsAttributes &obj);
    virtual bool operator == (const CreateBondsAttributes &obj) const;
    virtual bool operator != (const CreateBondsAttributes &obj) const;

    virtual const std::string TypeName() const;
    virtual bool CopyAttributes(const AttributeGroup *);
    virtual AttributeSubject *CreateCompatible(const std::string &) const;
    virtual AttributeSubject *NewInstance(bool) const;

    // Property selection methods
    virtual void SelectAll();
    void SelectElementVariable();
    void SelectAtomicNumber1();
    void SelectAtomicNumber2();
    void SelectMinDist();
    void SelectMaxDist();

    // Property setting methods
    void SetElementVariable(const std::string &elementVariable_);
    void SetAtomicNumber1(const intVector &atomicNumber1_);
    void SetAtomicNumber2(const intVector &atomicNumber2_);
    void SetMinDist(const doubleVector &minDist_);
    void SetMaxDist(const doubleVector &maxDist_);
    void SetSimpleAlgorithmFlag(bool simpleAlgorithmFlag_);
    void SetSimpleMinDistWithH(double simpleMinDistWithH_);
    void SetSimpleMaxDistWithH(double simpleMaxDistWithH_);
    void SetSimpleMinDistNonH(double simpleMinDistNonH_);
    void SetSimpleMaxDistNonH(double simpleMaxDistNonH_);
    void SetMaxBondsClamp(int maxBondsClamp_);

    // Property getting methods
    const std::string  &GetElementVariable() const;
          std::string  &GetElementVariable();
    const intVector    &GetAtomicNumber1() const;
          intVector    &GetAtomicNumber1();
    const intVector    &GetAtomicNumber2() const;
          intVector    &GetAtomicNumber2();
    const doubleVector &GetMinDist() const;
          doubleVector &GetMinDist();
    const doubleVector &GetMaxDist() const;
          doubleVector &GetMaxDist();
    bool               GetSimpleAlgorithmFlag() const;
    double             GetSimpleMinDistWithH() const;
    double             GetSimpleMaxDistWithH() const;
    double             GetSimpleMinDistNonH() const;
    double             GetSimpleMaxDistNonH() const;
    int                GetMaxBondsClamp() const;

    // Persistence methods
    virtual bool CreateNode(DataNode *node, bool completeSave, bool forceAdd);
    virtual void SetFromNode(DataNode *node);


    // Keyframing methods
    virtual std::string               GetFieldName(int index) const;
    virtual AttributeGroup::FieldType GetFieldType(int index) const;
    virtual std::string               GetFieldTypeName(int index) const;
    virtual bool                      FieldsEqual(int index, const AttributeGroup *rhs) const;

private:
    std::string  elementVariable;
    intVector    atomicNumber1;
    intVector    atomicNumber2;
    doubleVector minDist;
    doubleVector maxDist;
    bool         simpleAlgorithmFlag;
    double       simpleMinDistWithH;
    double       simpleMaxDistWithH;
    double       simpleMinDistNonH;
    double       simpleMaxDistNonH;
    int          maxBondsClamp;
};

#endif
