// ***************************************************************************
//
// Copyright (c) 2000 - 2008, Lawrence Livermore National Security, LLC
// Produced at the Lawrence Livermore National Laboratory
// LLNL-CODE-400142
// All rights reserved.
//
// This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
// full copyright notice is contained in the file COPYRIGHT located at the root
// of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
//
// Redistribution  and  use  in  source  and  binary  forms,  with  or  without
// modification, are permitted provided that the following conditions are met:
//
//  - Redistributions of  source code must  retain the above  copyright notice,
//    this list of conditions and the disclaimer below.
//  - Redistributions in binary form must reproduce the above copyright notice,
//    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
//    documentation and/or other materials provided with the distribution.
//  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
// ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
// LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
// DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
// SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
// CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
// LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
// OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ***************************************************************************

package llnl.visit.operators;

import llnl.visit.AttributeSubject;
import llnl.visit.CommunicationBuffer;
import llnl.visit.Plugin;
import java.lang.Integer;
import java.util.Vector;
import java.lang.Double;

// ****************************************************************************
// Class: CreateBondsAttributes
//
// Purpose:
//    Attributes for the CreateBondsOperator
//
// Notes:      Autogenerated by xml2java.
//
// Programmer: xml2java
// Creation:   Mon Feb 11 16:38:33 PST 2008
//
// Modifications:
//   
// ****************************************************************************

public class CreateBondsAttributes extends AttributeSubject implements Plugin
{
    public CreateBondsAttributes()
    {
        super(6);

        elementVariable = new String("element");
        atomicNumber1 = new Vector();
        atomicNumber1.addElement(new Integer(0));
        atomicNumber1.addElement(new Integer(-1));
        atomicNumber2 = new Vector();
        atomicNumber2.addElement(new Integer(-1));
        atomicNumber2.addElement(new Integer(-1));
        minDist = new Vector();
        minDist.addElement(new Double(0.4));
        minDist.addElement(new Double(0.4));
        maxDist = new Vector();
        maxDist.addElement(new Double(1.2));
        maxDist.addElement(new Double(1.9));
        maxBondsClamp = 10;
    }

    public CreateBondsAttributes(CreateBondsAttributes obj)
    {
        super(6);

        int i;

        elementVariable = new String(obj.elementVariable);
        atomicNumber1 = new Vector();
        for(i = 0; i < obj.atomicNumber1.size(); ++i)
        {
            Integer iv = (Integer)obj.atomicNumber1.elementAt(i);
            atomicNumber1.addElement(new Integer(iv.intValue()));
        }
        atomicNumber2 = new Vector();
        for(i = 0; i < obj.atomicNumber2.size(); ++i)
        {
            Integer iv = (Integer)obj.atomicNumber2.elementAt(i);
            atomicNumber2.addElement(new Integer(iv.intValue()));
        }
        minDist = new Vector(obj.minDist.size());
        for(i = 0; i < obj.minDist.size(); ++i)
        {
            Double dv = (Double)obj.minDist.elementAt(i);
            minDist.addElement(new Double(dv.doubleValue()));
        }

        maxDist = new Vector(obj.maxDist.size());
        for(i = 0; i < obj.maxDist.size(); ++i)
        {
            Double dv = (Double)obj.maxDist.elementAt(i);
            maxDist.addElement(new Double(dv.doubleValue()));
        }

        maxBondsClamp = obj.maxBondsClamp;

        SelectAll();
    }

    public boolean equals(CreateBondsAttributes obj)
    {
        int i;

        // Create the return value
        return ((elementVariable == obj.elementVariable) &&
                (atomicNumber1 == obj.atomicNumber1) &&
                (atomicNumber2 == obj.atomicNumber2) &&
                (minDist == obj.minDist) &&
                (maxDist == obj.maxDist) &&
                (maxBondsClamp == obj.maxBondsClamp));
    }

    public String GetName() { return "CreateBonds"; }
    public String GetVersion() { return "1.0"; }

    // Property setting methods
    public void SetElementVariable(String elementVariable_)
    {
        elementVariable = elementVariable_;
        Select(0);
    }

    public void SetAtomicNumber1(Vector atomicNumber1_)
    {
        atomicNumber1 = atomicNumber1_;
        Select(1);
    }

    public void SetAtomicNumber2(Vector atomicNumber2_)
    {
        atomicNumber2 = atomicNumber2_;
        Select(2);
    }

    public void SetMinDist(Vector minDist_)
    {
        minDist = minDist_;
        Select(3);
    }

    public void SetMaxDist(Vector maxDist_)
    {
        maxDist = maxDist_;
        Select(4);
    }

    public void SetMaxBondsClamp(int maxBondsClamp_)
    {
        maxBondsClamp = maxBondsClamp_;
        Select(5);
    }

    // Property getting methods
    public String GetElementVariable() { return elementVariable; }
    public Vector GetAtomicNumber1() { return atomicNumber1; }
    public Vector GetAtomicNumber2() { return atomicNumber2; }
    public Vector GetMinDist() { return minDist; }
    public Vector GetMaxDist() { return maxDist; }
    public int    GetMaxBondsClamp() { return maxBondsClamp; }

    // Write and read methods.
    public void WriteAtts(CommunicationBuffer buf)
    {
        if(WriteSelect(0, buf))
            buf.WriteString(elementVariable);
        if(WriteSelect(1, buf))
            buf.WriteIntVector(atomicNumber1);
        if(WriteSelect(2, buf))
            buf.WriteIntVector(atomicNumber2);
        if(WriteSelect(3, buf))
            buf.WriteDoubleVector(minDist);
        if(WriteSelect(4, buf))
            buf.WriteDoubleVector(maxDist);
        if(WriteSelect(5, buf))
            buf.WriteInt(maxBondsClamp);
    }

    public void ReadAtts(int n, CommunicationBuffer buf)
    {
        for(int i = 0; i < n; ++i)
        {
            int index = (int)buf.ReadByte();
            switch(index)
            {
            case 0:
                SetElementVariable(buf.ReadString());
                break;
            case 1:
                SetAtomicNumber1(buf.ReadIntVector());
                break;
            case 2:
                SetAtomicNumber2(buf.ReadIntVector());
                break;
            case 3:
                SetMinDist(buf.ReadDoubleVector());
                break;
            case 4:
                SetMaxDist(buf.ReadDoubleVector());
                break;
            case 5:
                SetMaxBondsClamp(buf.ReadInt());
                break;
            }
        }
    }


    // Attributes
    private String elementVariable;
    private Vector atomicNumber1; // vector of Integer objects
    private Vector atomicNumber2; // vector of Integer objects
    private Vector minDist; // vector of Double objects
    private Vector maxDist; // vector of Double objects
    private int    maxBondsClamp;
}

