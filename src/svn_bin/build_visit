#!/bin/bash
# *****************************************************************************
#   Script: build_visit
#
#   Purpose:
#       A script that performs a complete build of VisIt and its support
#       libraries.  The script will detect if support libraries have already
#       been built and, if so, use those pre-built libraries.
#
#   Warning:
#       This script is only expected to work for Linux, and Darwin systems.
#       If you need to build VisIt for another platform, you should consult
#       the BUILD_NOTES that come with the VisIt source.  That document
#       contains instructions on how to build VisIt and its third party
#       libraries.
#
#   This script has been tested and is known to work with the following OS/
#   compiler combinations:
#
#	OS	Hardware	Compiler	Machine
#	-----	--------	--------	-------
#       RHEL3,	x86,		GCC 3.4.6	staples.llnl.gov
#       RHEL3, 	x86,		GCC 3.2.3	hoth.llnl.gov
#       CHAOS, 	x86_64,		GCC 3.4.5	vertex.llnl.gov
#       CHAOS,	ia64, 		GCC 3.4.5	thunder.llnl.gov
#       SuSE,   x86_64,		GCC 4.0.2	antares.lbl.gov
#       SuSE,   x86_64,		GCC 4.1.0	octagon.lbl.gov
#       MacOSX  i386,		GCC 4.0.1	tread.llnl.gov
#       MacOSX  ppc,		GCC 4.0.1	snailbait.llnl.gov
#
#   It is believed that this script will also work with other Linux variations.
#   Please send feedback to visit-help@llnl.gov if you run into problems 
#   so that this script can be improved in the future.  If you have built
#   VisIt using this script on an OS/hardware/compiler combination not listed
#   above, please send a note to visit-help@llnl.gov, so we can add that
#   information to the script.
#
#   Setup:
#       This script assumes you have downloaded the VisIt source code and 
#       the necessary third party libraries and that they are placed in the
#       current directory.  If it does not locate these libraries, it will
#       try to download them.
#       You must have:
#          Qt		qt-x11-free-3.3.8.tar.gz
#                    or qt-mac-free-3.3.8.tar.gz (Mac)
#          Mesa         MesaLib-6.4.2.tar.gz
#                    or Mesa-5.0-mangled.tar.gz (Linux)
#          Python	Python-2.5.tgz
#          VTK		vtk-5.0.0c.tar.gz
#          CMake	cmake-2.4.5.tar.gz
#          Silo		silo-4.6.1.tar.gz
#
#        The following optional libraries need to be in the current directory
#        to be built. You must explicitly select which option library to
#        build, either through run string options or the dialog gui. If
#        the tarballs don't exist they will not be built or downloaded
#           Library  Version  Source Tarball Name    Command Option
#           Boxlib   2.5      boxlib.tar.gz          -b
#           CCMIO    2.6.1    libccmio-2.6.1.tar.gz  -C
#           CFITSIO  3006     cfitsio3006.tar.gz     -f
#           CGNS     2.4.3    cgnslib_2.4-3.tar.gz   -c
#           ExodusII 4.46     exodusii-4.46.tar.gz   -e
#           GDAL     1.3.2    gdal-1.3.2.tar.gz      -g (no AIX)
#           H5part   1.4.0    H5Part-1.4.0.tar.gz    -r
#           HDF4     2.4.1    HDF4.2r1.tar.gz        -4
#           HDF5     1.6.5    hdf5-1.6.5.tar.gz      -5
#           Mili     1.10     mili-1.10a.tar.gz      -m (internal)
#           NetCDF   3.6.0    netcdf.tar.gz          -n
#           szip     2.1      szip-2.1.tar.gz
#
#         Experimental (internal)
#           ITAPS             ITAPS-MOAB-26Jun07.tar.gz -I
#           ViSUS             visus_26Feb07.tar.gz      -V
#
#   Layout:
#     Section 1:                    setting up inputs/environment variables
#     Function 1, check_files:      ensures input files are available
#     Function 2.0, check_more_options:edit option parameters
#     Function 2.1, check_parallel: parallel build information
#     Function 2.2, check_variables:edit variable build information
#     Function 3, build_mesa:       build mangled Mesa
#     Function 4, build_qt:         build Qt
#     Function 5, build_cmake:      build CMake (like configure, for VTK)
#     Function 6, build_vtk:        build VTK
#     Function 7, build_python:     build Python
#     Function 8.0, build_szip:     build SZIP
#     Function 8.1, build_hdf5:     build HDF5
#     Function 8.2, build_mili:     build Mili
#     Function 8.3, build_hdf4:     build HDF4
#     Function 8.4, build_netcdf:   build NetCDF
#     Function 8.5, build_cgns:     build CGNS
#     Function 8.6, build_gdal:     build GDAL
#     Function 8.7, build_exodus:   build Exodus
#     Function 8.8, build_boxlib:   build Boxlib
#     Function 8.9, build_cfitsio:  build CFITSIO
#     Function 8.10, build_h5part:  build H5Part
#     Function 8.11, build_ccmio:   build CCMIO
#     Function 8, build_silo:       build Silo
#     Function 9, build_hostconf:   build the config-site/host.conf file
#     Function 9.1, build_visit:    build the VisIt source code
#     Section 2:                    oversees build process (calls Functions 1-8)
#
#   Programmer: Hank Childs (with large portions borrowed from BUILD_NOTES,
#                            which is maintained by Eric Brugger)
#   Creation:   October 21, 2006
#
#   Modifications:
#
#     Hank Childs, Mon Oct 30 17:18:24 PST 2006
#     Fixed two bugs: (1) forgot to check return value of function that checks
#     to make sure third party libraries are there.  (2) construction of
#     "visit-arch" string involved undefined variable, which caused problems
#     on some platforms.
#
#     Brad Whitlock, Fri Dec 15 11:51:40 PDT 2006
#     Added support for Python 2.5.
#
#     Hank Childs, Sun Mar  4 11:14:54 PST 2007
#     Add support for parallelization.  Also misc bug fixes.
#
#     Brad Whitlock, Fri Apr 6 14:09:00 PST 2007
#     Added support for downloading missing source files and for graphical
#     progress dialogs and menus for making choices about parallel, etc.
#
#     Thomas R. Treadway, Mon Apr 16 09:01:29 PDT 2007
#     Added Gunther H. Weber changes for MacOS X support.
#     Tuned for building under both i386 and ppc.
#
#     Thomas R. Treadway, Wed Apr 25 13:22:57 PDT 2007
#     Added optional 3rd-party build information
#     New argument options, dialog checklist
#     Reordered logic to better support more architectures
#     Went back to the HDF4.2r1.tar.gz release ffor the Mac.
#
#     Thomas R. Treadway, Mon May  7 16:51:58 PDT 2007
#     More bug fixes, and argument options.
#
#     Thomas R. Treadway, Thu May 17 14:31:47 PDT 2007
#     Support for multiple architectures
#     Support bz2 uncompression
#     Added a variable editing dialog
#
#     Thomas R. Treadway, Wed May 23 17:04:07 PDT 2007
#     Using common libraries everywhere
#     Now using stable Mesa-6.4.2, cmake-2.4.5
#     Changes to support AIX (except for gdal)
#     Added a MAKE variable
#
#     Thomas R. Treadway, Thu May 24 16:26:37 PDT 2007
#     Added an option to disable building VisIt
#     Missing required libraries cause immediate abort
#
#     Thomas R. Treadway, Fri May 25 15:41:42 PDT 2007
#     Added an option to build from svn
#     Added a build_hostconf function to create the host conf file
#
#     Thomas R. Treadway, Thu May 31 16:05:36 PDT 2007
#     Modified Mesa install for 64-bit linux
#     Change Boxlib install path back to the legacy path
#
#     Cyrus Harrison, Mon Jun 11 08:41:00 PDT 2007
#     Added support for SVN_NERSC_NAME for svn mode
#
#     Thomas R. Treadway, Thu May 31 16:05:36 PDT 2007
#     Modified access control on 3rd party libraries.
#
#     Hank Childs, Fri Jul  6 11:53:05 PDT 2007
#     Fix inconsistency with Python.  It installs Python in a location that
#     it can't find in later builds.  Also add a no-graphics mode (-z).  Also
#     don't prompt for Qt license if it is already built.
#
#     Thomas R. Treadway, Fri Jul  6 12:58:58 PDT 2007
#     Added option to redirect build log to /dev/tty
#     Allow a mix of SVN for 3rd party libraries, and tar file for VisIt
#     Added a skip of required 3rd party libraries.
#
#     Thomas R. Treadway, Mon Jul  9 17:26:26 PDT 2007
#     Updated to VisIt 1.6.1
#     Corrects some VisIt tarball vs SVN problems
#
#     Cyrus Harrison, Mon Jul  9 14:46:11 PDT 2007
#     Switched from "svn export" to "svn cat" b/c of problems with old svn
#     clients.
#
#     Thomas R. Treadway, Wed Jul 11 12:35:37 PDT 2007
#     Cleanup and fix of many small errors
#     Addition of H5Part third party library
#
#     Thomas R. Treadway, Fri Jul 13 11:19:32 PDT 2007
#     Added options for VisIt builds with --enable-visitmodule and
#     --enable-java
#
#     Thomas R. Treadway, Thu Jul 26 14:53:18 PDT 2007
#     Modified sources path in VisIt tar file.
#     Changed link options on Mac
#
#     Kathleen Bonnell, Mon Aug 27 08:42:06 PDT 2007
#     Changed -DMANGLED_OSMESA_INCLUDE to -DMANGLED_OSMESA_INCLUDE_DIR 
#     in build_vtk. 
#     
#     Gunther H. Weber, Wed Aug 29 12:34:58 PDT 2007
#     - Added rv=0 to beginning of check_parallel to fix error when trying
#       to build a parallel version of VisIt.
#     - Added missing VISITARCH component to path that is used for checking
#       if Mili was already built.
#     - Add processor architecture for Linux builds to VISITARCH
#     - Do not specify a username for svn checkout if SVN_NERSC_USERNAME is
#       not set, so that one can use .ssh/config for that purpose
#     - Fix gcc version detection if ./configure line containts "version"
#     
#     Hank Childs, Mon Sep 10 12:33:06 PDT 2007
#     If you are building only an optional third party library, then don't
#     download Qt, VTK, Mesa, VisIt source, etc.
#
#     Hank Childs, Thu Sep 13 06:15:07 PDT 2007
#     If you are building Exodus, then build NetCDF too.  Otherwise the build
#     will fail.  Also, install Exodus using relative paths for its symlinks.
#
#     Thomas R. Treadway, Thu Jul 26 14:53:18 PDT 2007
#     szip library now required with HDF4 and HDF5
#     Modified parallel options handeling, allowing non-GUI setting
#
#     Thomas R. Treadway, Sun Oct  7 19:21:48 PDT 2007
#     Modify H5Part dynamic library build for PPC Mac
#     Fixed a few typos
#
#     Hank Childs, Sat Oct 13 08:09:41 PDT 2007
#     Commit numerous fixes pointed out by Matthew Wheeler.  Highlights include
#     improved SunOS and AIX support.
#
#     Thomas R. Treadway, Fri Oct 19 13:37:00 PDT 2007
#     Fixes for Linux build:
#     - forcing static libraries in szip and hdf5
#     - corrected problems with szip in Silo build
#     Added information about visit-bin-dist and visit-install
#
#     Hank Childs, Mon Oct 22 10:09:42 PDT 2007
#     Fix typo.  Compiler flage -> Compiler flags.
#
#     Thomas R. Treadway, Fri Oct 19 13:37:00 PDT 2007
#     Added patches to support MacOS X 10.5. Note Qt-3.3.8 is not
#     supported on MacOS X 10.5 and will not build, so use a 10.4 
#     (or earlier) built version of Qt and install it in
#     $VISITDIR/qt/${QT_VERSION}/$VISITARCH
#
#     Hank Childs, Thu Nov 15 09:14:58 PST 2007
#     Update references from version 1.6.1 to version 1.7.
#
#     Hank Childs, Thu Nov 15 15:01:07 PST 2007
#     Tweak name of visit file so it automatically gets updated when version
#     changes.
#
#     Thomas R. Treadway, Fri Nov 15 16:37:00 PDT 2007
#     Modified visit file to allow interactive updating.
#
#     Gunther H. Weber, Mon Nov 19 19:03:24 PST 2007
#     Patch Qt to build on MacOS X 10.5 (based on patches used by the Fink
#     project). 
#
#     Thomas R. Treadway, Mon Nov 26 10:03:38 PST 2007
#     Changed web pages from www.llnl.gov/VisIt to wci.llnl.gov/codes/visit 
#
#     Sean Ahern, Wed Jan 16 15:47:12 EST 2008
#     Fixed spelling, grammar, general prettying-up.
#
#     Thomas R. Treadway, Thu Jan  3 17:24:29 PST 2008
#     Put a check for wget version 1.8
#     Added explicit check for mesa 6.4.2
#
#     Thomas R. Treadway, Fri Jan  4 10:23:18 PST 2008
#     Linux defaults to Mesa-5.0, because of driver problems
#
#     Eric Brugger, Fri Feb  1 08:57:04 PST 2008
#     Changed the version to 1.8.0.
#
#     Hank Childs, Fri Feb  1 15:06:35 PST 2008
#     Change MESA_TARGET from linux-x86 to linux, since linux-x86 does not
#
#     Thomas R. Treadway, Fri Feb  1 15:52:08 PST 2008
#     Updated Silo release to 4.6.1
#     Updated H5Part release to 1.4.0
#     Added --enable-slivr support
#     Added support for CCMIO library
#     Hooks for ITAPS, and ViSUS libraries, but no implementation
#     Modified the third party untar behavior
#
#     Hank Childs, Mon Feb  4 16:59:30 PST 2008
#     Make it obvious that Mili cannot be downloaded from the web.
#
#     Hank Childs, Wed Feb  6 11:27:24 PST 2008
#     1) Rename some variables that are conflicting with names used elsewhere.
#     (QT_DIR by Linux, MILI_DIR by VisIt's configure script.)
#     2) Do not do a parallel build for H5_part.
#     
#     Thomas R. Treadway, Wed Feb  6 15:08:07 PST 2008
#     Corrected the silo build
#     Added an explicit CMake build step.
#     Added a parallel make option
#     
#     Thomas R. Treadway, Thu Feb  7 16:58:19 PST 2008
#     Corrected the ccmio build for x86_64
#     
#     Thomas R. Treadway, Fri Feb  8 15:30:08 PST 2008
#     Added David Bremer's patch for fixing QT's OpenGL path problems.
#     
#     Hank Childs, Sat Feb  9 14:18:54 PST 2008
#     Change clearcase_bin to svn_bin in help section.
#
#     Hank Childs, Sat Feb  9 15:23:42 PST 2008
#     Rename components directory to avt.
#
#     Brad Whitlock, Wed Mar 12 11:15:09 PDT 2008
#     Fixed Mesa build on AIX.
#
#     Kathleen Bonnell, Wed Mar 26 17:10:12 PDT 2008 
#     Moved calls to check_more_options, check_parallel and check_variables
#     to BEFORE THIRD_PARTY_PATH is used to set VISITDIR.
#
#     Gabe Rockefeller & Steven Diehl, Mon March 24 15:00 PST 2008
#     Fixed bug for setting the default values for parallel build flag. 
#     Now uses mpic++ instead of mpicc, since these flags get passed into
#     g++ during the build process.
#
#     Thomas R. Treadway, Thu Mar 27 12:16:19 PDT 2008
#     Implemented the above.
#     Merged in 1.8.1 changes, which included:
#     - Added support to CCMIO for i386 MacOS X10.5, and 
#       PPC MacOS X10.5, 10.4, and 10.3 
#     - Patch for MacOS X10.5's problem with GLU during CCM database build
#     Removed redundent THIRD_PARTY_PATH from GUI, rename More Variable
#     Settings GUI screen.
#     Changed version to 1.9.0.
#     Fixed a few typos.
#
#     Brad Whitlock, Fri Apr  4 10:38:58 PDT 2008
#     Fixed a bug with building Silo on the Mac when HDF5 is not used.
#
#     Thomas R. Treadway, Wed Apr 16 13:14:07 PDT 2008
#     Modified parallel build routine, check for mpic++, mpicxx, mpiCC.
#     Added option to display user settable environment variables
#
#     Gunther H. Weber, Wed Apr 16 16:26:21 PDT 2008
#     Check whether Qt configure enables OpenGL support and fail if it
#     does not.
#
#     Thomas R. Treadway, Fri Apr 18 14:03:06 PDT 2008
#     Correct a printout problem with the -E, display user settable 
#     environment variables option. Added PAR_INCLUDE and PAR_LIBS 
#     to the variable list.
#
#     Thomas R. Treadway, Wed Apr 23 15:14:43 PDT 2008
#     Fixed dialog text input box processing in parallel build dialog
#     Modified Variable setting menu
#     Changed implemented in More options and moved into a function
#     Added a GUI, and -R option to specify an VisIt SVN revision argument
#
#     Thomas R. Treadway, Mon May  5 14:14:11 PDT 2008
#     Check for wget version 9.x, because SSL options different from V10.
#     Corrected problem with having QTDIR defined
#
#     Sean Ahern, Tue May  6 12:00:35 EDT 2008
#     Made the Qt OpenGL patch apply more generally to 64-bit platforms.
#
#     Thomas R. Treadway, Wed May  7 15:15:58 PDT 2008
#     Added better logic for VISITARCH variable feedback.
#
#     Thomas R. Treadway, Tue May 13 16:24:20 PDT 2008
#     Fixed CCMIO library creation for Darwin.
#     Commented out the SETPGRP_HAVE_ARG fix.
#
#     Thomas R. Treadway, Mon May 19 12:16:21 PDT 2008
#     Support for poor MacOS X 10.3 and C99 additions.
#
# *****************************************************************************
#
# *************************************************************************** #
#                       Section 1, setting up inputs                          #
# --------------------------------------------------------------------------- #
# This section sets up the inputs to the VisIt script.  This is where you can #
# specify which compiler to use, which versions of the third party libraries, #
# etc.  Note that this script is really only known to work with gcc.          #
# *************************************************************************** #

export OPSYS=${OPSYS-$(uname -s)}
export PROC=${PROC-$(uname -p)}
export REL=${REL-$(uname -r)}
# Determine architecture
if [[ "$OPSYS" == "Darwin" ]]; then
   export ARCH=${ARCH-"${PROC}-apple-darwin${REL%%.*}"}
#  export VISITARCH=${VISITARCH-${ARCH}}
   export SO_EXT="dylib"
   VER=$(uname -r)
# Check for Panther, because MACOSX_DEPLOYMENT_TARGET will default to 10.1
   if (( ${VER%%.*} < 8 )) ; then
      export MACOSX_DEPLOYMENT_TARGET=10.3
   elif [[ ${VER%%.*} == 8 ]] ; then
      export MACOSX_DEPLOYMENT_TARGET=10.4
   elif [[ ${VER%%.*} == 9 ]] ; then
      export MACOSX_DEPLOYMENT_TARGET=10.5
   else
      export MACOSX_DEPLOYMENT_TARGET=10.5
   fi
   export C_COMPILER=${C_COMPILER-"gcc"}
   export CXX_COMPILER=${CXX_COMPILER-"g++"}
   export C_OPT_FLAGS=${C_OPT_FLAGS-"-O2 -fno-common -fexceptions"}
   export CXX_OPT_FLAGS=${CXX_OPT_FLAGS-"-O2 -fno-common -fexceptions"}
   export MESA_TARGET=${MESA_TARGET-"darwin"}
   export QT_PLATFORM=${QT_PLATFORM-"macx-g++"}
elif [[ "$OPSYS" == "Linux" ]]; then
   export ARCH=${ARCH-"linux-$(uname -m)"} # You can change this to say RHEL, SuSE, Fedora.
   export SO_EXT="so"
   if [[ "$(uname -m)" == "i386" ]] ; then
###   export MESA_TARGET=${MESA_TARGET-"linux-x86"} # Mesa-6.x
      export MESA_TARGET=${MESA_TARGET-"linux"}
   elif [[ "$(uname -m)" == "i686" ]] ; then
###   export MESA_TARGET=${MESA_TARGET-"linux-x86"} # Mesa-6.x
      export MESA_TARGET=${MESA_TARGET-"linux"}
   elif [[ "$(uname -m)" == "x86_64" ]] ; then
      C_OPT_FLAGS="$C_OPT_FLAGS -m64 -fPIC"
      CXX_OPT_FLAGS="$CXX_OPT_FLAGS -m64 -fPIC"
###   export MESA_TARGET=${MESA_TARGET-"linux-x86-64"} # Mesa-6.x
      export MESA_TARGET=${MESA_TARGET-"linux"}
      QT_PLATFORM="linux-g++-64"
   elif [[ "$(uname -m)" == "ia64" ]] ; then
      C_OPT_FLAGS="$C_OPT_FLAGS -fPIC"
      CXX_OPT_FLAGS="$CXX_OPT_FLAGS -fPIC"
      QT_PLATFORM="linux-g++-64"
   fi
   export C_COMPILER=${C_COMPILER-"gcc"}
   export CXX_COMPILER=${CXX_COMPILER-"g++"}
   export C_OPT_FLAGS=${C_OPT_FLAGS-"-O2"}
   export CXX_OPT_FLAGS=${CXX_OPT_FLAGS-"-O2"}
   export MESA_TARGET=${MESA_TARGET-"linux"}
   export QT_PLATFORM=${QT_PLATFORM-"linux-g++"}
elif [[ "$OPSYS" == "AIX" ]]; then
   export ARCH="aix" # You can change this to say RHEL, SuSE, Fedora, etc.
   export SO_EXT="so"
   export C_COMPILER=${C_COMPILER-"xlc"}
   export CXX_COMPILER=${CXX_COMPILER-"xlC"}
   export C_OPT_FLAGS=${C_OPT_FLAGS-"-O2"}
   export CXX_OPT_FLAGS=${CXX_OPT_FLAGS-"-O2"}
   export MAKE=${MAKE-"gmake"}
   export MESA_TARGET=${MESA_TARGET-"aix"}
   export QT_PLATFORM=${QT_PLATFORM-"aix-xlc"}
elif [[ "$OPSYS" == "IRIX64" ]]; then
   export ARCH="irix64" # You can change this to say RHEL, SuSE, Fedora, etc.
   export SO_EXT="so"
   export C_COMPILER=${C_COMPILER-"gcc"}
   export CXX_COMPILER=${CXX_COMPILER-"g++"}
   export C_OPT_FLAGS=${C_OPT_FLAGS-"-O2"}
   export CXX_OPT_FLAGS=${CXX_OPT_FLAGS-"-O2"}
   export MAKE=${MAKE-"gmake"}
   export MESA_TARGET=${MESA_TARGET-"irix6-64-dso"}
elif [[ "$OPSYS" == "SunOS" ]]; then
   export ARCH=${ARCH-"sunos5"}
   export SO_EXT="so"
   export C_COMPILER=${C_COMPILER-"gcc"}
   export CXX_COMPILER=${CXX_COMPILER-"g++"}
   export C_OPT_FLAGS=${C_OPT_FLAGS-"-O2"}
   export CXX_OPT_FLAGS=${CXX_OPT_FLAGS-"-O2"}
   export MAKE=${MAKE-"make"}
   export MESA_TARGET=${MESA_TARGET-"sunos5-gcc"}
   export QT_PLATFORM="solaris-g++"
else
   export ARCH=${ARCH-"linux-$(uname -m)"} # You can change this to say RHEL, SuSE, Fedora.
   export SO_EXT="so"
   if [[ "$(uname -m)" == "x86_64" ]] ; then
      C_OPT_FLAGS="$C_OPT_FLAGS -m64 -fPIC"
      CXX_OPT_FLAGS="$CXX_OPT_FLAGS -m64 -fPIC"
      QT_PLATFORM="linux-g++-64"
   fi
   if [[ "$(uname -m)" == "ia64" ]] ; then
      C_OPT_FLAGS="$C_OPT_FLAGS -fPIC"
      CXX_OPT_FLAGS="$CXX_OPT_FLAGS -fPIC"
      QT_PLATFORM="linux-g++-64"
   fi
   export C_COMPILER=${C_COMPILER-"gcc"}
   export CXX_COMPILER=${CXX_COMPILER-"g++"}
   export C_OPT_FLAGS=${C_OPT_FLAGS-"-O2"}
   export CXX_OPT_FLAGS=${CXX_OPT_FLAGS-"-O2"}
   export QT_PLATFORM=${QT_PLATFORM-"linux-g++"}
fi
export MAKE=${MAKE-"make"}
export THIRD_PARTY_PATH=${THIRD_PARTY_PATH-"./visit"}
export GROUP=${GROUP-"visit"}
export LOG_FILE=${LOG_FILE-"build_visit_log"}
export SVNREVISION=${SVNREVISION-""}
# Created a temporary value because the user can override most of 
# the components, which forr the GUI happens at a later time.
# the tmp value is useful for user feedback.
if [[ $VISITARCH == "" ]] ; then
    export VISITARCHTMP=${ARCH}_${C_COMPILER}
    if [[ "$CXX_COMPILER" == "g++" ]] ; then
        VERSION=$(g++ -v 2>&1 | grep "gcc version" | cut -d' ' -f3)
        if [[ ${#VERSION} == 5 ]] ; then
            VISITARCHTMP=${VISITARCHTMP}-${VERSION}
        fi
    fi
else
# use environment variable value
    export VISITARCHTMP=$VISITARCH
fi

#
# OPTIONS
#
export DO_HDF4="no"
export ON_HDF4="off"
export DO_HDF5="no"
export ON_HDF5="off"
export DO_BOXLIB="no"
export ON_BOXLIB="off"
export DO_CGNS="no"
export ON_CGNS="off"
export DO_DEBUG="no"
export ON_DEBUG="off"
export DO_EXODUS="no"
export ON_EXODUS="off"
export DO_CFITSIO="no"
export ON_CFITSIO="off"
export DO_GDAL="no"
export ON_GDAL="off"
export ABS_PATH="no"
export ON_ABS_PATH="off"
export DO_VISIT="yes"
export ON_VISIT="on"
export DO_REQUIRED_THIRD_PARTY="yes"
export ON_THIRD_PARTY="on"
export DO_GROUP="no"
export ON_GROUP="off"
export DO_MILI="no"
export ON_MILI="off"
export DO_NETCDF="no"
export ON_NETCDF="off"
export DO_LOG="no"
export ON_LOG="off"
parallel="no"
ON_parallel="off"
export DO_H5PART="no"
export ON_H5PART="off"
export DO_SVN="no"
export ON_SVN="off"
export DO_REVISION="no"
export ON_REVISION="off"
USE_VISIT_FILE="no"
ON_USE_VISIT_FILE="off"
export DO_PATH="no"
export ON_PATH="off"
export DO_VERSION="no"
export ON_VERSION="off"
export DO_MODULE="no"
export ON_MODULE="off"
export DO_VERBOSE="no"
export ON_VERBOSE="off"
export DO_JAVA="no"
export ON_JAVA="off"
export DO_SILO="yes"
export ON_SILO="on"
export DO_SZIP="no"
export ON_SZIP="off"
export DO_CCMIO="no"
export ON_CCMIO="off"
export DO_ITAPS="no"
export ON_ITAPS="off"
export DO_SLIVR="no"
export ON_SLIVR="off"
export DO_VISUS="no"
export ON_VISUS="off"
GRAPHICAL="yes"
ON_GRAPHICAL="on"
verify="no"
ON_verify="off"
export DO_OPTIONAL="yes"
export ON_OPTIONAL="on"
export DO_MORE="no"
export ON_MORE="off"

#PAR_INCLUDE="-I/usr/lib/mpi/gcc/mvapich-gen2/include"
#PAR_LIBS="-L/usr/lib/mpi/gcc/mvapich-gen2/lib -Wl,-rpath=/usr/lib/mpi/gcc/mvapich-gen2/lib/shared -lmpich -libverbs -lpthread -lsysfs -ldl"

# Setup svn path: use SVN_NERSC_NAME if set
if test -z "$SVN_NERSC_NAME" ; then
   export SVN_ROOT_PATH="svn+ssh://svn.nersc.gov/svn/visit"
else
   export SVN_ROOT_PATH="svn+ssh://$SVN_NERSC_NAME@svn.nersc.gov/svn/visit"
fi

if [[ "$OPSYS" != "Darwin" ]]; then
    WGET_MINOR_VERSION=$(wget --version| head -n 1|cut -d. -f 2)
    # version 1.7 pre-dates ssl integration
    if [[ "${WGET_MINOR_VERSION}" == "8" ]] ; then
       export WGET_OPTS=${WGET_OPTS=""}
    elif [[ "${WGET_MINOR_VERSION}" == "9" ]] ; then
       export WGET_OPTS=${WGET_OPTS="--sslcheckcert=0"}
    else
       export WGET_OPTS=${WGET_OPTS-"--no-check-certificate"}
    fi
fi
#
# TARBALL LOCATIONS AND VERSIONS
#
if [[ "$VISIT_FILE" != "" ]] ; then
  USE_VISIT_FILE="yes"
  ON_USE_VISIT_FILE="on"
fi
export VISIT_VERSION=${VISIT_VERSION-"1.9.0"}
export VISIT_FILE=${VISIT_FILE-"visit${VISIT_VERSION}.tar.gz"}

export VTK_FILE=${VTK_FILE-"vtk-5.0.0c.tar.gz"}
export VTK_VERSION=${VTK_VERSION-"5.0.0c"}
export VTK_DIR=${VTK_DIR-"VTK"}

export CMAKE_FILE=${CMAKE_FILE-"cmake-2.4.5.tar.gz"}
export CMAKE_VERSION=${CMAKE_VERSION-"2.4.5"}
export CMAKE_DIR=${CMAKE_DIR-"cmake-2.4.5"}

if [[ "$OPSYS" == "Linux" ]]; then
export MESA_FILE=${MESA_FILE-"Mesa-5.0-mangled.tar.gz"}
export MESA_VERSION=${MESA_VERSION-"5.0"}
export MESA_DIR=${MESA_DIR-"Mesa-5.0"}  # The directory in the tarball
else
export MESA_FILE=${MESA_FILE-"MesaLib-6.4.2.tar.gz"}
export MESA_VERSION=${MESA_VERSION-"6.4.2"}
export MESA_DIR=${MESA_DIR-"Mesa-6.4.2"}  # The directory in the tarball
fi

# The old Python version at LLNL does not work on Mac, we need a newer version
export PYTHON_FILE_SUFFIX="tgz" # This is for the new version. 
export PYTHON_VERSION=${PYTHON_VERSION-"2.5"}
# Need this for the dylib build
export PYTHON_COMPATIBILITY_VERSION=${PYTHON_COMPATIBILITY_VERSION-"2.5"}
export PYTHON_FILE=${PYTHON_FILE-"Python-$PYTHON_VERSION.$PYTHON_FILE_SUFFIX"}
export PYTHON_DIR=${PYTHON_DIR-"Python-$PYTHON_VERSION"}

if [[ "$OPSYS" == "Darwin" ]] ; then
   export QT_FILE=${QT_FILE-"qt-mac-free-3.3.8.tar.gz"}
   export QT_VERSION=${QT_VERSION-"3.3.8"}
else
   export QT_FILE=${QT_FILE-"qt-x11-free-3.3.8.tar.gz"}
   export QT_VERSION=${QT_VERSION-"3.3.8"}
fi
# This variable should *not* be named QT_DIR, since QT_DIR
# is often pre-defined with Linux distributions.  And we want
# to use our own.
export BV_QT_DIR=${BV_QT_DIR-"${QT_FILE%.tar*}"}

export SILO_FILE=${SILO_FILE-"silo-4.6.1.tar.gz"}
export SILO_VERSION=${SILO_VERSION-"4.6.1"}
export SILO_COMPATIBILITY_VERSION=${SILO_COMPATIBILITY_VERSION-"4.6"}
export SILO_DIR=${SILO_DIR-"silo-4.6.1"}

export SZIP_FILE=${SZIP_FILE-"szip-2.1.tar.gz"}
export SZIP_VERSION=${SZIP_VERSION-"2.1"}
export SZIP_COMPATIBILITY_VERSION=${SZIP_COMPATIBILITY_VERSION-"2.0"}
export SZIP_DIR=${SZIP_DIR-"szip-2.1"}

export HDF5_FILE=${HDF5_FILE-"hdf5-1.6.5.tar.gz"}
export HDF5_VERSION=${HDF5_VERSION-"1.6.5"}
export HDF5_COMPATIBILITY_VERSION=${HDF5_COMPATIBILITY_VERSION-"1.6"}
export HDF5_DIR=${HDF5_DIR-"hdf5-1.6.5"}

export HDF4_FILE=${HDF4_FILE-"HDF4.2r1.tar.gz"}
export HDF4_VERSION=${HDF4_VERSION-"4.2.1"}
export HDF4_COMPATIBILITY_VERSION=${HDF4_COMPATIBILITY_VERSION-"4.0"}
export HDF4_DIR=${HDF4_DIR-"HDF4.2r1"}

export MILI_FILE=${MILI_FILE-"mili-1.10a.tar.gz"}
export MILI_VERSION=${MILI_VERSION-"1.10.0"}
export MILI_COMPATIBILITY_VERSION=${MILI_COMPATIBILITY_VERSION-"1.0"}
# This variable should *not* be named MILI_DIR, since MILI_DIR
# is recognized by VisIt's configure script.
export BV_MILI_DIR=${BV_MILI_DIR-"mili"}

export NETCDF_FILE=${NETCDF_FILE-"netcdf.tar.gz"}
export NETCDF_VERSION=${NETCDF_VERSION-"3.6.0"}
export NETCDF_COMPATIBILITY_VERSION=${NETCDF_COMPATIBILITY_VERSION-"3.6"}
export NETCDF_DIR=${NETCDF_DIR-"netcdf-3.6.0-p1/src"}

export CGNS_FILE=${CGNS_FILE-"cgnslib_2.4-3.tar.gz"}
export CGNS_VERSION=${CGNS_VERSION-"2.4"}
export CGNS_COMPATIBILITY_VERSION=${CGNS_COMPATIBILITY_VERSION-"2.4"}
export CGNS_DIR=${CGNS_DIR-${CGNS_FILE%-3.tar*}}

export GDAL_FILE=${GDAL_FILE-"gdal-1.3.2.tar.gz"}
export GDAL_VERSION=${GDAL_VERSION-"1.3.2"}
export GDAL_COMPATIBILITY_VERSION=${GDAL_COMPATIBILITY_VERSION-"1.3"}
export GDAL_DIR=${GDAL_DIR-"gdal-1.3.2"}

export EXODUS_FILE=${EXODUS_FILE-"exodusii-4.46.tar.gz"}
export EXODUS_VERSION=${EXODUS_VERSION-"4.46"}
export EXODUS_COMPATIBILITY_VERSION=${EXODUS_COMPATIBILITY_VERSION-"4.0"}
export EXODUS_DIR=${EXODUS_DIR-"exodusii-4.46"}

export BOXLIB_FILE=${BOXLIB_FILE-"boxlib.tar.gz"}
export BOXLIB_VERSION=${BOXLIB_VERSION-"2.5"}
export BOXLIB_COMPATIBILITY_VERSION=${BOXLIB_COMPATIBILITY_VERSION-"2.0"}
export BOXLIB_DIR=${BOXLIB_DIR-"CCSEApps/BoxLib"}

export CFITSIO_FILE=${CFITSIO_FILE-"cfitsio3006.tar.gz"}
export CFITSIO_VERSION=${CFITSIO_VERSION-"3006"}
export CFITSIO_COMPATIBILITY_VERSION=${CFITSIO_COMPATIBILITY_VERSION-"3.0"}
export CFITSIO_DIR=${CFITSIO_DIR-"cfitsio"}

export H5PART_FILE=${H5PART_FILE-"H5Part-1.4.0.tar.gz"}
export H5PART_VERSION=${H5PART_VERSION-"1.4.0"}
export H5PART_COMPATIBILITY_VERSION=${H5PART_COMPATIBILITY_VERSION-"1.0"}
export H5PART_DIR=${H5PART_DIR-"H5Part-1.4.0"}

export CCMIO_FILE=${CCMIO_FILE-"libccmio-2.6.1.tar.gz"}
export CCMIO_VERSION=${CCMIO_VERSION-"2.6.1"}
export CCMIO_COMPATIBILITY_VERSION=${CCMIO_COMPATIBILITY_VERSION-"2.0"}
export CCMIO_DIR=${CCMIO_DIR-"libccmio-2.6.1"}

export ITAPS_FILE=${ITAPS_FILE-"ITAPS-MOAB-26Jun07.tar.gz"}
export ITAPS_VERSION=${ITAPS_VERSION-"1.0.0"}
export ITAPS_COMPATIBILITY_VERSION=${ITAPS_COMPATIBILITY_VERSION-"1.0"}
export ITAPS_DIR=${ITAPS_DIR-"${ITAPS_FILE%.tar*}"}

export VISUS_FILE=${VISUS_FILE-"visus_26Feb07.tar.gz"}
export VISUS_VERSION=${VISUS_VERSION-"1.0.0"}
export VISUS_COMPATIBILITY_VERSION=${VISUS_COMPATIBILITY_VERSION-"1.0"}
export VISUS_DIR=${VISUS_DIR-"visus"}

# Dialog-related variables.
DLG="dialog"
DLG_BACKTITLE="VisIt $VISIT_VERSION Build Process"
DLG_HEIGHT="5"
DLG_WIDTH="60"
DLG_WIDTH_WIDE="80"

# *************************************************************************** #
# Function: uncompress_untar
#                                                                             #
# Purpose: Uncompress and untar the file, checking if GNU tar can be used.    #
#                                                                             #
# Programmer: Thomas R. Treadway                                              #
# Date: Tue May 15 16:48:01 PDT 2007                                          #
#                                                                             #
# *************************************************************************** #

function uncompress_untar
{
    # Check if GUN tar
    if [[ $(echo $1 | egrep "\.gz$" ) != "" ]] ; then
        COMPRESSTYPE="gzip"
    elif [[ $(echo $1 | egrep "\.bz2$" ) != "" ]] ; then
        COMPRESSTYPE="bzip"
    elif [[ $(echo $1 | egrep "\.tgz$" ) != "" ]] ; then
        COMPRESSTYPE="targzip"
    else
        echo "unsupported uncompression method"
        return 1
    fi
    TARVERSION=$(tar --version >/dev/null 2>&1)
    if [[ $? == 0 ]] ; then
        case $COMPRESSTYPE in
            gzip|targzip) tar zxf $1;;
            bzip) tar jxf $1;;
        esac
    else
        case $COMPRESSTYPE in
            gzip) 
               gunzip $1
               tar xf ${1%.gz}
               ;;
            targzip) 
               gunzip $1
               tar xf "${1%.tgz}.tar"
               ;;
            bzip)
               bunzip2 $1
               tar xf ${1%.bz2}
               ;;
        esac
    fi
}

# *************************************************************************** #
# Function: download_file                                                     #
#                                                                             #
# Purpose: Downloads a file using wget and show a dialog screen.              #
#                                                                             #
# Programmer: Brad Whitlock,                                                  #
# Date: Thu Apr 5 14:38:36 PST 2007                                           #
#                                                                             #
# Modifications:                                                              #
#                                                                             #
#   Hank Childs, Mon Oct 15 15:55:22 PDT 2007                                 #
#   Fail gracefully if wget is not available.                                 #
#                                                                             #
#   Thomas R. Treadway, Tue Nov 27 16:37:21 PST 2007                          # 
#   Deal with LLNL's invalid certificates                                     #
#                                                                             #
# *************************************************************************** #

function download_file
{
    # Print a dialog screen
    if [[ "$GRAPHICAL" == "yes" ]] ; then
        $DLG --backtitle "$DLG_BACKTITLE" --infobox \
"Downloading $2 . . ." $DLG_HEIGHT $DLG_WIDTH
    else
        echo "Downloading $2 . . ." 
    fi

    # Try and download the file.
    if [[ "$DO_SVN" == "yes" ]] ; then
        svn cat $SVN_ROOT_PATH/trunk/third_party/$2 > $2
    else
        if [[ "$1" == "" ]] ; then
            if [[ "$OPSYS" == "Darwin" ]]; then
                # MaxOS X comes with curl
                curl -ksfo $2 "https://wci.llnl.gov/codes/visit/$2"
            else
                wget $WGET_OPTS -o /dev/null \
                   "https://wci.llnl.gov/codes/visit/$2" 
                if [[ $? != 0 ]] ; then
                   echo ""
                   echo "Unable to run.  Need to download $2 from the "
                   echo "VisIt website, but cannot locate the wget utility "
                   echo "to do so."
                   echo ""
                   exit 1
                fi
            fi
        else
            if [[ "$OPSYS" == "Darwin" ]]; then
                curl -ksfo $2 "https://wci.llnl.gov/codes/visit/$1/$2"
            else
                wget $WGET_OPTS -o /dev/null \
                   "https://wci.llnl.gov/codes/visit/$1/$2" 
                if [[ $? != 0 ]] ; then
                   echo ""
                   echo "Unable to run.  Need to download $1/$2 from the "
                   echo "VisIt website, but cannot locate the wget utility "
                   echo "to do so."
                   echo ""
                   exit 1
                fi
            fi
        fi
    fi
    if [[ -e $2 ]] ; then
        return 1
    fi
    return 0
}

# *************************************************************************** #
# Function: download_3rdparty                                                 #
#                                                                             #
# Purpose: Downloads a 3rd party file using wget and show a dialog screen.    #
#                                                                             #
# Programmer: Brad Whitlock,                                                  #
# Date: Thu Apr 5 14:38:36 PST 2007                                           #
#                                                                             #
# *************************************************************************** #

function download_3rdparty
{
    download_file "3rd_party" $1
    if [[ $? == 0 ]] ; then
        return 0
    fi
    return 1
}

# *************************************************************************** #
# Function: info_box                                                          #
#                                                                             #
# Purpose: Show an information box with a message.                            #
#                                                                             #
# Programmer: Brad Whitlock,                                                  #
# Date: Thu Apr 5 14:38:36 PST 2007                                           #
#                                                                             #
# *************************************************************************** #

function info_box
{
    if [[ "$GRAPHICAL" == "yes" ]] ; then
        $DLG --backtitle "$DLG_BACKTITLE" --infobox "$1" $DLG_HEIGHT $DLG_WIDTH
    fi
    return 0
}

# *************************************************************************** #
#                         Function 1.0, check_files                           #
# --------------------------------------------------------------------------- #
# This function will check to make sure that all of the necessary files       #
# actually exist.                                                             #
# *************************************************************************** #

function check_files
{
    if [[ "$DO_REQUIRED_THIRD_PARTY" == "yes" ]] ; then
       check_required_3rdparty
       if [[ $? != 0 ]]; then
           return 1
       fi
    fi

    if [[ "$DO_VISIT" == "yes" ]] ;  then
       check_visit_source_code
       if [[ $? != 0 ]]; then
           return 1
       fi
    fi

    check_optional_3rdparty
    if [[ $? != 0 ]]; then
        return 1
    fi
    return 0
}


# *************************************************************************** #
#                    Function 1.1, check_required_3rdparty                    #
# --------------------------------------------------------------------------- #
# This function will check to make sure that all of the necessary files       #
# for the required third party libraries actually exist.                      #
#
# Modifications:                                                              #
#
#    Thomas R. Treadway, Fri Feb  1 15:14:10 PST 2008
#    Check if the directory has already be untarred.
#
# *************************************************************************** #

function check_required_3rdparty
{
    rv=0

    # Show a screen
    if [[ "$GRAPHICAL" == "yes" ]] ; then
        $DLG --backtitle "$DLG_BACKTITLE" --infobox \
"Checking for files . . ." $DLG_HEIGHT $DLG_WIDTH
    fi

    #
    # Check for CMake
    #
    HAVE_CMAKE_ALREADY="NO"
    HAVE_CMAKE_TARBALL="NO"
    if [[ -d "$VISITDIR/cmake/$CMAKE_VERSION/$VISITARCH" || \
       -d $CMAKE_DIR ]] ; then
       HAVE_CMAKE_ALREADY="YES"
    fi
    if [[ -e ${CMAKE_FILE%.gz} || -e ${CMAKE_FILE} ]] ; then
        HAVE_CMAKE_TARBALL="YES"
    fi
    
    if [[ "$HAVE_CMAKE_ALREADY" = "NO" && "$HAVE_CMAKE_TARBALL" = "NO" ]] ; then
        download_3rdparty ${CMAKE_FILE}
        if [[ $? == 0 ]] ; then
            echo "Unable to build VisIt.  CMake is not available."
            return 1
        fi
    fi

    #
    # VTK
    #
    HAVE_VTK_ALREADY="NO"
    HAVE_VTK_TARBALL="NO"
    if [[ -d "$VISITDIR/vtk/$VTK_VERSION/$VISITARCH" || \
       -d $VTK_DIR ]] ; then
       HAVE_VTK_ALREADY="YES"
    fi
    if [[ -e ${VTK_FILE%.gz} || -e ${VTK_FILE} ]] ; then
        HAVE_VTK_TARBALL="YES"
    fi
    
    if [[ "$HAVE_VTK_ALREADY" = "NO" && "$HAVE_VTK_TARBALL" = "NO" ]] ; then
        download_3rdparty ${VTK_FILE}
        if [[ $? == 0 ]] ; then
            echo "Unable to build VisIt.  VTK is not available."
            return 1
        fi
    fi
    
    #
    # Mesa
    #
    HAVE_MESA_ALREADY="NO"
    HAVE_MESA_TARBALL="NO"
    if [[ -d "$VISITDIR/mesa/$MESA_VERSION/$VISITARCH" || \
       -d $MESA_DIR ]] ; then
       HAVE_MESA_ALREADY="YES"
    fi
    if [[ -e ${MESA_FILE%.gz} || -e ${MESA_FILE} ]] ; then
       HAVE_MESA_TARBALL="YES"
    fi
    
    if [[ "$HAVE_MESA_ALREADY" = "NO" && "$HAVE_MESA_TARBALL" = "NO" ]] ; then
        download_3rdparty ${MESA_FILE}
        if [[ $? == 0 ]] ; then
            echo "Unable to build VisIt.  Mesa is not available."
            return 1
        fi
    fi
    
    #
    # Qt
    #
    HAVE_QT_ALREADY="NO"
    HAVE_QT_TARBALL="NO"
    if [[ -d "$VISITDIR/qt/$QT_VERSION/$VISITARCH" || \
       -d $BV_QT_DIR ]] ; then
       HAVE_QT_ALREADY="YES"
    fi
    if [[ -e ${QT_FILE%.gz} || -e ${QT_FILE} ]] ; then
       HAVE_QT_TARBALL="YES"
    fi
    if [[ "$HAVE_QT_ALREADY" = "NO" && "$HAVE_QT_TARBALL" = "NO" ]] ; then
        download_3rdparty ${QT_FILE}
        if [[ $? == 0 ]] ; then
            echo "Unable to build VisIt.  Qt is not available."
            return 1
        fi
    fi
    
    #
    # Python
    #
    HAVE_PYTHON_ALREADY="NO"
    HAVE_PYTHON_TARBALL="NO"
    if [[ -d "$VISITDIR/python/$PYTHON_VERSION/$VISITARCH" || \
       -d $PYTHON_DIR ]] ; then
       HAVE_PYTHON_ALREADY="YES"
    fi
    if [[ -e ${PYTHON_FILE%$PYTHON_FILE_SUFFIX}tar || \
       -e ${PYTHON_FILE} ]] ; then
       HAVE_PYTHON_TARBALL="YES"
    fi
    
    if [[ "$HAVE_PYTHON_ALREADY" = "NO" && "$HAVE_PYTHON_TARBALL" = "NO" ]]
    then
        download_3rdparty ${PYTHON_FILE}
        if [[ $? == 0 ]] ; then
            echo "Unable to build VisIt.  Python is not available."
            return 1
        fi
    fi
    
    #
    # Silo
    #
    HAVE_SILO_ALREADY="NO"
    HAVE_SILO_TARBALL="NO"
    if [[ -d "$VISITDIR/silo/$SILO_VERSION/$VISITARCH" || \
       -d $SILO_DIR ]] ; then
       HAVE_SILO_ALREADY="YES"
    fi
    if [[ -e $SILO_FILE ]] ; then
       HAVE_SILO_TARBALL="YES"
    fi

    if [[ "$HAVE_SILO_ALREADY" = "NO" && "$HAVE_SILO_TARBALL" = "NO" ]] ; then
        download_3rdparty $SILO_FILE
        if [[ $? == 0 ]] ; then
            echo "Unable to build VisIt.  Silo is not available."
            return 1
        fi
    fi
}

# *************************************************************************** #
#                   Function 1.0, check_visit_source_code                     #
# --------------------------------------------------------------------------- #
# This function will check to make sure that the VisIt source code            #
# actually exists.                                                            #
# *************************************************************************** #

function check_visit_source_code
{
    # Check-out the latest svn sources, before building VisIt
    if [[ "$DO_SVN" == "yes" && "$USE_VISIT_FILE" == "no" ]] ; then
        if [[ -d src ]] ; then
           echo "Found VisIt SVN src directory, using that . . ."
        else
           # Print a dialog screen
           if [[ "$GRAPHICAL" == "yes" ]] ; then
               $DLG --backtitle "$DLG_BACKTITLE" --infobox \
"SVN check-out of VisIt . . ." $DLG_HEIGHT $DLG_WIDTH
           else
               echo "SVN check-out of VisIt . . ." 
           fi
           if [[ "$DO_REVISION" == "yes" && "$SVNREVISION" != "" ]] ; then
               svn co --quiet --non-interactive --revision "$SVNREVISION" \
                  $SVN_ROOT_PATH/trunk/src
           else
               svn co --quiet --non-interactive $SVN_ROOT_PATH/trunk/src
           fi
           if [[ $? != 0 ]] ; then
               echo "Unable to build VisIt.  SVN download failed."
               return 1
           fi
        fi

    # Build using (the assumed) existing VisIt svn "src" directory
    elif [[ -d src ]] ; then
           echo "Found VisIt SVN src directory found, using it."

    # Build using a VisIt source tarball
    else
        if [[ -e ${VISIT_FILE%.gz} || -e ${VISIT_FILE} ]] ; then
            echo \
"Got VisIt source code. Lets look for 3rd party libraries."
        else
            download_file "${VISIT_VERSION}" "$VISIT_FILE"
            if [[ $? == 0 ]] ; then
               echo \
"Unable to build VisIt.  Can't find source code: ${VISIT_FILE}."
               return 1
            fi
        fi
    fi
}

# *************************************************************************** #
#                   Function 1.3, check_optional_3rdparty                     #
# --------------------------------------------------------------------------- #
# This function will check to make sure that all of the necessary source      #
# files for the optional 3rd party libraries actually exist.                  #
#
# Modifications:                                                              #
#
#    Hank Childs, Fri Feb  1 09:38:58 PST 2008
#    Issue a better error message for Mili.
#
#    Thomas R. Treadway, Fri Feb  1 15:14:10 PST 2008
#    Check if the directory has already be untarred.
#
# *************************************************************************** #

function check_optional_3rdparty
{
    #
    # Boxlib
    #
    if [[ "$DO_BOXLIB" == "yes" ]] ; then
        HAVE_BOXLIB_ALREADY="NO"
        HAVE_BOXLIB_TARBALL="NO"
        if [[ -d "$VISITDIR/boxlib/$VISITARCH" || \
           -d $BOXLIB_DIR ]] ; then
           HAVE_BOXLIB_ALREADY="YES"
        fi
        if [[ -e ${BOXLIB_FILE%.gz} || -e ${BOXLIB_FILE} ]] ; then
           HAVE_BOXLIB_TARBALL="YES"
        fi
        if [[ "$HAVE_BOXLIB_ALREADY" = "NO" && \
              "$HAVE_BOXLIB_TARBALL" = "NO" ]] ; then
            download_3rdparty ${BOXLIB_FILE}
            if [[ $? == 0 ]] ; then
                echo "Unable to build Boxlib.  ${BOXLIB_FILE} not found."
                DO_BOXLIB="no"
            fi
        fi
    fi
    #
    # CCMIO
    #
    if [[ "$DO_CCMIO" == "yes" ]] ; then
        HAVE_CCMIO_ALREADY="NO"
        HAVE_CCMIO_TARBALL="NO"
        if [[ -d "$VISITDIR/ccmio/$CCMIO_VERSION/$VISITARCH" || \
           -d $CCMIO_DIR ]] ; then
           HAVE_CCMIO_ALREADY="YES"
        fi
        if [[ -e ${CCMIO_FILE%.gz} || -e ${CCMIO_FILE} ]] ; then
           HAVE_CCMIO_TARBALL="YES"
        fi
        if [[ "$HAVE_CCMIO_ALREADY" = "NO" && \
              "$HAVE_CCMIO_TARBALL" = "NO" ]] ; then
            download_3rdparty ${CCMIO_FILE}
            if [[ $? == 0 ]] ; then
                echo "Unable to build CCMIO.  ${CCMIO_FILE} not found."
                DO_CCMIO="no"
            fi
        fi
    fi
    #
    #
    # CFITSIO
    #
    if [[ "$DO_CFITSIO" == "yes" ]] ; then
        HAVE_CFITSIO_ALREADY="NO"
        HAVE_CFITSIO_TARBALL="NO"
        if [[ -d "$VISITDIR/cfitsio/$CFITSIO_VERSION/$VISITARCH" || \
           -d $CFITSIO_DIR ]] ; then
           HAVE_CFITSIO_ALREADY="YES"
        fi
        if [[ -e ${CFITSIO_FILE%.gz} || -e ${CFITSIO_FILE} ]] ; then
           HAVE_CFITSIO_TARBALL="YES"
        fi
        if [[ "$HAVE_CFITSIO_ALREADY" = "NO" && \
              "$HAVE_CFITSIO_TARBALL" = "NO" ]] ; then
            download_3rdparty ${CFITSIO_FILE}
            if [[ $? == 0 ]] ; then
                echo "Unable to build CFITSIO.  ${CFITSIO_FILE} not found."
                DO_CFITSIO="no"
            fi
        fi
    fi
    #
    # CGNS
    #
    if [[ "$DO_CGNS" == "yes" ]] ; then
        HAVE_CGNS_ALREADY="NO"
        HAVE_CGNS_TARBALL="NO"
        if [[ -d "$VISITDIR/cgns/$CGNS_VERSION/$VISITARCH" || \
           -d $CGNS_DIR ]] ; then
           HAVE_CGNS_ALREADY="YES"
        fi
        if [[ -e ${CGNS_FILE%.gz} || -e ${CGNS_FILE} ]] ; then
           HAVE_CGNS_TARBALL="YES"
        fi
        if [[ "$HAVE_CGNS_ALREADY" = "NO" && \
              "$HAVE_CGNS_TARBALL" = "NO" ]] ; then
            download_3rdparty ${CGNS_FILE}
            if [[ $? == 0 ]] ; then
                echo "Unable to build CGNS.  ${CGNS_FILE} not found."
                DO_CGNS="no"
            fi
        fi
    fi
    #
    # ExodusII
    #
    if [[ "$DO_EXODUS" == "yes" ]] ; then
        HAVE_EXODUS_ALREADY="NO"
        HAVE_EXODUS_TARBALL="NO"
        if [[ -d "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH" || \
           -d $EXODUS_DIR ]] ; then
           HAVE_EXODUS_ALREADY="YES"
        fi
        if [[ -e ${EXODUS_FILE%.gz} || -e ${EXODUS_FILE} ]] ; then
           HAVE_EXODUS_TARBALL="YES"
        fi
        if [[ "$HAVE_EXODUS_ALREADY" = "NO" && \
              "$HAVE_EXODUS_TARBALL" = "NO" ]] ; then
            download_3rdparty ${EXODUS_FILE}
            if [[ $? == 0 ]] ; then
                echo "Unable to build ExodusII.  ${EXODUS_FILE} not found."
                DO_EXODUS="no"
            fi
        fi
    fi
    #
    # GDAL
    #
    if [[ "$DO_GDAL" == "yes" ]] ; then
        HAVE_GDAL_ALREADY="NO"
        HAVE_GDAL_TARBALL="NO"
        if [[ -d "$VISITDIR/gdal/$GDAL_VERSION/$VISITARCH" || \
           -d $GDAL_DIR ]] ; then
           HAVE_GDAL_ALREADY="YES"
        fi
        if [[ -e ${GDAL_FILE%.gz} || -e ${GDAL_FILE} ]] ; then
           HAVE_GDAL_TARBALL="YES"
        fi
        if [[ "$HAVE_GDAL_ALREADY" = "NO" && \
              "$HAVE_GDAL_TARBALL" = "NO" ]] ; then
            download_3rdparty ${GDAL_FILE}
            if [[ $? == 0 ]] ; then
                echo "Unable to build GDAL.  ${GDAL_FILE} not found."
                DO_GDAL="no"
            fi
        fi
    fi
    #
    # H5Part
    #
    if [[ "$DO_H5PART" == "yes" ]] ; then
        HAVE_H5PART_ALREADY="NO"
        HAVE_H5PART_TARBALL="NO"
        if [[ -d "$VISITDIR/h5part/$H5PART_VERSION/$VISITARCH" || \
           -d $H5PART_DIR ]] ; then
           HAVE_H5PART_ALREADY="YES"
        fi
        if [[ -e ${H5PART_FILE%.gz} || -e ${H5PART_FILE} ]] ; then
           HAVE_H5PART_TARBALL="YES"
        fi
        if [[ "$HAVE_H5PART_ALREADY" = "NO" && \
              "$HAVE_H5PART_TARBALL" = "NO" ]] ; then
            download_3rdparty ${H5PART_FILE}
            if [[ $? == 0 ]] ; then
                echo "Unable to build H5Part.  ${H5PART_FILE} not found."
                DO_H5PART="no"
            fi
        fi
    fi
    #
    # HDF4
    #
    if [[ "$DO_HDF4" == "yes" ]] ; then
        HAVE_HDF4_ALREADY="NO"
        HAVE_HDF4_TARBALL="NO"
        if [[ -d "$VISITDIR/hdf4/$HDF4_VERSION/$VISITARCH" || \
           -d $HDF4_DIR ]] ; then
           HAVE_HDF4_ALREADY="YES"
        fi
        if [[ -e ${HDF4_FILE%.gz} || -e ${HDF4_FILE} ]] ; then
           HAVE_HDF4_TARBALL="YES"
        fi
        if [[ "$HAVE_HDF4_ALREADY" = "NO" && \
              "$HAVE_HDF4_TARBALL" = "NO" ]] ; then
            download_3rdparty ${HDF4_FILE}
            if [[ $? == 0 ]] ; then
                echo "Unable to build HDF4.  ${HDF4_FILE} not found."
                DO_HDF4="no"
            fi
        fi
    fi
    #
    # HDF5
    #
    if [[ "$DO_HDF5" == "yes" ]] ; then
        HAVE_HDF5_ALREADY="NO"
        HAVE_HDF5_TARBALL="NO"
        if [[ -d "$VISITDIR/hdf5/$HDF5_VERSION/$VISITARCH" || \
           -d $HDF5_DIR ]] ; then
           HAVE_HDF5_ALREADY="YES"
        fi
        if [[ -e ${HDF5_FILE%.gz} || -e ${HDF5_FILE} ]] ; then
           HAVE_HDF5_TARBALL="YES"
        fi
        if [[ "$HAVE_HDF5_ALREADY" = "NO" && \
              "$HAVE_HDF5_TARBALL" = "NO" ]] ; then
            download_3rdparty ${HDF5_FILE}
            if [[ $? == 0 ]] ; then
                echo "Unable to build HDF5.  ${HDF5_FILE} not found."
                DO_HDF5="no"
            fi
        fi
    fi
    #
    # ITAPS
    #
    if [[ "$DO_ITAPS" == "yes" ]] ; then
        HAVE_ITAPS_ALREADY="NO"
        HAVE_ITAPS_TARBALL="NO"
        if [[ -d "$VISITDIR/itaps/$ITAPS_VERSION/$VISITARCH" || \
           -d $ITAPS_DIR ]] ; then
           HAVE_ITAPS_ALREADY="YES"
        fi
        if [[ -e ${ITAPS_FILE%.gz} || -e ${ITAPS_FILE} ]] ; then
           HAVE_ITAPS_TARBALL="YES"
        fi
        if [[ "$HAVE_ITAPS_ALREADY" = "NO" && \
              "$HAVE_ITAPS_TARBALL" = "NO" ]] ; then
           download_3rdparty ${ITAPS_FILE}
           if [[ $? == 0 ]] ; then
               echo "Unable to build ITAPS.  ${ITAPS_FILE} not found."
               DO_ITAPS="no"
           fi
        fi
    fi
    #
    # Mili
    #
    if [[ "$DO_MILI" == "yes" ]] ; then
        HAVE_MILI_ALREADY="NO"
        HAVE_MILI_TARBALL="NO"
        if [[ -d "$VISITDIR/mili/$MILI_VERSION/$VISITARCH" || \
           -d $BV_MILI_DIR ]] ; then
           HAVE_MILI_ALREADY="YES"
        fi
        if [[ -e ${MILI_FILE%.gz} || -e ${MILI_FILE} ]] ; then
           HAVE_MILI_TARBALL="YES"
        fi
        if [[ "$HAVE_MILI_ALREADY" = "NO" && \
              "$HAVE_MILI_TARBALL" = "NO" ]] ; then
            if [[ "$DO_SVN" != "yes" ]] ; then
                echo "You have requested to build the Mili library."
                echo "Mili is not available for public download and"
                echo "is only available through Subversion access."
                exit 1
            fi
            download_3rdparty ${MILI_FILE}
            if [[ $? == 0 ]] ; then
                echo "Unable to build Mili.  ${MILI_FILE} not found."
                DO_MILI="no"
            fi
        fi
    fi
    #
    # NetCDF
    #
    if [[ "$DO_NETCDF" == "yes" ]] ; then
        HAVE_NETCDF_ALREADY="NO"
        HAVE_NETCDF_TARBALL="NO"
        if [[ -d "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH" || \
           -d ${NETCDF_DIR} ]] ; then
           HAVE_NETCDF_ALREADY="YES"
        fi
        if [[ -e ${NETCDF_FILE%.gz} || -e ${NETCDF_FILE} ]] ; then
           HAVE_NETCDF_TARBALL="YES"
        fi
        if [[ "$HAVE_NETCDF_ALREADY" = "NO" && \
              "$HAVE_NETCDF_TARBALL" = "NO" ]] ; then
            download_3rdparty ${NETCDF_FILE}
            if [[ $? == 0 ]] ; then
                echo "Unable to build NetCDF.  ${NETCDF_FILE} not found."
                DO_NETCDF="no"
            fi
        fi
    fi
    #
    # SZIP
    #
    if [[ "$DO_SZIP" == "yes" ]] ; then
        HAVE_SZIP_ALREADY="NO"
        HAVE_SZIP_TARBALL="NO"
        if [[ -d "$VISITDIR/szip/$SZIP_VERSION/$VISITARCH" || \
           -d $SZIP_DIR ]] ; then
           HAVE_SZIP_ALREADY="YES"
        fi
        if [[ -e ${SZIP_FILE%.gz} || -e ${SZIP_FILE} ]] ; then
           HAVE_SZIP_TARBALL="YES"
        fi
        if [[ "$HAVE_SZIP_ALREADY" = "NO" && \
              "$HAVE_SZIP_TARBALL" = "NO" ]] ; then
           download_3rdparty ${SZIP_FILE}
           if [[ $? == 0 ]] ; then
               echo "Unable to build SZIP.  ${SZIP_FILE} not found."
               DO_SZIP="no"
           fi
        fi
    fi
    #
    # ViSUS
    #
    if [[ "$DO_VISUS" == "yes" ]] ; then
        HAVE_VISUS_ALREADY="NO"
        HAVE_VISUS_TARBALL="NO"
        if [[ -d "$VISITDIR/visus/$VISUS_VERSION/$VISITARCH" || \
           -d $VISUS_DIR ]] ; then
           HAVE_VISUS_ALREADY="YES"
        fi
        if [[ -e ${VISUS_FILE%.gz} || -e ${VISUS_FILE} ]] ; then
           HAVE_VISUS_TARBALL="YES"
        fi
        if [[ "$HAVE_VISUS_ALREADY" = "NO" && \
              "$HAVE_VISUS_TARBALL" = "NO" ]] ; then
           download_3rdparty ${VISUS_FILE}
           if [[ $? == 0 ]] ; then
               echo "Unable to build ViSUS.  ${VISUS_FILE} not found."
               DO_VISUS="no"
           fi
        fi
    fi
    #
    return 0
}
  
# *************************************************************************** #
#                         Function 2.0, check_more_options                    #
# --------------------------------------------------------------------------- #
# This function will display variables and optionally allow changing          #
# *************************************************************************** #

function check_more_options
{

    # Override variable settings dialog
    #
    if [[ "$DO_MORE" == "yes" && "$GRAPHICAL" == "yes" ]] ; then
        $DLG --backtitle "$DLG_BACKTITLE" \
        --title "More build options" \
        --checklist \
"Version: specify version of VisIt to download and build\n"\
"Build: build VisIt, disable to build 3rd party only\n"\
"Required: build required 3rd party libraries\n"\
"Logging: display build log to stdout\n"\
"Symbol: turn on -g, debugging flag\n"\
"Group: specify the group name for install\n"\
"Path: specify the root directory for libraries\n"\
"Absolute: Change the default install name path for Darwin dynamic libraries "\
"to use the given Path rather than the default [@executable_path/../lib]\n"\
"Trace: print a trace of commands and arguments during build\n\n"\
"Select build and installed options:" 0 0 0 \
           "Version"   "specify VisIt version [$VISIT_VERSION]" $ON_VERSION \
           "Build"     "enable building VisIt"                  $ON_VISIT \
           "Required"  "enable required 3rd party libraries"    $ON_THIRD_PARTY\
           "Logging"   "disable logging to file"                $ON_LOG \
           "Symbol"    "enable debug compiling"                 $ON_DEBUG \
           "Group"     "specify group name for install"         $ON_GROUP \
           "Path"      "specify library path [$THIRD_PARTY_PATH]" $ON_PATH \
           "Absolute"  "change the behavior of install name"    $ON_ABS_PATH \
           "Trace"     "enable SHELL debugging"      $ON_VERBOSE 2> tmp$$
        retval=$?

    # Remove the extra quoting, new dialog has --single-quoted
        choice="$(cat tmp$$ | sed 's/"//g' )"
        case $retval in
          0)
            DO_VERSION="no"
            DO_VISIT="no"
            DO_REQUIRED_THIRD_PARTY="no"
            DO_LOG="no"
            DO_DEBUG="no"
            DO_GROUP="no"
            DO_PATH="no"
            ABS_PATH="no"
            DO_VERBOSE="no"
            for OPTION in $choice
            do
                case $OPTION in
                  Version)
                     $DLG --backtitle "$DLG_BACKTITLE" \
                        --no-cancel --inputbox \
"Enter $OPTION value:" 0 $DLG_WIDTH_WIDE "$VISIT_VERSION" 2> tmp$$
                     VISIT_VERSION="$(cat tmp$$)"
                     VISIT_FILE="visit${VISIT_VERSION}.tar.gz"
                     DO_VERSION="yes";;
                  Build)
                     DO_VISIT="yes";;
                  Required)
                     DO_REQUIRED_THIRD_PARTY="yes";;
                  Logging)
                     DO_LOG="yes";;
                  Symbol)
                     DO_DEBUG="yes";;
                  Group)
                     $DLG --backtitle "$DLG_BACKTITLE" \
                        --no-cancel --inputbox \
"Enter $OPTION value:" 0 $DLG_WIDTH_WIDE "$GROUP" 2> tmp$$
                     GROUP="$(cat tmp$$)"
                     DO_GROUP="yes";;
                  Path)
                     $DLG --backtitle "$DLG_BACKTITLE" \
                        --no-cancel --inputbox \
"Enter $OPTION value:" 0 $DLG_WIDTH_WIDE "$THIRD_PARTY_PATH" 2> tmp$$
                     THIRD_PARTY_PATH="$(cat tmp$$)"
                     DO_PATH="yes";;
                  Absolute)
                     ABS_PATH="yes";;
                  Trace)
                     DO_VERBOSE="yes";;
                esac
            done
            ;;
          1)
            echo "Cancel pressed."
            exit 1;;
          255)
            echo "ESC pressed.";;
          *)
            echo "Unexpected return code: $retval";;
        esac
    fi
    if [[ -e "tmp$$" ]] ; then
        rm tmp$$
    fi

    return 0
}

# *************************************************************************** #
#                         Function 2.1, check_parallel                        #
# --------------------------------------------------------------------------- #
# This function will check to make sure that parallel options have been setup #
# if we're going to build a parallel version of VisIt.                        #
# *************************************************************************** #

function check_parallel
{
    rv=0

    #
    # Parallelization
    #
    if [[ "$parallel" == "yes" ]] ; then
        #
        # Check the environment that mpicc would set up as a first stab.
        #
        MPICC_CPPFLAGS=""
        MPICC_LDFLAGS=""
        MPIWRAPPER=$(which mpic++)
        if [[ "${MPIWRAPPER#no }" != "${MPIWRAPPER}" ]] ; then
           MPIWRAPPER=""
       fi
       if [[ "$MPIWRAPPER" == "" ]] ; then
          MPIWRAPPER=$(which mpicxx)
          if [[ "${MPIWRAPPER#no }" != "${MPIWRAPPER}" ]] ; then
             MPIWRAPPER=""
          fi
          if [[ "$MPIWRAPPER" == "" ]] ; then
             MPIWRAPPER=$(which mpiCC)
             if [[ "${MPIWRAPPER#no }" != "${MPIWRAPPER}" ]] ; then
                MPIWRAPPER=""
             fi
             if [[ "$MPIWRAPPER" == "" ]] ; then
                MPIWRAPPER=$(which mpicc)
                if [[ "${MPIWRAPPER#no }" != "${MPIWRAPPER}" ]] ; then
                   MPIWRAPPER=""
                fi
                if [[ "$MPIWRAPPER" == "" ]] ; then
                   echo ""
                   echo "Unable to find mpiCC..."
                fi
             fi
          fi
        fi
        args=`$MPIWRAPPER -show`
        index=0
        foundL=0
        for arg in $args; do
            if [[ $index == 1 || $index > 1 ]] ; then
                pos=`echo "$arg" | awk '{ printf "%d", index($1,"-L"); }'`
                if [[ "$pos" != "0" ]] ; then
                    foundL=1
                fi

                if [[ $foundL == 1 ]] ; then
                    MPICC_LDFLAGS="$MPICC_LDFLAGS$arg "
                else
                    MPICC_CPPFLAGS="$MPICC_CPPFLAGS$arg "
                fi
            fi
            index=$(($index+1))
        done

        if [[ "$PAR_INCLUDE" == "" ]] ; then
            PAR_CPPFLAGS=$MPICC_CPPFLAGS
        else
            PAR_CPPFLAGS=$PAR_INCLUDE
        fi
        if [[ "$PAR_LIBS" == "" ]] ; then
            PAR_LDFLAGS=$MPICC_LDFLAGS
        else
            PAR_LDFLAGS=$PAR_LIBS
        fi

        if [[ "$PAR_CPPFLAGS" == "" ]] ; then
            echo \
"We have no guesses as to where MPI might reside. Look for it..."
            if [[ -e /usr/include/mpi.h ]] ; then
                PAR_CPPFLAGS="-I/usr/include"
                PAR_LDFLAGS="-L/usr/lib -lmpi"
            fi
        fi

        if [[ "$GRAPHICAL" == "yes" ]] ; then
            # We have suggestions from the user or mpicc as to where mpi might
            # be located. See what the user thinks of the options.
            tryagain=1
            while [[ $tryagain == 1 ]]; do
                $DLG --backtitle "$DLG_BACKTITLE" --yesno \
"The CPPFLAGS for MPI are:\n\n$PAR_CPPFLAGS\n\nDo these look right?" \
                15 $DLG_WIDTH
                if [[ $? == 1 ]] ; then
                    tryagain=1
                    $DLG --backtitle "$DLG_BACKTITLE" \
                    --no-cancel --inputbox \
"Enter CPPFLAGS needed for MPI:" 0 $DLG_WIDTH_WIDE "$PAR_CPPFLAGS" 2> tmp$$
                    PAR_CPPFLAGS="$(cat tmp$$)"
                else
                    tryagain=0
                fi
            done

            PAR_INCLUDE=$PAR_CPPFLAGS

            # We have suggestions from the user or mpicc as to where mpi might
            # be located. See what the user thinks of the options.
            tryagain=1
            while [[ $tryagain == 1 ]]; do
                $DLG --backtitle "$DLG_BACKTITLE" --yesno \
"The LDFLAGS for MPI are:\n\n$PAR_LDFLAGS\n\nDo these look right?" 15 $DLG_WIDTH
                if [[ $? == 1 ]] ; then
                    tryagain=1
                    $DLG --backtitle "$DLG_BACKTITLE" \
                    --no-cancel --inputbox \
"Enter LDFLAGS needed for MPI:" 0 $DLG_WIDTH_WIDE "$PAR_LDFLAGS" 2> tmp$$
                    PAR_LDFLAGS="$(cat tmp$$)"
                else
                    tryagain=0
                fi
            done

            PAR_LIBS=$PAR_LDFLAGS
        fi

        # The script pretty much assumes that you *must* have some flags 
        # and libs to do a parallel build.  If that is *not* true, 
        # i.e. mpi.h is in your include path, then, congratulations, 
        # you are working on a better configured system than I have 
        # ever encountered.
        if [[ "$PAR_INCLUDE" == "" ]] ; then
            echo \
"You must set up the PAR_INCLUDE to get VisIt to build in parallel."
            rv=1
        fi
        if [[ "$PAR_LIBS" == "" ]] ; then
            echo \
"You must set up the PAR_LIBS to get VisIt to build in parallel."
            rv=1
        fi

        if [[ $rv != 0 ]] ; then
           return 1
        fi
    fi

    return 0
}

# *************************************************************************** #
#                         Function 2.2, check_variables                       #
# --------------------------------------------------------------------------- #
# This function will display variables and optionally allow changing          #
# *************************************************************************** #

function check_variables
{

    # Override variable settings dialog
    #
    if [[ "$verify" == "yes" ]] ; then
        if [[ "$GRAPHICAL" == "yes" ]] ; then
            $DLG --backtitle "$DLG_BACKTITLE" \
            --title "Variable settings" \
            --checklist \
"These variables use these system dependent defaults, but can be overridden "\
"through this interface or using environment variables.\n\n"\
"OPSYS: the default value returned from 'uname -s'\n"\
"ARCH: architecure info (Darwin, linux, aix, irix64, ...)\n"\
"C_COMPILER and CXX_COMPILER: the C and C++ compiler, respectively\n"\
"C_OPT_FLAGS and CXX_OPT_FLAGS: the CFLAGS and CXXFLAGS to use\n"\
"VISITARCH: unique architecture info, appended to library path installation\n"\
"REVISION: checkout a cwspecific SVN revision using supplied argument\n\n"\
"Select the variables you wish to modify:" 28 $DLG_WIDTH 8 \
           "OPSYS"            "$OPSYS"             "off" \
           "ARCH"             "$ARCH"              "off" \
           "C_COMPILER"       "$C_COMPILER"        "off" \
           "CXX_COMPILER"     "$CXX_COMPILER"      "off" \
           "C_OPT_FLAGS"      "$C_OPT_FLAGS"       "off" \
           "CXX_OPT_FLAGS"    "$CXX_OPT_FLAGS"     "off" \
           "VISITARCH"        "$VISITARCHTMP"      "off" \
           "REVISION"         "$SVNREVISION"       "off" 2> tmp$$
           retval=$?

           # Remove the extra quoting, new dialog has --single-quoted
           choice="$(cat tmp$$ | sed 's/"//g' )"
           case $retval in
             0)
               for OPTION in $choice
               do
                   case $OPTION in
                     OPSYS)
                        $DLG --backtitle "$DLG_BACKTITLE" \
                           --no-cancel --inputbox \
"Enter $OPTION value:" 0 $DLG_WIDTH_WIDE "$OPSYS" 2> tmp$$
                        OPSYS="$(cat tmp$$)"
                        ;;
                     ARCH)
                        $DLG --backtitle "$DLG_BACKTITLE" \
                           --no-cancel --inputbox \
"Enter $OPTION value:" 0 $DLG_WIDTH_WIDE "$ARCH" 2> tmp$$
                        ARCH="$(cat tmp$$)"
                        ;;
                     C_COMPILER)
                        $DLG --backtitle "$DLG_BACKTITLE" \
                           --no-cancel --inputbox \
"Enter $OPTION value:" 0 $DLG_WIDTH_WIDE "$C_COMPILER" 2> tmp$$
                        C_COMPILER="$(cat tmp$$)"
                        ;;
                     CXX_COMPILER)
                        $DLG --backtitle "$DLG_BACKTITLE" \
                           --no-cancel --inputbox \
"Enter $OPTION value:" 0 $DLG_WIDTH_WIDE "$CXX_COMPILER" 2> tmp$$
                        CXX_COMPILER="$(cat tmp$$)"
                        ;;
                     C_OPT_FLAGS)
                        $DLG --backtitle "$DLG_BACKTITLE" \
                           --no-cancel --inputbox \
"Enter $OPTION value:" 0 $DLG_WIDTH_WIDE "$C_OPT_FLAGS" 2> tmp$$
                        C_OPT_FLAGS="$(cat tmp$$)"
                        ;;
                     CXX_OPT_FLAGS)
                        $DLG --backtitle "$DLG_BACKTITLE" \
                           --no-cancel --inputbox \
"Enter $OPTION value:" 0 $DLG_WIDTH_WIDE "$CXX_OPT_FLAGS" 2> tmp$$
                        CXX_OPT_FLAGS="$(cat tmp$$)"
                        ;;
                     VISITARCH)
                        $DLG --backtitle "$DLG_BACKTITLE" \
                           --no-cancel --inputbox \
"Enter $OPTION value:" 0 $DLG_WIDTH_WIDE "$VISITARCHTMP" 2> tmp$$
                        VISITARCH="$(cat tmp$$)"
                        ;;
                     REVISION)
                        $DLG --backtitle "$DLG_BACKTITLE" \
                           --no-cancel --inputbox \
"Enter $OPTION value:" 0 $DLG_WIDTH_WIDE "$SVNREVISION" 2> tmp$$
                        SVNREVISION="$(cat tmp$$)"
                        DO_SVN="yes"
                        DO_REVISION="yes"
                        ;;
                   esac
               done
               ;;
             1)
               echo "Cancel pressed."
               ;;
             255)
               echo "ESC pressed.";;
             *)
               echo "Unexpected return code: $retval";;
           esac
       fi
       if [[ -e "tmp$$" ]] ; then
           rm tmp$$
       fi
    fi

    return 0
}

# *************************************************************************** #
#                          Function 3, build_mesa                             #
# *************************************************************************** #

function build_mesa
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -d ${MESA_DIR} ]] ; then
       info_box "Found ${MESA_DIR} . . ." 1>&3
    elif [[ -e ${MESA_FILE} ]] ; then
       info_box "Unzipping/untarring ${MESA_FILE} . . ." 1>&3
       uncompress_untar ${MESA_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar $MESA_FILE  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -e ${MESA_FILE%.gz} ]] ; then
       info_box "Untarring ${MESA_FILE%.*} . . ." 1>&3
       tar xf ${MESA_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${MESA_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi
    
    #
    # Patching mesa.
    #
    if [[ ${MESA_VERSION} == 6.4.2 ]] ; then
       info_box "Patching Mesa . . ." 1>&3
       patch -p0 <<\EOF
diff -c Mesa-6.4.2.orig/configs/default Mesa-6.4.2/configs/default
*** Mesa-6.4.2.orig/configs/default	Wed Feb  1 09:47:36 2006
--- Mesa-6.4.2/configs/default	Wed May 23 16:43:22 2007
***************
*** 16,23 ****
  # Compiler and flags
  CC = cc
  CXX = CC
! CFLAGS = -O
! CXXFLAGS = -O
  GLU_CFLAGS = 
  
  # Misc tools and flags
--- 16,23 ----
  # Compiler and flags
  CC = cc
  CXX = CC
! CFLAGS = -O -DUSE_MGL_NAMESPACE
! CXXFLAGS = -O -DUSE_MGL_NAMESPACE
  GLU_CFLAGS = 
  
  # Misc tools and flags
***************
*** 24,30 ****
  MKLIB_OPTIONS = 
  MKDEP = makedepend
  MKDEP_OPTIONS = -fdepend
! MAKE = make
  
  # Python and flags (generally only needed by the developers)
  PYTHON2 = python
--- 24,30 ----
  MKLIB_OPTIONS = 
  MKDEP = makedepend
  MKDEP_OPTIONS = -fdepend
! #MAKE = make
  
  # Python and flags (generally only needed by the developers)
  PYTHON2 = python
***************
*** 31,37 ****
  PYTHON_FLAGS = -t -O -O
  
  # Library names (base name)
! GL_LIB = GL
  GLU_LIB = GLU
  GLUT_LIB = glut
  GLW_LIB = GLw
--- 31,37 ----
  PYTHON_FLAGS = -t -O -O
  
  # Library names (base name)
! GL_LIB = MesaGL
  GLU_LIB = GLU
  GLUT_LIB = glut
  GLW_LIB = GLw
***************
*** 57,63 ****
  # Directories
  LIB_DIR = $(TOP)/lib
  INSTALL_PREFIX = /usr/local
! SRC_DIRS = mesa glu glut/glx glw
  GLU_DIRS = sgi
  DRIVER_DIRS = x11 osmesa
  # Which subdirs under $(TOP)/progs/ to enter:
--- 57,63 ----
  # Directories
  LIB_DIR = $(TOP)/lib
  INSTALL_PREFIX = /usr/local
! SRC_DIRS = mesa glu
  GLU_DIRS = sgi
  DRIVER_DIRS = x11 osmesa
  # Which subdirs under $(TOP)/progs/ to enter:
***************
*** 65,71 ****
  
  
  # Library/program dependencies
! EXTRA_LIB_PATH ?=
  GL_LIB_DEPS = $(EXTRA_LIB_PATH) -lX11 -lXext -lm -lpthread
  OSMESA_LIB_DEPS = -L$(LIB_DIR) -l$(GL_LIB)
  GLU_LIB_DEPS = -L$(LIB_DIR) -l$(GL_LIB) -lm
--- 65,71 ----
  
  
  # Library/program dependencies
! EXTRA_LIB_PATH =
  GL_LIB_DEPS = $(EXTRA_LIB_PATH) -lX11 -lXext -lm -lpthread
  OSMESA_LIB_DEPS = -L$(LIB_DIR) -l$(GL_LIB)
  GLU_LIB_DEPS = -L$(LIB_DIR) -l$(GL_LIB) -lm
EOF
       if [[ $? != 0 ]] ; then
           echo "Unable to patch Mesa. Wrong version?"
           return 1
       fi
       if [[ "$OPSYS" == "Darwin" ]]; then
           info_box "Patching Mesa for Darwin . . ." 1>&3
           patch -p0 <<\EOF
diff -p -r Mesa-6.4.2.orig/configs/darwin Mesa-6.4.2/configs/darwin
*** Mesa-6.4.2.orig/configs/darwin	Wed Jun 29 19:34:07 2005
--- Mesa-6.4.2/configs/darwin	Wed May 23 11:31:16 2007
*************** CONFIG_NAME = darwin
*** 7,29 ****
  # Compiler and flags
  CC = cc
  CXX = cc
! CFLAGS = -I/usr/X11R6/include -O3 -fPIC -fno-common -ffast-math -funroll-loops -fexpensive-optimizations -no-cpp-precomp -dynamic -Ddarwin
! CXXFLAGS = -I/usr/X11R6/include -O3 -fPIC -fno-common -ffast-math -funroll-loops -fexpensive-optimizations -no-cpp-precomp -dynamic -Ddarwin
  
  # Library names (actual file names)
! GL_LIB_NAME = libGL.dylib
  GLU_LIB_NAME = libGLU.dylib
  GLUT_LIB_NAME = libglut.dylib
  GLW_LIB_NAME = libGLw.dylib
  OSMESA_LIB_NAME = libOSMesa.dylib
  
! GL_LIB_DEPS = -L/usr/X11R6/lib -lX11 -lXext -lm -lpthread
! OSMESA_LIB_DEPS = -L$(LIB_DIR) -lGL
! GLU_LIB_DEPS = -L$(LIB_DIR) -lGL
! GLUT_LIB_DEPS = -L$(LIB_DIR) -lGL -lGLU -L/usr/X11R6/lib -lX11 -lXmu -lXi -lXext
! GLW_LIB_DEPS = -L/usr/X11R6/lib -lX11 -lXt $(TOP)/lib/GL.dylib
! APP_LIB_DEPS = -L$(TOP)/lib -l$(GLUT_LIB) -l$(GLU_LIB) -l$(GL_LIB) -L/usr/X11R6/lib -lX11 -lXmu -lXt -lXi -lm
  
  # omit glw lib for now:
! SRC_DIRS = mesa glu glut/glx
  
--- 7,31 ----
  # Compiler and flags
  CC = cc
  CXX = cc
! CFLAGS = -O3 -fPIC -fno-common -ffast-math -funroll-loops \
! -fexpensive-optimizations -no-cpp-precomp -dynamic -Ddarwin -DUSE_MGL_NAMESPACE
! CXXFLAGS = -O3 -fPIC -fno-common -ffast-math -funroll-loops \
! -fexpensive-optimizations -no-cpp-precomp -dynamic -Ddarwin -DUSE_MGL_NAMESPACE
  
  # Library names (actual file names)
! GL_LIB_NAME = libMesaGL.dylib
  GLU_LIB_NAME = libGLU.dylib
  GLUT_LIB_NAME = libglut.dylib
  GLW_LIB_NAME = libGLw.dylib
  OSMESA_LIB_NAME = libOSMesa.dylib
  
! GL_LIB_DEPS = -lm -lpthread
! OSMESA_LIB_DEPS = -L$(LIB_DIR) -lMesaGL
! GLU_LIB_DEPS = -L$(LIB_DIR) -lMesaGL
! GLUT_LIB_DEPS = -L$(LIB_DIR) -lMesaGL -lGLU
! GLW_LIB_DEPS = $(TOP)/lib/MesaGL.dylib
! APP_LIB_DEPS = -L$(TOP)/lib -l$(GLUT_LIB) -l$(GLU_LIB) -l$(GL_LIB) -lm
  
  # omit glw lib for now:
! SRC_DIRS = mesa glu
  
diff -p -r Mesa-6.4.2.orig/src/mesa/sources Mesa-6.4.2/src/mesa/sources
*** Mesa-6.4.2.orig/src/mesa/sources	Tue Oct 18 18:02:59 2005
--- Mesa-6.4.2/src/mesa/sources	Wed May 23 11:52:49 2007
*************** SPARC_API =			\
*** 251,266 ****
  COMMON_DRIVER_SOURCES =			\
  	drivers/common/driverfuncs.c
  
! X11_DRIVER_SOURCES =		\
! 	drivers/x11/glxapi.c	\
! 	drivers/x11/fakeglx.c	\
! 	drivers/x11/xfonts.c	\
! 	drivers/x11/xm_api.c	\
! 	drivers/x11/xm_buffer.c	\
! 	drivers/x11/xm_dd.c	\
! 	drivers/x11/xm_line.c	\
! 	drivers/x11/xm_span.c	\
! 	drivers/x11/xm_tri.c
  
  OSMESA_DRIVER_SOURCES = \
  	drivers/osmesa/osmesa.c
--- 251,257 ----
  COMMON_DRIVER_SOURCES =			\
  	drivers/common/driverfuncs.c
  
! X11_DRIVER_SOURCES =
  
  OSMESA_DRIVER_SOURCES = \
  	drivers/osmesa/osmesa.c
EOF
       elif [[ "$OPSYS" == "Linux" ]]; then
           info_box "Patching Mesa for Linux . . ." 1>&3
           patch -p0 <<\EOF
diff -c Mesa-6.4.2.orig/configs/linux Mesa-6.4.2/configs/linux
*** Mesa-6.4.2.orig/configs/linux	Thu Feb  2 19:54:06 2006
--- Mesa-6.4.2/configs/linux	Wed May 23 17:43:25 2007
***************
*** 18,24 ****
  ARCH_FLAGS ?=
  
  DEFINES = -D_POSIX_SOURCE -D_POSIX_C_SOURCE=199309L -D_SVID_SOURCE \
! 	-D_BSD_SOURCE -DPTHREADS -DUSE_XSHM
  
  X11_INCLUDES = -I/usr/X11R6/include
  
--- 18,24 ----
  ARCH_FLAGS ?=
  
  DEFINES = -D_POSIX_SOURCE -D_POSIX_C_SOURCE=199309L -D_SVID_SOURCE \
! 	-D_BSD_SOURCE -DPTHREADS -DUSE_XSHM -DUSE_MGL_NAMESPACE
  
  X11_INCLUDES = -I/usr/X11R6/include
  
EOF
       elif [[ "$OPSYS" == "AIX" ]]; then
           info_box "Patching Mesa for AIX . . ." 1>&3
           patch -p0 <<\EOF
diff -c Mesa-6.4.2.orig/configs/aix Mesa-6.4.2/configs/aix
*** Mesa-6.4.2.orig/configs/aix	Mon Sep 13 14:04:48 2004
--- Mesa-6.4.2/configs/aix	Wed May 23 17:46:34 2007
***************
*** 5,19 ****
  CONFIG_NAME = aix
  
  # Compiler and flags
! CC = cc
  CXX = xlC
  
! CFLAGS = -O -DAIXV3
! CXXFLAGS = -O -DAIXV3
! MKLIB_OPTIONS =
  
  # Library names (actual file names)
! GL_LIB_NAME = libGL.a
  GLU_LIB_NAME = libGLU.a
  GLUT_LIB_NAME = libglut.a
  GLW_LIB_NAME = libGLw.a
--- 5,19 ----
  CONFIG_NAME = aix
  
  # Compiler and flags
! CC = xlc
  CXX = xlC
  
! CFLAGS = -O -DAIXV3 -DUSE_MGL_NAMESPACE
! CXXFLAGS = -O -DAIXV3 -DUSE_MGL_NAMESPACE
! MKLIB_OPTIONS = -static
  
  # Library names (actual file names)
! GL_LIB_NAME = libMesaGL.a
  GLU_LIB_NAME = libGLU.a
  GLUT_LIB_NAME = libglut.a
  GLW_LIB_NAME = libGLw.a
diff -c Mesa-6.4.2.orig/src/mesa/main/glheader.h Mesa-6.4.2/src/mesa/main/glheader.h
*** Mesa-6.4.2.orig/src/mesa/main/glheader.h	Sun Nov 27 10:16:31 2005
--- Mesa-6.4.2/src/mesa/main/glheader.h	Mon Jun 25 15:37:10 2007
***************
*** 305,312 ****
   */
  #if defined(__VMS)
  #define __FUNCTION__ "VMS$NL:"
! #elif !(defined(__GNUC__) && __GNUC__ >= 2) && !(defined(_MSC_VER) && _MSC_VER >= 1300)
! #define __FUNCTION__ "unknown"
  #endif
  
  
--- 305,315 ----
   */
  #if defined(__VMS)
  #define __FUNCTION__ "VMS$NL:"
! #elif __STDC_VERSION__ < 199901L
! # if ((!defined __GNUC__) || (__GNUC__ < 2)) && (!defined __xlC__) && \
!       (!defined(_MSC_VER) || _MSC_VER < 1300)
! #  define __FUNCTION__ "<unknown>"
! # endif
  #endif
  
  
diff -c Mesa-6.4.2.orig/src/mesa/swrast/s_tritemp.h Mesa-6.4.2/src/mesa/swrast/s_tritemp.h
*** Mesa-6.4.2.orig/src/mesa/swrast/s_tritemp.h	Tue Dec 13 06:44:22 2005
--- Mesa-6.4.2/src/mesa/swrast/s_tritemp.h	Mon Jun 25 16:04:48 2007
***************
*** 1156,1162 ****
  #ifdef INTERP_INDEX
                    CLAMP_INTERPOLANT(index, indexStep, len);
  #endif
!                   RENDER_SPAN( span );
                 }
  
                 /*
--- 1156,1164 ----
  #ifdef INTERP_INDEX
                    CLAMP_INTERPOLANT(index, indexStep, len);
  #endif
!                   {
!                      RENDER_SPAN( span );
!                   }
                 }
  
                 /*
EOF
       elif [[ "$OPSYS" == "SunOS" ]]; then
           info_box "Patching Mesa . . ." 1>&3
           patch -p0 <<\EOF
diff -p -r Mesa-6.4.2.orig/configs/solaris-x86-gcc Mesa-6.4.2/configs/solaris-x86-gcc
*** Mesa-6.4.2.orig/configs/solaris-x86-gcc	Mon Sep 13 14:04:48 2004
--- Mesa-6.4.2/configs/solaris-x86-gcc	Wed May 23 11:34:25 2007
*************** CONFIG_NAME = solaris-x86-gcc
*** 7,14 ****
  # Compiler and flags
  CC = gcc
  CXX = g++
! CFLAGS = -O3 -m486 -fPIC -I/usr/openwin/include -DUSE_XSHM
! CXXFLAGS = -O3 -m486 -fPIC
  GLUT_CFLAGS = -fexceptions
  MKLIB_OPTIONS = -static
  
--- 7,14 ----
  # Compiler and flags
  CC = gcc
  CXX = g++
! CFLAGS = -O3 -m486 -fPIC -I/usr/openwin/include -DUSE_XSHM -DUSE_MGL_NAMESPACE
! CXXFLAGS = -O3 -m486 -fPIC -DUSE_MGL_NAMESPACE
  GLUT_CFLAGS = -fexceptions
  MKLIB_OPTIONS = -static
  
*************** GLU_LIB_DEPS = -L$(LIB_DIR) -l$(GL_LIB) 
*** 17,23 ****
  GLUT_LIB_DEPS = -L$(LIB_DIR) -l$(GLU_LIB) -l$(GL_LIB) -L/usr/openwin/lib -lX11 -lXmu -lXt -lXi -lm
  APP_LIB_DEPS = -L$(LIB_DIR) -L/usr/openwin/lib -R/usr/openwin/lib -l$(GLUT_LIB) -l$(GLU_LIB) -l$(GL_LIB) -lm
  
! GL_LIB_NAME = libGL.a
  GLU_LIB_NAME = libGLU.a
  GLUT_LIB_NAME = libglut.a
  GLW_LIB_NAME = libGLw.a
--- 17,23 ----
  GLUT_LIB_DEPS = -L$(LIB_DIR) -l$(GLU_LIB) -l$(GL_LIB) -L/usr/openwin/lib -lX11 -lXmu -lXt -lXi -lm
  APP_LIB_DEPS = -L$(LIB_DIR) -L/usr/openwin/lib -R/usr/openwin/lib -l$(GLUT_LIB) -l$(GLU_LIB) -l$(GL_LIB) -lm
  
! GL_LIB_NAME = libMesaGL.a
  GLU_LIB_NAME = libGLU.a
  GLUT_LIB_NAME = libglut.a
  GLW_LIB_NAME = libGLw.a
EOF
       fi
       if [[ $? != 0 ]] ; then
           echo "Unable to patch Mesa. Wrong version?"
           return 1
       fi
    fi

    #
    # Build Mesa.
    #
    info_box "Building Mesa . . . (~2 minutes)" 1>&3
    cd ${MESA_DIR}
    echo "Invoking command to build Mesa"
    $MAKE $MESA_TARGET
    if [[ $? != 0 ]] ; then
       echo "Mesa build failed.  Giving up"
       return 1
    fi
    
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing Mesa . . ." 1>&3
    echo "Installing Mesa"
    mkdir "$VISITDIR/mesa"
    mkdir "$VISITDIR/mesa/${MESA_VERSION}"
    mkdir "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH"
    mkdir "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/include"
    mkdir "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib"
    mkdir "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/include/GL"
    cp include/GL/*.h "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/include/GL"
    for file in libMesaGL libOSMesa libGLU
    do  
       if [[ -d lib64 ]] ; then
          cp lib64/${file}.$SO_EXT* \
             "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib"
       elif [[ -d lib ]] ; then
          cp lib/${file}.$SO_EXT* \
             "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib"
       else
          find . -name ${file}.$SO_EXT\* -exec cp {} \
             "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib" \;
       fi
    done
    if [[ "$OPSYS" == "Darwin" ]]; then
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        install_name_tool -id \
           "$INSTALLNAMEPATH/libMesaGL.$SO_EXT" \
           "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib/libMesaGL.$SO_EXT"
        install_name_tool -id \
           "$INSTALLNAMEPATH/libOSMesa.$SO_EXT" \
           "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib/libOSMesa.$SO_EXT"
        install_name_tool -change \
           libMesaGL.$SO_EXT \
           "$INSTALLNAMEPATH/libMesaGL.$SO_EXT" \
           "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib/libOSMesa.$SO_EXT"
        install_name_tool -id \
           "$INSTALLNAMEPATH/libGLU.$SO_EXT" \
           "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib/libGLU.$SO_EXT"
        install_name_tool -change \
           libMesaGL.$SO_EXT \
           "$INSTALLNAMEPATH/libMesaGL.$SO_EXT" \
           "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib/libGLU.$SO_EXT"
        if [[ $? != 0 ]] ; then
           echo "Mesa dynamic library install failed.  Giving up"
           return 1
        fi
    elif [[ "$OPSYS" == "AIX" ]]; then
        cd lib
        ar -x libMesaGL.a
        xlC -G -brtl -Wl,-blpdata -Wl,-bmaxdata:0x70000000 \
           -o libMesaGL.$SO_EXT *.o
        cp libMesaGL.$SO_EXT \
           "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib/libMesaGL.$SO_EXT"
        rm *.o
        ar -x libOSMesa.a
        xlC -G -brtl -Wl,-blpdata -Wl,-bmaxdata:0x70000000 \
           -o libOSMesa.$SO_EXT *.o
        cp libOSMesa.$SO_EXT \
           "$VISITDIR/mesa/${MESA_VERSION}/$VISITARCH/lib/libOSMesa.$SO_EXT"
        rm *.o
        cd ..
    fi
    if [[ "$DO_GROUP" == "yes" ]] ; then
       chmod -R ug+w,a+rX "$VISITDIR/mesa"
       chgrp -R ${GROUP} "$VISITDIR/mesa"
    fi
    cd "$START_DIR"
    echo "Done with Mesa"
    return 0
}


# *************************************************************************** #
#                          Function 4, build_qt                               #
# *************************************************************************** #

function build_qt
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -d ${BV_QT_DIR} ]] ; then
       info_box "Found ${BV_QT_DIR} . . ." 1>&3
    elif [[ -e ${QT_FILE} ]] ; then
       info_box "Unzipping/Untarring ${QT_FILE} . . ." 1>&3
       uncompress_untar ${QT_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar $QT_FILE  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -e ${QT_FILE%.gz} ]] ; then
       info_box "Untarring ${QT_FILE%.*} . . ." 1>&3
       tar xf ${QT_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${QT_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi
    echo "Done with untar"

    # Patching
    if [[ ${QT_VERSION} == 3.3.8 ]] ; then
        #
        # If we are running on MacOS X 10.5, patch Qt so that it compiles
        #
        if [[ "$OPSYS" == "Darwin" ]]; then
            VER=$(uname -r)
            if (( ${VER%%.*} > 8 )) ; then
                patch -p0 <<\EOF
diff -rp qt-mac-free-3.3.8/config.tests/mac/mac_version.test qt-mac-free-3.3.8.patched/config.tests/mac/mac_version.test
*** qt-mac-free-3.3.8/config.tests/mac/mac_version.test	2004-04-23 09:40:40.000000000 -0700
--- qt-mac-free-3.3.8.patched/config.tests/mac/mac_version.test	2007-11-16 16:08:27.000000000 -0800
*************** echo "#include <Carbon/Carbon.h>" >$TSTF
*** 21,27 ****
  echo "#include <stdio.h>" >>$TSTFILE
  echo "int main() {" >>$TSTFILE
  echo "  long gestalt_version;" >>$TSTFILE
! echo "  fprintf(stdout, \"%d\\n\", (Gestalt(gestaltSystemVersion, &gestalt_version) == noErr) ? gestalt_version : 0);" >>$TSTFILE
  echo "  return 1;" >>$TSTFILE
  echo "}" >>$TSTFILE
  
--- 21,27 ----
  echo "#include <stdio.h>" >>$TSTFILE
  echo "int main() {" >>$TSTFILE
  echo "  long gestalt_version;" >>$TSTFILE
! /bin/echo "  fprintf(stdout, \"%d\\n\", (Gestalt(gestaltSystemVersion, &gestalt_version) == noErr) ? gestalt_version : 0);" >>$TSTFILE
  echo "  return 1;" >>$TSTFILE
  echo "}" >>$TSTFILE
  
diff -rp qt-mac-free-3.3.8/include/qglobal.h qt-mac-free-3.3.8.patched/include/qglobal.h
*** qt-mac-free-3.3.8/include/qglobal.h	2007-02-02 06:01:04.000000000 -0800
--- qt-mac-free-3.3.8.patched/include/qglobal.h	2007-11-16 16:09:24.000000000 -0800
***************
*** 183,189 ****
  #  if !defined(MAC_OS_X_VERSION_10_4)
  #       define MAC_OS_X_VERSION_10_4 MAC_OS_X_VERSION_10_3 + 1
  #  endif
! #  if (MAC_OS_X_VERSION_MAX_ALLOWED > MAC_OS_X_VERSION_10_4)
  #    error "This version of Mac OS X is unsupported"
  #  endif
  #endif
--- 183,192 ----
  #  if !defined(MAC_OS_X_VERSION_10_4)
  #       define MAC_OS_X_VERSION_10_4 MAC_OS_X_VERSION_10_3 + 1
  #  endif
! #  if !defined(MAC_OS_X_VERSION_10_5)
! #       define MAC_OS_X_VERSION_10_5 MAC_OS_X_VERSION_10_4 + 1
! #  endif
! #  if (MAC_OS_X_VERSION_MAX_ALLOWED > MAC_OS_X_VERSION_10_5)
  #    error "This version of Mac OS X is unsupported"
  #  endif
  #endif
diff -rp qt-mac-free-3.3.8/include/qt_mac.h qt-mac-free-3.3.8.patched/include/qt_mac.h
*** qt-mac-free-3.3.8/include/qt_mac.h	2007-02-02 06:01:13.000000000 -0800
--- qt-mac-free-3.3.8.patched/include/qt_mac.h	2007-11-16 16:13:01.000000000 -0800
***************
*** 54,60 ****
  # define QMAC_DEFAULT_STYLE "QMacStyle" //DefaultStyle
  #endif
  
! #if !defined(Q_WS_MACX) || QT_MACOSX_VERSION < 0x1020 || QT_MACOSX_VERSION >= 0x1030
  # define QMAC_NO_FAKECURSOR
  #endif
  
--- 54,60 ----
  # define QMAC_DEFAULT_STYLE "QMacStyle" //DefaultStyle
  #endif
  
! #if !defined(Q_WS_MACX) || QT_MACOSX_VERSION < 0x1020 || (QT_MACOSX_VERSION >= 0x1030 && QT_MACOSX_VERSION <= 0x1040)
  # define QMAC_NO_FAKECURSOR
  #endif
  
diff -rp qt-mac-free-3.3.8/src/kernel/qcursor_mac.cpp qt-mac-free-3.3.8.patched/src/kernel/qcursor_mac.cpp
*** qt-mac-free-3.3.8/src/kernel/qcursor_mac.cpp	2007-02-02 06:01:16.000000000 -0800
--- qt-mac-free-3.3.8.patched/src/kernel/qcursor_mac.cpp	2007-11-16 16:14:50.000000000 -0800
*************** struct QCursorData : public QShared
*** 177,183 ****
--- 177,185 ----
  #ifdef QMAC_USE_BIG_CURSOR_API
  	char *big_cursor_name;
  #endif
+ #ifdef QMAC_NO_FAKECURSOR
  	CursorImageRec *ci;
+ #endif
  	struct {
  	    QMacAnimateCursor *anim;
  	    ThemeCursor curs;
*************** QCursorData::~QCursorData()
*** 257,264 ****
--- 259,268 ----
      if(type == TYPE_CursPtr) {
  	if(curs.cp.hcurs && curs.cp.my_cursor)
  	    free(curs.cp.hcurs);
+ #ifdef QMAC_NO_FAKECURSOR
      } else if(type == TYPE_CursorImage) {
  	free(curs.ci);
+ #endif
  #ifdef QMAC_USE_BIG_CURSOR_API
      } else if(type == TYPE_BigCursor) {
  	QDUnregisterNamedPixMapCursur(curs.big_cursor_name);
diff -rp qt-mac-free-3.3.8/src/kernel/qt_mac.h qt-mac-free-3.3.8.patched/src/kernel/qt_mac.h
*** qt-mac-free-3.3.8/src/kernel/qt_mac.h	2007-02-02 06:01:13.000000000 -0800
--- qt-mac-free-3.3.8.patched/src/kernel/qt_mac.h	2007-11-16 16:13:01.000000000 -0800
***************
*** 54,60 ****
  # define QMAC_DEFAULT_STYLE "QMacStyle" //DefaultStyle
  #endif
  
! #if !defined(Q_WS_MACX) || QT_MACOSX_VERSION < 0x1020 || QT_MACOSX_VERSION >= 0x1030
  # define QMAC_NO_FAKECURSOR
  #endif
  
--- 54,60 ----
  # define QMAC_DEFAULT_STYLE "QMacStyle" //DefaultStyle
  #endif
  
! #if !defined(Q_WS_MACX) || QT_MACOSX_VERSION < 0x1020 || (QT_MACOSX_VERSION >= 0x1030 && QT_MACOSX_VERSION <= 0x1040)
  # define QMAC_NO_FAKECURSOR
  #endif
  
diff -rp qt-mac-free-3.3.8/src/tools/qglobal.h qt-mac-free-3.3.8.patched/src/tools/qglobal.h
*** qt-mac-free-3.3.8/src/tools/qglobal.h	2007-02-02 06:01:04.000000000 -0800
--- qt-mac-free-3.3.8.patched/src/tools/qglobal.h	2007-11-16 16:09:24.000000000 -0800
***************
*** 183,189 ****
  #  if !defined(MAC_OS_X_VERSION_10_4)
  #       define MAC_OS_X_VERSION_10_4 MAC_OS_X_VERSION_10_3 + 1
  #  endif
! #  if (MAC_OS_X_VERSION_MAX_ALLOWED > MAC_OS_X_VERSION_10_4)
  #    error "This version of Mac OS X is unsupported"
  #  endif
  #endif
--- 183,192 ----
  #  if !defined(MAC_OS_X_VERSION_10_4)
  #       define MAC_OS_X_VERSION_10_4 MAC_OS_X_VERSION_10_3 + 1
  #  endif
! #  if !defined(MAC_OS_X_VERSION_10_5)
! #       define MAC_OS_X_VERSION_10_5 MAC_OS_X_VERSION_10_4 + 1
! #  endif
! #  if (MAC_OS_X_VERSION_MAX_ALLOWED > MAC_OS_X_VERSION_10_5)
  #    error "This version of Mac OS X is unsupported"
  #  endif
  #endif
EOF
            fi
        fi
    fi
 
    #
    # Set up environment variables for Qt.
    #
    cd ${BV_QT_DIR}
    export QTDIR="$PWD"
    export PATH="$QTDIR"/bin:"$PATH"
    if [[ "$OPSYS" == "Darwin" ]]; then
        export DYLD_LIBRARY_PATH="$QTDIR"/lib:"$DYLD_LIBRARY_PATH"
    else
        export LD_LIBRARY_PATH="$QTDIR"/lib:"$LD_LIBRARY_PATH"
    fi

    #
    # Check to see if we are going to have to issue a "-thread" flag.
    #
    THREAD=""
    HAS_THREAD=$(./configure -platform ${QT_PLATFORM} \
-shared -qt-libpng -help | grep thread)
    if [[ "$HAS_THREAD" != "" ]] ; then
       THREAD="-thread"
       echo "Adding threading option"
    else
       echo "Not adding threading"
    fi

    #
    # 64-bit Linux systems are often inconsistent about placing its X-libraries.
    # Qt assumes that they are in the directory /usr/X11R6/lib64.  Some machines
    # have them in /usr/X11R6/lib.  If they do, correct the qmake.conf file
    # with this information.
    #
    if [[ "$QT_PLATFORM" == "linux-g++-64" ]] ; then
       # By placing in environment variable, it removes extraneously whitespace,
       # making "cut" command easier to form.
       QT_X11DIR_TMP=$(cat mkspecs/${QT_PLATFORM}/qmake.conf | \
       grep QMAKE_LIBDIR_X11)
       QT_X11DIR=$(echo $QT_X11DIR_TMP | cut -d' ' -f3)
       if [[ ! -d $QT_X11DIR ]] ; then
          if [[ -d "/usr/X11R6/lib" ]] ; then
             echo "Replacing Qt's X11 dir ($QT_X11DIR) with /usr/X11R6/lib"
             # Convert all '/' to "\/" for later sed'ding
             SED_STR1=$(echo $QT_X11DIR | sed 's/\//\\\//g')
             cat mkspecs/${QT_PLATFORM}/qmake.conf | \
             sed 's/'${SED_STR1}'/\/usr\/X11R6\/lib/g' > tmp.conf
             mv -f mkspecs/${QT_PLATFORM}/qmake.conf \
             mkspecs/${QT_PLATFORM}/qmake.conf.orig
             mv -f tmp.conf mkspecs/${QT_PLATFORM}/qmake.conf
          fi
       fi
    fi
    # A couple of people, including myself, have run into a problem
    # lately in which OpenGL libraries are installed in a place that
    # Qt isn't expecting.  Qt compiles itself without OpenGL support,
    # and that leads to linker problems during the visit build.
    # 
    # If you see libGL.so installed under /usr/lib64, and not in
    # /usr/lib or /usr/X11R6/lib, then you have this problem, and
    # can do this to fix it:
    if [[ "$QT_PLATFORM" == "linux-g++-64" ]] ; then
       if [[ -e /usr/lib64/libGL.so ]] ; then
          echo "Fixing OpenGLs path to /usr/lib64"
          patch -p1 <<\EOF
diff -rp qt-x11-free-3.3.8.orig/config.tests/x11/opengl.test qt-x11-free-3.3.8/config.tests/x11/opengl.test
*** qt-x11-free-3.3.8.orig/config.tests/x11/opengl.test	Mon Jun 16 01:50:04 2003
--- qt-x11-free-3.3.8/config.tests/x11/opengl.test	Fri Feb  8 15:20:03 2008
*************** done
*** 30,36 ****
  LIBS=`sed -n -e '/^QMAKE_LIBS_OPENGL[	 ]*=/ { s/[^=]*=[	 ]*//; s/-l/ /g; p; }' $XCONFIG`
  GLDIRS=`sed -n -e '/^QMAKE_LIBDIR_OPENGL[	 ]*=/ { s/[^=]*=[	 ]*//; p; }' $XCONFIG`
  XDIRS=`sed -n -e '/^QMAKE_LIBDIR_X11[	 ]*=/ { s/[^=]*=[	 ]*//; p; }' $XCONFIG`
! LIBDIRS="$IN_LIBDIRS $GLDIRS $XDIRS /usr/shlib /usr/lib /lib"
  for L in $LIBS; do
      FOUND_LIB=
      F=
--- 30,36 ----
  LIBS=`sed -n -e '/^QMAKE_LIBS_OPENGL[	 ]*=/ { s/[^=]*=[	 ]*//; s/-l/ /g; p; }' $XCONFIG`
  GLDIRS=`sed -n -e '/^QMAKE_LIBDIR_OPENGL[	 ]*=/ { s/[^=]*=[	 ]*//; p; }' $XCONFIG`
  XDIRS=`sed -n -e '/^QMAKE_LIBDIR_X11[	 ]*=/ { s/[^=]*=[	 ]*//; p; }' $XCONFIG`
! LIBDIRS="$IN_LIBDIRS $GLDIRS $XDIRS /usr/shlib /usr/lib64 /lib"
  for L in $LIBS; do
      FOUND_LIB=
      F=
EOF
       fi
    fi

    if [[ "$HAS_THREAD" != "" ]] ; then
       cat mkspecs/${QT_PLATFORM}/qmake.conf | sed 's/qt-mt/qt/g' > tmp.conf
       mv -f mkspecs/${QT_PLATFORM}/qmake.conf \
       mkspecs/${QT_PLATFORM}/qmake.conf.orig2
       mv -f tmp.conf mkspecs/${QT_PLATFORM}/qmake.conf
    fi

    if [[ "$DO_DEBUG" == "yes" ]]; then
       cat mkspecs/${QT_PLATFORM}/qmake.conf | \
       sed '/^QMAKE_CFLAGS_RELEASE/s/$/ -g/' > tmp.conf
       mv -f mkspecs/${QT_PLATFORM}/qmake.conf \
       mkspecs/${QT_PLATFORM}/qmake.conf.orig
       mv -f tmp.conf mkspecs/${QT_PLATFORM}/qmake.conf
    fi

    #
    # Call configure
    #
    info_box "Configuring Qt: ./configure -platform ${QT_PLATFORM} \
-shared -qt-libpng $THREAD" 1>&3
    echo "yes" | ./configure -platform ${QT_PLATFORM} \
-shared -qt-libpng $THREAD | tee qt.config.out
    if [[ $? != 0 ]] ; then
       echo "Qt configure failed. Giving up."
       return 1
    fi
    #
    # Figure out if configure found the OpenGL libraries
    #
    HAS_OPENGL_SUPPORT=`grep "OpenGL support" qt.config.out | sed -e 's/.*\. //'`
    if [[ "$HAS_OPENGL_SUPPORT" != "yes" ]]; then
       echo "Qt configure did not find OpenGL. \
VisIt needs Qt with enabled OpenGL support. Giving up."
       return 1
    fi
    
    #
    # If we had to thread, then the libraries will have a "-mt" appended, which
    # screws up other makefiles.  So modify the Makefile to remove the "-mt".
    #
    if [[ "$HAS_THREAD" != "" ]] ; then
       cat src/Makefile | sed 's/qt-mt/qt/g' > Makefile.tmp
       mv -f src/Makefile src/Makefile.orig
       mv -f Makefile.tmp src/Makefile
       cat tools/designer/uilib/Makefile | sed 's/qt-mt/qt/g' > Makefile2.tmp
       mv -f tools/designer/uilib/Makefile tools/designer/uilib/Makefile.orig
       mv -f Makefile2.tmp tools/designer/uilib/Makefile
    fi
    # having a problem with xlC_r compiling at optimization level 3
    if [[ "$OPSYS" == "AIX" ]]; then
       cat src/Makefile | sed 's/-qstrict -O3/-qstrict -O2/g' > Makefile.tmp
       mv -f Makefile.tmp src/Makefile
    fi
    
    #
    # Build Qt.  Issue only the targets that we need.
    #
    info_box "Building Qt . . . (~10 minutes)" 1>&3
    $MAKE $MAKE_OPT_FLAGS symlinks src-qmake src-moc sub-src
    if [[ $? != 0 ]] ; then
       echo "Qt build failed.  Giving up"
       return 1
    fi
    cd tools/designer/uilib
    $MAKE $MAKE_OPT_FLAGS
    if [[ $? != 0 ]] ; then
       echo "Qt build for libqui failed.  Giving up"
       return 1
    fi
    cd ../../../
    
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing Qt" 1>&3
    echo "Installing Qt"
    echo "Installing to directory $VISITDIR/qt"
    mkdir "$VISITDIR/qt"
    mkdir "$VISITDIR/qt/${QT_VERSION}"
    mkdir "$VISITDIR/qt/${QT_VERSION}/$VISITARCH"
    mkdir "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/bin"
    mkdir "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/include"
    mkdir "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib"
    mkdir "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/include/private"
    cp bin/designer    "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/bin"
    cp bin/findtr      "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/bin"
    cp bin/moc         "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/bin"
    cp bin/qt20fix     "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/bin"
    cp bin/qtrename140 "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/bin"
    cd include; cp *.h "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/include"
    cp private/*.h     "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/include/private"
    cd ../lib;find . -print | \
    cpio -pvmud "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib"
    if [[ "$OPSYS" == "Darwin" ]]; then
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        install_name_tool -id \
          "$INSTALLNAMEPATH/libqt.$SO_EXT" \
          "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib/libqt.$SO_EXT"
        install_name_tool -id \
          "$INSTALLNAMEPATH/libqui.$SO_EXT" \
          "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib/libqui.$SO_EXT"
        install_name_tool -change \
          libqt.3.$SO_EXT \
          "$INSTALLNAMEPATH/libqt.$SO_EXT" \
          "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib/libqui.$SO_EXT"
    elif [[ "$OPSYS" == "AIX" ]]; then
        ln -s \
        "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib/libqt.$SO_EXT.${QT_VERSION}"\
        "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib/libqt.$SO_EXT"
        ln -s "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib/libqui.$SO_EXT.1.0.0" \
          "$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib/libqui.$SO_EXT"
    fi
    if [[ "$DO_GROUP" == "yes" ]] ; then
       chmod -R ug+w,a+rX "$VISITDIR/qt"
       chgrp -R ${GROUP} "$VISITDIR/qt"
    fi
    cd "$START_DIR"
    echo "Done with Qt"
    return 0
}


# *************************************************************************** #
#                          Function 5, build_cmake                            #
# *************************************************************************** #

function build_cmake
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -d ${CMAKE_DIR} ]] ; then
       info_box "Found ${CMAKE_DIR} . . ." 1>&3
    elif [[ -f ${CMAKE_FILE} ]] ; then
       info_box "Unzipping/Tarring ${CMAKE_FILE} . . ." 1>&3
       uncompress_untar ${CMAKE_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar $CMAKE_FILE  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${CMAKE_FILE%.*} ]] ; then
       info_box "Tarring ${CMAKE_FILE%.*} . . ." 1>&3
       tar xf ${CMAKE_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${CMAKE_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    #
    # Patching cmake.
    #
    if [[ ${CMAKE_VERSION} == 2.4.5 ]] ; then
        if [[ "$OPSYS" == "AIX" ]]; then
            info_box "Patching cmake . . ." 1>&3
            patch -p0 <<\EOF
diff -c cmake-2.4.5.orig/Utilities/cmzlib/zconf.h cmake-2.4.5/Utilities/cmzlib/zconf.h
*** cmake-2.4.5.orig/Utilities/cmzlib/zconf.h	Mon Dec  4 08:04:11 2006
--- cmake-2.4.5/Utilities/cmzlib/zconf.h	Mon May 21 15:59:54 2007
***************
*** 89,100 ****
  #  endif
  #endif
  
- #ifndef STDC
- #  ifndef const /* cannot use !defined(STDC) && !defined(const) on Mac */
- #    define const
- #  endif
- #endif
- 
  /* Some Mac compilers merge all .h files incorrectly: */
  #if defined(__MWERKS__) || defined(applec) ||defined(THINK_C) ||defined(__SC__)
  #  define NO_DUMMY_DECL
--- 89,94 ----
EOF
            if [[ $? != 0 ]] ; then
                echo "Unable to patch cmake. Wrong version?"
                return 1
            fi
        fi
    fi

    #
    # Issue "bootstrap", which takes the place of configure for CMake.
    #
    info_box "Bootstrapping CMake . . ." 1>&3
    cd ${CMAKE_DIR}
    if [[ "$OPSYS" == "AIX" ]]; then
        env CXX=xlC CC=xlc CXXFLAGS="" CFLAGS="" ./bootstrap
    else
        env CXXFLAGS="" CFLAGS="" ./bootstrap
    fi
    if [[ $? != 0 ]] ; then
       echo "Bootstrap for cmake failed, giving up."
       return 1
    fi

    #
    # Build the CMake program.
    #
    info_box "Building CMake . . ." 1>&3
    $MAKE $MAKE_OPT_FLAGS
    if [[ $? != 0 ]] ; then
       echo "Cannot build cmake, giving up."
       return 1
    fi

    info_box "Installing Cmake . . ." 1>&3
    echo "Installing Cmake"
    mkdir "$VISITDIR/cmake"
    mkdir "$VISITDIR/cmake/${CMAKE_VERSION}"
    mkdir "$VISITDIR/cmake/${CMAKE_VERSION}/$VISITARCH"
    mkdir "$VISITDIR/cmake/${CMAKE_VERSION}/$VISITARCH/bin"
    cp bin/ccmake "$VISITDIR/cmake/${CMAKE_VERSION}/$VISITARCH/bin"
    cp bin/cmake "$VISITDIR/cmake/${CMAKE_VERSION}/$VISITARCH/bin"
    cp bin/cpack "$VISITDIR/cmake/${CMAKE_VERSION}/$VISITARCH/bin"
    cp bin/ctest "$VISITDIR/cmake/${CMAKE_VERSION}/$VISITARCH/bin"
    echo "Successfully built CMake"
    if [[ "$DO_GROUP" == "yes" ]] ; then
       chmod -R ug+w,a+rX "$VISITDIR/cmake"
       chgrp -R ${GROUP} "$VISITDIR/cmake"
    fi
    cd ..
}


# *************************************************************************** #
#                            Function 6, build_vtk                            #
# *************************************************************************** #

function build_vtk
{
    #
    # CMake is the build system for VTK.  Call another script that will build
    # that program.
    #
    CMAKE_INSTALL="$VISITDIR/cmake/${CMAKE_VERSION}/$VISITARCH/bin"
    if [[ -e ${CMAKE_INSTALL}/cmake ]] ; then
       echo "cmake found"
    else
       build_cmake
       if [[ $? != 0 ]] ; then
          echo "Unable to build cmake.  Giving up"
          return 1
       fi
    fi
    
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -d ${VTK_DIR} ]] ; then
       info_box "Found ${VTK_DIR} . . ." 1>&3
    elif [[ -f ${VTK_FILE} ]] ; then
       info_box "Unzipping/Untarring ${VTK_FILE} . . ." 1>&3
       uncompress_untar ${VTK_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar $VTK_FILE  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${VTK_FILE%.*} ]] ; then
       info_box "Untarring ${VTK_FILE%.*} . . ." 1>&3
       tar xf ${VTK_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${VTK_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    #
    # Apply patches
    #
    if [[ ${VTK_VERSION} == 5.0.0c ]] ; then
        if [[ "$OPSYS" == "Darwin" ]]; then
            info_box "Patching VTK . . ." 1>&3
            patch -p0 << \EOF
diff -rp VTK.orig/CMakeLists.txt VTK/CMakeLists.txt
*** VTK.orig/CMakeLists.txt     Mon Mar 26 14:28:51 2007
--- VTK/CMakeLists.txt  Wed Apr 25 15:41:25 2007
*************** IF(VTK_USE_RENDERING)
*** 196,202 ****
    SET(VTK_KITS ${VTK_KITS} RENDERING)
    SET(VTK_KITS ${VTK_KITS} VOLUMERENDERING)
    SET(VTK_KITS ${VTK_KITS} HYBRID)
-   SET(VTK_KITS ${VTK_KITS} WIDGETS)
  ENDIF(VTK_USE_RENDERING)
  IF(VTK_USE_PARALLEL)
    SET(VTK_KITS ${VTK_KITS} PARALLEL)
--- 196,201 ----
*************** ELSE(CMAKE_COMPILER_IS_GNUCXX)
*** 302,312 ****
  ENDIF(CMAKE_COMPILER_IS_GNUCXX)
  
  IF(APPLE)
!   SET(CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS} -Wl,-flat_namespace,-U,_environ")
!   SET(CMAKE_SHARED_MODULE_CREATE_C_FLAGS "${CMAKE_SHARED_MODULE_CREATE_C_FLAGS} -Wl,-flat_namespace,-U,_environ")
    IF(CMAKE_COMPILER_IS_GNUCXX)
!     SET(VTK_REQUIRED_C_FLAGS "${VTK_REQUIRED_C_FLAGS} -no-cpp-precomp")
!     SET(VTK_REQUIRED_CXX_FLAGS "${VTK_REQUIRED_CXX_FLAGS} -no-cpp-precomp")
      IF(VTK_USE_CARBON)
        SET(VTK_REQUIRED_CXX_FLAGS "${VTK_REQUIRED_CXX_FLAGS} -fpascal-strings")
      ENDIF(VTK_USE_CARBON)
--- 301,311 ----
  ENDIF(CMAKE_COMPILER_IS_GNUCXX)
  
  IF(APPLE)
!   SET(CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS} -Wl,-twolevel_namespace,-headerpad_max_install_names")
!   SET(CMAKE_SHARED_MODULE_CREATE_C_FLAGS "${CMAKE_SHARED_MODULE_CREATE_C_FLAGS} -Wl,-twolevel_namespace,-headerpad_max_install_names")
    IF(CMAKE_COMPILER_IS_GNUCXX)
!     SET(VTK_REQUIRED_C_FLAGS "${VTK_REQUIRED_C_FLAGS} -fno-common -fexceptions")
!     SET(VTK_REQUIRED_CXX_FLAGS "${VTK_REQUIRED_CXX_FLAGS} -fno-common -fexceptions")
      IF(VTK_USE_CARBON)
        SET(VTK_REQUIRED_CXX_FLAGS "${VTK_REQUIRED_CXX_FLAGS} -fpascal-strings")
      ENDIF(VTK_USE_CARBON)
*************** IF(BUILD_TESTING)
*** 874,880 ****
      SUBDIRS(Rendering/Testing)
      SUBDIRS(VolumeRendering/Testing)
      SUBDIRS(Hybrid/Testing)
-     SUBDIRS(Widgets/Testing)
    ENDIF(VTK_USE_RENDERING)
    IF(VTK_USE_PARALLEL)
      SUBDIRS(Parallel/Testing)
--- 873,878 ----
*************** IF(NOT VTK_INSTALL_NO_DEVELOPMENT)
*** 1354,1360 ****
      INSTALL_FILES(${VTK_INSTALL_INCLUDE_DIR} .h vtkRenderingInstantiator)
      INSTALL_FILES(${VTK_INSTALL_INCLUDE_DIR} .h vtkVolumeRenderingInstantiator)
      INSTALL_FILES(${VTK_INSTALL_INCLUDE_DIR} .h vtkHybridInstantiator)
-     INSTALL_FILES(${VTK_INSTALL_INCLUDE_DIR} .h vtkWidgetsInstantiator)
    ENDIF(VTK_USE_RENDERING)
    IF(VTK_USE_PARALLEL)
      INSTALL_FILES(${VTK_INSTALL_INCLUDE_DIR} .h vtkParallelInstantiator)
--- 1352,1357 ----
diff -rp VTK.orig/Rendering/vtkImagingFactory.cxx VTK/Rendering/vtkImagingFactory.cxx
*** VTK.orig/Rendering/vtkImagingFactory.cxx    Mon Mar 26 13:25:40 2007
--- VTK/Rendering/vtkImagingFactory.cxx Wed Apr 25 15:56:01 2007
*************** vtkObject* vtkImagingFactory::CreateInst
*** 202,215 ****
--- 202,233 ----
      {
      if(strcmp(vtkclassname, "vtkTextMapper") == 0)
        {
+ #if defined(VTK_USE_MANGLED_MESA)
+       if ( vtkImagingFactory::UseMesaClasses )
+         {
+         return vtkMesaFreeTypeTextMapper::New();
+         }
+ #endif
        return vtkOpenGLFreeTypeTextMapper::New();
        }
      if(strcmp(vtkclassname, "vtkImageMapper") == 0)
        {
+ #if defined(VTK_USE_MANGLED_MESA)
+       if ( vtkImagingFactory::UseMesaClasses )
+         {
+         return vtkMesaImageMapper::New();
+         }
+ #endif
        return vtkOpenGLImageMapper::New();
        }
      if(strcmp(vtkclassname, "vtkPolyDataMapper2D") == 0)
        {
+ #if defined(VTK_USE_MANGLED_MESA)
+       if ( vtkImagingFactory::UseMesaClasses )
+         {
+         return vtkMesaPolyDataMapper2D::New();
+         }
+ #endif
        return vtkOpenGLPolyDataMapper2D::New();
        }
      }
diff -rp VTK.orig/Utilities/ftgl/CMakeLists.txt VTK/Utilities/ftgl/CMakeLists.txt
*** VTK.orig/Utilities/ftgl/CMakeLists.txt      Mon Mar 26 13:26:34 2007
--- VTK/Utilities/ftgl/CMakeLists.txt   Wed Apr 25 15:46:53 2007
*************** IF(NOT OPENGL_FOUND)
*** 134,144 ****
  ENDIF(NOT OPENGL_FOUND)
  SET (VTKFTGL_LIBS "${VTKFTGL_LIBS};${OPENGL_gl_LIBRARY}")
  
! IF(WIN32)
    IF (FTGL_SUPPORT_MANGLE_MESA)
      SET (VTKFTGL_LIBS "${VTKFTGL_LIBS};${MANGLED_MESA_LIBRARY}")
    ENDIF (FTGL_SUPPORT_MANGLE_MESA)
! ENDIF(WIN32)
  
  #
  # We obviously need FreeType
--- 134,144 ----
  ENDIF(NOT OPENGL_FOUND)
  SET (VTKFTGL_LIBS "${VTKFTGL_LIBS};${OPENGL_gl_LIBRARY}")
  
! IF(APPLE OR WIN32)
    IF (FTGL_SUPPORT_MANGLE_MESA)
      SET (VTKFTGL_LIBS "${VTKFTGL_LIBS};${MANGLED_MESA_LIBRARY}")
    ENDIF (FTGL_SUPPORT_MANGLE_MESA)
! ENDIF(APPLE OR WIN32)
  
  #
  # We obviously need FreeType
EOF
           if [[ $? != 0 ]] ; then
              echo "Unable to patch VTK. Wrong version?"
              return 1
           fi
        fi
        if [[ "$OPSYS" == "Darwin" ]]; then
            # Check for version 6.x.x (MacOS 10.2, Jaguar)
            VER=$(uname -r)
            if (( ${VER%%.*} < 7 )) ; then
               info_box "Patching VTK . . ." 1>&3
               patch -p0 << \EOF
diff -rp VTK.orig/Rendering/vtkCarbonRenderWindow.cxx VTK/Rendering/vtkCarbonRenderWindow.cxx
*** VTK.orig/Rendering/vtkCarbonRenderWindow.cxx      Wed Aug 31 11:39:33 2005
--- VTK/Rendering/vtkCarbonRenderWindow.cxx   Wed Aug 15 17:57:10 2007
*************** void vtkCarbonRenderWindow::CreateAWindo
*** 737,743 ****
        ShowWindow(this->RootWindow);
      }
  
- 
    // install event handler for updating gl region
    // this works for a supplied HIView and an HIView made here
    if(this->WindowId && !this->RegionEventHandler)
--- 737,742 ----
*************** void vtkCarbonRenderWindow::CreateAWindo
*** 745,751 ****
      EventTypeSpec region_events [] = 
        {
          { kEventClassControl, kEventControlOwningWindowChanged},
!         { kEventClassControl, kEventControlVisibilityChanged },
          { kEventClassControl, kEventControlBoundsChanged }
        };
      this->RegionEventHandlerUPP = NewEventHandlerUPP(vtkCarbonRenderWindow::RegionEventProcessor);
--- 744,750 ----
      EventTypeSpec region_events [] = 
        {
          { kEventClassControl, kEventControlOwningWindowChanged},
!         { kEventClassControl, 157 },
          { kEventClassControl, kEventControlBoundsChanged }
        };
      this->RegionEventHandlerUPP = NewEventHandlerUPP(vtkCarbonRenderWindow::RegionEventProcessor);
*************** WindowPtr vtkCarbonRenderWindow::GetRoot
*** 1145,1151 ****
    // if not, then WindowId is set and we're using HIViews.
    // Instead of storing the RootWindow, we ask for it in case of a dynamic 
    // GUI where the root window can change
!   return this->RootWindow ? this->RootWindow : HIViewGetWindow(this->WindowId);
  }
  
  //----------------------------------------------------------------------------
--- 1144,1150 ----
    // if not, then WindowId is set and we're using HIViews.
    // Instead of storing the RootWindow, we ask for it in case of a dynamic 
    // GUI where the root window can change
!   return this->RootWindow ? this->RootWindow : (WindowPtr)this->WindowId;
  }
  
  //----------------------------------------------------------------------------
*************** OSStatus vtkCarbonRenderWindow::RegionEv
*** 1183,1189 ****
        {
        switch (event_kind)
          {
!         case kEventControlVisibilityChanged:
          case kEventControlOwningWindowChanged:
          case kEventControlBoundsChanged:
            vtk_win->UpdateGLRegion();
--- 1182,1188 ----
        {
        switch (event_kind)
          {
!         case 157:
          case kEventControlOwningWindowChanged:
          case kEventControlBoundsChanged:
            vtk_win->UpdateGLRegion();
EOF
              if [[ $? != 0 ]] ; then
                 echo "Unable to patch VTK. Wrong version?"
                 return 1
              fi
           fi
        fi
    fi

    #
    # Execute CMake, which will set up the Makefiles for VTK.  (like configure)
    #
    info_box "Executing CMake on VTK" 1>&3
    cd $VTK_DIR
    CMAKE_BIN=../${CMAKE_DIR}/bin/cmake
    if [[ "$OPSYS" == "Darwin" ]]; then
    ${CMAKE_BIN} \
        -DBUILD_SHARED_LIBS:BOOL=ON\
        -DBUILD_TESTING:BOOL=OFF\
        -DUSE_ANSI_STD_LIB:BOOL=ON\
        -DVTK_USE_MANGLED_MESA:BOOL=ON\
        -DVTK_USE_HYBRID:BOOL=ON\
        -DCMAKE_CXX_FLAGS:STRING=${CXX_OPT_FLAGS}\
        -DCMAKE_CXX_COMPILER:STRING=${CXX_COMPILER}\
        -DCMAKE_C_FLAGS:STRING=${C_OPT_FLAGS}\
        -DCMAKE_C_COMPILER:STRING=${C_COMPILER}\
        -DCMAKE_SHARED_LINKER_FLAGS:STRING=-Wl,-headerpad_max_install_names,-compatibility_version,5.0,-current_version,5.0.0\
        -DMANGLED_MESA_INCLUDE_DIR:PATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/include"\
        -DMANGLED_MESA_LIBRARY:FILEPATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/lib/libMesaGL.${SO_EXT}"\
        -DMANGLED_OSMESA_INCLUDE_DIR:PATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/include"\
        -DMANGLED_OSMESA_LIBRARY:FILEPATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/lib/libOSMesa.${SO_EXT}"\
        .
    elif [[ "$OPSYS" == "IRIX64" ]]; then
    ${CMAKE_BIN} \
        -DBUILD_SHARED_LIBS:BOOL=ON\
        -DBUILD_TESTING:BOOL=OFF\
        -DUSE_ANSI_STD_LIB:BOOL=ON\
        -DVTK_USE_MANGLED_MESA:BOOL=ON\
        -DVTK_USE_HYBRID:BOOL=ON\
        -DCMAKE_CXX_FLAGS:STRING=${CXX_OPT_FLAGS} -LANG:std -64\
        -DCMAKE_CXX_COMPILER:STRING=${CXX_COMPILER}\
        -DCMAKE_C_FLAGS:STRING=${C_OPT_FLAGS}\
        -DCMAKE_C_COMPILER:STRING=${C_COMPILER}\
        -DCMAKE_EXE_LINKER_FLAGS:STRING=-LANG:std -64\
        -DCMAKE_MODULE_LINKER_FLAGS:STRING=-LANG:std -64\
        -DCMAKE_SHARED_LINKER_FLAGS:STRING=-LANG:std -64\
        -DMANGLED_MESA_INCLUDE_DIR:PATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/include"\
        -DMANGLED_MESA_LIBRARY:FILEPATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/lib/libMesaGL.${SO_EXT}"\
        -DMANGLED_OSMESA_INCLUDE_DIR:PATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/include"\
        -DMANGLED_OSMESA_LIBRARY:FILEPATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/lib/libOSMesa.${SO_EXT}"\
        .
    else
    ${CMAKE_BIN} \
        -DBUILD_SHARED_LIBS:BOOL=ON\
        -DBUILD_TESTING:BOOL=OFF\
        -DUSE_ANSI_STD_LIB:BOOL=ON\
        -DVTK_USE_MANGLED_MESA:BOOL=ON\
        -DVTK_USE_HYBRID:BOOL=ON\
        -DCMAKE_CXX_FLAGS:STRING=${CXX_OPT_FLAGS}\
        -DCMAKE_CXX_COMPILER:STRING=${CXX_COMPILER}\
        -DCMAKE_C_FLAGS:STRING=${C_OPT_FLAGS}\
        -DCMAKE_C_COMPILER:STRING=${C_COMPILER}\
        -DMANGLED_MESA_INCLUDE_DIR:PATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/include"\
        -DMANGLED_MESA_LIBRARY:FILEPATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/lib/libMesaGL.${SO_EXT}"\
        -DMANGLED_OSMESA_INCLUDE_DIR:PATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/include"\
        -DMANGLED_OSMESA_LIBRARY:FILEPATH="$VISITDIR/mesa/${MESA_VERSION}/${VISITARCH}/lib/libOSMesa.${SO_EXT}"\
        .
    fi
    if [[ $? != 0 ]] ; then
       echo "Cannot get CMAKE to create the makefiles.  Giving up."
       return 1
    fi

    #
    # Now build VTK.
    #
    info_box "Building VTK . . . (~20 minutes)" 1>&3
    $MAKE $MAKE_OPT_FLAGS
    if [[ $? != 0 ]] ; then
       echo "VTK did not build correctly.  Giving up."
       return 1
    fi

    if [[ "$OPSYS" == "Darwin" ]]; then
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        # fix the internal name with in the libraries
        #
        # first change the libraries name and identification by executing the
        # following bourne shell script
        cd bin
        for i in libvtkCommon libvtkDICOMParser libvtkFiltering \
        libvtkGenericFiltering libvtkGraphics libvtkHybrid libvtkIO \
        libvtkImaging libvtkMPEG2Encode libvtkRendering \
        libvtkVolumeRendering libvtkexpat \
        libvtkfreetype libvtkftgl libvtkjpeg libvtkpng libvtksys \
        libvtktiff libvtkzlib
        do 
           rm $i.$SO_EXT
           cp $i.5.0.0.$SO_EXT $i.$SO_EXT
           install_name_tool -id \
             $INSTALLNAMEPATH/$i.$SO_EXT \
             $i.$SO_EXT
        done
     
        #
        # Next change the dependent libraries names and paths
        for i in libvtkCommon libvtkDICOMParser libvtkFiltering \
        libvtkGenericFiltering libvtkGraphics libvtkHybrid libvtkIO \
        libvtkImaging libvtkMPEG2Encode libvtkRendering \
        libvtkVolumeRendering libvtkexpat \
        libvtkfreetype libvtkftgl libvtkjpeg libvtkpng libvtksys \
        libvtktiff libvtkzlib 
        do
          for j in libvtkCommon libvtkDICOMParser libvtkFiltering \
          libvtkGenericFiltering libvtkGraphics libvtkHybrid libvtkIO \
          libvtkImaging libvtkMPEG2Encode libvtkRendering \
          libvtkVolumeRendering libvtkexpat \
          libvtkfreetype libvtkftgl libvtkjpeg libvtkpng libvtksys \
          libvtktiff libvtkzlib
          do
             install_name_tool -change \
                $j.5.0.$SO_EXT \
                $INSTALLNAMEPATH/$j.$SO_EXT \
                $i.$SO_EXT
          done
        done
        cd ..
    fi

    #
    # Install into the VisIt third party location.
    #
    
    # Save off this directory for later
    cd MangleMesaInclude
    export BAD_MESA="$PWD"
    cd ..

    info_box "Installing VTK . . ." 1>&3
    echo "Installing VTK"
    mkdir "$VISITDIR/vtk"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Common"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Filtering"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/GenericFiltering"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Graphics"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Hybrid"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/IO"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Imaging"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/MangleMesaInclude"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Rendering"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/VolumeRendering"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/lib"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/vtkstd"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities/vtktiff"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities/vtkexpat"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities/vtkzlib"
    mkdir "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities/vtkjpeg"
    cp vtkConfigure.h         "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH"
    cp vtkToolkits.h          "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH"
    cp vtk*Instantiator.h     "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH"
    cp Common/*.h             "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Common"
    cp Common/*.txx           "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Common"
    cp Filtering/*.h          \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Filtering"
    cp Filtering/*.txx        \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Filtering"
    cp GenericFiltering/*.h   \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/GenericFiltering"
    cp Graphics/*.h           \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Graphics"
    cp Hybrid/*.h             "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Hybrid"
    cp IO/*.h                 "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/IO"
    cp Imaging/*.h            "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Imaging"
    cp Rendering/*.h          \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Rendering"
    cp Utilities/*.h          \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities"
    cp Utilities/vtktiff/*.h  \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities/vtktiff"
    cp Utilities/vtkexpat/*.h \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities/vtkexpat"
    cp Utilities/vtkzlib/*.h  \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities/vtkzlib"
    cp Utilities/vtkjpeg/*.h  \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities/vtkjpeg"
    cp VolumeRendering/*.h    \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/VolumeRendering"
    cp MangleMesaInclude/*.h  \
    "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/MangleMesaInclude"
    cp vtkstd/*               "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/vtkstd"
    if [[ "$OPSYS" == "Darwin" ]]; then
        cd bin
        cp *.${SO_EXT}       "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/lib"
        ln -s "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/lib/libvtkjpeg.$SO_EXT" \
        "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/lib/libjpeg.$SO_EXT"
        cd ..
    else
        cp -R bin/*.$SO_EXT*  "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/lib"
    fi
    
    #
    # The MangleMesa headers have absolute paths.  Correct these headers now for
    # the new location they have been copied into.
    #
    cd "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/MangleMesaInclude"
    SED_STR1=$(echo "$BAD_MESA" | sed 's/\//\\\//g')  
    # Converts all '/' to "\/" for later sed'ding 
    SED_STR2=$(echo "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/MangleMesaInclude" |\
    sed 's/\//\\\//g')
    for i in *.h ; do
       cat $i | sed 's/'${SED_STR1}'/'${SED_STR2}'/g' > tmp.h
       mv -f tmp.h $i
    done
    if [[ "$DO_GROUP" == "yes" ]] ; then
       chmod -R ug+w,a+rX "$VISITDIR/vtk"
       chgrp -R ${GROUP} "$VISITDIR/vtk"
    fi
    cd "$START_DIR"
    echo "Done with VTK"
    return 0
}


# *************************************************************************** #
#                         Function 7, build_python                            #
# *************************************************************************** #

function build_python
{
    #
    # Untar the file.
    #
    if [[ -d ${PYTHON_DIR} ]] ; then
       info_box "Found ${PYTHON_DIR} . . ." 1>&3
    else
       info_box "Extracting Python source . . ." 1>&3
       uncompress_untar ${PYTHON_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar $PYTHON_FILE.  Corrupted file or out of space on device?"
          return 1
       fi
    fi
    if [[ $PYTHON__VERSION} == 2.5 ]] ; then
        if [[ "$OPSYS" == "Darwin" ]]; then
            # Check for version >= 7.0.0 (MacOS 10.3, Panther)
            VER=$(uname -r)
            if (( ${VER%%.*} < 7 )) ; then
               info_box "Patching VTK . . ." 1>&3
               patch -p0 << \EOF
diff -rp Python-2.5.orig/Modules/getpath.c Python-2.5/Modules/getpath.c
*** Python-2.5.orig/Modules/getpath.c Sun Jul  9 18:18:57 2006
--- Python-2.5/Modules/getpath.c      Wed Aug 15 18:25:14 2007
***************
*** 3,8 ****
--- 3,9 ----
  #include "Python.h"
  #include "osdefs.h"
  
+ #include <stdint.h>
  #include <sys/types.h>
  #include <string.h>
  
EOF
              if [[ $? != 0 ]] ; then
                 echo "Unable to patch VTK. Wrong version?"
                 return 1
              fi
           fi
        fi
    fi

    #
    # Call configure
    #
    info_box "Configuring Python . . ." 1>&3
    cd ${PYTHON_DIR}
    PYTHON_OPT="$C_OPT_FLAGS"
    echo \
"Invoking command to build Python: ./configure OPT=\"$PTHON_OPT\" \
CXX=\"$CXX_COMPILER\" CC=\"$C_COMPILER\" \
--prefix=\"$VISITDIR/python/$PYTHON_VERSION/$VISITARCH\""
    ./configure OPT="$PYTHON_OPT" CXX="$CXX_COMPILER" CC="$C_COMPILER" \
    --prefix="$VISITDIR/python/$PYTHON_VERSION/$VISITARCH" --disable-ipv6
    if [[ $? != 0 ]] ; then
       echo "Python configure failed.  Giving up"
       return 1
    fi

    if [[ "$OPSYS" == "Darwin" ]]; then
        # Check for version >= 9.0.0 (MacOS 10.5, Leopard)
        VER=$(uname -r)
#       if (( ${VER%%.*} > 8 )) ; then
#          echo '#define SETPGRP_HAVE_ARG' >> pyconfig.h
#       fi
    fi
    #
    # Build Python.
    #
    info_box "Building Python . . . (~3 minutes)" 1>&3
    $MAKE $MAKE_OPT_FLAGS
    if [[ $? != 0 ]] ; then
       echo "Python build failed.  Giving up"
       return 1
    fi
    info_box "Installing Python . . ." 1>&3
    $MAKE install
    if [[ $? != 0 ]] ; then
       echo "Python build (make install) failed.  Giving up"
       return 1
    fi

    #
    # Create a shared library and copy that to the third party install location
    #
    info_box "Creating Python shared library" 1>&3
    echo "Creating shared library"
    if [[ "$OPSYS" == "Darwin" ]]; then
        # Check for version >= 8.0.0 (MacOS 10.4, Tiger) for SystemStubs
        VER=$(uname -r)
        if (( ${VER%%.*} > 7 )) ; then
           USESTUBS="-lSystemStubs"
        else
           USESTUBS=""
        fi
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH=\
"$VISITDIR/python/$PYTHON_VERSION/$VISITARCH/lib/python$PYTHON_VERSION/config"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        if (( ${VER%%.*} > 6 )) ; then
           UNDEFINED="-Wl,-twolevel_namespace,-undefined,dynamic_lookup"
        else
           UNDEFINED="-Wl,-flat_namespace,-undefined,suppress"
        fi
        mkdir tmpdir
        cd tmpdir
        ar x ../libpython${PYTHON_VERSION}.a
        $C_COMPILER -o ../libpython${PYTHON_VERSION}.$SO_EXT \
          -dynamiclib *.o -lSystem $USESTUBS \
          -framework Carbon -Wl,-headerpad_max_install_names \
          -Wl,-install_name,$INSTALLNAMEPATH/libpython$PYTHON_VERSION.$SO_EXT \
          -Wl,-compatibility_version,${PYTHON_COMPATIBILITY_VERSION} \
          -Wl,-current_version,${PYTHON_VERSION} $UNDEFINED
        if [[ $? != 0 ]] ; then
          echo "Python dynamic library build failed.  Giving up"
          return 1
        fi
        cd ..
        rm -rf tmpdir
        cp libpython$PYTHON_VERSION.$SO_EXT \
"$VISITDIR/python/$PYTHON_VERSION/$VISITARCH/lib/python$PYTHON_VERSION/config/"
    elif [[ "$OPSYS" == "AIX" ]]; then
        $C_COMPILER -qmkshrobj \
          -o libpython$PYTHON_VERSION.$SO_EXT libpython$PYTHON_VERSION.a -lm
        cp libpython$PYTHON_VERSION.$SO_EXT \
"$VISITDIR/python/$PYTHON_VERSION/$VISITARCH/lib/python$PYTHON_VERSION/config/"
    else
        mkdir tmpdir
        cd tmpdir
        ar -x ../libpython$PYTHON_VERSION.a
	if [[ "$OPSYS" == "SunOS" ]] ; then
		C_SHARED_FLAG="-Wl,-G"
	else
		C_SHARED_FLAG="-shared"
	fi
        $C_COMPILER $C_OPT_FLAGS $C_SHARED_FLAG \
          -o ../libpython$PYTHON_VERSION.$SO_EXT *.o
        cd ..
        rm -rf tmpdir
        cp libpython$PYTHON_VERSION.$SO_EXT \
"$VISITDIR/python/$PYTHON_VERSION/$VISITARCH/lib/python$PYTHON_VERSION/config/"
    fi
    if [[ "$DO_GROUP" == "yes" ]] ; then
       chmod -R ug+w,a+rX "$VISITDIR/python"
       chgrp -R ${GROUP} "$VISITDIR/python"
    fi
    cd "$START_DIR"
    echo "Done with Python"
    return 0
}


# *************************************************************************** #
#                            Function 8, build_silo                           #
# *************************************************************************** #

function build_silo
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -d ${SILO_DIR} ]] ; then
       info_box "Found ${SILO_DIR} . . ." 1>&3
    elif [[ -f ${SILO_FILE} ]] ; then
       info_box "Unzipping/Untarring ${SILO_FILE} . . ." 1>&3
       uncompress_untar ${SILO_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar $SILO_FILE  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${SILO_FILE%.gz} ]] ; then
       info_box "Untarring ${SILO_FILE%.gz} . . ." 1>&3
       tar xf ${SILO_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${SILO_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi
    #
    # Call configure
    #
    info_box "Configuring Silo . . ." 1>&3
    cd ${SILO_DIR}
    echo "Invoking command to configure Silo"
    SILO_LINK_OPT=""
    if [[ "$DO_HDF5" == "yes" ]] ; then
       export HDF5INCLUDE="$VISITDIR/hdf5/$HDF5_VERSION/$VISITARCH/include"
       export HDF5LIB="$VISITDIR/hdf5/$HDF5_VERSION/$VISITARCH/lib"
       WITHHDF5ARG="--with-hdf5=$HDF5INCLUDE,$HDF5LIB"
       SILO_LINK_OPT="-L$HDF5LIB -lhdf5"
    else
       WITHHDF5ARG="--without-hdf5"
    fi
    if [[ "$DO_SZIP" == "yes" ]] ; then
       export SZIPDIR="$VISITDIR/szip/$SZIP_VERSION/$VISITARCH"
       WITHSZIPARG="--with-szlib=$SZIPDIR"
       SILO_LINK_OPT="$SILO_LINK_OPT -L$SZIPDIR/lib -lsz"
    else
       WITHSZIPARG="--without-szlib"
    fi
    WITHQTINCARG="--with-Qt-include-dir=\
$VISITDIR/qt/${QT_VERSION}/$VISITARCH/include"
    WITHQTBINARG="--with-Qt-bin-dir=\
$VISITDIR/qt/${QT_VERSION}/$VISITARCH/bin"
    WITHQTLIBARG="--with-Qt-lib-dir=\
$VISITDIR/qt/${QT_VERSION}/$VISITARCH/lib"
    if [[ "$OPSYS" == "Darwin" ]]; then
        WITHQTLIBSARG="--with-Qt-lib=\
qt -framework Carbon -framework QuickTime -framework OpenGL -framework AGL"
    elif [[ "$OPSYS" == "Linux" ]]; then
        if [[ "$(uname -m)" == "x86_64" ]] ; then
           WITHQTLIBSARG="--with-Qt-lib=\
qt -lSM -lICE -L/usr/X11R6/lib64 -lX11 -lXext -lXmu -lXt -lXi"
        else
           WITHQTLIBSARG="--with-Qt-lib=\
qt -lSM -lICE -L/usr/X11R6/lib -lX11 -lXext -lXmu -lXt -lXi"
        fi
    elif [[ "$OPSYS" == "AIX" ]]; then
        WITHQTLIBSARG="--with-Qt-lib=\
qt -lSM -lICE -L/usr/X11R6/lib -lX11 -lXext -lXt -lXi"
    elif [[ "$OPSYS" == "IRIX64" ]]; then
        WITHQTLIBSARG="--with-Qt-lib=\
qt -lSM -lICE -L/usr/X11R6/lib -lX11 -lXext -lXmu -lXt -lXi"
    elif [[ "$OPSYS" == "SunOS" ]]; then
        WITHQTLIBSARG="--with-Qt-lib=\
qt-mt -L/usr/openwin/lib -L/usr/openwin/lib -lGL -lXmu -lXext -lX11 \
-lresolv -lsocket -lnsl -lSM -lICE -ldl -lpthread -lrt"
    else
        WITHQTLIBSARG="--with-Qt-lib=\
qt -lSM -lICE -L/usr/X11R6/lib -lX11 -lXext -lXmu -lXt -lXi"
    fi
    ./configure CXX="$CXX_COMPILER" CC="$C_COMPILER" \
        CFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS" \
        --prefix="$VISITDIR/silo/$SILO_VERSION/$VISITARCH" \
        "$WITHHDF5ARG" "$WITHSZIPARG" \
        "$WITHQTINCARG" "$WITHQTBINARG" "$WITHQTLIBARG" "$WITHQTLIBSARG" \
        --without-readline --disable-fortran --disable-browser --enable-silex
    if [[ $? != 0 ]] ; then
       echo "Silo configure failed.  Giving up"
       return 1
    fi

    #
    # Build Silo
    #
    info_box "Building Silo . . . (~2 minutes)" 1>&3
    echo "Building Silo"
    $MAKE $MAKE_OPT_FLAGS
    if [[ $? != 0 ]] ; then
       echo "Silo build failed.  Giving up"
       return 1
    fi
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing Silo . . ." 1>&3
    echo "Installing Silo"

    if [[ "$OPSYS" == "Darwin" ]]; then
        mkdir "$VISITDIR/silo"
        mkdir "$VISITDIR/silo/${SILO_VERSION}"
        mkdir "$VISITDIR/silo/${SILO_VERSION}/$VISITARCH"
        mkdir "$VISITDIR/silo/${SILO_VERSION}/$VISITARCH/include"
        mkdir "$VISITDIR/silo/${SILO_VERSION}/$VISITARCH/lib"
        cp src/silo/silo.h   \
"$VISITDIR/silo/${SILO_VERSION}/$VISITARCH/include"
        cp src/silo/silo.inc \
"$VISITDIR/silo/${SILO_VERSION}/$VISITARCH/include"
        cp src/silo/pmpio.h \
"$VISITDIR/silo/${SILO_VERSION}/$VISITARCH/include"
        #
        # Make dynamic executable
        #
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/silo/${SILO_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        # Remove the tmp directory if it is already present
        if [[ -d tmp ]] ; then
            rm -rf tmp
        fi
        mkdir tmp
        cd tmp
        SILO_H5=""
        if [[ "$DO_HDF5" == "yes" ]] ; then
            SILO_H5="h5"
        fi
        ar x ../src/.libs/libsilo${SILO_H5}.a
        $C_COMPILER -dynamiclib -o libsilo${SILO_H5}.${SO_EXT} *.o \
           -Wl,-headerpad_max_install_names \
           -Wl,-install_name,$INSTALLNAMEPATH/libsilo${SILO_H5}.${SO_EXT} \
           -Wl,-compatibility_version,${SILO_COMPATIBILITY_VERSION} \
           -Wl,-current_version,${SILO_VERSION} $SILO_LINK_OPT
        if [[ $? != 0 ]] ; then
           echo "Silo dynamic library build failed.  Giving up"
           return 1
        fi
        cp libsilo${SILO_H5}.${SO_EXT}  \
"$VISITDIR/silo/${SILO_VERSION}/$VISITARCH/lib"
    else
        $MAKE install
        if [[ $? != 0 ]] ; then
           echo "Silo install failed.  Giving up"
           return 1
        fi
    fi

    if [[ "$DO_GROUP" == "yes" ]] ; then
       chmod -R ug+w,a+rX "$VISITDIR/silo"
       chgrp -R ${GROUP} "$VISITDIR/silo"
    fi
    cd "$START_DIR"
    echo "Done with Silo"
    return 0
}

# *************************************************************************** #
#                          Function 8.0, build_szip                           #
# *************************************************************************** #

function build_szip
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -d ${SZIP_DIR} ]] ; then
       info_box "Found ${SZIP_DIR} . . ." 1>&3
    elif [[ -f ${SZIP_FILE} ]] ; then
       info_box "Unzipping/Tarring ${SZIP_FILE} . . ." 1>&3
       uncompress_untar ${SZIP_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar $SZIP_FILE  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${SZIP_FILE%.gz} ]] ; then
       info_box "Tarring ${SZIP_FILE%.*} . . ." 1>&3
       tar xf ${SZIP_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${SZIP_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    #
    info_box "Configuring SZIP . . ." 1>&3
    cd ${SZIP_DIR}
    echo "Invoking command to configure SZIP"
    ./configure CXX="$CXX_COMPILER" CC="$C_COMPILER" \
        CFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS" \
        --disable-shared \
        --prefix="$VISITDIR/szip/$SZIP_VERSION/$VISITARCH"
    if [[ $? != 0 ]] ; then
       echo "SZIP configure failed.  Giving up"
       return 1
    fi

    #
    # Build SZIP
    #
    info_box "Building SZIP . . . (~1 minutes)" 1>&3
    echo "Building SZIP"
    $MAKE
    if [[ $? != 0 ]] ; then
       echo "SZIP build failed.  Giving up"
       return 1
    fi
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing SZIP . . ." 1>&3
    echo "Installing SZIP"
    $MAKE install
    if [[ $? != 0 ]] ; then
       echo "SZIP install failed.  Giving up"
       return 1
    fi

    if [[ "$OPSYS" == "Darwin" ]]; then
        #
        # Make dynamic executable, need to patch up the install path and
        # version information.
        #
        info_box "Creating dynamic libraries for SZIP . . ." 1>&3
        echo "Creating dynamic libraries for SZIP"
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/szip/${SZIP_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
## go back to gcc bacause if "external relocation entries" restFP saveFP
##      /usr/bin/libtool -o libsz.${SO_EXT} -dynamic src/.libs/libsz.a \
##      -lSystem -lz -headerpad_max_install_names \
##      -install_name $INSTALLNAMEPATH/libsz.${SO_EXT} \
##      -compatibility_version $SZIP_COMPATIBILITY_VERSION \
##      -current_version $SZIP_VERSION
        $C_COMPILER -dynamiclib -o libsz.${SO_EXT} src/*.o \
           -Wl,-headerpad_max_install_names \
           -Wl,-twolevel_namespace,-undefined,dynamic_lookup \
           -Wl,-install_name,$INSTALLNAMEPATH/libsz.${SO_EXT} \
           -Wl,-compatibility_version,$SZIP_COMPATIBILITY_VERSION \
           -Wl,-current_version,$SZIP_VERSION -lSystem 
        if [[ $? != 0 ]] ; then
           echo "SZIP dynamic library build failed.  Giving up"
           return 1
        fi
        rm -f "$VISITDIR/szip/$SZIP_VERSION/$VISITARCH/lib/libsz.${SO_EXT}"
        cp libsz.${SO_EXT} "$VISITDIR/szip/$SZIP_VERSION/$VISITARCH/lib"
    fi

    if [[ "$DO_GROUP" == "yes" ]] ; then
       chmod -R ug+w,a+rX "$VISITDIR/szip"
       chgrp -R ${GROUP} "$VISITDIR/szip"
    fi
    cd "$START_DIR"
    echo "Done with SZIP"
    return 0
}

# *************************************************************************** #
#                          Function 8.1, build_hdf5                           #
# *************************************************************************** #

function build_hdf5
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -d ${HDF5_DIR} ]] ; then
       info_box "Found ${HDF5_DIR} . . ." 1>&3
    elif [[ -f ${HDF5_FILE} ]] ; then
       info_box "Unzipping/Tarring ${HDF5_FILE} . . ." 1>&3
       uncompress_untar ${HDF5_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar $HDF5_FILE  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${HDF5_FILE%.*} ]] ; then
       info_box "Tarring ${HDF5_FILE%.*} . . ." 1>&3
       tar xf ${HDF5_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${HDF5_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    #
    info_box "Configuring HDF5 . . ." 1>&3
    cd ${HDF5_DIR}
    if [[ "$OPSYS" == "Darwin" ]]; then
        export DYLD_LIBRARY_PATH="$VISITDIR/szip/$SZIP_VERSION/$VISITARCH/lib":$DYLD_LIBRARY_PATH
    fi
    echo "Invoking command to configure HDF5"
    ./configure CXX="$CXX_COMPILER" CC="$C_COMPILER" \
        CFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS" \
        --disable-shared \
        --prefix="$VISITDIR/hdf5/$HDF5_VERSION/$VISITARCH" \
        --with-szlib="$VISITDIR/szip/$SZIP_VERSION/$VISITARCH"
    if [[ $? != 0 ]] ; then
       echo "HDF5 configure failed.  Giving up"
       return 1
    fi

    #
    # Build HDF5
    #
    info_box "Building HDF5 . . . (~2 minutes)" 1>&3
    echo "Building HDF5"
    $MAKE $MAKE_OPT_FLAGS
    if [[ $? != 0 ]] ; then
       echo "HDF5 build failed.  Giving up"
       return 1
    fi
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing HDF5 . . ." 1>&3
    echo "Installing HDF5"
    $MAKE install
    if [[ $? != 0 ]] ; then
       echo "HDF5 install failed.  Giving up"
       return 1
    fi

    # Put a copy SZIP into HDF5 directory for convenience
    ln -s "$VISITDIR/szip/$SZIP_VERSION/$VISITARCH/lib/libsz.a" \
        "$VISITDIR/hdf5/$HDF5_VERSION/$VISITARCH/lib/libsz.a"
    if [[ "$OPSYS" == "Darwin" ]]; then
        #
        # Make dynamic executable, need to patch up the install path and
        # version information.
        #
        info_box "Creating dynamic libraries for HDF5 . . ." 1>&3
        echo "Creating dynamic libraries for HDF5"
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/hdf5/${HDF5_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
## go back to gcc bacause if "external relocation entries" restFP saveFP
##      /usr/bin/libtool -o libhdf5.${SO_EXT} -dynamic src/.libs/libhdf5.a \
##      -lSystem -lz -headerpad_max_install_names \
##      -install_name $INSTALLNAMEPATH/libhdf5.${SO_EXT} \
##      -compatibility_version $HDF5_COMPATIBILITY_VERSION \
##      -current_version $HDF5_VERSION
        $C_COMPILER -dynamiclib -o libhdf5.${SO_EXT} src/*.o \
           -Wl,-headerpad_max_install_names \
           -Wl,-install_name,$INSTALLNAMEPATH/libhdf5.${SO_EXT} \
           -Wl,-compatibility_version,$HDF5_COMPATIBILITY_VERSION \
           -Wl,-current_version,$HDF5_VERSION \
           -L"$VISITDIR/szip/$SZIP_VERSION/$VISITARCH/lib" -lSystem -lsz -lz
        if [[ $? != 0 ]] ; then
           echo "HDF5 dynamic library build failed.  Giving up"
           return 1
        fi
        rm -f "$VISITDIR/hdf5/$HDF5_VERSION/$VISITARCH/lib/libhdf5.${SO_EXT}"
        cp libhdf5.${SO_EXT} "$VISITDIR/hdf5/$HDF5_VERSION/$VISITARCH/lib"
        ln -s "$VISITDIR/szip/$SZIP_VERSION/$VISITARCH/lib/libsz.${SO_EXT}" \
        "$VISITDIR/hdf5/$HDF5_VERSION/$VISITARCH/lib/libsz.${SO_EXT}"
    fi

    if [[ "$DO_GROUP" == "yes" ]] ; then
       chmod -R ug+w,a+rX "$VISITDIR/hdf5"
       chgrp -R ${GROUP} "$VISITDIR/hdf5"
    fi
    cd "$START_DIR"
    echo "Done with HDF5"
    return 0
}


# *************************************************************************** #
#                          Function 8.2, build_mili                           #
# *************************************************************************** #

function build_mili
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -d ${BV_MILI_DIR} ]] ; then
       info_box "Found ${BV_MILI_DIR} . . ." 1>&3
    elif [[ -f ${MILI_FILE} ]] ; then
       info_box "Unzipping/Tarring ${MILI_FILE} . . ." 1>&3
       uncompress_untar ${MILI_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${MILI_FILE}.  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${MILI_FILE%.*} ]] ; then
       info_box "Tarring ${MILI_FILE%.*} . . ." 1>&3
       tar xf ${MILI_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${MILI_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    #
    # Apply patches
    #
    if [[ ${MILI_VERSION} == 1.10.0 ]] ; then
        if [[ "$OPSYS" == "Darwin" ]]; then
            info_box "Patching Mili . . ." 1>&3
            patch -p0 << \EOF
diff -rp mili.orig/src/mili_internal.h mili/src/mili_internal.h
*** mili.orig/src/mili_internal.h       Thu Oct 12 14:31:40 2006
--- mili/src/mili_internal.h    Thu Mar 22 16:39:39 2007
***************
*** 54,59 ****
--- 54,60 ----
  #include <stdio.h>
  #include <stdlib.h>
  #include <dirent.h>
+ #include <sys/types.h>
  #include "list.h"
  #include "misc.h"
  #include "mili.h"
EOF
          if [[ $? != 0 ]] ; then
             echo "Unable to patch Mili. Wrong version?"
             return 1
          fi
       fi
    fi

    info_box "Configuring Mili . . ." 1>&3
    cd $BV_MILI_DIR

    echo "Invoking command to configure Mili"
    ./configure CXX="$CXX_COMPILER" CC="$C_COMPILER" \
        CFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS" \
        --prefix="$VISITDIR/mili/$MILI_VERSION/$VISITARCH"
    if [[ $? != 0 ]] ; then
       echo "Mili configure failed.  Giving up"
       return 1
    fi

    #
    # Build Mili
    #
    info_box "Building Mili . . . (~2 minutes)" 1>&3
    echo "Building Mili"
    cd MILI-$OPSYS-*
    cd src
    $C_COMPILER $C_OPT_FLAGS -D_LARGEFILE64_SOURCE -c \
        mili.c direc.c param.c io.c util.c dep.c svar.c \
        srec.c mesh_u.c wrap_c.c io_mem.c eprtf.c \
        sarray.c gahl.c util.c partition.c ti.c tidirc.c
    if [[ $? != 0 ]] ; then
        echo "Mili build failed.  Giving up"
        return 1
    fi
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing Mili . . ." 1>&3
    echo "Installing Mili"
    mkdir "$VISITDIR/mili"
    mkdir "$VISITDIR/mili/$MILI_VERSION"
    mkdir "$VISITDIR/mili/$MILI_VERSION/$VISITARCH"
    cp mili.h "$VISITDIR/mili/$MILI_VERSION/$VISITARCH"
    cp mili_enum.h "$VISITDIR/mili/$MILI_VERSION/$VISITARCH"
    if [[ "$OPSYS" == "Darwin" ]]; then
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/mili/${MILI_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        $C_COMPILER -dynamiclib -o libmili.$SO_EXT *.o \
          -Wl,-headerpad_max_install_names \
          -Wl,-install_name,$INSTALLNAMEPATH/libmili.${SO_EXT} \
          -Wl,-compatibility_version,$MILI_COMPATIBILITY_VERSION \
          -Wl,-current_version,$MILI_VERSION
        if [[ $? != 0 ]] ; then
          echo "Mili dynamic library build failed.  Giving up"
          return 1
        fi
        cp libmili.$SO_EXT "$VISITDIR/mili/$MILI_VERSION/$VISITARCH"
    else
        ar -rc libmili.a *.o 
        if [[ $? != 0 ]] ; then
          echo "Mili install failed.  Giving up"
          return 1
        fi
        cp libmili.a "$VISITDIR/mili/$MILI_VERSION/$VISITARCH"
    fi

    if [[ "$DO_GROUP" == "yes" ]] ; then
       chmod -R ug+w,a+rX "$VISITDIR/mili"
       chgrp -R ${GROUP} "$VISITDIR/mili"
    fi
    cd "$START_DIR"
    echo "Done with Mili"
    return 0
}


# *************************************************************************** #
#                          Function 8.3, build_hdf4                           #
# *************************************************************************** #

function build_hdf4
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -d ${HDF4_DIR} ]] ; then
       info_box "Found ${HDF4_DIR} . . ." 1>&3
    elif [[ -f ${HDF4_FILE} ]] ; then
       info_box "Unzipping/Tarring ${HDF4_FILE} . . ." 1>&3
       uncompress_untar ${HDF4_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${HDF4_FILE}.  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${HDF4_FILE%.*} ]] ; then
       info_box "Tarring ${HDF4_FILE%.*} . . ." 1>&3
       tar xf ${HDF4_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${HDF4_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    #
    # Apply patches
    #
    if [[ ${HDF4_VERSION} == 4.2.1 ]] ; then
        if [[ "$OPSYS" == "Darwin" ]]; then
            info_box "Patching HDF4 . . ." 1>&3
            patch -p0 << \EOF
*** HDF4.2r1.orig/configure	Tue Feb  8 10:29:27 2005
--- HDF4.2r1/configure	Thu Apr 26 13:30:56 2007
*************** done
*** 5656,5711 ****
  
  echo "$as_me:$LINENO: checking for jpeg_start_decompress in -ljpeg" >&5
  echo $ECHO_N "checking for jpeg_start_decompress in -ljpeg... $ECHO_C" >&6
! if test "${ac_cv_lib_jpeg_jpeg_start_decompress+set}" = set; then
!   echo $ECHO_N "(cached) $ECHO_C" >&6
! else
!   ac_check_lib_save_LIBS=$LIBS
! LIBS="-ljpeg  $LIBS"
! cat >conftest.$ac_ext <<_ACEOF
! #line $LINENO "configure"
! /* confdefs.h.  */
! _ACEOF
! cat confdefs.h >>conftest.$ac_ext
! cat >>conftest.$ac_ext <<_ACEOF
! /* end confdefs.h.  */
! 
! /* Override any gcc2 internal prototype to avoid an error.  */
! #ifdef __cplusplus
! extern "C"
! #endif
! /* We use char because int might match the return type of a gcc2
!    builtin and then its argument prototype would still apply.  */
! char jpeg_start_decompress ();
! int
! main ()
! {
! jpeg_start_decompress ();
!   ;
!   return 0;
! }
! _ACEOF
! rm -f conftest.$ac_objext conftest$ac_exeext
! if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
!   (eval $ac_link) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); } &&
!          { ac_try='test -s conftest$ac_exeext'
!   { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
!   (eval $ac_try) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); }; }; then
!   ac_cv_lib_jpeg_jpeg_start_decompress=yes
! else
!   echo "$as_me: failed program was:" >&5
! sed 's/^/| /' conftest.$ac_ext >&5
! 
! ac_cv_lib_jpeg_jpeg_start_decompress=no
! fi
! rm -f conftest.$ac_objext conftest$ac_exeext conftest.$ac_ext
! LIBS=$ac_check_lib_save_LIBS
! fi
  echo "$as_me:$LINENO: result: $ac_cv_lib_jpeg_jpeg_start_decompress" >&5
  echo "${ECHO_T}$ac_cv_lib_jpeg_jpeg_start_decompress" >&6
  if test $ac_cv_lib_jpeg_jpeg_start_decompress = yes; then
--- 5656,5712 ----
  
  echo "$as_me:$LINENO: checking for jpeg_start_decompress in -ljpeg" >&5
  echo $ECHO_N "checking for jpeg_start_decompress in -ljpeg... $ECHO_C" >&6
! #if test "${ac_cv_lib_jpeg_jpeg_start_decompress+set}" = set; then
! #  echo $ECHO_N "(cached) $ECHO_C" >&6
! #else
! #  ac_check_lib_save_LIBS=$LIBS
! #LIBS="-ljpeg  $LIBS"
! #cat >conftest.$ac_ext <<_ACEOF
! ##line $LINENO "configure"
! #/* confdefs.h.  */
! #_ACEOF
! #cat confdefs.h >>conftest.$ac_ext
! #cat >>conftest.$ac_ext <<_ACEOF
! #/* end confdefs.h.  */
! #
! #/* Override any gcc2 internal prototype to avoid an error.  */
! ##ifdef __cplusplus
! #extern "C"
! ##endif
! #/* We use char because int might match the return type of a gcc2
! #   builtin and then its argument prototype would still apply.  */
! #char jpeg_start_decompress ();
! #int
! #main ()
! #{
! #jpeg_start_decompress ();
! #  ;
! #  return 0;
! #}
! #_ACEOF
! #rm -f conftest.$ac_objext conftest$ac_exeext
! #if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
! #  (eval $ac_link) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); } &&
! #         { ac_try='test -s conftest$ac_exeext'
! #  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
! #  (eval $ac_try) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); }; }; then
! #  ac_cv_lib_jpeg_jpeg_start_decompress=yes
! #else
! #  echo "$as_me: failed program was:" >&5
! #sed 's/^/| /' conftest.$ac_ext >&5
! #
! #ac_cv_lib_jpeg_jpeg_start_decompress=no
! #fi
! #rm -f conftest.$ac_objext conftest$ac_exeext conftest.$ac_ext
! #LIBS=$ac_check_lib_save_LIBS
! #fi
! ac_cv_lib_jpeg_jpeg_start_decompress=yes
  echo "$as_me:$LINENO: result: $ac_cv_lib_jpeg_jpeg_start_decompress" >&5
  echo "${ECHO_T}$ac_cv_lib_jpeg_jpeg_start_decompress" >&6
  if test $ac_cv_lib_jpeg_jpeg_start_decompress = yes; then
*************** echo "${ECHO_T}$ac_cv_type_intp" >&6
*** 6874,7183 ****
  
  echo "$as_me:$LINENO: checking size of int*" >&5
  echo $ECHO_N "checking size of int*... $ECHO_C" >&6
! if test "${ac_cv_sizeof_intp+set}" = set; then
!   echo $ECHO_N "(cached) $ECHO_C" >&6
! else
!   if test "$ac_cv_type_intp" = yes; then
!   # The cast to unsigned long works around a bug in the HP C Compiler
!   # version HP92453-01 B.11.11.23709.GP, which incorrectly rejects
!   # declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.
!   # This bug is HP SR number 8606223364.
!   if test "$cross_compiling" = yes; then
!   # Depending upon the size, compute the lo and hi bounds.
! cat >conftest.$ac_ext <<_ACEOF
! #line $LINENO "configure"
! /* confdefs.h.  */
! _ACEOF
! cat confdefs.h >>conftest.$ac_ext
! cat >>conftest.$ac_ext <<_ACEOF
! /* end confdefs.h.  */
! $ac_includes_default
! int
! main ()
! {
! static int test_array [1 - 2 * !(((long) (sizeof (int*))) >= 0)];
! test_array [0] = 0
! 
!   ;
!   return 0;
! }
! _ACEOF
! rm -f conftest.$ac_objext
! if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
!   (eval $ac_compile) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); } &&
!          { ac_try='test -s conftest.$ac_objext'
!   { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
!   (eval $ac_try) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); }; }; then
!   ac_lo=0 ac_mid=0
!   while :; do
!     cat >conftest.$ac_ext <<_ACEOF
! #line $LINENO "configure"
! /* confdefs.h.  */
! _ACEOF
! cat confdefs.h >>conftest.$ac_ext
! cat >>conftest.$ac_ext <<_ACEOF
! /* end confdefs.h.  */
! $ac_includes_default
! int
! main ()
! {
! static int test_array [1 - 2 * !(((long) (sizeof (int*))) <= $ac_mid)];
! test_array [0] = 0
! 
!   ;
!   return 0;
! }
! _ACEOF
! rm -f conftest.$ac_objext
! if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
!   (eval $ac_compile) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); } &&
!          { ac_try='test -s conftest.$ac_objext'
!   { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
!   (eval $ac_try) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); }; }; then
!   ac_hi=$ac_mid; break
! else
!   echo "$as_me: failed program was:" >&5
! sed 's/^/| /' conftest.$ac_ext >&5
! 
! ac_lo=`expr $ac_mid + 1`
!                     if test $ac_lo -le $ac_mid; then
!                       ac_lo= ac_hi=
!                       break
!                     fi
!                     ac_mid=`expr 2 '*' $ac_mid + 1`
! fi
! rm -f conftest.$ac_objext conftest.$ac_ext
!   done
! else
!   echo "$as_me: failed program was:" >&5
! sed 's/^/| /' conftest.$ac_ext >&5
! 
! cat >conftest.$ac_ext <<_ACEOF
! #line $LINENO "configure"
! /* confdefs.h.  */
! _ACEOF
! cat confdefs.h >>conftest.$ac_ext
! cat >>conftest.$ac_ext <<_ACEOF
! /* end confdefs.h.  */
! $ac_includes_default
! int
! main ()
! {
! static int test_array [1 - 2 * !(((long) (sizeof (int*))) < 0)];
! test_array [0] = 0
! 
!   ;
!   return 0;
! }
! _ACEOF
! rm -f conftest.$ac_objext
! if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
!   (eval $ac_compile) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); } &&
!          { ac_try='test -s conftest.$ac_objext'
!   { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
!   (eval $ac_try) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); }; }; then
!   ac_hi=-1 ac_mid=-1
!   while :; do
!     cat >conftest.$ac_ext <<_ACEOF
! #line $LINENO "configure"
! /* confdefs.h.  */
! _ACEOF
! cat confdefs.h >>conftest.$ac_ext
! cat >>conftest.$ac_ext <<_ACEOF
! /* end confdefs.h.  */
! $ac_includes_default
! int
! main ()
! {
! static int test_array [1 - 2 * !(((long) (sizeof (int*))) >= $ac_mid)];
! test_array [0] = 0
! 
!   ;
!   return 0;
! }
! _ACEOF
! rm -f conftest.$ac_objext
! if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
!   (eval $ac_compile) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); } &&
!          { ac_try='test -s conftest.$ac_objext'
!   { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
!   (eval $ac_try) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); }; }; then
!   ac_lo=$ac_mid; break
! else
!   echo "$as_me: failed program was:" >&5
! sed 's/^/| /' conftest.$ac_ext >&5
! 
! ac_hi=`expr '(' $ac_mid ')' - 1`
!                        if test $ac_mid -le $ac_hi; then
!                          ac_lo= ac_hi=
!                          break
!                        fi
!                        ac_mid=`expr 2 '*' $ac_mid`
! fi
! rm -f conftest.$ac_objext conftest.$ac_ext
!   done
! else
!   echo "$as_me: failed program was:" >&5
! sed 's/^/| /' conftest.$ac_ext >&5
! 
! ac_lo= ac_hi=
! fi
! rm -f conftest.$ac_objext conftest.$ac_ext
! fi
! rm -f conftest.$ac_objext conftest.$ac_ext
! # Binary search between lo and hi bounds.
! while test "x$ac_lo" != "x$ac_hi"; do
!   ac_mid=`expr '(' $ac_hi - $ac_lo ')' / 2 + $ac_lo`
!   cat >conftest.$ac_ext <<_ACEOF
! #line $LINENO "configure"
! /* confdefs.h.  */
! _ACEOF
! cat confdefs.h >>conftest.$ac_ext
! cat >>conftest.$ac_ext <<_ACEOF
! /* end confdefs.h.  */
! $ac_includes_default
! int
! main ()
! {
! static int test_array [1 - 2 * !(((long) (sizeof (int*))) <= $ac_mid)];
! test_array [0] = 0
! 
!   ;
!   return 0;
! }
! _ACEOF
! rm -f conftest.$ac_objext
! if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
!   (eval $ac_compile) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); } &&
!          { ac_try='test -s conftest.$ac_objext'
!   { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
!   (eval $ac_try) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); }; }; then
!   ac_hi=$ac_mid
! else
!   echo "$as_me: failed program was:" >&5
! sed 's/^/| /' conftest.$ac_ext >&5
! 
! ac_lo=`expr '(' $ac_mid ')' + 1`
! fi
! rm -f conftest.$ac_objext conftest.$ac_ext
! done
! case $ac_lo in
! ?*) ac_cv_sizeof_intp=$ac_lo;;
! '') { { echo "$as_me:$LINENO: error: cannot compute sizeof (int*), 77
! See \`config.log' for more details." >&5
! echo "$as_me: error: cannot compute sizeof (int*), 77
! See \`config.log' for more details." >&2;}
!    { (exit 1); exit 1; }; } ;;
! esac
! else
!   if test "$cross_compiling" = yes; then
!   { { echo "$as_me:$LINENO: error: cannot run test program while cross compiling
! See \`config.log' for more details." >&5
! echo "$as_me: error: cannot run test program while cross compiling
! See \`config.log' for more details." >&2;}
!    { (exit 1); exit 1; }; }
! else
!   cat >conftest.$ac_ext <<_ACEOF
! #line $LINENO "configure"
! /* confdefs.h.  */
! _ACEOF
! cat confdefs.h >>conftest.$ac_ext
! cat >>conftest.$ac_ext <<_ACEOF
! /* end confdefs.h.  */
! $ac_includes_default
! long longval () { return (long) (sizeof (int*)); }
! unsigned long ulongval () { return (long) (sizeof (int*)); }
! #include <stdio.h>
! #include <stdlib.h>
! int
! main ()
! {
! 
!   FILE *f = fopen ("conftest.val", "w");
!   if (! f)
!     exit (1);
!   if (((long) (sizeof (int*))) < 0)
!     {
!       long i = longval ();
!       if (i != ((long) (sizeof (int*))))
! 	exit (1);
!       fprintf (f, "%ld\n", i);
!     }
!   else
!     {
!       unsigned long i = ulongval ();
!       if (i != ((long) (sizeof (int*))))
! 	exit (1);
!       fprintf (f, "%lu\n", i);
!     }
!   exit (ferror (f) || fclose (f) != 0);
! 
!   ;
!   return 0;
! }
! _ACEOF
! rm -f conftest$ac_exeext
! if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
!   (eval $ac_link) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); } && { ac_try='./conftest$ac_exeext'
!   { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
!   (eval $ac_try) 2>&5
!   ac_status=$?
!   echo "$as_me:$LINENO: \$? = $ac_status" >&5
!   (exit $ac_status); }; }; then
!   ac_cv_sizeof_intp=`cat conftest.val`
! else
!   echo "$as_me: program exited with status $ac_status" >&5
! echo "$as_me: failed program was:" >&5
! sed 's/^/| /' conftest.$ac_ext >&5
! 
! ( exit $ac_status )
! { { echo "$as_me:$LINENO: error: cannot compute sizeof (int*), 77
! See \`config.log' for more details." >&5
! echo "$as_me: error: cannot compute sizeof (int*), 77
! See \`config.log' for more details." >&2;}
!    { (exit 1); exit 1; }; }
! fi
! rm -f core core.* *.core gmon.out bb.out conftest$ac_exeext conftest.$ac_objext conftest.$ac_ext
! fi
! fi
! rm -f conftest.val
! else
!   ac_cv_sizeof_intp=0
! fi
! fi
  echo "$as_me:$LINENO: result: $ac_cv_sizeof_intp" >&5
  echo "${ECHO_T}$ac_cv_sizeof_intp" >&6
  cat >>confdefs.h <<_ACEOF
--- 6875,7185 ----
  
  echo "$as_me:$LINENO: checking size of int*" >&5
  echo $ECHO_N "checking size of int*... $ECHO_C" >&6
! #if test "${ac_cv_sizeof_intp+set}" = set; then
! #  echo $ECHO_N "(cached) $ECHO_C" >&6
! #else
! #  if test "$ac_cv_type_intp" = yes; then
! #  # The cast to unsigned long works around a bug in the HP C Compiler
! #  # version HP92453-01 B.11.11.23709.GP, which incorrectly rejects
! #  # declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.
! #  # This bug is HP SR number 8606223364.
! #  if test "$cross_compiling" = yes; then
! #  # Depending upon the size, compute the lo and hi bounds.
! #cat >conftest.$ac_ext <<_ACEOF
! ##line $LINENO "configure"
! #/* confdefs.h.  */
! #_ACEOF
! #cat confdefs.h >>conftest.$ac_ext
! #cat >>conftest.$ac_ext <<_ACEOF
! #/* end confdefs.h.  */
! #$ac_includes_default
! #int
! #main ()
! #{
! #static int test_array [1 - 2 * !(((long) (sizeof (int*))) >= 0)];
! #test_array [0] = 0
! #
! #  ;
! #  return 0;
! #}
! #_ACEOF
! #rm -f conftest.$ac_objext
! #if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
! #  (eval $ac_compile) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); } &&
! #         { ac_try='test -s conftest.$ac_objext'
! #  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
! #  (eval $ac_try) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); }; }; then
! #  ac_lo=0 ac_mid=0
! #  while :; do
! #    cat >conftest.$ac_ext <<_ACEOF
! ##line $LINENO "configure"
! #/* confdefs.h.  */
! #_ACEOF
! #cat confdefs.h >>conftest.$ac_ext
! #cat >>conftest.$ac_ext <<_ACEOF
! #/* end confdefs.h.  */
! #$ac_includes_default
! #int
! #main ()
! #{
! #static int test_array [1 - 2 * !(((long) (sizeof (int*))) <= $ac_mid)];
! #test_array [0] = 0
! #
! #  ;
! #  return 0;
! #}
! #_ACEOF
! #rm -f conftest.$ac_objext
! #if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
! #  (eval $ac_compile) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); } &&
! #         { ac_try='test -s conftest.$ac_objext'
! #  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
! #  (eval $ac_try) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); }; }; then
! #  ac_hi=$ac_mid; break
! #else
! #  echo "$as_me: failed program was:" >&5
! #sed 's/^/| /' conftest.$ac_ext >&5
! #
! #ac_lo=`expr $ac_mid + 1`
! #                    if test $ac_lo -le $ac_mid; then
! #                      ac_lo= ac_hi=
! #                      break
! #                    fi
! #                    ac_mid=`expr 2 '*' $ac_mid + 1`
! #fi
! #rm -f conftest.$ac_objext conftest.$ac_ext
! #  done
! #else
! #  echo "$as_me: failed program was:" >&5
! #sed 's/^/| /' conftest.$ac_ext >&5
! #
! #cat >conftest.$ac_ext <<_ACEOF
! ##line $LINENO "configure"
! #/* confdefs.h.  */
! #_ACEOF
! #cat confdefs.h >>conftest.$ac_ext
! #cat >>conftest.$ac_ext <<_ACEOF
! #/* end confdefs.h.  */
! #$ac_includes_default
! #int
! #main ()
! #{
! #static int test_array [1 - 2 * !(((long) (sizeof (int*))) < 0)];
! #test_array [0] = 0
! #
! #  ;
! #  return 0;
! #}
! #_ACEOF
! #rm -f conftest.$ac_objext
! #if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
! #  (eval $ac_compile) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); } &&
! #         { ac_try='test -s conftest.$ac_objext'
! #  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
! #  (eval $ac_try) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); }; }; then
! #  ac_hi=-1 ac_mid=-1
! #  while :; do
! #    cat >conftest.$ac_ext <<_ACEOF
! ##line $LINENO "configure"
! #/* confdefs.h.  */
! #_ACEOF
! #cat confdefs.h >>conftest.$ac_ext
! #cat >>conftest.$ac_ext <<_ACEOF
! #/* end confdefs.h.  */
! #$ac_includes_default
! #int
! #main ()
! #{
! #static int test_array [1 - 2 * !(((long) (sizeof (int*))) >= $ac_mid)];
! #test_array [0] = 0
! #
! #  ;
! #  return 0;
! #}
! #_ACEOF
! #rm -f conftest.$ac_objext
! #if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
! #  (eval $ac_compile) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); } &&
! #         { ac_try='test -s conftest.$ac_objext'
! #  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
! #  (eval $ac_try) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); }; }; then
! #  ac_lo=$ac_mid; break
! #else
! #  echo "$as_me: failed program was:" >&5
! #sed 's/^/| /' conftest.$ac_ext >&5
! #
! #ac_hi=`expr '(' $ac_mid ')' - 1`
! #                       if test $ac_mid -le $ac_hi; then
! #                         ac_lo= ac_hi=
! #                         break
! #                       fi
! #                       ac_mid=`expr 2 '*' $ac_mid`
! #fi
! #rm -f conftest.$ac_objext conftest.$ac_ext
! #  done
! #else
! #  echo "$as_me: failed program was:" >&5
! #sed 's/^/| /' conftest.$ac_ext >&5
! #
! #ac_lo= ac_hi=
! #fi
! #rm -f conftest.$ac_objext conftest.$ac_ext
! #fi
! #rm -f conftest.$ac_objext conftest.$ac_ext
! ## Binary search between lo and hi bounds.
! #while test "x$ac_lo" != "x$ac_hi"; do
! #  ac_mid=`expr '(' $ac_hi - $ac_lo ')' / 2 + $ac_lo`
! #  cat >conftest.$ac_ext <<_ACEOF
! ##line $LINENO "configure"
! #/* confdefs.h.  */
! #_ACEOF
! #cat confdefs.h >>conftest.$ac_ext
! #cat >>conftest.$ac_ext <<_ACEOF
! #/* end confdefs.h.  */
! #$ac_includes_default
! #int
! #main ()
! #{
! #static int test_array [1 - 2 * !(((long) (sizeof (int*))) <= $ac_mid)];
! #test_array [0] = 0
! #
! #  ;
! #  return 0;
! #}
! #_ACEOF
! #rm -f conftest.$ac_objext
! #if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
! #  (eval $ac_compile) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); } &&
! #         { ac_try='test -s conftest.$ac_objext'
! #  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
! #  (eval $ac_try) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); }; }; then
! #  ac_hi=$ac_mid
! #else
! #  echo "$as_me: failed program was:" >&5
! #sed 's/^/| /' conftest.$ac_ext >&5
! #
! #ac_lo=`expr '(' $ac_mid ')' + 1`
! #fi
! #rm -f conftest.$ac_objext conftest.$ac_ext
! #done
! #case $ac_lo in
! #?*) ac_cv_sizeof_intp=$ac_lo;;
! #'') { { echo "$as_me:$LINENO: error: cannot compute sizeof (int*), 77
! #See \`config.log' for more details." >&5
! #echo "$as_me: error: cannot compute sizeof (int*), 77
! #See \`config.log' for more details." >&2;}
! #   { (exit 1); exit 1; }; } ;;
! #esac
! #else
! #  if test "$cross_compiling" = yes; then
! #  { { echo "$as_me:$LINENO: error: cannot run test program while cross compiling
! #See \`config.log' for more details." >&5
! #echo "$as_me: error: cannot run test program while cross compiling
! #See \`config.log' for more details." >&2;}
! #   { (exit 1); exit 1; }; }
! #else
! #  cat >conftest.$ac_ext <<_ACEOF
! ##line $LINENO "configure"
! #/* confdefs.h.  */
! #_ACEOF
! #cat confdefs.h >>conftest.$ac_ext
! #cat >>conftest.$ac_ext <<_ACEOF
! #/* end confdefs.h.  */
! #$ac_includes_default
! #long longval () { return (long) (sizeof (int*)); }
! #unsigned long ulongval () { return (long) (sizeof (int*)); }
! ##include <stdio.h>
! ##include <stdlib.h>
! #int
! #main ()
! #{
! #
! #  FILE *f = fopen ("conftest.val", "w");
! #  if (! f)
! #    exit (1);
! #  if (((long) (sizeof (int*))) < 0)
! #    {
! #      long i = longval ();
! #      if (i != ((long) (sizeof (int*))))
! #	exit (1);
! #      fprintf (f, "%ld\n", i);
! #    }
! #  else
! #    {
! #      unsigned long i = ulongval ();
! #      if (i != ((long) (sizeof (int*))))
! #	exit (1);
! #      fprintf (f, "%lu\n", i);
! #    }
! #  exit (ferror (f) || fclose (f) != 0);
! #
! #  ;
! #  return 0;
! #}
! #_ACEOF
! #rm -f conftest$ac_exeext
! #if { (eval echo "$as_me:$LINENO: \"$ac_link\"") >&5
! #  (eval $ac_link) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); } && { ac_try='./conftest$ac_exeext'
! #  { (eval echo "$as_me:$LINENO: \"$ac_try\"") >&5
! #  (eval $ac_try) 2>&5
! #  ac_status=$?
! #  echo "$as_me:$LINENO: \$? = $ac_status" >&5
! #  (exit $ac_status); }; }; then
! #  ac_cv_sizeof_intp=`cat conftest.val`
! #else
! #  echo "$as_me: program exited with status $ac_status" >&5
! #echo "$as_me: failed program was:" >&5
! #sed 's/^/| /' conftest.$ac_ext >&5
! #
! #( exit $ac_status )
! #{ { echo "$as_me:$LINENO: error: cannot compute sizeof (int*), 77
! #See \`config.log' for more details." >&5
! #echo "$as_me: error: cannot compute sizeof (int*), 77
! #See \`config.log' for more details." >&2;}
! #   { (exit 1); exit 1; }; }
! #fi
! #rm -f core core.* *.core gmon.out bb.out conftest$ac_exeext conftest.$ac_objext conftest.$ac_ext
! #fi
! #fi
! #rm -f conftest.val
! #else
! #  ac_cv_sizeof_intp=0
! #fi
! #fi
! ac_cv_sizeof_intp=4
  echo "$as_me:$LINENO: result: $ac_cv_sizeof_intp" >&5
  echo "${ECHO_T}$ac_cv_sizeof_intp" >&6
  cat >>confdefs.h <<_ACEOF
*** HDF4.2r1.orig/hdf/src/hdfi.h	Mon Jan 24 19:36:44 2005
--- HDF4.2r1/hdf/src/hdfi.h	Thu Apr 26 13:39:53 2007
***************
*** 10,16 ****
   *                                                                          *
   ****************************************************************************/
  
! /* $Id: hdfi.h,v 1.156 2005/01/25 03:36:44 epourmal Exp $ */
  
  #ifndef HDFI_H
  #define HDFI_H
--- 10,16 ----
   *                                                                          *
   ****************************************************************************/
  
! /* $Id: hdfi.h 4798 2006-12-06 20:51:13Z epourmal $ */
  
  #ifndef HDFI_H
  #define HDFI_H
***************
*** 62,67 ****
--- 62,68 ----
  #define     DFMT_MIPSEL         0x4441
  #define     DFMT_PC             0x4441
  #define     DFMT_APPLE          0x1111
+ #define     DFMT_APPLE_INTEL    0x4441
  #define     DFMT_MAC            0x1111
  #define     DFMT_SUN386         0x4441
  #define     DFMT_NEXT           0x1111
*************** typedef int               hdf_pint_t;   
*** 607,612 ****
--- 608,626 ----
  
  #endif /* CRAYMPP */
  
+ /* CRAY XT3
+  * Note from RedStorm helpdesk,
+  * When I compile a C code with the '-v' option, it indicates that the compile
+  * is done with the macros __QK_USER__ and __LIBCATAMOUNT__ defined.  In
+  * addition, there are other macros like __x86_64__ defined as well, to
+  * indicate processor type.  __QK_USER__ might be a good check for Catamount,
+  * and __x86_64__ might be good for Opteron node.  You might try something
+  * like the following in a header file:
+  */
+ #if ((defined(__QK_USER__)) && (defined(__x86_64__)))
+ #define __CRAY_XT3__
+ #endif
+ 
  #if defined(VMS) || defined(vms)
  
  #ifdef GOT_MACHINE
*************** Please check your Makefile.
*** 736,742 ****
  #include <sys/types.h>
  #include <sys/file.h>               /* for unbuffered i/o stuff */
  #include <sys/stat.h>
! #define DF_MT   DFMT_APPLE 
  typedef void            VOID;
  typedef void            *VOIDP;
  typedef char            *_fcd;
--- 750,764 ----
  #include <sys/types.h>
  #include <sys/file.h>               /* for unbuffered i/o stuff */
  #include <sys/stat.h>
! #ifdef __i386
! #ifndef INTEL86
! #define INTEL86   /* we need this Intel define or bad things happen later */
! #endif /* INTEL86 */
! #define DF_MT   DFMT_APPLE_INTEL
! #else
! #define DF_MT   DFMT_APPLE
! #endif /* __i386 */
! 
  typedef void            VOID;
  typedef void            *VOIDP;
  typedef char            *_fcd;
*************** void exit(int status);
*** 886,892 ****
  #endif /*MAC*/
  
  /* Metrowerks Mac compiler defines some PC stuff so need to exclude this on the Mac */
! #if !(defined(macintosh) || defined(MAC))
  
  #if defined _M_ALPHA || defined _M_IX86 || defined INTEL86 || defined M_I86 || defined M_I386 || defined DOS386 || defined __i386 || defined UNIX386 || defined i386
  #ifndef INTEL86
--- 908,914 ----
  #endif /*MAC*/
  
  /* Metrowerks Mac compiler defines some PC stuff so need to exclude this on the Mac */
! #if !(defined(macintosh) || defined(MAC) || defined (__APPLE__))
  
  #if defined _M_ALPHA || defined _M_IX86 || defined INTEL86 || defined M_I86 || defined M_I386 || defined DOS386 || defined __i386 || defined UNIX386 || defined i386
  #ifndef INTEL86
EOF
           if [[ $? != 0 ]] ; then
              echo "Unable to patch HDF4. Wrong version?"
              return 1
           fi
        fi
    fi

    #
    info_box "Configuring HDF4 . . ." 1>&3
    cd ${HDF4_DIR}
    echo "Invoking command to configure HDF4"
    MAKEOPS=""
    if [[ "$OPSYS" == "Darwin" || "$OPSYS" == "AIX" ]]; then
        ./configure CXX="$CXX_COMPILER" CC="$C_COMPILER" \
        CFLAGS="$C_OPT_FLAGS" \
        CPPFLAGS="-I$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities \
        -I$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/Utilities/vtkjpeg" \
        --prefix="$VISITDIR/hdf4/$HDF4_VERSION/$VISITARCH" \
        --with-jpeg="$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH" \
        --with-szlib="$VISITDIR/szip/$SZIP_VERSION/$VISITARCH" \
        --disable-fortran --disable-dependency-tracking
        if [[ $? != 0 ]] ; then
           echo "HDF4 configure failed.  Giving up"
           return 1
        fi
        MAKEOPS="-i"
    else
        ./configure CXX="$CXX_COMPILER" CC="$C_COMPILER" \
        CFLAGS="$C_OPT_FLAGS" LIBS="-lm" --disable-fortran \
        --prefix="$VISITDIR/hdf4/$HDF4_VERSION/$VISITARCH" \
        --with-szlib="$VISITDIR/szip/$SZIP_VERSION/$VISITARCH"
        if [[ $? != 0 ]] ; then
           echo "HDF4 configure failed.  Giving up"
           return 1
        fi
    fi

    #
    # Build HDF4
    #
    info_box "Building HDF4 . . . (~2 minutes)" 1>&3
    echo "Building HDF4"
    $MAKE $MAKEOPS
    if [[ $? != 0 ]] ; then
       echo "HDF4 build failed.  Giving up"
       return 1
    fi
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing HDF4 . . ." 1>&3
    echo "Installing HDF4"
    $MAKE $MAKEOPS install
    if [[ $? != 0 ]] ; then
       echo "HDF4 install failed.  Giving up"
       return 1
    fi

    if [[ "$OPSYS" == "Darwin" ]]; then
        #
        # Make dynamic executable
        #
        info_box "Creating dynamic libraries for HDF4 . . ." 1>&3
        echo "Creating dynamic libraries for HDF4"
        # Relink libdf.
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/hdf4/${HDF4_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        ${C_COMPILER} -dynamiclib -o libdf.${SO_EXT} hdf/src/*.o \
           -Wl,-headerpad_max_install_names \
           -Wl,-install_name,$INSTALLNAMEPATH/libdf.${SO_EXT} \
           -Wl,-compatibility_version,$HDF4_COMPATIBILITY_VERSION \
           -Wl,-current_version,$HDF4_VERSION \
           -L"$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/lib" \
           -L"$VISITDIR/szip/$SZIP_VERSION/$VISITARCH/lib" \
           -lvtkjpeg -lsz -lz
        if [[ $? != 0 ]] ; then
           echo \
"HDF4 dynamic library build failed for libdf.${SO_EXT}.  Giving up"
           return 1
        fi
        cp libdf.${SO_EXT} "$VISITDIR/hdf4/$HDF4_VERSION/$VISITARCH/lib"

        # Relink libmfhdf.
        ${C_COMPILER} -dynamiclib -o libmfhdf.${SO_EXT} mfhdf/libsrc/*.o \
           -Wl,-headerpad_max_install_names \
           -Wl,-install_name,$INSTALLNAMEPATH/libmfhdf.${SO_EXT} \
           -Wl,-compatibility_version,$HDF4_COMPATIBILITY_VERSION \
           -Wl,-current_version,$HDF4_VERSION \
           -L"$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH/lib" \
           -L"$VISITDIR/szip/$SZIP_VERSION/$VISITARCH/lib" \
           -L"$VISITDIR/hdf4/$HDF4_VERSION/$VISITARCH/lib" \
           -lvtkjpeg -ldf -lsz -lz
        if [[ $? != 0 ]] ; then
           echo \
"HDF4 dynamic library build failed for libmfhdf.${SO_EXT}.  Giving up"
           return 1
        fi
        cp libmfhdf.${SO_EXT} "$VISITDIR/hdf4/$HDF4_VERSION/$VISITARCH/lib"
    fi

    if [[ "$DO_GROUP" == "yes" ]] ; then
       chmod -R ug+w,a+rX "$VISITDIR/hdf4"
       chgrp -R ${GROUP} "$VISITDIR/hdf4"
    fi
    cd "$START_DIR"
    echo "Done with HDF4"
    return 0
}


# *************************************************************************** #
#                         Function 8.4, build_netcdf                          #
# *************************************************************************** #

function build_netcdf
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -d ${NETCDF_DIR} ]] ; then
       info_box "Found ${NETCDF_DIR} . . ." 1>&3
    elif [[ -f ${NETCDF_FILE} ]] ; then
       info_box "Unzipping/Tarring ${NETCDF_FILE} . . ." 1>&3
       uncompress_untar ${NETCDF_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${NETCDF_FILE}.  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${NETCDF_FILE%.*} ]] ; then
       info_box "Tarring ${NETCDF_FILE%.*} . . ." 1>&3
       tar xf ${NETCDF_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${NETCDF_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    #
    # Apply patches
    #
    if [[ ${NETCDF_VERSION} == 3.6.0 ]] ; then
        info_box "Patching NetCDF . . ." 1>&3
        patch -p0 << \EOF
*** netcdf-3.6.0-p1.orig/src/libsrc/netcdf.h	Tue Sep 14 06:41:22 2004
--- netcdf-3.6.0-p1/src/libsrc/netcdf.h	Thu Apr 26 14:14:41 2007
*************** typedef enum {
*** 130,140 ****
   * applications and utilities.  However, nothing is statically allocated to
   * these sizes internally.
   */
! #define NC_MAX_DIMS	512	 /* max dimensions per file */
  #define NC_MAX_ATTRS	4096	 /* max global or per variable attributes */
! #define NC_MAX_VARS	4096	 /* max variables per file */
  #define NC_MAX_NAME	128	 /* max length of a name */
! #define NC_MAX_VAR_DIMS	NC_MAX_DIMS /* max per variable dimensions */
  
  
  /*
--- 130,140 ----
   * applications and utilities.  However, nothing is statically allocated to
   * these sizes internally.
   */
! #define NC_MAX_DIMS	65536	 /* max dimensions per file */
  #define NC_MAX_ATTRS	4096	 /* max global or per variable attributes */
! #define NC_MAX_VARS	524288	 /* max variables per file */
  #define NC_MAX_NAME	128	 /* max length of a name */
! #define NC_MAX_VAR_DIMS	8 	 /* max per variable dimensions */
  
  
  /*
EOF
        if [[ $? != 0 ]] ; then
            echo "Unable to patch NetCDF. Wrong version?"
            return 1
        fi
    fi

    #
    info_box "Configuring NetCDF . . ." 1>&3
    cd $NETCDF_DIR
    echo "Invoking command to configure NetCDF"
    if [[ "$OPSYS" == "Darwin" ]]; then
        EXTRA_FLAGS="--enable-largefile"
    else
        EXTRA_FLAGS=""
    fi
    ./configure CXX="$CXX_COMPILER" CC="$C_COMPILER" \
        CFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS" \
        FC="" $EXTRA_FLAGS \
        --prefix="$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH"
    if [[ $? != 0 ]] ; then
        echo "NetCDF configure failed.  Giving up"
        return 1
    fi

    #
    # Build NetCDF
    #
    info_box "Building NetCDF . . . (~2 minutes)" 1>&3
    echo "Building NetCDF"
    if [[ "$OPSYS" == "Darwin" ]]; then
        cd libsrc
        $C_COMPILER -c $C_OPT_FLAGS -DVERSION=`cat ../VERSION` libvers.c
        $C_COMPILER -c $C_OPT_FLAGS attr.c dim.c error.c nc.c ncio.c \
           ncx.c putget.c string.c v1hpg.c v2i.c var.c
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/netcdf/${NETCDF_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        $C_COMPILER -dynamiclib -o ../libnetcdf.${SO_EXT} *.o \
           -Wl,-headerpad_max_install_names \
           -Wl,-install_name,$INSTALLNAMEPATH/libnetcdf.${SO_EXT} \
           -Wl,-compatibility_version,$NETCDF_COMPATIBILITY_VERSION \
           -Wl,-current_version,$NETCDF_VERSION
        if [[ $? != 0 ]] ; then
           echo "NetCDF dynamic library build failed.  Giving up"
           return 1
        fi
        cd ../cxx
        $CXX_COMPILER -c $CXX_OPT_FLAGS -I../libsrc -I. netcdf.cpp
        $CXX_COMPILER -c $CXX_OPT_FLAGS -I../libsrc -I. ncvalues.cpp
        $CXX_COMPILER -dynamiclib -o ../libnetcdf_c++.${SO_EXT} \
           netcdf.o ncvalues.o -L.. -lnetcdf \
           -Wl,-headerpad_max_install_names \
           -Wl,-install_name,$INSTALLNAMEPATH/libnetcdf_c++.${SO_EXT} \
           -Wl,-compatibility_version,$NETCDF_COMPATIBILITY_VERSION \
           -Wl,-current_version,$NETCDF_VERSION
        if [[ $? != 0 ]] ; then
           echo "NetCDF dynamic library build failed.  Giving up"
           return 1
        fi
        cd ..
    else
        $MAKE
        if [[ $? != 0 ]] ; then
           echo "NetCDF build failed.  Giving up"
           return 1
        fi
    fi
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing NetCDF . . ." 1>&3
    echo "Installing NetCDF"
    mkdir "$VISITDIR/netcdf"
    mkdir "$VISITDIR/netcdf/$NETCDF_VERSION"
    mkdir "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH"
    mkdir "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/include"
    mkdir "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/lib"
    if [[ "$OPSYS" == "Darwin" ]]; then
        cp cxx/ncvalues.h  "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/include"
        cp cxx/netcdf.hh   "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/include"
        cp cxx/netcdfcpp.h "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/include"
        cp libsrc/netcdf.h "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/include"

        cp libnetcdf.${SO_EXT} "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/lib"
        cp libnetcdf_c++.${SO_EXT} \
           "$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/lib"
    else
        $MAKE install
        if [[ $? != 0 ]] ; then
           echo "NetCDF install failed.  Giving up"
           return 1
        fi
    fi

    if [[ "$DO_GROUP" == "yes" ]] ; then
       chmod -R ug+w,a+rX "$VISITDIR/netcdf"
       chgrp -R ${GROUP} "$VISITDIR/netcdf"
    fi
    cd "$START_DIR"
    echo "Done with NetCDF"
    return 0
}


# *************************************************************************** #
#                         Function 8.5, build_cgns                            #
# *************************************************************************** #

function build_cgns
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -d ${CGNS_DIR} ]] ; then
       info_box "Found ${CGNS_DIR} . . ." 1>&3
    elif [[ -f ${CGNS_FILE} ]] ; then
       info_box "Unzipping/Tarring ${CGNS_FILE} . . ." 1>&3
       uncompress_untar ${CGNS_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${CGNS_FILE}.  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${CGNS_FILE%.*} ]] ; then
       info_box "Tarring ${CGNS_FILE%.*} . . ." 1>&3
       tar xf ${CGNS_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${CGNS_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    #
    info_box "Configuring CGNS . . ." 1>&3
    cd ${CGNS_DIR}
    echo "Invoking command to configure CGNS"
    env CXX="$CXX_COMPILER" CC="$C_COMPILER" \
       CFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS" \
       ./configure --prefix="$VISITDIR/cgns/$CGNS_VERSION/$VISITARCH"
    if [[ $? != 0 ]] ; then
       echo "CGNS configure failed.  Giving up"
       return 1
    fi

    #
    # Build CGNS
    #
    info_box "Building CGNS . . . (~2 minutes)" 1>&3
    echo "Building CGNS"
    $MAKE
    if [[ $? != 0 ]] ; then
       echo "CGNS build failed.  Giving up"
       return 1
    fi
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing CGNS . . ." 1>&3
    echo "Installing CGNS"
    mkdir "$VISITDIR/cgns"
    mkdir "$VISITDIR/cgns/$CGNS_VERSION"
    mkdir "$VISITDIR/cgns/$CGNS_VERSION/$VISITARCH"
    mkdir "$VISITDIR/cgns/$CGNS_VERSION/$VISITARCH/include"
    mkdir "$VISITDIR/cgns/$CGNS_VERSION/$VISITARCH/lib"
    $MAKE install
    if [[ $? != 0 ]] ; then
       echo "CGNS install failed.  Giving up"
       return 1
    fi

    if [[ "$OPSYS" == "Darwin" ]]; then
        #
        # Make dynamic executable
        #
        info_box "Creating dynamic libraries for CGNS . . ." 1>&3
        echo "Creating dynamic libraries for CGNS"
        # Check for version >= 8.0.0 (MacOS 10.4, Tiger) for SystemStubs
        VER=$(uname -r)
        if (( ${VER%%.*} > 7 )) ; then
           USESTUBS="-lSystemStubs"
        else
           USESTUBS=""
        fi
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/cgns/${CGNS_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        /usr/bin/libtool -o libcgns.${SO_EXT} -dynamic DARWIN/libcgns.a \
           -lSystem $USESTUBS -headerpad_max_install_names \
           -install_name $INSTALLNAMEPATH/libcgns.${SO_EXT} \
           -compatibility_version $CGNS_COMPATIBILITY_VERSION \
           -current_version $CGNS_VERSION
        if [[ $? != 0 ]] ; then
           echo "CGNS dynamic library creation failed.  Giving up"
           return 1
        fi
        cp libcgns.${SO_EXT} "$VISITDIR/cgns/$CGNS_VERSION/$VISITARCH/lib"
    fi

    if [[ "$DO_GROUP" == "yes" ]] ; then
       chmod -R ug+w,a+rX "$VISITDIR/cgns"
       chgrp -R ${GROUP} "$VISITDIR/cgns"
    fi
    cd "$START_DIR"
    echo "Done with CGNS"
    return 0
}


# *************************************************************************** #
#                         Function 8.6, build_gdal                            #
# *************************************************************************** #

function build_gdal
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -d ${GDAL_DIR} ]] ; then
       info_box "Found ${GDAL_DIR} . . ." 1>&3
    elif [[ -f ${GDAL_FILE} ]] ; then
       info_box "Unzipping/Tarring ${GDAL_FILE} . . ." 1>&3
       uncompress_untar ${GDAL_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${GDAL_FILE}.  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${GDAL_FILE%.*} ]] ; then
       info_box "Tarring ${GDAL_FILE%.*} . . ." 1>&3
       tar xf ${GDAL_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${GDAL_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    #
    info_box "Configuring GDAL . . ." 1>&3
    cd ${GDAL_DIR}
    echo "Invoking command to configure GDAL"
    if [[ "$OPSYS" == "Darwin" ]]; then
       EXTRA_FLAGS="F77=\"\"--enable-shared --disable-static"
    else
       EXTRA_FLAGS="--enable-static --disable-shared"
    fi
    if [[ "$OPSYS" == "Darwin" ]]; then
        # Check for version 6.x.x (MacOS 10.2, Jaguar)
        VER=$(uname -r)
        if (( ${VER%%.*} < 7 )) ; then
            cat frmts/gtiff/libtiff/GNUmakefile | \
               sed 's/tif_zip.o/tif_zip.o lfind.o/' > tmp.make
            mv frmts/gtiff/libtiff/GNUmakefile \
               frmts/gtiff/libtiff/GNUmakefile.orig
            mv tmp.make frmts/gtiff/libtiff/GNUmakefile

            echo > frmts/gtiff/libtiff/lfind.c
            cat >> frmts/gtiff/libtiff/lfind.c << EOF
#include <sys/types.h>
#include <string.h>
#include <unistd.h>

static char *linear_base();

char *
lfind(key, base, nelp, width, compar)
      char *key, *base;
      u_int *nelp, width;
      int (*compar)();
{
      return(linear_base(key, base, nelp, width, compar, 0));
}

static char *
linear_base(key, base, nelp, width, compar, add_flag)
      char *key, *base;
      u_int *nelp, width;
      int (*compar)(), add_flag;
{
      register char *element, *end;

      end = base + *nelp * width;
      for (element = base; element < end; element += width)
              if (!compar(element, key))              /* key found */
                      return(element);

      if (!add_flag)                                  /* key not found */
              return(NULL);

      ++*nelp;
      bcopy(key, end, (int)width);
      return(end);
}
EOF
        fi
    fi
    ./configure CXX="$CXX_COMPILER" CC="$C_COMPILER" $EXTRA_FLAGS \
       CFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS" \
       --prefix="$VISITDIR/gdal/$GDAL_VERSION/$VISITARCH" \
       --with-libtiff=internal --with-gif=internal \
       --with-png=internal --with-jpeg=internal \
       --with-libz=internal --with-netcdf=no \
       --without-jasper --without-python
    if [[ $? != 0 ]] ; then
       echo "GDAL configure failed.  Giving up"
       return 1
    fi

    #
    # Build GDAL
    #
    info_box "Building GDAL . . . (~4 minutes)" 1>&3
    echo "Building GDAL"
    $MAKE $MAKE_OPT_FLAGS
    if [[ $? != 0 ]] ; then
       echo "GDAL build failed.  Giving up"
       return 1
    fi
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing GDAL . . ." 1>&3
    echo "Installing GDAL"
    $MAKE install
    if [[ $? != 0 ]] ; then
       echo "GDAL install failed.  Giving up"
       return 1
    fi

    if [[ "$OPSYS" == "Darwin" ]]; then
        #
        # Make dynamic executable
        #
        info_box "Fixing install_name of dynamic libraries for GDAL . . ." 1>&3
        echo "Fixing install_name of dynamic libraries for GDAL"
        cp .libs/libgdal.1.10.0.${SO_EXT} libgdal.${SO_EXT}
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/gdal/${GDAL_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        install_name_tool -id \
           $INSTALLNAMEPATH/libgdal.${SO_EXT} \
           libgdal.${SO_EXT}
        rm "$VISITDIR/gdal/$GDAL_VERSION/$VISITARCH/lib/libgdal.${SO_EXT}"
        cp libgdal.${SO_EXT} \
        "$VISITDIR/gdal/$GDAL_VERSION/$VISITARCH/lib/libgdal.${SO_EXT}"
    fi

    if [[ "$DO_GROUP" == "yes" ]] ; then
       chmod -R ug+w,a+rX "$VISITDIR/gdal"
       chgrp -R ${GROUP} "$VISITDIR/gdal"
    fi
    cd "$START_DIR"
    echo "Done with GDAL"
    return 0
}


# *************************************************************************** #
#                         Function 8.7, build_exodus                          #
# *************************************************************************** #

function build_exodus
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -d ${EXODUS_DIR} ]] ; then
       info_box "Found ${EXODUS_DIR} . . ." 1>&3
    elif [[ -f ${EXODUS_FILE} ]] ; then
       info_box "Unzipping/Tarring ${EXODUS_FILE} . . ." 1>&3
       uncompress_untar ${EXODUS_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${EXODUS_FILE}.  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${EXODUS_FILE%.*} ]] ; then
       info_box "Tarring ${EXODUS_FILE%.*} . . ." 1>&3
       tar xf ${EXODUS_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${EXODUS_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    cd ${EXODUS_DIR}
    #
    # Build Exodus
    #
    info_box "Building Exodus . . . (~2 minutes)" 1>&3
    echo "Building Exodus"
    cd cbind/src
    export NETCDFLIB="$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/lib"
    export NETCDFINC="$VISITDIR/netcdf/$NETCDF_VERSION/$VISITARCH/include"
    ${C_COMPILER} $C_OPT_FLAGS -I../include -I"$NETCDFINC" -c *.c
    if [[ $? != 0 ]] ; then
        echo "Exodus build failed.  Giving up"
        return 1
    fi
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing Exodus . . ." 1>&3
    echo "Installing Exodus"
    mkdir "$VISITDIR/exodus"
    mkdir "$VISITDIR/exodus/$EXODUS_VERSION"
    mkdir "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH"
    mkdir "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/inc"
    mkdir "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/lib"

    if [[ "$OPSYS" == "Darwin" ]]; then
        #
        # Make dynamic executable
        #
        info_box "Creating dynamic libraries for Exodus . . ." 1>&3
        echo "Creating dynamic libraries for Exodus"
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/exodus/${EXODUS_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        ${C_COMPILER} -dynamiclib -o libexoIIv2c.${SO_EXT} *.o \
           -Wl,-headerpad_max_install_names \
           -Wl,-install_name,$INSTALLNAMEPATH/libexoIIv2c.${SO_EXT} \
           -Wl,-compatibility_version,4.0,-current_version,4.46 \
           -L$NETCDFLIB -lnetcdf
        if [[ $? != 0 ]] ; then
           echo "Creation of dynamic library failed.  Giving up"
           return 1
        fi
        cp libexoIIv2c.${SO_EXT} \
           "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/lib"
        cp ../include/*.h "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/inc"
        ln -s  "../../../../netcdf/$NETCDF_VERSION/$VISITARCH/include/netcdf.h"\
           "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/inc/netcdf.h"
        ln -s  \
        "../../../../netcdf/$NETCDF_VERSION/$VISITARCH/lib/libnetcdf.${SO_EXT}"\
        "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/lib/libnetcdf.${SO_EXT}"
    else
        ar -cr libexoIIv2c.a *.o
        if [[ $? != 0 ]] ; then
           echo "Exodus install failed.  Giving up"
           return 1
        fi
        cp libexoIIv2c.a "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/lib"
        cp ../include/exodusII.h \
        "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/inc"
        cp ../include/exodusII_ext.h \
        "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/inc"
        ln -s  "../../../../netcdf/$NETCDF_VERSION/$VISITARCH/include/netcdf.h" \
        "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/inc/netcdf.h"
        ln -s  \
        "../../../../netcdf/$NETCDF_VERSION/$VISITARCH/lib/libnetcdf.a" \
        "$VISITDIR/exodus/$EXODUS_VERSION/$VISITARCH/lib/libnetcdf.a"
    fi

    if [[ "$DO_GROUP" == "yes" ]] ; then
       chmod -R ug+w,a+rX "$VISITDIR/exodus"
       chgrp -R ${GROUP} "$VISITDIR/exodus"
    fi
    cd "$START_DIR"
    echo "Done with Exodus"
    return 0
}


# *************************************************************************** #
#                         Function 8.8, build_boxlib                          #
# *************************************************************************** #

function build_boxlib
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -d ${BOXLIB_DIR} ]] ; then
       info_box "Found ${BOXLIB_DIR} . . ." 1>&3
    elif [[ -f ${BOXLIB_FILE} ]] ; then
       info_box "Unzipping/Tarring ${BOXLIB_FILE} . . ." 1>&3
       uncompress_untar ${BOXLIB_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${BOXLIB_FILE}.  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${BOXLIB_FILE%.*} ]] ; then
       info_box "Tarring ${BOXLIB_FILE%.*} . . ." 1>&3
       tar xf ${BOXLIB_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${BOXLIB_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    #
    # Apply patches
    #
    if [[ ${BOXLIB_VERSION} == 2.5 ]] ; then
       info_box "Patching Boxlib 3D . . ." 1>&3
       if [[ "$OPSYS" == "AIX" ]]; then
          patch -p0 << \EOF
diff -rp CCSEApps.orig/BoxLib/GNUmakefile CCSEApps/BoxLib/GNUmakefile
*** CCSEApps.orig/BoxLib/GNUmakefile	Sun Jul 22 21:32:20 2001
--- CCSEApps/BoxLib/GNUmakefile	Fri May 18 15:54:14 2007
*************** PBOXLIB_HOME = ..
*** 7,16 ****
  TOP = $(PBOXLIB_HOME)
  
  PRECISION = DOUBLE
! DEBUG     = TRUE
  DIM       = 3
! COMP      = KCC
! USE_MPI   = TRUE
  #NAMESPACE = TRUE
  NAMESPACE = FALSE
  
--- 7,16 ----
  TOP = $(PBOXLIB_HOME)
  
  PRECISION = DOUBLE
! DEBUG     = FALSE
  DIM       = 3
! COMP      = xlC
! USE_MPI   = FALSE
  #NAMESPACE = TRUE
  NAMESPACE = FALSE
  
EOF
       else
          patch -p0 << \EOF
diff -rp CCSEApps.orig/BoxLib/GNUmakefile CCSEApps/BoxLib/GNUmakefile
*** CCSEApps.orig/BoxLib/GNUmakefile	Sun Jul 22 21:32:20 2001
--- CCSEApps/BoxLib/GNUmakefile	Fri May 18 15:54:14 2007
*************** PBOXLIB_HOME = ..
*** 7,16 ****
  TOP = $(PBOXLIB_HOME)
  
  PRECISION = DOUBLE
! DEBUG     = TRUE
  DIM       = 3
! COMP      = KCC
! USE_MPI   = TRUE
  #NAMESPACE = TRUE
  NAMESPACE = FALSE
  
--- 7,16 ----
  TOP = $(PBOXLIB_HOME)
  
  PRECISION = DOUBLE
! DEBUG     = FALSE
  DIM       = 3
! COMP      = 
! USE_MPI   = FALSE
  #NAMESPACE = TRUE
  NAMESPACE = FALSE
  
EOF
       fi
       if [[ $? != 0 ]] ; then
           echo "Unable to patch Boxlib 3D. Wrong version?"
           return 1
       fi
       if [[ "$OPSYS" == "Darwin" ]]; then
           #
           # Apply patches
           #
           info_box "Patching Boxlib 3D . . ." 1>&3
           patch -p0 << \EOF
diff -rp CCSEApps.orig/BoxLib/BaseFab.cpp CCSEApps/BoxLib/BaseFab.cpp
*** CCSEApps.orig/BoxLib/BaseFab.cpp	Wed Mar 19 10:11:09 2003
--- CCSEApps/BoxLib/BaseFab.cpp	Fri Apr 27 15:09:29 2007
***************
*** 28,34 ****
  #include <BArena.H>
  #include <CArena.H>
  #include <Thread.H>
! #include <SPECIALIZE_F.H>
  
  int BoxLib::BF_init::m_cnt = 0;
  
--- 28,34 ----
  #include <BArena.H>
  #include <CArena.H>
  #include <Thread.H>
! //#include <SPECIALIZE_F.H>
  
  int BoxLib::BF_init::m_cnt = 0;
  
*************** BaseFab<Real>::performCopy (const BaseFa
*** 98,105 ****
  
      BL_PROFILE("template<> BaseFab<Real>::performCopy()");
  
!     if (destbox == domain && srcbox == src.box())
!     {
          Real*       data_dst = dataPtr(destcomp);
          const Real* data_src = src.dataPtr(srccomp);
  
--- 98,105 ----
  
      BL_PROFILE("template<> BaseFab<Real>::performCopy()");
  
! //    if (destbox == domain && srcbox == src.box())
! //    {
          Real*       data_dst = dataPtr(destcomp);
          const Real* data_src = src.dataPtr(srccomp);
  
*************** BaseFab<Real>::performCopy (const BaseFa
*** 107,138 ****
          {
              *data_dst++ = *data_src++;
          }
!     }
!     else
!     {
!         const int* destboxlo  = destbox.loVect();
!         const int* destboxhi  = destbox.hiVect();
!         const int* _th_plo    = loVect();
!         const int* _th_phi    = hiVect();
!         const int* _x_lo      = srcbox.loVect();
!         const int* _x_hi      = srcbox.hiVect(); 
!         const int* _x_plo     = src.loVect();
!         const int* _x_phi     = src.hiVect();
!         Real*       _th_p     = dataPtr(destcomp);
!         const Real* _x_p      = src.dataPtr(srccomp);
! 
!         FORT_FASTCOPY(_th_p,
!                       ARLIM(_th_plo),
!                       ARLIM(_th_phi),
!                       D_DECL(destboxlo[0],destboxlo[1],destboxlo[2]),
!                       D_DECL(destboxhi[0],destboxhi[1],destboxhi[2]),
!                       _x_p,
!                       ARLIM(_x_plo),
!                       ARLIM(_x_phi),
!                       D_DECL(_x_lo[0],_x_lo[1],_x_lo[2]),
!                       D_DECL(_x_hi[0],_x_hi[1],_x_hi[2]),
!                       numcomp);
!     }
  }
  
  template<>
--- 107,138 ----
          {
              *data_dst++ = *data_src++;
          }
! //    }
! //    else
! //    {
! //        const int* destboxlo  = destbox.loVect();
! //        const int* destboxhi  = destbox.hiVect();
! //        const int* _th_plo    = loVect();
! //        const int* _th_phi    = hiVect();
! //        const int* _x_lo      = srcbox.loVect();
! //        const int* _x_hi      = srcbox.hiVect(); 
! //        const int* _x_plo     = src.loVect();
! //        const int* _x_phi     = src.hiVect();
! //        Real*       _th_p     = dataPtr(destcomp);
! //        const Real* _x_p      = src.dataPtr(srccomp);
! //
! //        FORT_FASTCOPY(_th_p,
! //                      ARLIM(_th_plo),
! //                      ARLIM(_th_phi),
! //                      D_DECL(destboxlo[0],destboxlo[1],destboxlo[2]),
! //                      D_DECL(destboxhi[0],destboxhi[1],destboxhi[2]),
! //                      _x_p,
! //                      ARLIM(_x_plo),
! //                      ARLIM(_x_phi),
! //                      D_DECL(_x_lo[0],_x_lo[1],_x_lo[2]),
! //                      D_DECL(_x_hi[0],_x_hi[1],_x_hi[2]),
! //                      numcomp);
! //    }
  }
  
  template<>
*************** BaseFab<Real>::performSetVal (Real      
*** 145,175 ****
      BL_ASSERT(domain.contains(bx));
      BL_ASSERT(ns >= 0 && ns + num <= nvar);
  
!     if (bx == domain)
!     {
          Real* data = &dptr[ns*numpts];
  
          for (long i = 0, N = num*numpts; i < N; i++)
          {
              *data++ = val;
          }
!     }
!     else
!     {
!         const int* _box_lo = bx.loVect();            
!         const int* _box_hi = bx.hiVect();            
!         const int* _th_plo = loVect();                           
!         const int* _th_phi = hiVect();
! 
!         Real* _th_p = dataPtr(ns);
! 
!         FORT_FASTSETVAL(&val,
!                         _box_lo,
!                         _box_hi,
!                         _th_p,
!                         ARLIM(_th_plo),
!                         ARLIM(_th_phi),
!                         num);
!     }
  }
  #endif
--- 145,175 ----
      BL_ASSERT(domain.contains(bx));
      BL_ASSERT(ns >= 0 && ns + num <= nvar);
  
! //    if (bx == domain)
! //    {
          Real* data = &dptr[ns*numpts];
  
          for (long i = 0, N = num*numpts; i < N; i++)
          {
              *data++ = val;
          }
! //    }
! //    else
! //    {
! //        const int* _box_lo = bx.loVect();            
! //        const int* _box_hi = bx.hiVect();            
! //        const int* _th_plo = loVect();                           
! //        const int* _th_phi = hiVect();
! 
! //        Real* _th_p = dataPtr(ns);
! 
! //        FORT_FASTSETVAL(&val,
! //                        _box_lo,
! //                        _box_hi,
! //                        _th_p,
! //                        ARLIM(_th_plo),
! //                        ARLIM(_th_phi),
! //                        num);
! //    }
  }
  #endif
diff -rp CCSEApps.orig/BoxLib/FPC.cpp CCSEApps/BoxLib/FPC.cpp
*** CCSEApps.orig/BoxLib/FPC.cpp	Wed Jan 11 11:13:06 2006
--- CCSEApps/BoxLib/FPC.cpp	Fri Apr 27 15:06:49 2007
*************** FPC::NativeLongDescriptor ()
*** 64,70 ****
  #endif
  
  #if defined(__sgi) || \
!     defined(__sun) || \
      defined(_AIX)  || \
      defined(_CRAYT3E)  || \
      defined(__hpux)
--- 64,70 ----
  #endif
  
  #if defined(__sgi) || \
!     defined(__sun) || defined(__ppc__) || defined(__ppc64__) || \
      defined(_AIX)  || \
      defined(_CRAYT3E)  || \
      defined(__hpux)
*************** FPC::NativeRealDescriptor ()
*** 91,97 ****
  #endif
  
  #if defined(__sgi) || \
!     defined(__sun) || \
      defined(_AIX)  || \
      defined(_CRAYT3E)  || \
      defined(__hpux)
--- 91,97 ----
  #endif
  
  #if defined(__sgi) || \
!     defined(__sun) || defined(__ppc__) || defined(__ppc64__) || \
      defined(_AIX)  || \
      defined(_CRAYT3E)  || \
      defined(__hpux)
*************** FPC::Ieee64NormalRealDescriptor ()
*** 137,143 ****
        defined(_CRAY1)     || \
        defined(_CRAYT3E)   || \
        defined(__sgi)      || \
!       defined(__sun)      || \
        defined(__i486__)   || \
        defined(i386)       || \
        defined(__i386__)   || \
--- 137,143 ----
        defined(_CRAY1)     || \
        defined(_CRAYT3E)   || \
        defined(__sgi)      || \
!       defined(__sun)      || defined(__ppc__) || defined(__ppc64__) || \
        defined(__i486__)   || \
        defined(i386)       || \
        defined(__i386__)   || \
diff -rp CCSEApps.orig/BoxLib/Make.package CCSEApps/BoxLib/Make.package
*** CCSEApps.orig/BoxLib/Make.package	Thu Nov 14 10:43:29 2002
--- CCSEApps/BoxLib/Make.package	Fri Apr 27 15:11:01 2007
*************** T_headers += ccse-mpi.H
*** 91,99 ****
  # Fortran interface routines.
  #
  
! f$(BOXLIB_BASE)_sources += BLutil_F.f
! f$(BOXLIB_BASE)_sources += BLParmParse_F.f
! f$(BOXLIB_BASE)_sources += BLBoxLib_F.f
  
! F$(BOXLIB_BASE)_sources += SPECIALIZE_$(DIM)D.F
! F$(BOXLIB_BASE)_headers += SPECIALIZE_F.H
--- 91,99 ----
  # Fortran interface routines.
  #
  
! #f$(BOXLIB_BASE)_sources += BLutil_F.f
! #f$(BOXLIB_BASE)_sources += BLParmParse_F.f
! #f$(BOXLIB_BASE)_sources += BLBoxLib_F.f
  
! #F$(BOXLIB_BASE)_sources += SPECIALIZE_$(DIM)D.F
! #F$(BOXLIB_BASE)_headers += SPECIALIZE_F.H
EOF
          if [[ $? != 0 ]] ; then
             echo "Unable to patch Boxlib 3D. Wrong version?"
             return 1
          fi
       fi
    fi

    #
    cd $BOXLIB_DIR
    #
    # Build Boxlib 3D
    #
    info_box "Building Boxlib 3D. . . (~2 minutes)" 1>&3
    echo "Building Boxlib 3D"
    if [[ "$OPSYS" == "Darwin" ]]; then
       cp ../mk/Make.FreeBSD ../mk/Make.Darwin
    fi
    $MAKE -f GNUmakefile CXX="$CXX_COMPILER" CC="$C_COMPILER" \
       CCFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS"
    if [[ $? != 0 ]] ; then
       echo "Boxlib build failed.  Giving up"
       return 1
    fi
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing Boxlib 3D. . ." 1>&3
    echo "Installing Boxlib 3D"
    mkdir "$VISITDIR/boxlib"
    mkdir "$VISITDIR/boxlib/$VISITARCH"
    mkdir "$VISITDIR/boxlib/$VISITARCH/include"
    mkdir "$VISITDIR/boxlib/$VISITARCH/lib"
    mkdir "$VISITDIR/boxlib/$VISITARCH/include/2D"
    mkdir "$VISITDIR/boxlib/$VISITARCH/include/3D"
    if [[ "$OPSYS" == "Darwin" ]]; then
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/boxlib/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        mkdir tmp
        cd tmp
        ar x ../libbox3d.Darwin.CC.f77.a
        $CXX_COMPILER -dynamiclib -o libbox3D.$SO_EXT *.o \
          -lSystem -Wl,-headerpad_max_install_names \
          -Wl,-install_name,$INSTALLNAMEPATH/libbox3D.$SO_EXT \
          -Wl,-compatibility_version,$BOXLIB_COMPATIBILITY_VERSION \
          -Wl,-current_version,$BOXLIB_VERSION
        if [[ $? != 0 ]] ; then
          echo "Creation of dynamic 3D Boxlib library failed.  Giving up"
          return 1
        fi
        cp libbox3D.$SO_EXT "$VISITDIR/boxlib/$VISITARCH/lib/"
        rm *.o
        cd ..
        tar cf Boxlib3D.h.tar *.H
    else
       cp libbox3d*.a \
       "$VISITDIR/boxlib/$VISITARCH/lib/libbox3D.a"
       tar cf Boxlib3D.h.tar *.H
       if [[ $? != 0 ]] ; then
          echo "Boxlib install failed.  Giving up"
          return 1
       fi
    fi
    $MAKE clean
    #
    # Apply patches
    #
    if [[ ${BOXLIB_VERSION} == 2.5 ]] ; then
       info_box "Patching Boxlib 2D . . ." 1>&3
       cd $START_DIR
       if [[ "$OPSYS" == "AIX" ]]; then
          patch -p0 << \EOF
diff -rp CCSEApps.orig/BoxLib/GNUmakefile CCSEApps/BoxLib/GNUmakefile
*** CCSEApps.orig/BoxLib/GNUmakefile	Fri Apr 27 15:18:35 2007
--- CCSEApps/BoxLib/GNUmakefile	Fri Apr 27 15:18:54 2007
*************** TOP = $(PBOXLIB_HOME)
*** 8,14 ****
  
  PRECISION = DOUBLE
  DEBUG     = FALSE
! DIM       = 3
  COMP      = xlC
  USE_MPI   = FALSE
  #NAMESPACE = TRUE
--- 8,14 ----
  
  PRECISION = DOUBLE
  DEBUG     = FALSE
! DIM       = 2
  COMP      = xlC
  USE_MPI   = FALSE
  #NAMESPACE = TRUE
EOF
       else
          patch -p0 << \EOF
diff -rp CCSEApps.orig/BoxLib/GNUmakefile CCSEApps/BoxLib/GNUmakefile
*** CCSEApps.orig/BoxLib/GNUmakefile	Fri Apr 27 15:18:35 2007
--- CCSEApps/BoxLib/GNUmakefile	Fri Apr 27 15:18:54 2007
*************** TOP = $(PBOXLIB_HOME)
*** 8,14 ****
  
  PRECISION = DOUBLE
  DEBUG     = FALSE
! DIM       = 3
  COMP      = 
  USE_MPI   = FALSE
  #NAMESPACE = TRUE
--- 8,14 ----
  
  PRECISION = DOUBLE
  DEBUG     = FALSE
! DIM       = 2
  COMP      = 
  USE_MPI   = FALSE
  #NAMESPACE = TRUE
EOF
       fi
       if [[ $? != 0 ]] ; then
           echo "Unable to patch Boxlib 2D. Wrong version?"
           return 1
       fi
    fi
    cd $BOXLIB_DIR
    #
    # Build Boxlib 2D
    #
    info_box "Building Boxlib 2D. . . (~2 minutes)" 1>&3
    echo "Building Boxlib 2D"
    if [[ "$OPSYS" == "Darwin" ]]; then
       cp ../mk/Make.FreeBSD ../mk/Make.Darwin
    fi
    $MAKE -f GNUmakefile CXX="$CXX_COMPILER" CC="$C_COMPILER" \
       CCFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS" 
    if [[ $? != 0 ]] ; then
       echo "Boxlib build failed.  Giving up"
       return 1
    fi
    info_box "Installing Boxlib 2D. . ." 1>&3
    echo "Installing Boxlib 2D"
    if [[ "$OPSYS" == "Darwin" ]]; then
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/boxlib/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        cd tmp
        ar x ../libbox2d.Darwin.CC.f77.a
        $CXX_COMPILER -dynamiclib -o libbox2D.$SO_EXT *.o \
          -lSystem -Wl,-headerpad_max_install_names \
          -Wl,-install_name,$INSTALLNAMEPATH/libbox2D.$SO_EXT \
          -Wl,-compatibility_version,$BOXLIB_COMPATIBILITY_VERSION \
          -Wl,-current_version,$BOXLIB_VERSION
        if [[ $? != 0 ]] ; then
          echo "Creation of dynamic 2D Boxlib library failed.  Giving up"
          return 1
        fi
        cp libbox2D.$SO_EXT "$VISITDIR/boxlib/$VISITARCH/lib/"
        rm *.o
        cd ..
        rmdir tmp
        tar cf Boxlib2D.h.tar *.H
    else
        cp libbox2d*.a \
        "$VISITDIR/boxlib/$VISITARCH/lib/libbox2D.a"
        tar cf Boxlib2D.h.tar *.H
        if [[ $? != 0 ]] ; then
          echo "Boxlib install failed.  Giving up"
          return 1
        fi
    fi

    info_box "Installing Boxlib includes. . ." 1>&3
    echo "Installing Boxlib includes"
    cp Boxlib2D.h.tar "$VISITDIR/boxlib/$VISITARCH/include/2D"
    cp Boxlib3D.h.tar "$VISITDIR/boxlib/$VISITARCH/include/3D"
    cd "$VISITDIR/boxlib/$VISITARCH/include/2D"
    tar xf Boxlib2D.h.tar
    cd "$VISITDIR/boxlib/$VISITARCH/include/3D"
    tar xf Boxlib3D.h.tar

    if [[ "$DO_GROUP" == "yes" ]] ; then
       chmod -R ug+w,a+rX "$VISITDIR/boxlib"
       chgrp -R ${GROUP} "$VISITDIR/boxlib"
    fi
    cd "$START_DIR"
    echo "Done with Boxlib"
    return 0
}


# *************************************************************************** #
#                         Function 8.9, build_cfitsio                         #
# *************************************************************************** #

function build_cfitsio
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -d ${CFITSIO_DIR} ]] ; then
       info_box "Found ${CFITSIO_DIR} . . ." 1>&3
    elif [[ -f ${CFITSIO_FILE} ]] ; then
       info_box "Unzipping/Tarring ${CFITSIO_FILE} . . ." 1>&3
       uncompress_untar ${CFITSIO_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${CFITSIO_FILE}.  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${CFITSIO_FILE%.*} ]] ; then
       info_box "Tarring ${CFITSIO_FILE%.*} . . ." 1>&3
       tar xf ${CFITSIO_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${CFITSIO_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    #
    info_box "Configuring CFITSIO . . ." 1>&3
    cd $CFITSIO_DIR
    echo "Invoking command to configure CFITSIO"
    env CXX="$CXX_COMPILER" CC="$C_COMPILER" \
       CFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS" \
       ./configure \
       --prefix="$VISITDIR/cfitsio/$CFITSIO_VERSION/$VISITARCH"
    if [[ $? != 0 ]] ; then
       echo "CFITSIO configure failed.  Giving up"
       return 1
    fi

    #
    # Build CFITSIO
    #
    info_box "Building CFITSIO . . . (~2 minutes)" 1>&3
    echo "Building CFITSIO"
    $MAKE
    if [[ $? != 0 ]] ; then
       echo "CFITSIO build failed.  Giving up"
       return 1
    fi

    if [[ "$OPSYS" == "Darwin" ]]; then
        #
        # Make dynamic executable
        #
        info_box "Creating dynamic libraries for CFITSIO . . ." 1>&3
        echo "Creating dynamic libraries for CFITSIO"
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/cfitsio/${CFITSIO_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
## switch back to gcc "external relocation entries" restFP saveFP
##      /usr/bin/libtool -o libcfitsio.$SO_EXT -dynamic libcfitsio.a -lSystem \
##      -headerpad_max_install_names \
##      -install_name $INSTALLNAMEPATH/libcfitsio.$SO_EXT \
##      -compatibility_version $CFITSIO_COMPATIBILITY_VERSION \
##      -current_version $CFITSIO_VERSION
        gcc -o libcfitsio.$SO_EXT -dynamiclib *.o -lSystem \
           -Wl,-headerpad_max_install_names \
           -Wl,-install_name,$INSTALLNAMEPATH/libcfitsio.$SO_EXT \
           -Wl,-compatibility_version,$CFITSIO_COMPATIBILITY_VERSION \
           -Wl,-current_version,$CFITSIO_VERSION
        if [[ $? != 0 ]] ; then
           echo "Creating dynamic CFITSIO library failed.  Giving up"
           return 1
        fi
#       cp libcfitsio.$SO_EXT "$VISITDIR/cfitsio/$CFITSIO_VERSION/$VISITARCH/lib"
    fi
    #
    # Install into the VisIt third party location.
    #
    info_box "Installing CFITSIO . . ." 1>&3
    echo "Installing CFITSIO"
    mkdir "$VISITDIR/cfitsio"
    mkdir "$VISITDIR/cfitsio/$CFITSIO_VERSION"
    mkdir "$VISITDIR/cfitsio/$CFITSIO_VERSION/$VISITARCH"
    $MAKE install
    if [[ $? != 0 ]] ; then
       echo "CFITSIO install failed.  Giving up"
       return 1
    fi

    if [[ "$DO_GROUP" == "yes" ]] ; then
       chmod -R ug+w,a+rX "$VISITDIR/cfitsio"
       chgrp -R ${GROUP} "$VISITDIR/cfitsio"
    fi
    cd "$START_DIR"
    echo "Done with CFITSIO"
    return 0
}

# *************************************************************************** #
#                         Function 8.10, build_h5part                         #
# *************************************************************************** #

function build_h5part
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -d ${H5PART_DIR} ]] ; then
       info_box "Found ${H5PART_DIR} . . ." 1>&3
    elif [[ -f ${H5PART_FILE} ]] ; then
       info_box "Unzipping/Tarring ${H5PART_FILE} . . ." 1>&3
       uncompress_untar ${H5PART_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${H5PART_FILE}.  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${H5PART_FILE%.*} ]] ; then
       info_box "Tarring ${H5PART_FILE%.*} . . ." 1>&3
       tar xf ${H5PART_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${H5PART_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi

    #
    info_box "Configuring H5Part . . ." 1>&3
    cd ${H5PART_DIR}
    if [[ "$DO_HDF5" == "yes" ]] ; then
       export HDF5ROOT="$VISITDIR/hdf5/$HDF5_VERSION/$VISITARCH"
       export SZIPROOT="$VISITDIR/szip/$SZIP_VERSION/$VISITARCH"
       WITHHDF5ARG="--with-hdf5path=$HDF5ROOT"
       HDF5DYLIB="-L$HDF5ROOT/lib -L$SZIPROOT/lib -lhdf5 -lsz -lz"
    else
       WITHHDF5ARG="--without-hdf5path"
       HDF5DYLIB=""
    fi
    if [[ "$OPSYS" == "Darwin" ]]; then
       export DYLD_LIBRARY_PATH="$VISITDIR/hdf5/$HDF5_VERSION/$VISITARCH/lib":\
"$VISITDIR/szip/$SZIP_VERSION/$VISITARCH/lib":\
$DYLD_LIBRARY_PATH
    fi
    echo "Invoking command to configure H5Part"
    ./configure ${WITHHDF5ARG} ${OPTIONAL} \
       CXX="$CXX_COMPILER" CC="$C_COMPILER" \
       CFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS" \
       --prefix="$VISITDIR/h5part/$H5PART_VERSION/$VISITARCH"
    if [[ $? != 0 ]] ; then
       echo "H5Part configure failed.  Giving up"
       return 1
    fi

    #
    # Build H5Part
    #
    info_box "Building H5Part . . . (~1 minutes)" 1>&3
    echo "Building H5Part"
    $MAKE $MAKE_OPT_FLAGS
    if [[ $? != 0 ]] ; then
       echo "H5Part build failed.  Giving up"
       return 1
    fi
    info_box "Installing H5Part . . ." 1>&3
    echo "Installing H5Part"
    $MAKE install
    if [[ $? != 0 ]] ; then
       echo "H5Part build (make install) failed.  Giving up"
       return 1
    fi

    if [[ "$OPSYS" == "Darwin" ]]; then
        #
        # Make dynamic executable
        #
        info_box "Creating dynamic libraries for H5Part . . ." 1>&3
        echo "Creating dynamic libraries for H5Part"
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/h5part/${H5PART_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        VER=$(uname -r)
        if (( ${VER%%.*} > 7 )) ; then
           USEGCC="-lSystemStubs"
        else
           USEGCC="-lgcc"
        fi
##        /usr/bin/libtool -o libH5Part.$SO_EXT -dynamic src/libH5Part.a \
##        -lSystem -headerpad_max_install_names \
##        -install_name $INSTALLNAMEPATH/libH5Part.$SO_EXT \
##        -compatibility_version $H5PART_COMPATIBILITY_VERSION \
##        -current_version $H5PART_VERSION ${HDF5DYLIB} ${USEGCC}
        gcc -o libH5Part.$SO_EXT -dynamiclib src/*.o -lSystem \
           -Wl,-headerpad_max_install_names \
           -Wl,-install_name,$INSTALLNAMEPATH/libH5Part.$SO_EXT \
           -Wl,-compatibility_version,$H5PART_COMPATIBILITY_VERSION \
           -Wl,-current_version,$H5PART_VERSION ${HDF5DYLIB}
        if [[ $? != 0 ]] ; then
           echo "Creating dynamic H5Part library failed.  Giving up"
           return 1
        fi
        cp libH5Part.$SO_EXT "$VISITDIR/h5part/$H5PART_VERSION/$VISITARCH/lib"
    fi

    if [[ "$DO_GROUP" == "yes" ]] ; then
       chmod -R ug+w,a+rX "$VISITDIR/h5part"
       chgrp -R ${GROUP} "$VISITDIR/h5part"
    fi
    cd "$START_DIR"
    echo "Done with H5Part"
    return 0
}

# *************************************************************************** #
#                         Function 8.11, build_ccmio                         #
# *************************************************************************** #

function build_ccmio
{
    #
    # Unzip the file, provided a gzipped file exists.
    #
    if [[ -d ${CCMIO_DIR} ]] ; then
       info_box "Found ${CCMIO_DIR} . . ." 1>&3
    elif [[ -f ${CCMIO_FILE} ]] ; then
       info_box "Unzipping/Tarring ${CCMIO_FILE} . . ." 1>&3
       uncompress_untar ${CCMIO_FILE}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${CCMIO_FILE}.  Corrupted file or out of space on device?"
          return 1
       fi
    elif [[ -f ${CCMIO_FILE%.*} ]] ; then
       info_box "Tarring ${CCMIO_FILE%.*} . . ." 1>&3
       tar xf ${CCMIO_FILE%.*}
       if [[ $? != 0 ]] ; then
          echo \
"Unable to untar ${CCMIO_FILE%.*}.  Corrupted file or out of space on device?"
          return 1
       fi
    fi
    #
    #
    # Apply patches
    #
    if [[ ${CCMIO_VERSION} == 2.6.1 ]] ; then
       info_box "Patching CCMIO . . ." 1>&3
       if [[ "$OPSYS" == "Darwin" ]]; then
          patch -p0 << \EOF
diff -rp libccmio-2.6.1.orig/config/config.gnu.to.star libccmio-2.6.1/config/config.gnu.to.star
*** libccmio-2.6.1.orig/config/config.gnu.to.star
--- libccmio-2.6.1/config/config.gnu.to.star
*************** case ${1:-null}-${2:-null} in
*** 34,39 ****
--- 34,40 ----
      x86_64-unknown-linux-gnu-null)     echo linux64_2.4-x86-glibc_2.2.5     ;;
      ppc64-unknown-linux-gnu-null)      echo linux64_2.6-pwr4-glibc_2.3.3    ;;
      i386-apple-darwin8-null)           echo i386-apple-darwin8              ;;
+     powerpc-apple-darwin7-null)        echo powerpc-apple-darwin7           ;;
      *)                                 echo unknown                         ;;
  esac
  
diff -rp libccmio-2.6.1.orig/config/config.system libccmio-2.6.1/config/config.system 
*** libccmio-2.6.1.orig/config/config.system
--- libccmio-2.6.1/config/config.system
*************** case ${SYSTEM} in
*** 85,93 ****
      ppc64-unknown-linux-gnu)
  	echo ppc64-unknown-linux-gnu ;;
  
!     i386-apple-darwin8.11.1)
  	echo i386-apple-darwin8 ;;
  
      *)
          echo unknown
          echo System type ${SYSTEM} not supported! 1>&2 ;;
--- 85,96 ----
      ppc64-unknown-linux-gnu)
  	echo ppc64-unknown-linux-gnu ;;
  
!     i386-apple-darwin8* | i386-apple-darwin9*)
  	echo i386-apple-darwin8 ;;
  
+     powerpc-apple-darwin7* | powerpc-apple-darwin8* | powerpc-apple-darwin9* )
+ 	echo powerpc-apple-darwin7 ;;
+ 
      *)
          echo unknown
          echo System type ${SYSTEM} not supported! 1>&2 ;;
EOF
       fi
       if [[ $? != 0 ]] ; then
           echo "Unable to patch CCMIO. Wrong version?"
           return 1
       fi
       if [[ "$OPSYS" == "Darwin" ]]; then
           # Check for PPC
           MACH=$(uname -m)
           if [[ "$MACH" == "Power Macintosh" ]] ; then
               mkdir ${CCMIO_DIR}/config/powerpc-apple-darwin7
               cp ${BV_QT_DIR}/bin/qmake \
	           ${CCMIO_DIR}/config/powerpc-apple-darwin7
               cp ${CCMIO_DIR}/config/i386-apple-darwin8/qmake.conf \
                   ${CCMIO_DIR}/config/powerpc-apple-darwin7
               cp ${BV_QT_DIR}/mkspecs/${QT_PLATFORM}/qplatformdefs.h \
                   ${CCMIO_DIR}/config/powerpc-apple-darwin7
           fi
       fi
    fi
    #
    info_box "Configuring CCMIO . . ." 1>&3
    cd ${CCMIO_DIR}

    #
    # Build CCMIO
    #
    info_box "Building CCMIO . . . (~1 minutes)" 1>&3
    echo "Building CCMIO"
    if [[ "$OPSYS" == "Darwin" ]]; then
        env RELEASE=1 SHARED=1 $MAKE CXX="$CXX_COMPILER" CC="$C_COMPILER" \
           CFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS"
    else
        env RELEASE=1 STATIC=1 $MAKE CXX="$CXX_COMPILER" CC="$C_COMPILER" \
           CFLAGS="$C_OPT_FLAGS" CXXFLAGS="$CXX_OPT_FLAGS"
    fi
##  if [[ $? != 0 ]] ; then
##     echo "CCMIO build failed.  Giving up"
##     return 1
##  fi
    info_box "Installing CCMIO . . ." 1>&3
    echo "Installing CCMIO"
    mkdir $VISITDIR/ccmio
    mkdir $VISITDIR/ccmio/${CCMIO_VERSION}
    mkdir $VISITDIR/ccmio/${CCMIO_VERSION}/$VISITARCH
    mkdir $VISITDIR/ccmio/${CCMIO_VERSION}/$VISITARCH/lib
    mkdir $VISITDIR/ccmio/${CCMIO_VERSION}/$VISITARCH/include
    ln -s $VISITDIR/ccmio/${CCMIO_VERSION}/$VISITARCH/include \
        $VISITDIR/ccmio/${CCMIO_VERSION}/$VISITARCH/include/libccmio
    cp libccmio/ccmio*.h $VISITDIR/ccmio/${CCMIO_VERSION}/$VISITARCH/include

    if [[ "$OPSYS" == "Darwin" ]]; then
        #
        # Make dynamic executable
        #
        info_box "Creating dynamic libraries for CCMIO . . ." 1>&3
        echo "Creating dynamic libraries for CCMIO"
        if [[ $ABS_PATH == "Yes" ]]; then
           INSTALLNAMEPATH="$VISITDIR/ccmio/${CCMIO_VERSION}/$VISITARCH/lib"
        else
           INSTALLNAMEPATH="@executable_path/../lib"
        fi
        cp lib/release-shared/libadf.dylib .
        cp lib/release-shared/libccmio.dylib .
        install_name_tool -id \
          "$INSTALLNAMEPATH/libadf.$SO_EXT" "libadf.$SO_EXT"
        install_name_tool -id \
          "$INSTALLNAMEPATH/libccmio.$SO_EXT" "libccmio.$SO_EXT"
#       install_name_tool -change \
#         libadf.dylib.5.01.000 "$INSTALLNAMEPATH/libadf.$SO_EXT" \
#         "libccmio.$SO_EXT"
        cp "libadf.$SO_EXT" \
          "$VISITDIR/ccmio/${CCMIO_VERSION}/$VISITARCH/lib/libadf.$SO_EXT"
        cp "libccmio.$SO_EXT" \
          "$VISITDIR/ccmio/${CCMIO_VERSION}/$VISITARCH/lib/libccmio.$SO_EXT"
    else
        cp `ls lib/*/release-static/libadf.a` \
           $VISITDIR/ccmio/${CCMIO_VERSION}/$VISITARCH/lib
        cp `ls lib/*/release-static/libccmio.a` \
           $VISITDIR/ccmio/${CCMIO_VERSION}/$VISITARCH/lib
    fi

    if [[ "$DO_GROUP" == "yes" ]] ; then
       chmod -R ug+w,a+rX "$VISITDIR/ccmio"
       chgrp -R ${GROUP} "$VISITDIR/ccmio"
    fi
    cd "$START_DIR"
    echo "Done with CCMIO"
    return 0
}

# *************************************************************************** #
#                          Function 9, build_hostconf                         #
# *************************************************************************** #

function build_hostconf
{
    #
    # Set up environment variables for the configure step.
    #
    PARFLAGS=""
    CXXFLAGS="$CXX_OPT_FLAGS"
    if [[ "$parallel" == "yes" ]] ; then
       PARFLAGS="--enable-parallel"
       CXXFLAGS="$CXX_OPT_FLAGS $PAR_INCLUDE"
    fi
    
    #
    # Set up the config-site file, which gives configure the information it
    # needs about the third party libraries.
    #
    export HOSTCONF="$(hostname).conf"
    info_box "Creating $HOSTCONF" 1>&3
    echo "##" > $HOSTCONF
    echo "## build_vist generated host.conf" >> $HOSTCONF
    echo "## created: $(date)" >> $HOSTCONF
    echo "## system: $(uname -a)" >> $HOSTCONF
    echo "## by: $(whoami)" >> $HOSTCONF
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "## Set the VISITHOME environment variable." >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "VISITHOME=$VISITDIR" >> $HOSTCONF
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo \
"## Specify the location of the mesa include files and libraries." >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "MESA=\$VISITHOME/mesa/$MESA_VERSION/$VISITARCH" >> $HOSTCONF
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo \
"## Specify the location of the vtk include files and libraries." >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "VTK=\$VISITHOME/vtk/$VTK_VERSION/$VISITARCH" >> $HOSTCONF
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo \
"## Specify the location of cmake." >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "DEFAULT_CMAKE=\$VISITHOME/cmake/$CMAKE_VERSION/$VISITARCH/bin/cmake" \
>> $HOSTCONF
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo \
"## Specify the location of the qt include files and libraries." >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "QT_BIN=\$VISITHOME/qt/$QT_VERSION/$VISITARCH/bin" >> $HOSTCONF
    echo "QT_INCLUDE=\$VISITHOME/qt/$QT_VERSION/$VISITARCH/include" >> $HOSTCONF
    echo "QT_LIB=\$VISITHOME/qt/$QT_VERSION/$VISITARCH/lib" >> $HOSTCONF
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo \
"## Specify the location of the python include and libraries." >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "PYDIR=\$VISITHOME/python/$PYTHON_VERSION/$VISITARCH" >> $HOSTCONF
    echo "PYVERSION=python$PYTHON_VERSION" >> $HOSTCONF
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "## Silo" >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo \
"DEFAULT_SILO_INCLUDES=\$VISITHOME/silo/$SILO_VERSION/$VISITARCH/include" \
    >> $HOSTCONF
    echo \
"DEFAULT_SILO_LIBRARY=\$VISITHOME/silo/$SILO_VERSION/$VISITARCH/lib" \
    >> $HOSTCONF
    echo >> $HOSTCONF
    echo "## Compiler flags." >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "CC=\"$C_COMPILER\"" >> $HOSTCONF
    echo "CXX=\"$CXX_COMPILER\"" >> $HOSTCONF
    echo "CFLAGS=\"$C_OPT_FLAGS\"" >> $HOSTCONF
    echo "CXXFLAGS=\"$CXXFLAGS\"" >> $HOSTCONF
    if [[ "$parallel" == "yes" ]] ; then
        echo "MPI_LIBS=\"$PAR_LIBS\"" >> $HOSTCONF
    fi
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "## Database reader plugin support libraries" >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo \
"##############################################################" >> $HOSTCONF
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "## Boxlib" >> $HOSTCONF
    echo "##" >> $HOSTCONF
    if [[ "$DO_BOXLIB" == "yes" ]] ; then
        echo \
"DEFAULT_BOXLIB2D_INCLUDE=\$VISITHOME/boxlib/$VISITARCH/include/2D" \
        >> $HOSTCONF
        echo \
"DEFAULT_BOXLIB2D_LIBS=\$VISITHOME/boxlib/$VISITARCH/lib" \
        >> $HOSTCONF
        echo \
"DEFAULT_BOXLIB3D_INCLUDE=\$VISITHOME/boxlib/$VISITARCH/include/3D" \
        >> $HOSTCONF
        echo \
"DEFAULT_BOXLIB3D_LIBS=\$VISITHOME/boxlib/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "## CFITSIO" >> $HOSTCONF
    echo "##" >> $HOSTCONF
    if [[ "$DO_CFITSIO" == "yes" ]] ; then
        echo \
"DEFAULT_CFITSIO_INCLUDE=\$VISITHOME/cfitsio/$CFITSIO_VERSION/$VISITARCH/include" \
        >> $HOSTCONF
        echo \
"DEFAULT_CFITSIO_LIB=\$VISITHOME/cfitsio/$CFITSIO_VERSION/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "## CGNS" >> $HOSTCONF
    echo "##" >> $HOSTCONF
    if [[ "$DO_CGNS" == "yes" ]] ; then
        echo \
"DEFAULT_CGNS_INCLUDE=\$VISITHOME/cgns/$CGNS_VERSION/$VISITARCH/include" \
        >> $HOSTCONF
        echo \
"DEFAULT_CGNS_LIB=\$VISITHOME/cgns/$CGNS_VERSION/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "## Exodus" >> $HOSTCONF
    echo "##" >> $HOSTCONF
    if [[ "$DO_EXODUS" == "yes" ]] ; then
        echo \
"DEFAULT_EXODUS_INCLUDES=\$VISITHOME/exodus/$EXODUS_VERSION/$VISITARCH/inc" \
        >> $HOSTCONF
        echo \
"DEFAULT_EXODUS_LIBRARY=\$VISITHOME/exodus/$EXODUS_VERSION/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "## GDAL" >> $HOSTCONF
    echo "##" >> $HOSTCONF
    if [[ "$DO_GDAL" == "yes" ]] ; then
        echo \
"DEFAULT_GDAL_INCLUDE=\$VISITHOME/gdal/$GDAL_VERSION/$VISITARCH/include" \
        >> $HOSTCONF
        echo \
"DEFAULT_GDAL_LIB=\$VISITHOME/gdal/$GDAL_VERSION/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "## H5Part" >> $HOSTCONF
    echo "##" >> $HOSTCONF
    if [[ "$DO_H5PART" == "yes" ]] ; then
        echo \
"DEFAULT_H5PART_INCLUDE=\$VISITHOME/h5part/$H5PART_VERSION/$VISITARCH/include" \
        >> $HOSTCONF
        echo \
"DEFAULT_H5PART_LIB=\$VISITHOME/h5part/$H5PART_VERSION/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "## HDF4" >> $HOSTCONF
    echo "##" >> $HOSTCONF
    if [[ "$DO_HDF4" == "yes" ]] ; then
        echo \
"DEFAULT_HDF4_FLAGS=\$VISITHOME/hdf4/$HDF4_VERSION/$VISITARCH/include" \
        >> $HOSTCONF
        echo \
"DEFAULT_HDF4_LIBS=\$VISITHOME/hdf4/$HDF4_VERSION/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "## HDF5" >> $HOSTCONF
    echo "##" >> $HOSTCONF
    if [[ "$DO_HDF5" == "yes" ]] ; then
        echo \
"DEFAULT_HDF5_INCLUDE=\$VISITHOME/hdf5/$HDF5_VERSION/$VISITARCH/include" \
        >> $HOSTCONF
        echo \
"DEFAULT_HDF5_LIB=\$VISITHOME/hdf5/$HDF5_VERSION/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "## Mili" >> $HOSTCONF
    echo "##" >> $HOSTCONF
    if [[ "$DO_MILI" == "yes" ]] ; then
        echo \
"BV_MILI_DIR=\$VISITHOME/mili/$MILI_VERSION/$VISITARCH" \
        >> $HOSTCONF
    fi
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    echo "## NetCDF" >> $HOSTCONF
    echo "##" >> $HOSTCONF
    if [[ "$DO_NETCDF" == "yes" ]] ; then
        echo \
"DEFAULT_NETCDF_INCLUDE=\$VISITHOME/netcdf/$NETCDF_VERSION/$VISITARCH/include" \
        >> $HOSTCONF
        echo \
"DEFAULT_NETCDF_LIB=\$VISITHOME/netcdf/$NETCDF_VERSION/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    echo "##" >> $HOSTCONF
    echo "## SZIP" >> $HOSTCONF
    echo "##" >> $HOSTCONF
    if [[ "$DO_SZIP" == "yes" ]] ; then
        echo \
"DEFAULT_SZIP_INCLUDE=\$VISITHOME/szip/$SZIP_VERSION/$VISITARCH/include" \
        >> $HOSTCONF
        echo \
"DEFAULT_SZIP_LIB=\$VISITHOME/szip/$SZIP_VERSION/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    echo "##" >> $HOSTCONF
    echo "## CCMIO" >> $HOSTCONF
    echo "##" >> $HOSTCONF
    if [[ "$DO_CCMIO" == "yes" ]] ; then
        echo \
"DEFAULT_CCMIO_INCLUDE=\$VISITHOME/ccmio/$CCMIO_VERSION/$VISITARCH/include" \
        >> $HOSTCONF
        echo \
"DEFAULT_CCMIO_LIB=\$VISITHOME/ccmio/$CCMIO_VERSION/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    if [[ "$DO_VISUS" == "yes" ]] ; then
        echo \
"DEFAULT_VISUS_INCLUDE=\$VISITHOME/visus/$VISUS_VERSION/$VISITARCH/include" \
        >> $HOSTCONF
        echo \
"DEFAULT_VISUS_LIB=\$VISITHOME/visus/$VISUS_VERSION/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    if [[ "$DO_ITAPS" == "yes" ]] ; then
        echo \
"DEFAULT_ITAPS_INCLUDE=\$VISITHOME/itaps/$ITAPS_VERSION/$VISITARCH/include" \
        >> $HOSTCONF
        echo \
"DEFAULT_ITAPS_LIB=\$VISITHOME/itaps/$ITAPS_VERSION/$VISITARCH/lib" \
        >> $HOSTCONF
    fi
    echo >> $HOSTCONF
    echo "##" >> $HOSTCONF
    cd "$START_DIR"
    echo "Done with host.conf"
    return 0
}

# *************************************************************************** #
#                          Function 9.1, build_visit                          #
# *************************************************************************** #

function build_visit
{
    if [[ "$DO_SVN" != "yes" || "$USE_VISIT_FILE" == "yes" ]] ; then
        #
        # Unzip the file, provided a gzipped file exists.
        #
        if [[ -f ${VISIT_FILE} ]] ; then
           info_box "Unzipping/untarring ${VISIT_FILE} . . ." 1>&3
           uncompress_untar ${VISIT_FILE}
           if [[ $? != 0 ]] ; then
              echo \
"Unable to untar ${VISIT_FILE}.  Corrupted file or out of space on device?"
              return 1
           fi
        elif [[ -f ${VISIT_FILE%.*} ]] ; then
           info_box "Unzipping ${VISIT_FILE%.*} . . ." 1>&3
           tar xf ${VISIT_FILE%.*}
           if [[ $? != 0 ]] ; then
              echo \
"Unable to untar ${VISIT_FILE%.*}.  Corrupted file or out of space on device?"
              return 1
           fi
        fi
    fi

    #
    # Set up environment variables for the configure step.
    #
    PARFLAGS=""
    CXXFLAGS="$CXX_OPT_FLAGS"
    if [[ "$parallel" == "yes" ]] ; then
       PARFLAGS="--enable-parallel"
       CXXFLAGS="$CXX_OPT_FLAGS $PAR_INCLUDE"
    fi

    #
    # Set up the config-site file, which gives configure the information it
    # needs about the third party libraries.
    #
    if [[ "$DO_SVN" == "yes" && "$USE_VISIT_FILE" == "no" ]] ; then
        cd src
    else
        VISIT_DIR=${VISIT_FILE%.tar*}/src
        cd "${VISIT_DIR}"
    fi
    cp $START_DIR/$(hostname).conf config-site

    #
    # Call configure
    # 
    info_box "Configuring VisIt . . ." 1>&3
    EXTRA_FEATURES=""
    if [[ "${DO_MODULE}" == "yes" ]] ; then
       EXTRA_FEATURES="${EXTRA_FEATURES} --enable-visitmodule"
    fi
    if [[ "${DO_JAVA}" == "yes" ]] ; then
       EXTRA_FEATURES="${EXTRA_FEATURES} --enable-java"
    fi
    if [[ "${DO_SLIVR}" == "yes" ]] ; then
       EXTRA_FEATURES="${EXTRA_FEATURES} --enable-slivr"
    fi
    ./configure ${PARFLAGS} ${EXTRA_FEATURES}
    if [[ $? != 0 ]] ; then
       echo "VisIt configure failed.  Giving up"
       return 1
    fi

    if [[ "$OPSYS" == "Darwin" ]]; then
        # Check for version < 8.0.0 (MacOS 10.4, Tiger) for gcc < 4.x
        VER=$(uname -r)
        if (( ${VER%%.*} > 8 )) ; then
           cat databases/Shapefile/Makefile | \
              sed '/LDFLAGS/s/$/ -Wl,-dylib_file,\/System\/Library\/Frameworks\/OpenGL.framework\/Versions\/A\/Libraries\/libGLU.dylib:\/System\/Library\/Frameworks\/OpenGL.framework\/Versions\/A\/Libraries\/libGLU.dylib/' > Make.tmp
           mv -f databases/Shapefile/Makefile databases/Shapefile/Makefile.orig
           mv -f Make.tmp databases/Shapefile/Makefile
           if [[ "$DO_CCMIO" == "yes" ]] ; then
              cat databases/CCM/Makefile | \
                 sed '/LDFLAGS/s/$/ -Wl,-dylib_file,\/System\/Library\/Frameworks\/OpenGL.framework\/Versions\/A\/Libraries\/libGLU.dylib:\/System\/Library\/Frameworks\/OpenGL.framework\/Versions\/A\/Libraries\/libGLU.dylib/' > Make.tmp
              mv -f databases/CCM/Makefile databases/CCM/Makefile.orig
              mv -f Make.tmp databases/CCM/Makefile
           fi
        fi 
        if (( ${VER%%.*} < 8 )) ; then
           info_box "Patching VisIt . . ." 1>&3
           cat databases/Fluent/Makefile | sed '/CXXFLAGS/s/$/ -O0/g' > Make.tmp
           mv -f databases/Fluent/Makefile databases/Fluent/Makefile.orig
           mv -f Make.tmp databases/Fluent/Makefile
           cat avt/Pipeline/Data/avtCommonDataFunctions.C | \
              sed '/isfinite/s/isfinite/__isfinited/g' > C.tmp
           mv -f avt/Pipeline/Data/avtCommonDataFunctions.C \
              avt/Pipeline/Data/avtCommonDataFunctions.C.orig
           mv -f C.tmp avt/Pipeline/Data/avtCommonDataFunctions.C
           cat avt/Expressions/Abstract/avtExpressionFilter.C | \
              sed '/isfinite/s/isfinite/__isfinited/g' > C.tmp
           mv -f avt/Expressions/Abstract/avtExpressionFilter.C \
              avt/Expressions/Abstract/avtExpressionFilter.C.orig
           mv -f C.tmp avt/Expressions/Abstract/avtExpressionFilter.C
        fi
        if (( ${VER%%.*} < 7 )) ; then
           cat third_party_builtin/mesa_stub/Makefile | \
              sed 's/glx.c glxext.c//' > Make.tmp
           mv -f third_party_builtin/mesa_stub/Makefile \
              third_party_builtin/mesa_stub/Makefile.orig
           mv -f Make.tmp third_party_builtin/mesa_stub/Makefile
        fi
        if (( ${VER%%.*} > 6 )) ; then
           cat databases/SimV1/Makefile | \
              sed '/LDFLAGS/s/$/ -Wl,-undefined,dynamic_lookup/g' > Make.tmp
           mv -f databases/SimV1/Makefile databases/SimV1/Makefile.orig
           mv -f Make.tmp databases/SimV1/Makefile
           cat databases/SimV1Writer/Makefile | \
              sed '/LDFLAGS/s/$/ -Wl,-undefined,dynamic_lookup/g' > Make.tmp
           mv -f databases/SimV1Writer/Makefile \
             databases/SimV1Writer/Makefile.orig
           mv -f Make.tmp databases/SimV1Writer/Makefile
           cat avt/Expressions/Makefile | \
              sed '/LDFLAGS/s/$/ -Wl,-undefined,dynamic_lookup/g' > Make.tmp
           mv -f avt/Expressions/Makefile \
             avt/Expressions/Makefile.orig
           mv -f Make.tmp avt/Expressions/Makefile
        else
           cat databases/SimV1/Makefile | \
              sed '/LDFLAGS/s/$/ -Wl,-flat_namespace,-undefined,suppress/g' > \
              Make.tmp
           mv -f databases/SimV1/Makefile databases/SimV1/Makefile.orig
           mv -f Make.tmp databases/SimV1/Makefile
           cat databases/SimV1Writer/Makefile | \
              sed '/LDFLAGS/s/$/ -Wl,-flat_namespace,-undefined,suppress/g' > \
              Make.tmp
           mv -f databases/SimV1Writer/Makefile \
             databases/SimV1Writer/Makefile.orig
           mv -f Make.tmp databases/SimV1Writer/Makefile
           cat avt/Expressions/Makefile | \
              sed '/LDFLAGS/s/$/ -Wl,-flat_namespace,-undefined,suppress/g' > \
              Make.tmp
           mv -f avt/Expressions/Makefile \
             avt/Expressions/Makefile.orig
           mv -f Make.tmp avt/Expressions/Makefile
        fi
    elif [[ "$OPSYS" == "SunOS" ]]; then
        # Some Solaris systems hang when compiling Fluent when optimizations
        # are on.  Turn optimizations off.
        info_box "Patching VisIt . . ." 1>&3
        cat databases/Fluent/Makefile | sed '/CXXFLAGS/s/$/ -O0/g' > Make.tmp
        mv -f databases/Fluent/Makefile databases/Fluent/Makefile.orig
        mv -f Make.tmp databases/Fluent/Makefile
    fi

    #
    # Build VisIt
    #
    info_box "Building VisIt . . . (~50 minutes)" 1>&3
    $MAKE $MAKE_OPT_FLAGS
    if [[ $? != 0 ]] ; then
       echo "VisIt build failed.  Giving up"
       return 1
    fi
    echo "All indications are that VisIt successfully built."
}

printvariables () {
  printf "The following is a list of user settable environment variables\n"
  printf "\n"
  printf "%s%s\n" "OPSYS=" "${OPSYS}"
  printf "%s%s\n" "PROC=" "${PROC}"
  printf "%s%s\n" "REL=" "${REL}"
  printf "%s%s\n" "ARCH=" "${ARCH}"
  printf "%s%s\n" "VISITARCH=" "${VISITARCHTMP}"

  printf "%s%s\n" "C_COMPILER=" "${C_COMPILER}"
  printf "%s%s\n" "CXX_COMPILER=" "${CXX_COMPILER}"
  printf "%s%s\n" "C_OPT_FLAGS=" "${C_OPT_FLAGS}"
  printf "%s%s\n" "CXX_OPT_FLAGS=" "${CXX_OPT_FLAGS}"
  printf "%s%s\n" "PAR_INCLUDE=" "${PAR_INCLUDE}"
  printf "%s%s\n" "PAR_LIBS=" "${PAR_LIBS}"

  printf "%s%s\n" "MAKE=" "${MAKE}"
  printf "%s%s\n" "THIRD_PARTY_PATH=" "${THIRD_PARTY_PATH}"
  printf "%s%s\n" "GROUP=" "${GROUP}"
  printf "%s%s\n" "LOG_FILE=" "${LOG_FILE}"
  printf "%s%s\n" "LOG_FILE=" "${LOG_FILE}"
  printf "%s%s\n" "WGET_OPTS=" "${WGET_OPTS}"
  printf "%s%s\n" "SVNREVISION=" "${SVNREVISION}"
  printf "%s%s\n" "VISIT_FILE=" "${VISIT_FILE}"

  printf "%s%s\n" "VTK_FILE=" "${VTK_FILE}"
  printf "%s%s\n" "VTK_VERSION=" "${VTK_VERSION}"
  printf "%s%s\n" "VTK_DIR=" "${VTK_DIR}"

  printf "%s%s\n" "CMAKE_FILE=" "${CMAKE_FILE}"
  printf "%s%s\n" "CMAKE_VERSION=" "${CMAKE_VERSION}"
  printf "%s%s\n" "CMAKE_DIR=" "${CMAKE_DIR}"

  printf "%s%s\n" "MESA_FILE=" "${MESA_FILE}"
  printf "%s%s\n" "MESA_VERSION=" "${MESA_VERSION}"
  printf "%s%s\n" "MESA_TARGET=" "${MESA_TARGET}"
  printf "%s%s\n" "MESA_DIR=" "${MESA_DIR}"

  printf "%s%s\n" "PYTHON_FILE=" "${PYTHON_FILE}"
  printf "%s%s\n" "PYTHON_VERSION=" "${PYTHON_VERSION}"
  printf "%s%s\n" "PYTHON_COMPATIBILITY_VERSION=" "${PYTHON_COMPATIBILITY_VERSION}"
  printf "%s%s\n" "PYTHON_DIR=" "${PYTHON_DIR}"

  printf "%s%s\n" "QT_FILE=" "${QT_FILE}"
  printf "%s%s\n" "QT_VERSION=" "${QT_VERSION}"
  printf "%s%s\n" "QT_PLATFORM=" "${QT_PLATFORM}"
  printf "%s%s\n" "BV_QT_DIR=" "${BV_QT_DIR}"

  printf "%s%s\n" "SILO_FILE=" "${SILO_FILE}"
  printf "%s%s\n" "SILO_VERSION=" "${SILO_VERSION}"
  printf "%s%s\n" "SILO_COMPATIBILITY_VERSION=" "${SILO_COMPATIBILITY_VERSION}"
  printf "%s%s\n" "SILO_DIR=" "${SILO_DIR}"

  printf "%s%s\n" "SZIP_FILE=" "${SZIP_FILE}"
  printf "%s%s\n" "SZIP_VERSION=" "${SZIP_VERSION}"
  printf "%s%s\n" "SZIP_COMPATIBILITY_VERSION=" "${SZIP_COMPATIBILITY_VERSION}"
  printf "%s%s\n" "SZIP_DIR=" "${SZIP_DIR}"

  printf "%s%s\n" "HDF5_FILE=" "${HDF5_FILE}"
  printf "%s%s\n" "HDF5_VERSION=" "${HDF5_VERSION}"
  printf "%s%s\n" "HDF5_COMPATIBILITY_VERSION=" "${HDF5_COMPATIBILITY_VERSION}"
  printf "%s%s\n" "HDF5_DIR=" "${HDF5_DIR}"

  printf "%s%s\n" "HDF4_FILE=" "${HDF4_FILE}"
  printf "%s%s\n" "HDF4_VERSION=" "${HDF4_VERSION}"
  printf "%s%s\n" "HDF4_COMPATIBILITY_VERSION=" "${HDF4_COMPATIBILITY_VERSION}"
  printf "%s%s\n" "HDF4_DIR=" "${HDF4_DIR}"

  printf "%s%s\n" "MILI_FILE=" "${MILI_FILE}"
  printf "%s%s\n" "MILI_VERSION=" "${MILI_VERSION}"
  printf "%s%s\n" "MILI_COMPATIBILITY_VERSION=" "${MILI_COMPATIBILITY_VERSION}"
  printf "%s%s\n" "BV_MILI_DIR=" "${BV_MILI_DIR}"

  printf "%s%s\n" "NETCDF_FILE=" "${NETCDF_FILE}"
  printf "%s%s\n" "NETCDF_VERSION=" "${NETCDF_VERSION}"
  printf "%s%s\n" "NETCDF_COMPATIBILITY_VERSION=" "${NETCDF_COMPATIBILITY_VERSION}"
  printf "%s%s\n" "NETCDF_DIR=" "${NETCDF_DIR}"

  printf "%s%s\n" "CGNS_FILE=" "${CGNS_FILE}"
  printf "%s%s\n" "CGNS_VERSION=" "${CGNS_VERSION}"
  printf "%s%s\n" "CGNS_COMPATIBILITY_VERSION=" "${CGNS_COMPATIBILITY_VERSION}"
  printf "%s%s\n" "CGNS_DIR=" "${CGNS_DIR}"

  printf "%s%s\n" "GDAL_FILE=" "${GDAL_FILE}"
  printf "%s%s\n" "GDAL_VERSION=" "${GDAL_VERSION}"
  printf "%s%s\n" "GDAL_COMPATIBILITY_VERSION=" "${GDAL_COMPATIBILITY_VERSION}"
  printf "%s%s\n" "GDAL_DIR=" "${GDAL_DIR}"

  printf "%s%s\n" "EXODUS_FILE=" "${EXODUS_FILE}"
  printf "%s%s\n" "EXODUS_VERSION=" "${EXODUS_VERSION}"
  printf "%s%s\n" "EXODUS_COMPATIBILITY_VERSION=" "${EXODUS_COMPATIBILITY_VERSION}"
  printf "%s%s\n" "EXODUS_DIR=" "${EXODUS_DIR}"

  printf "%s%s\n" "BOXLIB_FILE=" "${BOXLIB_FILE}"
  printf "%s%s\n" "BOXLIB_VERSION=" "${BOXLIB_VERSION}"
  printf "%s%s\n" "BOXLIB_COMPATIBILITY_VERSION=" "${BOXLIB_COMPATIBILITY_VERSION}"
  printf "%s%s\n" "BOXLIB_DIR=" "${BOXLIB_DIR}"

  printf "%s%s\n" "CFITSIO_FILE=" "${CFITSIO_FILE}"
  printf "%s%s\n" "CFITSIO_VERSION=" "${CFITSIO_VERSION}"
  printf "%s%s\n" "CFITSIO_COMPATIBILITY_VERSION=" "${CFITSIO_COMPATIBILITY_VERSION}"
  printf "%s%s\n" "CFITSIO_DIR=" "${CFITSIO_DIR}"

  printf "%s%s\n" "H5PART_FILE=" "${H5PART_FILE}"
  printf "%s%s\n" "H5PART_VERSION=" "${H5PART_VERSION}"
  printf "%s%s\n" "H5PART_COMPATIBILITY_VERSION=" "${H5PART_COMPATIBILITY_VERSION}"
  printf "%s%s\n" "H5PART_DIR=" "${H5PART_DIR}"

  printf "%s%s\n" "CCMIO_FILE=" "${CCMIO_FILE}"
  printf "%s%s\n" "CCMIO_VERSION=" "${CCMIO_VERSION}"
  printf "%s%s\n" "CCMIO_COMPATIBILITY_VERSION=" "${CCMIO_COMPATIBILITY_VERSION}"
  printf "%s%s\n" "CCMIO_DIR=" "${CCMIO_DIR}"

  printf "%s%s\n" "ITAPS_FILE=" "${ITAPS_FILE}"
  printf "%s%s\n" "ITAPS_VERSION=" "${ITAPS_VERSION}"
  printf "%s%s\n" "ITAPS_COMPATIBILITY_VERSION=" "${ITAPS_COMPATIBILITY_VERSION}"
  printf "%s%s\n" "ITAPS_DIR=" "${ITAPS_DIR}"

  printf "%s%s\n" "VISUS_FILE=" "${VISUS_FILE}"
  printf "%s%s\n" "VISUS_VERSION=" "${VISUS_VERSION}"
  printf "%s%s\n" "VISUS_COMPATIBILITY_VERSION=" "${VISUS_COMPATIBILITY_VERSION}"
  printf "%s%s\n" "VISUS_DIR=" "${VISUS_DIR}"
}
usage () {
  printf "Usage: %s [-45bCcdEefghIijkmnoprSsVwxyz] [-a opt] [-l opt]\n" $0
  printf "       [-t opt] [-u opt] [-v opt] [-D opt] [-J opt] [-R opt]\n"
  printf "\n"
  printf "%s %s %s\n" "-4     Build HDF4 from ["$HDF4_FILE"]"
  printf "%s %s %s\n" "-5     Build HDF5 from ["$HDF5_FILE"]"
  printf "%s %s %s\n" "-a opt Architecture variable VISITARCH ["$VISITARCHTMP"]"
  printf "%s\n" "       This variable is used in contructing the 3rd parthy" 
  printf "%s\n" "       library path usually set to something like"
  printf "%s\n" "       linux_gcc-3.4.6 or Darwin_gcc-4.0.1"
  printf "%s %s %s\n" "-b     Build Boxlib from ["$BOXLIB_FILE"]"
  printf "%s %s %s\n" "-C     Build Star-CD support from ["$CCMIO_FILE"]"
  printf "%s %s %s\n" "-c     Build CGNS from ["$CGNS_FILE"]"
  printf "%s\n" "-D opt Select -g level debugging flag in CFLAGS/CXXFLAGS"
  printf "%s\n" "       The default level is 2 (-g2). Level 1 produces"
  printf "%s\n" "       minimal information, while level 3 includes extra"
  printf "%s\n" "-d     Turn on -g, debugging flag in CFLAGS/CXXFLAGS"
  printf "%s\n" "-E     Display user settable environment variables"
  printf "%s %s %s\n" "-e     Build Exodus from ["$EXODUS_FILE"]"
  printf "%s %s %s\n" "-f     Build CFITSIO from ["$CFITSIO_FILE"]"
  printf "%s %s %s\n" "-g     Build GDAL from ["$GDAL_FILE"]"
  printf "%s\n" "-h     display this message"
  printf "%s %s %s\n" "-I     Build ITAPS from ["$ITAPS_FILE"]-experimental!"
  printf "%s\n" "-i     Change the behavior of the install name path for"
  printf "%s\n" "       the Darwin dynamic libraries. Enabling this flag"
  printf "%s\n" "       will used the THIRD_PARTY_PATH path for creating"
  printf "%s\n" "       an absolute path to the dynamic libraries and not"
  printf "%s\n" "       use the default relative path [@executable_path/../lib]"
  printf "%s\n" "-J opt Set -j level for parallel makes"
  printf "%s\n" "-j     Do not build VisIt, build 3rd party libraries only"
  printf "%s\n" "-k     Do not build required 3rd party libraries"
  printf "%s %s %s\n" "-l opt Group name of installed libraries ["$GROUP"]"
  printf "%s %s %s\n" "-m     Build Mili from:["$MILI_FILE"]."
  printf "%s\n" "       NOTE: not available for download from web"
  printf "%s %s %s\n" "-n     Build NetCDF from ["$NETCDF_FILE"]"
  printf "%s\n" "-o     Write build log to stdout not to build_visit_log file"
  printf "%s\n" "-p     Enable parallel build, display MPI prompt"
  printf "%s\n" "-R opt Checkout specific revision argument of VisIt from SVN"
  printf "%s %s %s\n" "-r     Build H5Part from ["$H5PART_FILE"]"
  printf "%s\n" "-S     Build with SLIVR shader support"
  printf "%s\n" "-s     Use the SVN server for the VisIt distribution"
  printf "%s %s %s\n" "       [svn co $SVN_ROOT_PATH/trunk/src]"
  printf "%s\n" "-t opt The name of the distribution tarball, the VISIT_FILE"
  printf "%s %s %s\n" "       variable ["$VISIT_FILE"]"
  printf "%s\n" "       This option will over-ride the above SVN, -s section"
  printf "%s\n" "-u opt The THIRD_PARTY_PATH path contains the root"
  printf "%s\n" "       directory name underwhich the 3rd party libraries"
  printf "%s\n" "       have been installed. If defined, it would typically"
  printf "%s\n" "       mean the 3rd party libraries are pre-built and are"
  printf "%s\n" "       installed some where like /usr/gapps/visit. The"
  printf "%s\n" "       default assumes 3rd party libraries are to be built"
  printf "%s %s %s\n" "       and installed in ["$THIRD_PARTY_PATH"]"
  printf "%s %s %s\n" "-V     Build ViSUS from:["$VISUS_FILE"]-experimental!"
  printf "%s %s %s\n" "-v opt The VISIT_VERSION value ["$VISIT_VERSION"]"
  printf "%s\n" "-w     Build with the VisIt Python module"
  printf "%s\n" "-x     Turn on SHELL debugging"
  printf "%s\n" "-y     Build with the Java client library"
  printf "%s\n" "-z     Do not bring up a graphical program (i.e. dialog) "
  printf "%s\n" "       to direct the build."
}

# *************************************************************************** #
#                       Section 2, building VisIt                             #
# --------------------------------------------------------------------------- #
# This section does some set up for building VisIt, and then calls the        #
# functions to build the third party libraries and VisIt itself.              #
# *************************************************************************** #
while getopts :45a:bcdefghijkl:mnoprst:u:v:wxyzA:BCD:EFGHIJ:KL:MNOPR:ST:U:V:WXYZ ARG

do
    argcur=$ARG
    case $ARG in
      4)   DO_HDF4="yes"
           ON_HDF4="on"
           DO_SZIP="yes"
           ON_SZIP="on";;
      5)   DO_HDF5="yes"
           ON_HDF5="on"
           DO_SZIP="yes"
           ON_SZIP="on";;
      a|A) VISITARCH="$OPTARG";;
      b|B) DO_BOXLIB="yes"
           ON_BOXLIB="on";;
      C)   DO_CCMIO="yes"
           ON_CCMIO="on";;
      c)   DO_CGNS="yes"
           ON_CGNS="on";;
      D)   C_OPT_FLAGS="$C_OPT_FLAGS -g$OPTARG"
           CXX_OPT_FLAGS="$CXX_OPT_FLAGS -g$OPTARG";;
      d)   C_OPT_FLAGS="$C_OPT_FLAGS -g"
           CXX_OPT_FLAGS="$CXX_OPT_FLAGS -g";;
      E)   printvariables; exit 2;;
      e)   DO_EXODUS="yes"
           ON_EXODUS="on"
           DO_NETCDF="yes" 
           ON_NETCDF="on";;
      f|F) DO_CFITSIO="yes"
           ON_CFITSIO="on";;
      g|G) DO_GDAL="yes"
           ON_GDAL="on";;
      h|H) usage; exit 2;;
      I)   DO_ITAPS="yes"
           ON_ITAPS="on";;
      i)   ABS_PATH="yes"
           ON_ABS_PATH="on";;
      J)   MAKE_OPT_FLAGS="-j $OPTARG";;
      j)   DO_VISIT="no"
           ON_VISIT="off";;
      k|K) DO_REQUIRED_THIRD_PARTY="no"
           ON_THIRD_PARTY="off";;
      l|L) DO_GROUP="yes"
           GROUP="$OPTARG"
           ON_GROUP="on";;
      m|M) DO_MILI="yes"
           ON_MILI="on";;
      n|N) DO_NETCDF="yes"
           ON_NETCDF="on";;
      o|O) LOG_FILE="/dev/tty";;
      p|P) parallel="yes"
           ON_parallel="on";;
        R) SVNREVISION="$OPTARG"
           DO_SVN="yes"
           DO_REVISION="yes";;
        r) DO_H5PART="yes"
           ON_H5PART="on"
           DO_HDF5="yes"
           ON_HDF5="on"
           DO_SZIP="yes"
           ON_SZIP="on";;
      S)   DO_SLIVR="yes"
           ON_SLIVR="on";;
      s)   DO_SVN="yes"
           ON_SVN="on";;
      t|T) VISIT_FILE="$OPTARG"
           USE_VISIT_FILE="yes"
           ON_USE_VISIT_FILE="on";;
      u|U) THIRD_PARTY_PATH="$OPTARG"
           ON_THIRD_PARTY_PATH="on";;
      V)   DO_VISUS="yes"
           ON_VISUS="on";;
      v)   VISIT_VERSION=$OPTARG
           VISIT_FILE="visit${VISIT_VERSION}.tar.gz";;
      w|W) DO_MODULE="yes"
           ON_MODULE="on";;
      x|X) set -vx;;
      y|Y) DO_JAVA="yes"
           ON_JAVA="on";;
      z|Z) GRAPHICAL="no"
           ON_GRAPHICAL="on";;
      :)   echo "$0: \"$argcur\" requires a value"; exit 2;;
      \?)  echo "$0: INVALID option \"$argcur\" at $OPTIND"; exit 2;;
    esac
done
# Show a splashscreen. This routine also determines if we have "dialog"
# or "whiptail", which we use to show dialogs. If we do not have either
# then proceed in non-graphical mode.
#

if [[ "$GRAPHICAL" == "yes" ]] ; then
    DLG=$(which dialog)
    
    # Guard against bad "which" implementations that return
    # "no <exe> in path1 path2 ..." (these implementations also
    # return 0 as the exit status.
    if [[ "${DLG#no }" != "${DLG}" ]] ; then
        DLG=""
    fi
    if [[ "$DLG" == "" ]] ; then
        DLG=$(which whiptail)
        if [[ "${DLG#no }" != "${DLG}" ]] ; then
           DLG=""
        fi
        if [[ "$DLG" == "" ]] ; then
            GRAPHICAL="no"
            echo ""
            echo "Unable to find utility for graphical build..."
            echo "Continuing in command line mode..."
            echo ""
        fi
    fi
fi
if [[ "$GRAPHICAL" == "yes" ]] ; then
    $DLG --backtitle "$DLG_BACKTITLE" \
    --title "Build options" \
    --checklist \
"Welcome to the VisIt $VISIT_VERSION build process.\n\n"\
"This program will build VisIt and its required "\
"3rd party sources, downloading any missing source packages "\
"before building. The required and optional 3rd party libraries "\
"are built and installed before VisIt is built, so please be patient. "\
"Note that you can build a parallel version of VisIt by "\
"specifying the location of your MPI installation when prompted.\n\n"\
"Select the build options:" 0 0 0 \
           "Optional"   "select optional 3rd party libraries"  $ON_OPTIONAL\
           "SVN"        "get sources from SVN server"          $ON_SVN\
           "Tarball"    "specify VisIt tarball name"      $ON_USE_VISIT_FILE\
           "Parallel"   "specify parallel build flags"    $ON_parallel\
           "Python"     "enable VisIt python module"      $ON_MODULE\
           "Java"       "enable java client library"      $ON_JAVA\
           "SLIVR"      "enable SLIVR rendering library"  $ON_SLIVR\
           "Variables"  "specify build variable values"   $ON_verify\
           "More"       "select more options"             $ON_MORE  2> tmp$$
    retval=$?

    # Remove the extra quoting, new dialog has --single-quoted
    choice="$(cat tmp$$ | sed 's/"//g' )"
    case $retval in
      0)
        DO_OPTIONAL="no"
        DO_SVN="no"
        USE_VISIT_FILE="no"
        parallel="no"
        DO_MODULE="no"
        DO_JAVA="no"
        DO_SLIVR="no"
        verify="no"
        DO_MORE="no"
        for OPTION in $choice
        do
            case $OPTION in
              Optional)
                 DO_OPTIONAL="yes";;
              SVN)
                 DO_SVN="yes";;
              Tarball)
                 $DLG --backtitle "$DLG_BACKTITLE" \
                    --no-cancel --inputbox \
"Enter $OPTION value:" 0 $DLG_WIDTH_WIDE "$VISIT_FILE" 2> tmp$$
                 VISIT_FILE="$(cat tmp$$)"
                 USE_VISIT_FILE="yes";;
              Parallel)
                 parallel="yes";;
              Python)
                 DO_MODULE="yes";;
              Java)
                 DO_JAVA="yes";;
              SLIVR)
                 DO_SLIVR="yes";;
              Variables)
                 verify="yes";;
              More)
                 DO_MORE="yes";;
            esac
        done
        ;;
      1)
        echo "Cancel pressed."
        exit 1;;
      255)
        echo "ESC pressed.";;
      *)
        echo "Unexpected return code: $retval";;
    esac
fi
if [[ -e "tmp$$" ]] ; then
    rm tmp$$
fi

if [[ "$DO_OPTIONAL" == "yes" && "$GRAPHICAL" == "yes" ]] ; then
    $DLG --backtitle "$DLG_BACKTITLE" \
    --title "Select 3rd party libraries" \
    --checklist \
"Select the optional 3rd party libraries "\
"to be built and installed:" 0 0 0 \
           "Boxlib"   "2.5    $BOXLIB_FILE"    $ON_BOXLIB \
           "CCMIO"    "2.6.1  $CCMIO_FILE"     $ON_CCMIO \
           "CFITSIO"  "3006   $CFITSIO_FILE"   $ON_CFITSIO \
           "CGNS"     "2.4.3  $CGNS_FILE"      $ON_CGNS \
           "ExodusII" "4.46   $EXODUS_FILE"    $ON_EXODUS \
           "GDAL"     "1.3.2  $GDAL_FILE"      $ON_GDAL \
           "H5Part"   "1.3.3  $H5PART_FILE"    $ON_H5PART \
           "HDF4"     "2.4.1  $HDF4_FILE"      $ON_HDF4 \
           "HDF5"     "1.6.5  $HDF5_FILE"      $ON_HDF5 \
           "Mili"     "1.10   $MILI_FILE (not available from the web)"      $ON_MILI \
           "NetCDF"   "3.6.0  $NETCDF_FILE"    $ON_NETCDF 2> tmp$$
    retval=$?

    # Remove the extra quoting, new dialog has --single-quoted
    choice="$(cat tmp$$ | sed 's/"//g' )"
    case $retval in
      0)
        DO_BOXLIB="no"
        DO_CCMIO="no"
        DO_CFITSIO="no"
        DO_CGNS="no"
        DO_EXODUS="no"
        DO_GDAL="no"
        DO_H5PART="no"
        DO_HDF4="no"
        DO_HDF5="no"
        DO_MILI="no"
        DO_NETCDF="no"
        DO_SZIP="no"
        for OPTION in $choice
        do
            case $OPTION in
              Boxlib)
                 DO_BOXLIB="yes";;
              CCMIO)
                 DO_CCMIO="yes";;
              CFITSIO)
                 DO_CFITSIO="yes";;
              CGNS)
                 DO_CGNS="yes";;
              ExodusII)
                 DO_EXODUS="yes"
                 DO_NETCDF="yes";;
              GDAL)
                 DO_GDAL="yes";;
              H5Part)
                 DO_H5PART="yes"
                 DO_HDF5="yes"
                 DO_SZIP="yes";;
              HDF4)
                 DO_HDF4="yes"
                 DO_SZIP="yes";;
              HDF5)
                 DO_HDF5="yes"
                 DO_SZIP="yes";;
              Mili)
                 DO_MILI="yes";;
              NetCDF)
                 DO_NETCDF="yes";;
            esac
        done
        ;;
      1)
        echo "Cancel pressed."
        exit 1;;
      255)
        echo "ESC pressed.";;
      *)
        echo "Unexpected return code: $retval";;
    esac
fi
if [[ -e "tmp$$" ]] ; then
    rm tmp$$
fi

#
# See if the used needs to modify some variables
#
check_more_options
if [[ $? != 0 ]] ; then
   echo "Stopping build because of bad variable option setting error."
   exit 1
fi

#
# See if the user wants to build a parallel version.
#
check_parallel
if [[ $? != 0 ]] ; then
   echo "Stopping build because necessary parallel options are not set."
   exit 1
fi

#
# See if the user wants to modify variables
#
check_variables
if [[ $? != 0 ]] ; then
   echo "Stopping build because of bad variable option setting error."
   exit 1
fi


if [[ $VISITARCH == "" ]] ; then
    export VISITARCH=${ARCH}_${C_COMPILER}
    if [[ "$CXX_COMPILER" == "g++" ]] ; then
       VERSION=$(g++ -v 2>&1 | grep "gcc version" | cut -d' ' -f3)
       if [[ ${#VERSION} == 5 ]] ; then
          VISITARCH=${VISITARCH}-${VERSION}
       fi
    fi
fi

if [[ ! -d "$THIRD_PARTY_PATH" ]] ; then
   if [[ "$THIRD_PARTY_PATH" == "./visit" ]] ; then
      mkdir "$THIRD_PARTY_PATH"
      if [[ $? != 0 ]] ; then
          echo "Unable to write files to the third party library location."
          echo "Bailing out."
          exit 1
      fi
   else
      echo "The location to install the third party libraries does not exit."
      echo "Bailing out"
      exit 1
   fi
fi

START_DIR="$PWD"
cd "$THIRD_PARTY_PATH"
if [[ $? != 0 ]] ; then
   echo "Unable to access the third party location"
   echo "Bailing out."
   exit 1
fi
export VISITDIR="$PWD"

#
# Later we will build Qt.  We are going to bypass their licensing agreement,
# so echo it here.
#
cd "$START_DIR"
DO_QT="yes"
if [[ -d "$VISITDIR/qt/$QT_VERSION/$VISITARCH" ]] ; then
   DO_QT="no"
fi
if [[ "$DO_REQUIRED_THIRD_PARTY" = "no" ]] ; then
   DO_QT="no"
fi

if [[ "$DO_QT" == "yes" ]] ; then
   if [[ "$GRAPHICAL" == "yes" ]] ; then
       $DLG --backtitle "$DLG_BACKTITLE" --yesno \
       "During the build process, this script will build Qt "\
"and confirm that you accept their license. "\
"Please choose \"Yes\" to accept (in advance) their license "\
"for the Qt/X11 Free Edition, licensed under the Q Public License "\
"(QPL) or the GNU General Public License (GPL).\n\nVisit "\
"http://trolltech.com/products/qt/licenses/licensing/opensource to view "\
"either license." 0 0
       if [[ $? == 1 ]] ; then
           choice=`$DLG --backtitle "$DLG_BACKTITLE" --radiolist \
"You chose not to accept Qt\'s license. VisIt requires Qt. "\
"What would you like to do?" \
    0 0 0 1 "Accept Qt's license" on 2 "Quit VisIt\'s build process" off 2>&1`
           if [[ $? == 1 || "$choice" == "2" ]] ; then
               echo "You declined the Qt license and stopped building VisIt."
               exit 1
           fi
       fi
   else
      echo "During this build process, this script will build Qt and"
      echo "confirm that you accept their license."
      echo "Please type \"yes\" to accept (in advance) their license"
      echo "offer for the Qt/X11 Free Edition, licensed under the Q Public"
      echo "License (QPL) or the GNU General Public License (GPL)"
      echo ""
      echo "Visit http://trolltech.com/products/qt/licenses/licensing/opensource"
      echo "to view either license."
      read RESPONSE
      while [[ "$RESPONSE" != "yes" ]] ; do
         echo "Please type \"yes\" to accept their license offer for the "
         echo "Qt/X11 Free Edition, licensed under the Q Public License (QPL) "
         echo "or the GNU General Public License (GPL)"
         read RESPONSE
      done
   fi
fi

QTDIR=""

#
# Now make sure that we have everything we need to build VisIt, so we can bail
# out early if we are headed for failure.
#
check_files
if [[ $? != 0 ]] ; then
   echo "Stopping build because necessary files aren't available."
   exit 1
fi

#
# Log the start time.  Especially helpful if there are multiple starts
# dumped into the same log.
#
LINES="------------------------------------------------------------" 
echo $LINES >> ${LOG_FILE}
echo -n "Starting build_visit at " >> ${LOG_FILE}
date >> ${LOG_FILE}
echo $LINES >> ${LOG_FILE}

cd "$START_DIR"
#
# We are now ready to build.  Start with Mesa.
#
if [[ "$DO_REQUIRED_THIRD_PARTY" == "yes" ]] ; then
   if [[ -d "$VISITDIR/mesa/$MESA_VERSION/$VISITARCH" ]] ; then
      echo "Skipping Mesa build.  Mesa is already installed."
   else
      echo "Building Mesa (~2 minutes)"
      build_mesa 3>&1 >> ${LOG_FILE} 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install Mesa.  Bailing out."
         if [[ "${LOG_FILE}" != "/dev/tty" ]] ; then
            echo \
"More information about the failed build can be found in \"${LOG_FILE}\""
         fi
         exit 1
      fi
      echo "Done building Mesa"
   fi
else
   echo "Skipping Mesa build."
fi


#
# Build Qt
#
cd "$START_DIR"
if [[ "$DO_REQUIRED_THIRD_PARTY" == "yes" ]] ; then
   if [[ "$DO_QT" == "no" ]]; then
      echo "Skipping Qt build.  Qt is already installed."
   else
      echo "Building Qt (~10 minutes)"
      build_qt 3>&1 >> ${LOG_FILE} 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install Qt.  Bailing out."
         if [[ "${LOG_FILE}" != "/dev/tty" ]] ; then
            echo \
"More information about the failed build can be found in \"${LOG_FILE}\""
         fi
         exit 1
      fi
      echo "Done building Qt"
   fi
else
   echo "Skipping Qt build."
fi

#
# Build CMake
#
cd "$START_DIR"
if [[ "$DO_REQUIRED_THIRD_PARTY" == "yes" ]] ; then
   if [[ -d "$VISITDIR/cmake/${CMAKE_VERSION}/$VISITARCH" ]] ; then
      echo "Skipping CMake build.  CMake is already installed."
   else
      echo "Building CMake (~2 minutes)"
      build_cmake 3>&1 >> ${LOG_FILE} 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install CMake.  Bailing out."
         if [[ "${LOG_FILE}" != "/dev/tty" ]] ; then
            echo \
"More information about the failed build can be found in \"${LOG_FILE}\""
         fi
         exit 1
      fi
      echo "Done building CMake"
   fi
else
   echo "Skipping CMake build."
fi
#
# Build VTK
#
cd "$START_DIR"
if [[ "$DO_REQUIRED_THIRD_PARTY" == "yes" ]] ; then
   if [[ -d "$VISITDIR/vtk/${VTK_VERSION}/$VISITARCH" ]] ; then
      echo "Skipping VTK build.  VTK is already installed."
   else
      echo "Building VTK (~20 minutes)"
      build_vtk 3>&1 >> ${LOG_FILE} 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install VTK.  Bailing out."
         if [[ "${LOG_FILE}" != "/dev/tty" ]] ; then
            echo \
"More information about the failed build can be found in \"${LOG_FILE}\""
         fi
         exit 1
      fi
      echo "Done building VTK"
   fi
else
   echo "Skipping VTK build."
fi

#
# Build Python
#
cd "$START_DIR"
if [[ "$DO_REQUIRED_THIRD_PARTY" == "yes" ]] ; then
   if [[ -d "$VISITDIR/python/${PYTHON_VERSION}/$VISITARCH" ]] ; then
      echo "Skipping Python build.  Python is already installed."
   else
      echo "Building Python (~3 minutes)"
      build_python 3>&1 >> ${LOG_FILE} 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install Python.  Bailing out."
         if [[ "${LOG_FILE}" != "/dev/tty" ]] ; then
            echo \
"More information about the failed build can be found in \"${LOG_FILE}\""
         fi
         exit 1
      fi
      echo "Done building Python"
   fi
else
   echo "Skipping Python build."
fi

cd "$START_DIR"
if [[ "$DO_SZIP" == "yes" ]] ; then
   if [[ -d "$VISITDIR/szip/${SZIP_VERSION}/$VISITARCH" ]] ; then
      echo "Skipping SZIP build.  SZIP is already installed."
   else
      echo "Building SZIP (~2 minutes)"
      build_szip 3>&1 >> ${LOG_FILE} 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install SZIP.  Bailing out."
         if [[ "${LOG_FILE}" != "/dev/tty" ]] ; then
            echo \
"More information about the failed build can be found in \"${LOG_FILE}\""
         fi
         exit 1
      fi
      echo "Done building SZIP"
   fi
fi
cd "$START_DIR"
if [[ "$DO_HDF5" == "yes" ]] ; then
   if [[ -d "$VISITDIR/hdf5/${HDF5_VERSION}/$VISITARCH" ]] ; then
      echo "Skipping HDF5 build.  HDF5 is already installed."
   else
      echo "Building HDF5 (~2 minutes)"
      build_hdf5 3>&1 >> ${LOG_FILE} 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install HDF5.  Bailing out."
         if [[ "${LOG_FILE}" != "/dev/tty" ]] ; then
            echo \
"More information about the failed build can be found in \"${LOG_FILE}\""
         fi
         exit 1
      fi
      echo "Done building HDF5"
   fi
fi
cd "$START_DIR"
if [[ "$DO_MILI" == "yes" ]] ; then
   if [[ -d "$VISITDIR/mili/${MILI_VERSION}/$VISITARCH" ]] ; then
      echo "Skipping Mili build.  Mili is already installed."
   else
      echo "Building Mili (~2 minutes)"
      build_mili 3>&1 >> ${LOG_FILE} 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install Mili.  Bailing out."
         if [[ "${LOG_FILE}" != "/dev/tty" ]] ; then
            echo \
"More information about the failed build can be found in \"${LOG_FILE}\""
         fi
         exit 1
      fi
      echo "Done building Mili"
   fi
fi
cd "$START_DIR"
if [[ "$DO_HDF4" == "yes" ]] ; then
   if [[ -d "$VISITDIR/hdf4/${HDF4_VERSION}/$VISITARCH" ]] ; then
      echo "Skipping HDF4 build.  HDF4 is already installed."
   else
      echo "Building HDF4 (~2 minutes)"
      build_hdf4 3>&1 >> ${LOG_FILE} 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install HDF4.  Bailing out."
         if [[ "${LOG_FILE}" != "/dev/tty" ]] ; then
            echo \
"More information about the failed build can be found in \"${LOG_FILE}\""
         fi
         exit 1
      fi
      echo "Done building HDF4"
   fi
fi
cd "$START_DIR"
if [[ "$DO_NETCDF" == "yes" ]] ; then
   if [[ -d "$VISITDIR/netcdf/${NETCDF_VERSION}/$VISITARCH" ]] ; then
      echo "Skipping NetCDF build.  NetCDF is already installed."
   else
      echo "Building NetCDF (~2 minutes)"
      build_netcdf 3>&1 >> ${LOG_FILE} 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install NetCDF.  Bailing out."
         if [[ "${LOG_FILE}" != "/dev/tty" ]] ; then
            echo \
"More information about the failed build can be found in \"${LOG_FILE}\""
         fi
         exit 1
      fi
      echo "Done building NetCDF"
   fi
fi
cd "$START_DIR"
if [[ "$DO_CGNS" == "yes" ]] ; then
   if [[ -d "$VISITDIR/cgns/${CGNS_VERSION}/$VISITARCH" ]] ; then
      echo "Skipping CGNS build.  CGNS is already installed."
   else
      echo "Building CGNS (~2 minutes)"
      build_cgns 3>&1 >> ${LOG_FILE} 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install CGNS.  Bailing out."
         echo \
"More information about the failed build can be found in \"${LOG_FILE}\""
         exit 1
      fi
      echo "Done building CGNS"
   fi
fi
cd "$START_DIR"
if [[ "$DO_GDAL" == "yes" ]] ; then
   if [[ "$OPSYS" == "AIX" ]]; then
      echo "Skipping GDAL build.  AIX build is not supported."
      DO_GDAL="no"
   else
      if [[ -d "$VISITDIR/gdal/${GDAL_VERSION}/$VISITARCH" ]] ; then
         echo "Skipping GDAL build.  GDAL is already installed."
      else
         echo "Building GDAL (~2 minutes)"
         build_gdal 3>&1 >> ${LOG_FILE} 2>&1
         if [[ $? != 0 ]] ; then
            echo "Unable to build or install GDAL.  Bailing out."
            if [[ "${LOG_FILE}" != "/dev/tty" ]] ; then
               echo \
"More information about the failed build can be found in \"${LOG_FILE}\""
            fi
            exit 1
         fi
         echo "Done building GDAL"
      fi
   fi
fi
cd "$START_DIR"
if [[ "$DO_EXODUS" == "yes" ]] ; then
   if [[ -d "$VISITDIR/exodus/${EXODUS_VERSION}/$VISITARCH" ]] ; then
      echo "Skipping EXODUS build.  EXODUS is already installed."
   else
      echo "Building EXODUS (~2 minutes)"
      build_exodus 3>&1 >> ${LOG_FILE} 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install EXODUS.  Bailing out."
         if [[ "${LOG_FILE}" != "/dev/tty" ]] ; then
           echo \
"More information about the failed build can be found in \"${LOG_FILE}\""
         fi
         exit 1
      fi
      echo "Done building EXODUS"
   fi
fi
cd "$START_DIR"
if [[ "$DO_BOXLIB" == "yes" ]] ; then
   if [[ -d "$VISITDIR/boxlib/$VISITARCH" ]] ; then
      echo "Skipping Boxlib build.  Boxlib is already installed."
   else
      echo "Building Boxlib (~2 minutes)"
      build_boxlib 3>&1 >> ${LOG_FILE} 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install Boxlib.  Bailing out."
         if [[ "${LOG_FILE}" != "/dev/tty" ]] ; then
            echo \
"More information about the failed build can be found in \"${LOG_FILE}\""
         fi
         exit 1
      fi
      echo "Done building Boxlib"
   fi
fi
cd "$START_DIR"
if [[ "$DO_CFITSIO" == "yes" ]] ; then
   if [[ -d "$VISITDIR/cfitsio/${CFITSIO_VERSION}/$VISITARCH" ]] ; then
      echo "Skipping CFITSIO build.  CFITSIO is already installed."
   else
      echo "Building CFITSIO (~2 minutes)"
      build_cfitsio 3>&1 >> ${LOG_FILE} 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install CFITSIO.  Bailing out."
         if [[ "${LOG_FILE}" != "/dev/tty" ]] ; then
            echo \
"More information about the failed build can be found in \"${LOG_FILE}\""
         fi
         exit 1
      fi
      echo "Done building CFITSIO"
   fi
fi
cd "$START_DIR"
if [[ "$DO_H5PART" == "yes" ]] ; then
   if [[ -d "$VISITDIR/h5part/${H5PART_VERSION}/$VISITARCH" ]] ; then
      echo "Skipping H5Part build.  H5Part is already installed."
   else
      echo "Building H5Part (~1 minutes)"
      build_h5part 3>&1 >> ${LOG_FILE} 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install H5Part.  Bailing out."
         if [[ "${LOG_FILE}" != "/dev/tty" ]] ; then
            echo \
"More information about the failed build can be found in \"${LOG_FILE}\""
         fi
         exit 1
      fi
      echo "Done building H5Part"
   fi
fi
cd "$START_DIR"
if [[ "$DO_CCMIO" == "yes" ]] ; then
   if [[ -d "$VISITDIR/ccmio/${CCMIO_VERSION}/$VISITARCH" ]] ; then
      echo "Skipping CCMIO build.  CCMIO is already installed."
   else
      echo "Building CCMIO (~1 minutes)"
      build_ccmio 3>&1 >> ${LOG_FILE} 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install CCMIO.  Bailing out."
         if [[ "${LOG_FILE}" != "/dev/tty" ]] ; then
            echo \
"More information about the failed build can be found in \"${LOG_FILE}\""
         fi
         exit 1
      fi
      echo "Done building CCMIO"
   fi
fi

#
# Build Silo
#
cd "$START_DIR"
if [[ "$DO_REQUIRED_THIRD_PARTY" == "yes" ]] ; then
   if [[ -d "$VISITDIR/silo/${SILO_VERSION}/$VISITARCH" ]] ; then
      echo "Skipping Silo build.  Silo is already installed."
   else
      echo "Building Silo (~2 minutes)"
      build_silo 3>&1 >> ${LOG_FILE} 2>&1
      if [[ $? != 0 ]] ; then
         echo "Unable to build or install Silo.  Bailing out."
         if [[ "${LOG_FILE}" != "/dev/tty" ]] ; then
            echo \
"More information about the failed build can be found in \"${LOG_FILE}\""
         fi
         exit 1
      fi
      echo "Done building Silo"
   fi
else
   echo "Skipping Silo build."
fi

#
# Create the host.conf file
#
echo "Creating host.conf"
build_hostconf 3>&1 >> ${LOG_FILE} 2>&1

#
# Build the actual VisIt code
#
if [[ "$DO_VISIT" == "yes" ]] ; then
   cd "$START_DIR"
   echo "Building VisIt (~50 minutes)"
   build_visit 3>&1 >> ${LOG_FILE} 2>&1
   if [[ $? != 0 ]] ; then
      echo "Unable to build or install VisIt.  Bailing out."
      if [[ "${LOG_FILE}" != "/dev/tty" ]] ; then
         echo \
"More information about the failed build can be found in \"${LOG_FILE}\""
      fi
      exit 1
   fi
   echo "Done building VisIt"
   if [[ "$DO_SVN" == "yes" && "$USE_VISIT_FILE" == "no" ]] ; then
      echo \
"You may now try to run VisIt by cd'ing into the src/bin"
   else
       echo \
"You may now try to run VisIt by cd'ing into the ${VISIT_FILE%.tar*}/src/bin"
   fi
   echo "directory and invoking \"visit\"."
   echo 
   echo "To create a binary distribution tarball from this build, cd to"
    if [[ "$DO_SVN" == "yes" && "$USE_VISIT_FILE" == "no" ]] ; then
        echo "${START_DIR}/src"
    else
        echo "${START_DIR}/${VISIT_FILE%.tar*}/src"
    fi
   echo "then enter: \"svn_bin/visit-bin-dist\""
   echo "Will produce a tarball called visitVERSION.ARCH.tar.gz, where"
   echo "VERSION is the version number, and ARCH is the OS architecure."
   echo 
   echo "To install the above tarball in a directory called "INSTALL_DIR_PATH","
   echo "enter: svn_bin/visit-install VERSION ARCH INSTALL_DIR_PATH"
   echo 
   echo "If you run into problems, contact visit-help@llnl.gov"
else
   echo "Done"
fi

exit 0
