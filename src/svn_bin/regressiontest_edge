#!/bin/sh
#
# Modifications:
#   Mark C. Miller, Thu Jul 29 23:35:19 PDT 2010
#   Added option to ignore third party lib problems to cmake invokation.
#
#   Eric Brugger, Thu Mar 31 09:38:38 PDT 2011
#   Modified the script to work with the 2.2RC instead of the 2.0RC.
#
#   Eric Brugger, Tue Apr 12 10:53:02 PDT 2011
#   Removed the specular lighting tests from the skip list.
#
#   Jeremy Meredith, Tue Aug  9 17:19:55 EDT 2011
#   Updated the subversion host/path.
#
#   Eric Brugger, Thu Aug 25 11:22:39 PDT 2011
#   Modified the script to work on edge.
#
#   Eric Brugger, Thu Aug 25 14:11:16 PDT 2011
#   Modified the script to send out the e-mail only after the results
#   were posted.
#
#   Eric Brugger, Wed Jan 25 13:26:36 PST 2012
#   Modified the command that submits the batch job to run the test suite
#   to specify that it isn't using any of the Lustre file systems so that
#   the job will run even if one of the Lustre file systems is down.
#
#   Eric Brugger, Fri Jun 22 07:54:19 PDT 2012
#   I modified the script to use cmake 2.8.8. I also added several failing
#   tests to the skip list.
#
#   Mark C. Miller, Wed Jun 27 12:30:13 PDT 2012
#   Removed zipwrapper tests from skip list because the tests were updated
#   to use STL in place of VTK.
#
#   Cyrus Harrison, Wed Aug 15 12:31:00 PDT 2012
#   Update to use python test suite
#
#   Eric Brugger, Fri Oct 11 14:10:51 PDT 2013
#   Change the path to the cmake used to build visit to the latest 2.8.10.2
#   version.
#
#   Eric Brugger, Fri Oct 18 15:01:56 PDT 2013
#   I changed "make test" to "make testdata" in the data directory since the
#   name of the target changed.
#


#
# Determine the users name and e-mail address.
#
user=`whoami`

#
# Set the user e-mail address.
#
userNersc=unknown
userEmail=unknown
case $user in
    bonnell)
        userNersc=bonnell
        userEmail=bonnell2@llnl.gov
        ;;
    kbonnell)
        userNersc=bonnell
        userEmail=bonnell2@llnl.gov
        ;;
    brugger)
        userNersc=brugger
        userEmail=brugger1@llnl.gov
        ;;
    cyrush)
        userNersc=cyrush
        userEmail=cyrush@llnl.gov
        ;;
    hrchilds)
        userNersc=hrchilds
        userEmail=hankchilds3@gmail.com
        ;;
    mcmiller)
        userNersc=miller86
        userEmail=miller86@llnl.gov
        ;;
    miller)
        userNersc=miller86
        userEmail=miller86@llnl.gov
        ;;
    miller86)
        userNersc=miller86
        userEmail=miller86@llnl.gov
        ;;
    harrison37)
        userNersc=cyrush
        userEmail=cyrush@llnl.gov
        ;;
    cyrush)
        userNersc=cyrush
        userEmail=cyrush@llnl.gov
        ;;
esac

if test "$userEmail" = "unknown" ; then
    echo "Unknown user name. Exiting."
    exit 1
fi

#
# Parse the command line to determine if we should run the test suite
# on the trunk or RC.
#
debug="false"
branch="trunk"
revision="latest"
serial="false"
testHost="edge"
testDir="/nfs/tmp2/"
post="true"
nerscHost="hopper.nersc.gov"

for abc
do
    case $1 in
        -trunk)
            branch="trunk"
            shift
            ;;
        -2.3RC)
            branch="2.3RC"
            shift
            ;;
        -serial)
            serial="true"
            shift
            ;;
        -parallel)
            serial="false"
            shift
            ;;
        -d)
            debug="true"
            shift
            ;;
        -r)
            revision=$2
            shift 2
            ;;
        -host)
            testHost=$2
            shift 2
            ;;
        -no-post)
            post="false"
            shift
            ;;
    esac
done

if test "$branch" = "trunk" ; then
    workingDir="test_trunk"
else
    workingDir="test_rc"
fi

#
# Run the test suite on $testHost.
#
rm -f $testHost
cat <<EOF > $testHost
#!/bin/sh

dateTag=\`date +%Y-%m-%d-%H:%M\`

if test "$serial" = "true" ; then
    modes="$testHost,serial"
else
    modes="$testHost,serial $testHost,parallel $testHost,scalable,parallel,icet"
fi

# Check out the source
if test "$debug" = "true" ; then
   echo "Removing any old test files at: $testDir/$user/$workingDir" | mail -s "Checkout started" $userEmail
fi

echo "Removing any old test files at: $testDir/$user/$workingDir"

# Create the test directory.
if test ! -e $testDir/$user; then
    mkdir $testDir/$user
fi
rm -rf $testDir/$user/$workingDir
mkdir $testDir/$user/$workingDir
cd $testDir/$user/$workingDir

# Check out the source
if test "$debug" = "true" ; then
   echo "Checkout of $branch started at: \`date\`" | mail -s "Checkout started" $userEmail
fi

echo "Checkout of $branch started at: \`date\`"

if test "$branch" = "trunk" ; then
    if test "$revision" = "latest" ; then
        svn co svn+ssh://$userNersc@portal-auth.nersc.gov/project/projectdirs/visit/svn/visit/trunk/src > buildlog 2>&1
        svn co svn+ssh://$userNersc@portal-auth.nersc.gov/project/projectdirs/visit/svn/visit/trunk/data >> buildlog 2>&1
        svn co svn+ssh://$userNersc@portal-auth.nersc.gov/project/projectdirs/visit/svn/visit/trunk/test >> buildlog 2>&1
    else
        svn co svn+ssh://$userNersc@portal-auth.nersc.gov/project/projectdirs/visit/svn/visit/trunk/src -r $revision > buildlog 2>&1
        svn co svn+ssh://$userNersc@portal-auth.nersc.gov/project/projectdirs/visit/svn/visit/trunk/data -r $revision >> buildlog 2>&1
        svn co svn+ssh://$userNersc@portal-auth.nersc.gov/project/projectdirs/visit/svn/visit/trunk/test -r $revision >> buildlog 2>&1
    fi
else
    if test "$revision" = "latest" ; then
        svn co svn+ssh://$userNersc@portal-auth.nersc.gov/project/projectdirs/visit/svn/visit/branches/2.5RC/src > buildlog 2>&1
        svn co svn+ssh://$userNersc@portal-auth.nersc.gov/project/projectdirs/visit/svn/visit/branches/2.5RC/data >> buildlog 2>&1
        svn co svn+ssh://$userNersc@portal-auth.nersc.gov/project/projectdirs/visit/svn/visit/branches/2.5RC/test >> buildlog 2>&1
    else
        svn co svn+ssh://$userNersc@portal-auth.nersc.gov/project/projectdirs/visit/svn/visit/branches/2.5RC/src -r $revision > buildlog 2>&1
        svn co svn+ssh://$userNersc@portal-auth.nersc.gov/project/projectdirs/visit/svn/visit/branches/2.5RC/data -r $revision >> buildlog 2>&1
        svn co svn+ssh://$userNersc@portal-auth.nersc.gov/project/projectdirs/visit/svn/visit/branches/2.5RC/test -r $revision >> buildlog 2>&1
    fi
fi
if test "$debug" = "true" ; then
    echo "Checkout of $branch completed at: \`date\`" | mail -s "Checkout completed" $userEmail
fi

echo "Checkout of $branch completed at: \`date\`"

# Build the code
cd src
export PATH=\$PATH:/usr/bin/X11

if test "$serial" = "true" ; then
    sed -i "s/VISIT_PARALLEL ON/VISIT_PARALLEL OFF/" config-site/edge83.cmake
fi
/usr/gapps/visit/thirdparty_shared/2.7.0/cmake/2.8.10.2/linux-x86_64_gcc-4.4/bin/cmake \
    -DVISIT_CONFIG_SITE=config-site/edge83.cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DVISIT_BUILD_ALL_PLUGINS=1 \
    -DIGNORE_THIRD_PARTY_LIB_PROBLEMS:BOOL=ON \
    . >> ../buildlog 2>&1
make -j 12 >> ../buildlog 2>&1
if test "$debug" = "true" ; then
    echo "Source build completed at: \`date\`" | mail -s "Source build completed" $userEmail
fi

echo "Source build completed at: \`date\`"

# Build the test data
cd ../data
make -j 8 testdata >> ../buildlog 2>&1
if test "$debug" = "true" ; then
    echo "Data build completed at: \`date\`" | mail -s "Data build completed" $userEmail
fi

echo "Data build completed at: \`date\`"

if test "$debug" = "true" ; then
    echo "Starting tests:\`date\`" | mail -s "Starting tests" $userEmail
fi

echo "Starting tests:\`date\`"

# Run the tests, consolidating the results in one directory
cd ../test
rm -rf \$dateTag
mkdir \$dateTag
mkdir output
for m in \$modes; do
    theMode=\`echo \$m | tr ',' '_'\`
    resDir=output/\$theMode

    if test "$debug" = "true" ; then
        echo "runtest with mode = \$m" | mail -s "runtest with mode = \$m" $userEmail
    fi

    echo "runtest with mode = \$m"


    # Run the test
    ./runtest -o \$resDir -m "\$m" -n 1 >> buildlog 2>&1
    mv \$resDir/html \$dateTag/\$theMode

    # Move the results to the consolidation directory
    if test "$debug" = "true" ; then
        echo "Test \$m completed at: \`date\`" | mail -s "Tests completed" $userEmail
    fi
    echo "Test \$m completed at: \`date\`"
done

# Determine if the test suite passed or failed.
hasFailed=""
for m in \$modes; do
    theMode=\`echo \$m | tr ',' '_'\`
    if test "\$hasFailed" = ""; then
        hasFailed=\`cat "\$dateTag/\$theMode/index.html" | grep -m 1 Failed 2>/dev/null\`
    fi
    if test "\$hasFailed" = ""; then
        hasFailed=\`cat "\$dateTag/\$theMode/index.html" | grep -m 1 Unacceptable 2>/dev/null\`
    fi
    if test "\$hasFailed" = ""; then
        hasFailed=\`cat "\$dateTag/\$theMode/index.html" | grep -m 1 OS-Killed 2>/dev/null\`
    fi
done

if test "$post" = "true" ; then
    # If the test suite passed then update the revision number indicating the
    # last pass.
    cd ..
    if test "\$hasFailed" = ""; then
        svn update src/svn_bin/lastpass_$testHost
        svnRevision=\`svn info src | grep "Revision:" | cut -d' ' -f2\`
        rm -f src/svn_bin/lastpass_$testHost
        echo "\$svnRevision" > src/svn_bin/lastpass_$testHost
        svn commit -m "Update the revision number of the last test suite pass." src/svn_bin/lastpass_$testHost
    fi

    # Tar up the results
    cd test
    tar -czvf  html.tar.gz \$dateTag

    # Copy the results to nersc
    scp html.tar.gz $userNersc@$nerscHost:
    if test "$debug" = "true" ; then
        echo "Results copied to $nerscHost at: `date`" | mail -s "Results copied" $userEmail
    fi

    echo "Results copied to $nerscHost at: `date`"

    # Post the results.
    cd ..
    scp src/svn_bin/visit-update-test-website $userNersc@$nerscHost:
    ssh $userNersc@$nerscHost "./visit-update-test-website"
    if test "$debug" = "true" ; then
        echo "Results posted at: `date`" | mail -s "Results posted" $userEmail
    fi

    echo "Results posted at: `date`"

    # Send out an e-mail notifying the users of the test suite status.
    if test "\$hasFailed" = ""; then
        src/svn_bin/visit-notify-test-failure -pass -host $testHost
    else
        src/svn_bin/visit-notify-test-failure -host $testHost
    fi

    # Set the permissions so that others may access the test directory.
    cd ..
    chgrp -R visit $workingDir
    chmod -R g+rwX,o+rX $workingDir
fi

EOF

chmod 750 $testHost

# Run the test suite.
if test "$testHost" = "edge" ; then
    scp edge edge:edge_testit
    subTag=`date +%Y-%m-%d-%H:%M`
    ssh edge "msub -l nodes=1:ppn=12 -l gres=ignore -l walltime=12:00:00 -o edge_testit_$subTag.out -q pbatch -A bdivp -z ./edge_testit"
fi
