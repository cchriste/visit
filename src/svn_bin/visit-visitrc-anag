import time
import os

# Define macros 

mappingExists = False

def loadMappingIfAvailable():
    import os
    # Check if there us a mapping
    filename = GetWindowInformation().activeSource
    mapname = filename.replace("hdf5","map.hdf5")
    mapname = mapname.replace("localhost:","")
    print "Checking for map " + mapname
    if os.access(mapname, os.F_OK):
        print "Found Mapping: Setting up expressions!"
        global mappingExists
        mappingExists = True
        m = GetMetaData(filename)
        meshname = m.GetMeshes(0).name
        # Add expressions
        DefineScalarExpression("__x_imported", "conn_cmfe(<"+mapname+":x>,"+meshname+")")
        DefineScalarExpression("__y_imported", "conn_cmfe(<"+mapname+":y>,"+meshname+")")
        if m.GetMeshes(0).spatialDimension == 2:
            DefineVectorExpression("__disp", "{__x_imported-coords("+meshname+")[0],__y_imported-coords("+meshname+")[1]}")
        else:
            DefineScalarExpression("__z_imported", "conn_cmfe(<"+mapname+":z>,"+meshname+")")
            DefineVectorExpression("__disp", "{__x_imported-coords("+meshname+")[0],__y_imported-coords("+meshname+")[1],__z_imported-coords("+meshname+")[2]}")
    else:
        print "No mapping found."
        mappingExists = False

def AddMappingDisplacementOperator():
    global mappingExists
    if mappingExists:
        print "Mapping exists. Adding displace operator."
        AddOperator("Displace")
        DisplaceAtts = DisplaceAttributes()
        DisplaceAtts.factor = 1
        DisplaceAtts.variable = "__disp"
        SetOperatorOptions(DisplaceAtts)

def onAddPlot(plotType, plotVar):
    # Wait for plot to appear in plot list
    time.sleep(0.5)
    print "Adding plot for " , plotVar
    print GetPlotList()
    lp = GetPlotList().GetPlots(GetPlotList().GetNumPlots()-1)
    print lp
    foundDisplacement = False
    for op in lp.operators:
        if OperatorPlugins()[op] == "Displace":
            foundDisplacement = True
    print foundDisplacement
    if not foundDisplacement:
        AddMappingDisplacementOperator()
    else:
        print "Plot already has Displacement operator."

RegisterCallback("AddPlotRPC", onAddPlot)

def SetupSlice():
    # Disable callback
    RegisterCallback("AddPlotRPC")

    # Get the name of the first variable in the file
    print "Setting up slice."
    filename = GetWindowInformation().activeSource
    m = GetMetaData(filename)
    varname = m.GetScalars(0).name
    meshname = m.GetMeshes(0).name

    if m.GetMeshes(0).spatialDimension == 2:
        AddPlot("Mesh", meshname)
        AddMappingDisplacementOperator()
        HideActivePlots()
        AddPlot("Pseudocolor", varname)
        AddMappingDisplacementOperator()
    else:
        # Do a mesh plot. We do need a plot to perform a query
        AddPlot("Mesh", meshname)
        AddMappingDisplacementOperator()

        # Get the centroid
        DrawPlots()
        Query("Centroid", 0, 0, "default")
        centroid = GetQueryOutputValue()

        # Hide the mesh plot
        HideActivePlots()

        # Add a ThreeSlice
        AddOperator("ThreeSlice")
        ThreeSliceAtts = ThreeSliceAttributes()
        ThreeSliceAtts.x = centroid[0]
        ThreeSliceAtts.y = centroid[1]
        ThreeSliceAtts.z = centroid[2]
        SetOperatorOptions(ThreeSliceAtts)

        # Add a Pseudocolor plot and the same ThreeSlice
        AddPlot("Pseudocolor", varname)
        AddMappingDisplacementOperator()
        AddOperator("ThreeSlice")
        SetOperatorOptions(ThreeSliceAtts)

        # Enable the point tool to control the ThreeSlice
        EnableTool(4, 1)

    # Re-enable callback
    RegisterCallback("AddPlotRPC", onAddPlot)

def onOpenDatabase(database, timestate, addDefaultPlots, forcedFileType):
    print "New file opened."
    filename = GetWindowInformation().activeSource
    # Wait until open complete and database is the active source
    while filename != database:
        time.sleep(0.1) 
        filename = GetWindowInformation().activeSource
    print "Checking for mapping."
    loadMappingIfAvailable()
    print "Setting up initial plot."
    # Set up initial plot
    SetupSlice()

RegisterCallback("OpenDatabaseRPC", onOpenDatabase)

def SetupIsosurf():
    # Get the name of the first variable in the file
    filename = GetWindowInformation().activeSource
    m = GetMetaData(filename)
    varname = m.GetScalars(0).name
    
    IsosurfaceAtts = IsosurfaceAttributes()
    if m.GetMeshes(0).spatialDimension == 2:
        AddPlot("Contour", varname)
        ContourAtts = ContourAttributes()
        ContourAtts.colorType = ContourAtts.ColorBySingleColor  # ColorBySingleColor, ColorByMultipleColors, ColorByColorTabl
        ContourAtts.singleColor = (0, 0, 0, 255)
        ContourAtts.contourNLevels = 10
        SetPlotOptions(ContourAtts)
    else:
        AddPlot("Pseudocolor", varname)
        AddOperator("Isosurface")
        IsosurfaceAtts.contourNLevels = 1
        IsosurfaceAtts.contourMethod = IsosurfaceAtts.Level  # Level, Value, Percent
        IsosurfaceAtts.scaling = IsosurfaceAtts.Linear  # Linear, Log
        IsosurfaceAtts.variable = varname
        SetOperatorOptions(IsosurfaceAtts)

def SetupBoundingBox():
    AddPlot("Subset", "patches")
    SubsetAtts = SubsetAttributes()
    SubsetAtts.colorType = SubsetAtts.ColorByMultipleColors  # ColorBySingleColor, ColorByMultipleColors, ColorByColorTable
    SubsetAtts.legendFlag = 1
    SubsetAtts.lineStyle = SubsetAtts.SOLID  # SOLID, DASH, DOT, DOTDASH
    SubsetAtts.wireframe = 1
    SetPlotOptions(SubsetAtts)

def SetupBoundary():
    # Get the name of the first variable in the file
    filename = GetWindowInformation().activeSource
    m = GetMetaData(filename)
    materialsname = m.GetMaterials(0).name
    AddPlot("Boundary", materialsname)
    BoundaryAtts = BoundaryAttributes()
    BoundaryAtts.colorType = BoundaryAtts.ColorBySingleColor  # ColorBySingleColor, ColorByMultipleColors, ColorByColorTable
    if m.GetMeshes(0).spatialDimension == 2:
        BoundaryAtts.singleColor = (0, 0, 0, 255)
    else:
        BoundaryAtts.singleColor = (255, 255, 255, 255)
    BoundaryAtts.boundaryType = BoundaryAtts.Material  # Domain, Group, Material, Unknown
    SetPlotOptions(BoundaryAtts)

# Wait for viewer to avoid race condition

time.sleep(0.5)

RegisterMacro("Slice", SetupSlice)
RegisterMacro("Contours", SetupIsosurf)
RegisterMacro("Bounding Boxes", SetupBoundingBox)
RegisterMacro("Boundaries", SetupBoundary)

#
# Graveyard
#
#def EnableMapping():
#    # Get the name of the first variable in the file
#    filename = GetWindowInformation().activeSource
#    m = GetMetaData(filename)
#    meshname = m.GetMeshes(0).name
#    # Add expressions
#    mapname = filename.replace("hdf5","map.hdf5")
#    mapname = mapname.replace("localhost:","")
#    DefineScalarExpression("__x_imported", "conn_cmfe(<"+mapname+":x>,"+meshname+")")
#    DefineScalarExpression("__y_imported", "conn_cmfe(<"+mapname+":y>,"+meshname+")")
#    if m.GetMeshes(0).spatialDimension == 2:
#        DefineVectorExpression("__disp", "{__x_imported-coords("+meshname+")[0],__y_imported-coords("+meshname+")[1]}")
#    else:
#        DefineScalarExpression("__z_imported", "conn_cmfe(<"+mapname+":z>,"+meshname+")")
#        DefineVectorExpression("__disp", "{__x_imported-coords("+meshname+")[0],__y_imported-coords("+meshname+")[1],__z_imported-coords("+meshname+")[2]}")
#    AddOperator("Displace",1)
#    DisplaceAtts = DisplaceAttributes()
#    DisplaceAtts.factor = 1
#    DisplaceAtts.variable = "__disp"
#    SetOperatorOptions(DisplaceAtts,0,1)
#    DrawPlots()
#
#RegisterMacro("Enable Mapping", EnableMapping)
