import time
import os
import string

# Global state variable
automaticMappingEnabled = False

# Define macros 
def AddMappingDisplacementOperator():
    global automaticMappingEnabled
    if automaticMappingEnabled:
        # Get active source (database name for current plot)
        databasename = GetWindowInformation().activeSource

        # Strip computer name
        filename = databasename[databasename.index(":")+1:len(databasename)]

        # Replace non-alphanumric chars with '_' to obtain prefix for
        # prefix of displacement expression
        expressionprefix = string.join([c.isalnum() and c or '_' for c in filename],'')

        # Construct displacement expression name
        expressionname = "_"+expressionprefix+"_disp"

        # Check if  displacement expression exists
        if expressionname in [exp[0] for exp in Expressions()]:
            # If yes, add operator ...
            AddOperator("Displace")
            # ... and set attributes
            DisplaceAtts = DisplaceAttributes()
            DisplaceAtts.factor = 1
            DisplaceAtts.variable = expressionname
            SetOperatorOptions(DisplaceAtts)

def onAddPlot(plotType, plotVar):
    # FIXME: Hack, wait for plot to appear in plot list
    time.sleep(0.1)
    # Get list of operators in active plot
    plotOperators = GetPlotList().GetPlots(GetPlotList().GetNumPlots()-1).operators
    # Add displacement operator if one does not alread exists
    # FIXME: It may be better to check whether the Displacement operator
    # is actually performing the mapping instead of just checking type
    if not "Displace" in [OperatorPlugins()[op] for op in plotOperators]:
        AddMappingDisplacementOperator()

RegisterCallback("AddPlotRPC", onAddPlot)

def SetupSlice():
    # Disable callback
    RegisterCallback("AddPlotRPC")

    # Get the name of the first variable in the file
    filename = GetWindowInformation().activeSource
    m = GetMetaData(filename)
    varname = m.GetScalars(0).name
    meshname = m.GetMeshes(0).name

    if m.GetMeshes(0).spatialDimension == 2:
        AddPlot("Mesh", meshname)
        AddMappingDisplacementOperator()
        HideActivePlots()
        AddPlot("Pseudocolor", varname)
        AddMappingDisplacementOperator()
    else:
        # Do a mesh plot. We do need a plot to perform a query
        AddPlot("Mesh", meshname)
        AddMappingDisplacementOperator()

        # Get the centroid
        DrawPlots()
        Query("Centroid", 0, 0, "default")
        centroid = GetQueryOutputValue()

        # Hide the mesh plot
        HideActivePlots()

        # Add a ThreeSlice through the centroid
        AddOperator("ThreeSlice")
        ThreeSliceAtts = ThreeSliceAttributes()
        ThreeSliceAtts.x = centroid[0]
        ThreeSliceAtts.y = centroid[1]
        ThreeSliceAtts.z = centroid[2]
        SetOperatorOptions(ThreeSliceAtts)

        # Add a Pseudocolor plot and the same ThreeSlice
        AddPlot("Pseudocolor", varname)
        AddMappingDisplacementOperator()
        AddOperator("ThreeSlice")
        SetOperatorOptions(ThreeSliceAtts)

        # Enable the point tool to control the ThreeSlice
        EnableTool(4, 1)

    # Re-enable callback if necessary
    global automaticMappingEnabled
    if automaticMappingEnabled:
        RegisterCallback("AddPlotRPC", onAddPlot)

def onOpenDatabase(database, timestate, addDefaultPlots, forcedFileType):
    # Wait until open complete and database is the active source
    filename = GetWindowInformation().activeSource
    while filename != database:
        time.sleep(0.1) 
        filename = GetWindowInformation().activeSource

    # Set up initial plot
    SetupSlice()

RegisterCallback("OpenDatabaseRPC", onOpenDatabase)

def SetupIsosurf():
    # Get the name of the first variable in the file
    filename = GetWindowInformation().activeSource
    m = GetMetaData(filename)
    varname = m.GetScalars(0).name
    
    if m.GetMeshes(0).spatialDimension == 2:
        # In two dimensions add a simple contour plot ...
        AddPlot("Contour", varname)
        # ... with 10 black contour lines evenly spaced within the fuctnion range
        ContourAtts = ContourAttributes()
        ContourAtts.colorType = ContourAtts.ColorBySingleColor
        ContourAtts.singleColor = (0, 0, 0, 255)
        ContourAtts.contourNLevels = 10
        SetPlotOptions(ContourAtts)
    else:
        # Disable callback
        RegisterCallback("AddPlotRPC")
        # In three diemensions add a pseudocolor plot ...
        AddPlot("Pseudocolor", varname)
        AddMappingDisplacementOperator()
        # ... and an isosurface operator ...
        AddOperator("Isosurface")
        # ... with one level at the center of the function range
        IsosurfaceAtts = IsosurfaceAttributes()
        IsosurfaceAtts.contourNLevels = 1
        IsosurfaceAtts.contourMethod = IsosurfaceAtts.Level
        IsosurfaceAtts.scaling = IsosurfaceAtts.Linear
        IsosurfaceAtts.variable = varname
        SetOperatorOptions(IsosurfaceAtts)
        # Re-enable callback if necessary
        global automaticMappingEnabled
        if automaticMappingEnabled:
            RegisterCallback("AddPlotRPC", onAddPlot)

def SetupBoundingBox():
    AddPlot("Subset", "patches")
    SubsetAtts = SubsetAttributes()
    SubsetAtts.colorType = SubsetAtts.ColorByMultipleColors  # ColorBySingleColor, ColorByMultipleColors, ColorByColorTable
    SubsetAtts.legendFlag = 1
    SubsetAtts.lineStyle = SubsetAtts.SOLID  # SOLID, DASH, DOT, DOTDASH
    SubsetAtts.wireframe = 1
    SetPlotOptions(SubsetAtts)

def SetupBoundary():
    # Get the name of the first variable in the file
    filename = GetWindowInformation().activeSource
    m = GetMetaData(filename)
    materialsname = m.GetMaterials(0).name
    AddPlot("Boundary", materialsname)
    BoundaryAtts = BoundaryAttributes()
    BoundaryAtts.colorType = BoundaryAtts.ColorBySingleColor  # ColorBySingleColor, ColorByMultipleColors, ColorByColorTable
    if m.GetMeshes(0).spatialDimension == 2:
        BoundaryAtts.singleColor = (0, 0, 0, 255)
    else:
        BoundaryAtts.singleColor = (255, 255, 255, 255)
    BoundaryAtts.boundaryType = BoundaryAtts.Material  # Domain, Group, Material, Unknown
    SetPlotOptions(BoundaryAtts)

def GetActivePlots():
    apl = []
    for plotNo in range(0, GetNumPlots()):
        if GetPlotList().GetPlots(plotNo).activeFlag:
            apl.append(plotNo)
    return tuple(apl)

def AddMappingToAllPlots():
    # Remeber plots that were active
    apl_save = GetActivePlots()
    for plotNo in range(0, GetNumPlots()):
        SetActivePlots(plotNo)
        plotHidden = GetPlotList().GetPlots(plotNo).hiddenFlag
        # Get active source (database name for current plot)
        databasename = GetPlotList().GetPlots(plotNo).databaseName
        # Strip computer name
        filename = databasename[databasename.index(":")+1:len(databasename)]
        # Replace non-alphanumric chars with '_' to obtain prefix for
        # prefix of displacement expression
        expressionprefix = string.join([c.isalnum() and c or '_' for c in filename],'')
        # Construct displacement expression name
        expressionname = "_"+expressionprefix+"_disp"
        # Check if  displacement expression exists
        plotOperators = GetPlotList().GetPlots(plotNo).operators
        if expressionname in [exp[0] for exp in Expressions()] and not "Displace" in [OperatorPlugins()[op] for op in plotOperators]:
            if not plotHidden:
                HideActivePlots() # Hide plot so that adding operator does not cause error
            # If yes, add operator ...
            dispIndex = len(plotOperators)
            AddOperator("Displace")
            while dispIndex > 0:
                DemoteOperator(dispIndex)
                dispIndex = dispIndex - 1
            # ... and set attributes
            DisplaceAtts = DisplaceAttributes()
            DisplaceAtts.factor = 1
            DisplaceAtts.variable = expressionname
            SetOperatorOptions(DisplaceAtts)
            if not plotHidden:
                HideActivePlots() # If plot was not hidden, show it again
    # Restore active plots
    SetActivePlots(apl_save)

def RemoveMappingFromAllPlots():
    # Remeber plots that were active
    apl_save = GetActivePlots()
    for plotNo in range(0, GetNumPlots()):
        # Get active database name for current plot
        databasename = GetPlotList().GetPlots(plotNo).databaseName
        # Strip computer name
        filename = databasename[databasename.index(":")+1:len(databasename)]
        # Replace non-alphanumric chars with '_' to obtain prefix for
        # prefix of displacement expression
        expressionprefix = string.join([c.isalnum() and c or '_' for c in filename],'')
        # Construct displacement expression name
        expressionname = "_"+expressionprefix+"_disp"
        plotOperators = GetPlotList().GetPlots(plotNo).operators
        print "Plot ", plotNo
        print "Operators ", plotOperators
        SetActivePlots(plotNo)
        for opNo in range(0, len(plotOperators)):
            print "Checking operator", opNo, "for plot", plotNo
            print OperatorPlugins()[plotOperators[opNo]]
            if OperatorPlugins()[plotOperators[opNo]] == 'Displace' and GetOperatorOptions(opNo).variable == expressionname:
                print "Removing operator", opNo, "for plot", plotNo
                RemoveOperator(opNo)
            else:
                print "Operator", opNo, "for plot", plotNo, "is not Displace"
    DrawPlots()
    # Restore active plots
    SetActivePlots(apl_save)

  
def EnableAutomaticMapping():
    global automaticMappingEnabled
    automaticMappingEnabled = True
    AddMappingToAllPlots()
    RegisterCallback("AddPlotRPC", onAddPlot)

def DisableAutomaticMapping():
    global automaticMappingEnabled
    automaticMappingEnabled = False
    RemoveMappingFromAllPlots()
    RegisterCallback("AddPlotRPC")

# Wait for viewer to avoid race condition
time.sleep(0.5)

RegisterMacro("Slice", SetupSlice)
RegisterMacro("Contours", SetupIsosurf)
RegisterMacro("Bounding Boxes", SetupBoundingBox)
RegisterMacro("Boundaries", SetupBoundary)
RegisterMacro("Mapping on", EnableAutomaticMapping)
RegisterMacro("Mapping off", DisableAutomaticMapping)
