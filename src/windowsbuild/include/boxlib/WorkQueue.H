/*
** (c) 1996-2003 The Regents of the University of California (through
** E.O. Lawrence Berkeley National Laboratory), subject to approval by
** the U.S. Department of Energy.  Your use of this software is under
** license -- the license agreement is attached and included in the
** directory as license.txt or you may contact Berkeley Lab's Technology
** Transfer Department at TTD@lbl.gov.  NOTICE OF U.S. GOVERNMENT RIGHTS.
** The Software was developed under funding from the U.S. Government
** which consequently retains certain rights as follows: the
** U.S. Government has been granted for itself and others acting on its
** behalf a paid-up, nonexclusive, irrevocable, worldwide license in the
** Software to reproduce, prepare derivative works, and perform publicly
** and display publicly.  Beginning five (5) years after the date
** permission to assert copyright is obtained from the U.S. Department of
** Energy, and subject to any subsequent five (5) year renewals, the
** U.S. Government is granted for itself and others acting on its behalf
** a paid-up, nonexclusive, irrevocable, worldwide license in the
** Software to reproduce, prepare derivative works, distribute copies to
** the public, perform publicly and display publicly, and to permit
** others to do so.
*/

#ifndef _BL_WORKQUEUE_H_
#define _BL_WORKQUEUE_H_

//
// $Id: WorkQueue.H,v 1.5 2001/11/16 18:19:33 car Exp $
//

#include <Thread.H>
#include <queue>

extern "C" void* WorkQueue_server(void*);
class WorkQueue;

class WorkQueue
{
public:
    friend void* WorkQueue_server (void*);
    class task;
    explicit WorkQueue (int maxthreads_);
    virtual ~WorkQueue ();
    int max_threads () const;
    int num_threads () const;
    void add (task* data);
    void drain ();
    void wait ();
    virtual void* server ();
    static void Initialize ();
    static void Finalize ();
protected:
    mutable ConditionVariable cv;
    Gate gate;
    std::queue<task*> wrkq;
    bool quit;
    bool eof;
    const int maxthreads;
    int numthreads;
    int idlethreads;
    int tasks;
    WorkQueue (const WorkQueue&);
    WorkQueue& operator= (const WorkQueue&);
};

class WorkQueue::task
{
public:
    virtual void run () = 0;
    virtual ~task ();
};

namespace BoxLib
{
WorkQueue& theWorkQueue ();
}


#endif /*_BL_WORKQUEUE_H_*/
